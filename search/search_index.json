{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 iWiki weiyong1024\u7684\u77e5\u8bc6\u5c0f\u7ad9 \u535a\u4e3b\u81ea\u8ba4\u624d\u758f\u5b66\u6d45\uff0c\u8bda\u9080\u5404\u4f4d\u770b\u5b98\u6279\u8bc4\u6307\u6b63\uff0c\u8868\u8fbe\u9519\u8bef\u3001\u7406\u89e3\u4e0d\u5f53\u4e4b\u5904\u8bf7\u8bf8\u541b\u4e0d\u541d\u8d50\u6559\uff01","title":"\u7b80\u4ecb"},{"location":"#iwiki","text":"weiyong1024\u7684\u77e5\u8bc6\u5c0f\u7ad9 \u535a\u4e3b\u81ea\u8ba4\u624d\u758f\u5b66\u6d45\uff0c\u8bda\u9080\u5404\u4f4d\u770b\u5b98\u6279\u8bc4\u6307\u6b63\uff0c\u8868\u8fbe\u9519\u8bef\u3001\u7406\u89e3\u4e0d\u5f53\u4e4b\u5904\u8bf7\u8bf8\u541b\u4e0d\u541d\u8d50\u6559\uff01","title":"\u6b22\u8fce\u6765\u5230 iWiki"},{"location":"about/","text":"\u5173\u4e8e\u4f5c\u8005 \u5317\u822a\u7535\u5b50\u7cfb\u672c\u7855\uff0c\u5e08\u4ece\u6768\u6668\u9633\u6559\u6388\u505a5G\u7269\u7406\u5c42\u65e0\u7ebf\u94fe\u8def\u4fe1\u9053\u4f18\u5316\u7814\u7a76\u3002\u4e0a\u5b66\u671f\u95f4\u4f5c\u4e3a\u5b9e\u4e60\u751f\u5148\u540e\u5728 \u65f7\u89c6\u79d1\u6280/Face++ \u548c \u7231\u5f7c\u8fce/Airbnb\u4e2d\u56fd \u505a\u8fc7 \u4eba\u8138\u8bc6\u522b\u70bc\u4e39\u5e08 \u548c Ruby on Rails\u5f00\u53d1\u3002\u6bd5\u4e1a\u540e\u4e8e \u5c0f\u9a6c\u667a\u884c/Pony.ai \u57fa\u7840\u67b6\u6784\u7ec4\uff08\u5317\u4eac\uff09\u4ece\u4e8b\u8f66\u8f7d\u7cfb\u7edf\u5f00\u53d1\u4e00\u5e74\u6709\u4f59\u3002\u540e\u81f3\u897f\u6e56\u7554\u5c0f\u5c45\uff0c\u82b1\u540d\u601d\u9884\uff0c\u73b0\u5728 \u963f\u91cc\u4e91/Alibaba Cloud \u9ad8\u53ef\u7528\u67b6\u6784\u7ec4\u8d1f\u8d23\u6d41\u91cf\u8c03\u5ea6\u5de5\u4f5c\u3002 \u90ae\u7bb1 weiyong1024@gmail.com \u82f1\u96c4\u4e0d\u95ee\u51fa\u5904\uff0c\u771f\u8bda\u9080\u8bf7\u5404\u8def\u9ad8\u624b\u6765\u676d\u5171\u4e8b\uff01 No excuses. Just learn.","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"about/#_1","text":"\u5317\u822a\u7535\u5b50\u7cfb\u672c\u7855\uff0c\u5e08\u4ece\u6768\u6668\u9633\u6559\u6388\u505a5G\u7269\u7406\u5c42\u65e0\u7ebf\u94fe\u8def\u4fe1\u9053\u4f18\u5316\u7814\u7a76\u3002\u4e0a\u5b66\u671f\u95f4\u4f5c\u4e3a\u5b9e\u4e60\u751f\u5148\u540e\u5728 \u65f7\u89c6\u79d1\u6280/Face++ \u548c \u7231\u5f7c\u8fce/Airbnb\u4e2d\u56fd \u505a\u8fc7 \u4eba\u8138\u8bc6\u522b\u70bc\u4e39\u5e08 \u548c Ruby on Rails\u5f00\u53d1\u3002\u6bd5\u4e1a\u540e\u4e8e \u5c0f\u9a6c\u667a\u884c/Pony.ai \u57fa\u7840\u67b6\u6784\u7ec4\uff08\u5317\u4eac\uff09\u4ece\u4e8b\u8f66\u8f7d\u7cfb\u7edf\u5f00\u53d1\u4e00\u5e74\u6709\u4f59\u3002\u540e\u81f3\u897f\u6e56\u7554\u5c0f\u5c45\uff0c\u82b1\u540d\u601d\u9884\uff0c\u73b0\u5728 \u963f\u91cc\u4e91/Alibaba Cloud \u9ad8\u53ef\u7528\u67b6\u6784\u7ec4\u8d1f\u8d23\u6d41\u91cf\u8c03\u5ea6\u5de5\u4f5c\u3002","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"about/#_2","text":"weiyong1024@gmail.com \u82f1\u96c4\u4e0d\u95ee\u51fa\u5904\uff0c\u771f\u8bda\u9080\u8bf7\u5404\u8def\u9ad8\u624b\u6765\u676d\u5171\u4e8b\uff01","title":"\u90ae\u7bb1"},{"location":"about/#no-excuses-just-learn","text":"","title":"No excuses. Just learn."},{"location":"other_blogs/","text":"\u535a\u5ba2\u63a8\u8350 \u201c \u5b66\u4e60\u4efb\u4f55\u4e00\u95e8\u8bfe\u7a0b\u90fd\u8981\u5584\u4e8e\u6293\u4f4f\u4e3b\u8981\u77db\u3001\u5206\u6e05\u4e3b\u6b21\u3001\u7a81\u51fa\u91cd\u70b9 \uff0c\u5173\u952e\u662f\u638c\u63e1\u77e5\u8bc6\u6846\u67b6\uff0c\u5b66\u4f1a\u4ee5\u540e\u771f\u6b63\u6709\u7528\u7684\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u800c\u4e0d\u8981\u628a\u7cbe\u529b\u5e73\u5747\u5206\u914d\u5728\u4e00\u4e9b\u7410\u4e8b\u4e0a\u3002\u201d \u2014\u2014 \u9648\u7855@\u77e5\u4e4e \u9762\u5411\u4fe1\u4ef0\u7f16\u7a0b https://draveness.me/ \u53c2\u8003\u4e86LevelDB\u548cLSMT\u76f8\u5173\u77e5\u8bc6\u3002 \u9648\u7855@CSDN https://blog.csdn.net/Solstice \u9648\u7855\u8001\u5e08\u7684CSDN\u535a\u5ba2\u3002 \u5b5f\u5ca9@CSDN https://blog.csdn.net/myan \u9648\u7855\u8001\u5e08\u66fe\u5f15\u7528\u5b5f\u5ca9\u8001\u5e08\u5173\u4e8e\u5b66\u4e60\u7684\u89c2\u70b9\u3002","title":"\u535a\u5ba2\u63a8\u8350"},{"location":"other_blogs/#_1","text":"\u201c \u5b66\u4e60\u4efb\u4f55\u4e00\u95e8\u8bfe\u7a0b\u90fd\u8981\u5584\u4e8e\u6293\u4f4f\u4e3b\u8981\u77db\u3001\u5206\u6e05\u4e3b\u6b21\u3001\u7a81\u51fa\u91cd\u70b9 \uff0c\u5173\u952e\u662f\u638c\u63e1\u77e5\u8bc6\u6846\u67b6\uff0c\u5b66\u4f1a\u4ee5\u540e\u771f\u6b63\u6709\u7528\u7684\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u800c\u4e0d\u8981\u628a\u7cbe\u529b\u5e73\u5747\u5206\u914d\u5728\u4e00\u4e9b\u7410\u4e8b\u4e0a\u3002\u201d \u2014\u2014 \u9648\u7855@\u77e5\u4e4e","title":"\u535a\u5ba2\u63a8\u8350"},{"location":"other_blogs/#_2","text":"https://draveness.me/ \u53c2\u8003\u4e86LevelDB\u548cLSMT\u76f8\u5173\u77e5\u8bc6\u3002","title":"\u9762\u5411\u4fe1\u4ef0\u7f16\u7a0b"},{"location":"other_blogs/#csdn","text":"https://blog.csdn.net/Solstice \u9648\u7855\u8001\u5e08\u7684CSDN\u535a\u5ba2\u3002","title":"\u9648\u7855@CSDN"},{"location":"other_blogs/#csdn_1","text":"https://blog.csdn.net/myan \u9648\u7855\u8001\u5e08\u66fe\u5f15\u7528\u5b5f\u5ca9\u8001\u5e08\u5173\u4e8e\u5b66\u4e60\u7684\u89c2\u70b9\u3002","title":"\u5b5f\u5ca9@CSDN"},{"location":"competitive_programming/basic/monotune_stack/","text":"\u5355\u8c03\u6808 \u76f8\u6bd4\u4e8e\u6570\u636e\u7ed3\u6784\uff0c\u5355\u8c03\u6808\u66f4\u50cf\u662f\u6808\u7ed3\u6784\u7684\u4e00\u79cd\u7279\u6b8a\u5e94\u7528\u3002 \u63cf\u8ff0 \u4e00\u822c\u800c\u8a00\u5355\u8c03\u6808\u7528\u4e8e\u8bb0\u5f55\u4e00\u4e2a\u5e8f\u5217\u4ece\u4e00\u7aef\u5f00\u59cb\u7684\u5355\u8c03\u5b50\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u8fde\u7eed\uff09\u3002 \u5355\u8c03\u6808\u7684\u6210\u5458\u53ef\u4ee5\u662f\u539f\u5e8f\u5217\u6210\u5458\uff0c\u4e5f\u53ef\u4ee5\u662f\u539f\u5e8f\u5217\u6210\u5458\u7684\u4e0b\u6807\u3002 \u4e3e\u4f8b Codeforces-1313-C2 \u5bf9\u4e8e\u539f\u59cb\u5e8f\u5217 a[i] a[i] \uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\u7528\u4e8e\u5728 O(n) O(n) \u65f6\u95f4\u5185\u4e00\u8d9f\u751f\u6210\u8f85\u52a9\u5e8f\u5217 l[i] l[i] \uff0c\u5176\u4e2d l[i] l[i] \u4e3a\u4ece a[i] a[i] \u5411\u5de6\u770b\u7b2c\u4e00\u4e2a\u503c\u5c0f\u4e8e a[i] a[i] \u7684\u6210\u5458\u4e0b\u6807\uff1b r[i] r[i] \u4e3a l[i] l[i] \u53f3\u4fa7\u7684\u5bf9\u7b49\u3002","title":"\u5355\u8c03\u6808"},{"location":"competitive_programming/basic/monotune_stack/#_1","text":"\u76f8\u6bd4\u4e8e\u6570\u636e\u7ed3\u6784\uff0c\u5355\u8c03\u6808\u66f4\u50cf\u662f\u6808\u7ed3\u6784\u7684\u4e00\u79cd\u7279\u6b8a\u5e94\u7528\u3002","title":"\u5355\u8c03\u6808"},{"location":"competitive_programming/basic/monotune_stack/#_2","text":"\u4e00\u822c\u800c\u8a00\u5355\u8c03\u6808\u7528\u4e8e\u8bb0\u5f55\u4e00\u4e2a\u5e8f\u5217\u4ece\u4e00\u7aef\u5f00\u59cb\u7684\u5355\u8c03\u5b50\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u8fde\u7eed\uff09\u3002 \u5355\u8c03\u6808\u7684\u6210\u5458\u53ef\u4ee5\u662f\u539f\u5e8f\u5217\u6210\u5458\uff0c\u4e5f\u53ef\u4ee5\u662f\u539f\u5e8f\u5217\u6210\u5458\u7684\u4e0b\u6807\u3002","title":"\u63cf\u8ff0"},{"location":"competitive_programming/basic/monotune_stack/#_3","text":"Codeforces-1313-C2 \u5bf9\u4e8e\u539f\u59cb\u5e8f\u5217 a[i] a[i] \uff0c\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\u7528\u4e8e\u5728 O(n) O(n) \u65f6\u95f4\u5185\u4e00\u8d9f\u751f\u6210\u8f85\u52a9\u5e8f\u5217 l[i] l[i] \uff0c\u5176\u4e2d l[i] l[i] \u4e3a\u4ece a[i] a[i] \u5411\u5de6\u770b\u7b2c\u4e00\u4e2a\u503c\u5c0f\u4e8e a[i] a[i] \u7684\u6210\u5458\u4e0b\u6807\uff1b r[i] r[i] \u4e3a l[i] l[i] \u53f3\u4fa7\u7684\u5bf9\u7b49\u3002","title":"\u4e3e\u4f8b"},{"location":"competitive_programming/basic/searching/binary_search/","text":"\u4e8c\u5206\u641c\u7d22 \u95ee\u9898 \u5bfb\u627e\u9608\u503c\uff1a\u82e5\u6240\u6c42\u95ee\u9898\u5177\u6709\u5927\u4e8e\u7b49\u4e8e\u67d0\u4e00\u9608\u503c\u201c\u53ef\u884c\u201d\u3001\u5c0f\u4e8e\u8be5\u9608\u503c\u201c\u4e0d\u53ef\u884c\u201d\u7684\u4e8c\u6bb5\u6027\uff0c\u6216\u8005\u5c5e\u4e8e\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u6570\u91cf\u95ee\u9898\uff0c\u53ef\u5229\u7528\u5bfb\u627e\u9608\u503c\u7684\u4e8c\u5206\u641c\u7d22\u6c42\u89e3 \u4ee3\u7801 check() \u51fd\u6570\u7528\u4e8e\u5224\u5b9a\u5f53\u524d\u503c\u662f\u5426\u53ef\u884c \u8fde\u7eed\u578b\u533a\u95f4\u7684\u4e8c\u5206\u641c\u7d22 \u5728 x \\in [0, 10^9] x \\in [0, 10^9] \u8303\u56f4\u5185\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6 check(x)=true check(x)=true \u7684\u6307\u5b9a\u7cbe\u5ea6\u7684\u6700\u5c0f x x double bi_search () { double l = 0 , r = 1e9 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m = ( l + r ) / 2l ; if ( check ( m )) r = m ; else l = m ; } return l ; } \u8fed\u4ee3\u6b65\u6570\u53ef\u7531 \u521d\u59cb\u533a\u95f4\u957f\u5ea6 \u548c \u7cbe\u5ea6\u8981\u6c42 \u786e\u5b9a\u3002 \u79bb\u6563\u578b\u533a\u95f4\u7684\u4e8c\u5206\u641c\u7d22 \u5728 x \\in [0, n - 1], x \\in \\mathbb{Z} x \\in [0, n - 1], x \\in \\mathbb{Z} \u8303\u56f4\u5185\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6 check(x)=true check(x)=true \u7684\u6700\u5c0f x x \uff0c\u5982\u4e0d\u5b58\u5728\u8fd4\u56de -1 -1 \u3002 int bi_search () { int ans = - 1 ; int l = 0 , r = n - 1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( check ( m )) ans = m , r = m - 1 ; else l = m + 1 ; } return ans ; } [l, r] [l, r] \u7ef4\u62a4\u7684\u662f\u5269\u4f59\u641c\u7d22\u57df\u3002 \u5e94\u7528 \u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u5224\u65ad\u76ee\u6807\u503c\u7684\u5b58\u5728\u6027 \u4ee5\u6570\u7ec4\u4e0b\u6807\u4e3a\u641c\u7d22\u57df\uff0c\u5b9e\u73b0\u51fd\u6570\u8fd4\u56de bool \u578b\u53d8\u91cf\uff0c\u5224\u65ad\u76ee\u6807\u503c target target \u662f\u5426\u5728\u5e8f\u5217 a a \u4e2d\u51fa\u73b0\u3002 bool bi_search ( vector < int > a , int target ) { int l = 0 , r = a . size () - 1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( a [ m ] == target ) return true ; if ( a [ m ] < target ) l = m + 1 ; else r = m - 1 ; } return false ; } [l, r] [l, r] \u7ef4\u62a4\u7684\u662f\u5269\u4f59\u641c\u7d22\u57df\u3002","title":"\u4e8c\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/binary_search/#_1","text":"","title":"\u4e8c\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/binary_search/#_2","text":"\u5bfb\u627e\u9608\u503c\uff1a\u82e5\u6240\u6c42\u95ee\u9898\u5177\u6709\u5927\u4e8e\u7b49\u4e8e\u67d0\u4e00\u9608\u503c\u201c\u53ef\u884c\u201d\u3001\u5c0f\u4e8e\u8be5\u9608\u503c\u201c\u4e0d\u53ef\u884c\u201d\u7684\u4e8c\u6bb5\u6027\uff0c\u6216\u8005\u5c5e\u4e8e\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u6570\u91cf\u95ee\u9898\uff0c\u53ef\u5229\u7528\u5bfb\u627e\u9608\u503c\u7684\u4e8c\u5206\u641c\u7d22\u6c42\u89e3","title":"\u95ee\u9898"},{"location":"competitive_programming/basic/searching/binary_search/#_3","text":"check() \u51fd\u6570\u7528\u4e8e\u5224\u5b9a\u5f53\u524d\u503c\u662f\u5426\u53ef\u884c","title":"\u4ee3\u7801"},{"location":"competitive_programming/basic/searching/binary_search/#_4","text":"\u5728 x \\in [0, 10^9] x \\in [0, 10^9] \u8303\u56f4\u5185\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6 check(x)=true check(x)=true \u7684\u6307\u5b9a\u7cbe\u5ea6\u7684\u6700\u5c0f x x double bi_search () { double l = 0 , r = 1e9 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m = ( l + r ) / 2l ; if ( check ( m )) r = m ; else l = m ; } return l ; } \u8fed\u4ee3\u6b65\u6570\u53ef\u7531 \u521d\u59cb\u533a\u95f4\u957f\u5ea6 \u548c \u7cbe\u5ea6\u8981\u6c42 \u786e\u5b9a\u3002","title":"\u8fde\u7eed\u578b\u533a\u95f4\u7684\u4e8c\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/binary_search/#_5","text":"\u5728 x \\in [0, n - 1], x \\in \\mathbb{Z} x \\in [0, n - 1], x \\in \\mathbb{Z} \u8303\u56f4\u5185\u5bfb\u627e\u6ee1\u8db3\u6761\u4ef6 check(x)=true check(x)=true \u7684\u6700\u5c0f x x \uff0c\u5982\u4e0d\u5b58\u5728\u8fd4\u56de -1 -1 \u3002 int bi_search () { int ans = - 1 ; int l = 0 , r = n - 1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( check ( m )) ans = m , r = m - 1 ; else l = m + 1 ; } return ans ; } [l, r] [l, r] \u7ef4\u62a4\u7684\u662f\u5269\u4f59\u641c\u7d22\u57df\u3002","title":"\u79bb\u6563\u578b\u533a\u95f4\u7684\u4e8c\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/binary_search/#_6","text":"","title":"\u5e94\u7528"},{"location":"competitive_programming/basic/searching/binary_search/#_7","text":"\u4ee5\u6570\u7ec4\u4e0b\u6807\u4e3a\u641c\u7d22\u57df\uff0c\u5b9e\u73b0\u51fd\u6570\u8fd4\u56de bool \u578b\u53d8\u91cf\uff0c\u5224\u65ad\u76ee\u6807\u503c target target \u662f\u5426\u5728\u5e8f\u5217 a a \u4e2d\u51fa\u73b0\u3002 bool bi_search ( vector < int > a , int target ) { int l = 0 , r = a . size () - 1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( a [ m ] == target ) return true ; if ( a [ m ] < target ) l = m + 1 ; else r = m - 1 ; } return false ; } [l, r] [l, r] \u7ef4\u62a4\u7684\u662f\u5269\u4f59\u641c\u7d22\u57df\u3002","title":"\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u5224\u65ad\u76ee\u6807\u503c\u7684\u5b58\u5728\u6027"},{"location":"competitive_programming/basic/searching/ternary_search/","text":"\u4e09\u5206\u641c\u7d22 \u95ee\u9898 \u5df2\u77e5\u51fd\u6570 f(x) f(x) \u5728\u533a\u95f4 [l, r] [l, r] \u4e0a\u5355\u5cf0\u4e14\u8fde\u7eed\uff0c\u6c42 f(x) f(x) \u5728 [l, r] [l, r] \u4e0a\u7684\u6781\u503c\u3002 \u7b97\u6cd5 \u4f7f\u7528\u6807\u51c6\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\uff0c\u6bcf\u6b21\u8fed\u4ee3\u5c06\u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6\u7f29\u5c0f \\frac{1}{3} \\frac{1}{3} \u3002 \u7406\u8bba\u4e0a\u6700\u7ec8\u6536\u655b\u5230\u6781\u503c\u70b9\u6216\u6781\u503c\u533a\u95f4\u7684\u5de6\u7aef\uff0c\u4f46\u5b9e\u9645\u4e2d\u7531\u4e8e\u590d\u70b9\u8bef\u5dee\u5bfc\u81f4\u7684\u5224\u7b49\u9519\u8bef\uff0c\u5f53 f(x) f(x) \u5728\u533a\u95f4 [l_m, r_m] [l_m, r_m] \u4e0a\u53d6\u6781\u503c\u65f6\uff0c\u6700\u7ec8\u5b9a\u4f4d\u5f80\u5f80\u5728\u7ebf\u6bb5\u5185\u7684\u968f\u673a\u70b9\uff0c\u4f46\u8fd4\u56de\u7684\u51fd\u6570\u503c\u4ecd\u53ef\u89c6\u4e3a f(x) f(x) \u5728 [l, r] [l, r] \u4e0a\u7684\u6781\u503c\u3002 \u4ee3\u7801 \u5728 [-1000, 1000] [-1000, 1000] \u8303\u56f4\u5185\u641c\u7d22\u5355\u5cf0\u8fde\u7eed\u51fd\u6570 f(x) f(x) \u6781\u5c0f\u503c double ternary_search () { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( m1 ) >= f ( m2 )) l = m1 ; else r = m2 ; } return f ( l ); } \u6ce8\uff1a \u8fed\u4ee3 100 100 \u6b21\u540e\u533a\u95f4\u957f\u5ea6\u4e3a\u5148\u524d\u7684 2.4597 \\times 10^{-18} 2.4597 \\times 10^{-18} \uff0c\u8fed\u4ee3 1000 1000 \u6b21\u4e4b\u540e\u533a\u95f4\u957f\u5ea6\u4e3a\u7f29\u51cf\u5230\u539f\u6765\u7684 1.4881 \\times 10^{-53} 1.4881 \\times 10^{-53} \uff0c\u6545\u4e00\u822c\u6570\u767e\u6b21\u7684\u8fed\u4ee3\u80fd\u591f\u6ee1\u8db3\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u7cbe\u5ea6\u8981\u6c42\u3002 \u53d8\u4f53 - \u5e73\u9762\u4e09\u5206\u641c\u7d22 \u5f53\u9700\u8981\u6c42\u89e3\u7684\u5355\u5cf0\u8fde\u7eed\u4e8c\u5143\u51fd\u6570 f_{x, y}(x, y) f_{x, y}(x, y) \u5728\u77e9\u5f62\u533a\u57df x \\in [l_x, r_x], y \\in [l_y, r_y] x \\in [l_x, r_x], y \\in [l_y, r_y] \u4e0a\u7684\u6781\u503c\u65f6\uff0c\u53ef\u4f7f\u7528\u5e73\u9762\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\u3002\u5177\u4f53\u5730\uff0c\u5206\u4e24\u5c42\u8c03\u7528\u4e00\u7ef4\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\u3002 \u4ece\u51e0\u4f55\u610f\u4e49\u6765\u770b\uff0c\u5e73\u9762\u4e09\u5206\u641c\u7d22\u9996\u5148\u5229\u7528\u4e00\u7ef4\u4e09\u5206\u641c\u7d22\u6c42\u89e3\u7ed9\u5b9a x x \u65f6\u51fd\u6570\u5728 y y \u65b9\u5411\u4e0a\u7684\u6781\u503c f_x(x) = \\max_{y \\in [l_y, r_y]}f(x, y) f_x(x) = \\max_{y \\in [l_y, r_y]}f(x, y) \uff0c\u7136\u540e\u5229\u7528\u4e09\u5206\u641c\u7d22\u6c42\u89e3 f_x(x) f_x(x) \u5728 x x \u65b9\u5411\u4e0a\u7684\u6781\u503c\u3002 \u4ee3\u7801 \u5728 [-1000, 1000] \\times [-1000, 1000] [-1000, 1000] \\times [-1000, 1000] \u4e0a\u641c\u7d22\u5355\u5cf0\u51fd\u6570 f(x) f(x) \u7684\u6781\u5c0f\u503c double t_search_y ( double x ) { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( x , m1 ) >= f ( x , m2 )) l = m1 ; else r = m2 ; } return f ( x , l ); } double t_search_x () { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( t_search_y ( m1 ) >= t_search_y ( m2 )) l = m1 ; else r = m2 ; } return t_search_y ( l ); } \u6a21\u677f\u5c01\u88c5 \u4e00\u7ef4\u4e09\u5206\u641c\u7d22 class TernarySearch { public : TernarySearch ( function < double ( double ) > _f ) : f ( _f ) { l = - 1000 , r = 1000 ; } double MaxValue () { for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( m1 ) >= f ( m2 )) l = m1 ; else r = m2 ; } return f ( l ); } private : int iter_num = 300 ; double l , r ; function < double ( double ) > f ; }; \u5e73\u9762\u4e09\u5206\u641c\u7d22 class TernarySearch2D { public : TernarySearch2D ( function < double ( double , double ) > _f ) : f ( _f ) { lx = - 1000 , rx = 1000 , ly = - 1000 , ry = - 1000 ; } double MaxValue () { double l = lx , r = rx ; for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( MaxValueY ( m1 ) >= MaxValueY ( m2 )) l = m1 ; else r = m2 ; } return MaxValueY ( l ); } private : double MaxValueY ( double x ) { double l = ly , r = ry ; for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( x , m1 ) >= f ( x , m2 )) l = m1 ; else r = m2 ; } return f ( x , l ); } int iter_num = 300 ; double lx , rx , ly , ry ; function < double ( double , double ) > f ; };","title":"\u4e09\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/ternary_search/#_1","text":"","title":"\u4e09\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/ternary_search/#_2","text":"\u5df2\u77e5\u51fd\u6570 f(x) f(x) \u5728\u533a\u95f4 [l, r] [l, r] \u4e0a\u5355\u5cf0\u4e14\u8fde\u7eed\uff0c\u6c42 f(x) f(x) \u5728 [l, r] [l, r] \u4e0a\u7684\u6781\u503c\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/basic/searching/ternary_search/#_3","text":"\u4f7f\u7528\u6807\u51c6\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\uff0c\u6bcf\u6b21\u8fed\u4ee3\u5c06\u5f53\u524d\u533a\u95f4\u7684\u957f\u5ea6\u7f29\u5c0f \\frac{1}{3} \\frac{1}{3} \u3002 \u7406\u8bba\u4e0a\u6700\u7ec8\u6536\u655b\u5230\u6781\u503c\u70b9\u6216\u6781\u503c\u533a\u95f4\u7684\u5de6\u7aef\uff0c\u4f46\u5b9e\u9645\u4e2d\u7531\u4e8e\u590d\u70b9\u8bef\u5dee\u5bfc\u81f4\u7684\u5224\u7b49\u9519\u8bef\uff0c\u5f53 f(x) f(x) \u5728\u533a\u95f4 [l_m, r_m] [l_m, r_m] \u4e0a\u53d6\u6781\u503c\u65f6\uff0c\u6700\u7ec8\u5b9a\u4f4d\u5f80\u5f80\u5728\u7ebf\u6bb5\u5185\u7684\u968f\u673a\u70b9\uff0c\u4f46\u8fd4\u56de\u7684\u51fd\u6570\u503c\u4ecd\u53ef\u89c6\u4e3a f(x) f(x) \u5728 [l, r] [l, r] \u4e0a\u7684\u6781\u503c\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/basic/searching/ternary_search/#_4","text":"\u5728 [-1000, 1000] [-1000, 1000] \u8303\u56f4\u5185\u641c\u7d22\u5355\u5cf0\u8fde\u7eed\u51fd\u6570 f(x) f(x) \u6781\u5c0f\u503c double ternary_search () { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( m1 ) >= f ( m2 )) l = m1 ; else r = m2 ; } return f ( l ); } \u6ce8\uff1a \u8fed\u4ee3 100 100 \u6b21\u540e\u533a\u95f4\u957f\u5ea6\u4e3a\u5148\u524d\u7684 2.4597 \\times 10^{-18} 2.4597 \\times 10^{-18} \uff0c\u8fed\u4ee3 1000 1000 \u6b21\u4e4b\u540e\u533a\u95f4\u957f\u5ea6\u4e3a\u7f29\u51cf\u5230\u539f\u6765\u7684 1.4881 \\times 10^{-53} 1.4881 \\times 10^{-53} \uff0c\u6545\u4e00\u822c\u6570\u767e\u6b21\u7684\u8fed\u4ee3\u80fd\u591f\u6ee1\u8db3\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u7cbe\u5ea6\u8981\u6c42\u3002","title":"\u4ee3\u7801"},{"location":"competitive_programming/basic/searching/ternary_search/#-","text":"\u5f53\u9700\u8981\u6c42\u89e3\u7684\u5355\u5cf0\u8fde\u7eed\u4e8c\u5143\u51fd\u6570 f_{x, y}(x, y) f_{x, y}(x, y) \u5728\u77e9\u5f62\u533a\u57df x \\in [l_x, r_x], y \\in [l_y, r_y] x \\in [l_x, r_x], y \\in [l_y, r_y] \u4e0a\u7684\u6781\u503c\u65f6\uff0c\u53ef\u4f7f\u7528\u5e73\u9762\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\u3002\u5177\u4f53\u5730\uff0c\u5206\u4e24\u5c42\u8c03\u7528\u4e00\u7ef4\u4e09\u5206\u641c\u7d22\u7b97\u6cd5\u3002 \u4ece\u51e0\u4f55\u610f\u4e49\u6765\u770b\uff0c\u5e73\u9762\u4e09\u5206\u641c\u7d22\u9996\u5148\u5229\u7528\u4e00\u7ef4\u4e09\u5206\u641c\u7d22\u6c42\u89e3\u7ed9\u5b9a x x \u65f6\u51fd\u6570\u5728 y y \u65b9\u5411\u4e0a\u7684\u6781\u503c f_x(x) = \\max_{y \\in [l_y, r_y]}f(x, y) f_x(x) = \\max_{y \\in [l_y, r_y]}f(x, y) \uff0c\u7136\u540e\u5229\u7528\u4e09\u5206\u641c\u7d22\u6c42\u89e3 f_x(x) f_x(x) \u5728 x x \u65b9\u5411\u4e0a\u7684\u6781\u503c\u3002","title":"\u53d8\u4f53 - \u5e73\u9762\u4e09\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/ternary_search/#_5","text":"\u5728 [-1000, 1000] \\times [-1000, 1000] [-1000, 1000] \\times [-1000, 1000] \u4e0a\u641c\u7d22\u5355\u5cf0\u51fd\u6570 f(x) f(x) \u7684\u6781\u5c0f\u503c double t_search_y ( double x ) { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( x , m1 ) >= f ( x , m2 )) l = m1 ; else r = m2 ; } return f ( x , l ); } double t_search_x () { double l = - 1000 , r = 1000 ; for ( int i = 0 ; i < 300 ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( t_search_y ( m1 ) >= t_search_y ( m2 )) l = m1 ; else r = m2 ; } return t_search_y ( l ); }","title":"\u4ee3\u7801"},{"location":"competitive_programming/basic/searching/ternary_search/#_6","text":"","title":"\u6a21\u677f\u5c01\u88c5"},{"location":"competitive_programming/basic/searching/ternary_search/#_7","text":"class TernarySearch { public : TernarySearch ( function < double ( double ) > _f ) : f ( _f ) { l = - 1000 , r = 1000 ; } double MaxValue () { for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( m1 ) >= f ( m2 )) l = m1 ; else r = m2 ; } return f ( l ); } private : int iter_num = 300 ; double l , r ; function < double ( double ) > f ; };","title":"\u4e00\u7ef4\u4e09\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/searching/ternary_search/#_8","text":"class TernarySearch2D { public : TernarySearch2D ( function < double ( double , double ) > _f ) : f ( _f ) { lx = - 1000 , rx = 1000 , ly = - 1000 , ry = - 1000 ; } double MaxValue () { double l = lx , r = rx ; for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( MaxValueY ( m1 ) >= MaxValueY ( m2 )) l = m1 ; else r = m2 ; } return MaxValueY ( l ); } private : double MaxValueY ( double x ) { double l = ly , r = ry ; for ( int i = 0 ; i < iter_num ; i ++ ) { double m1 = ( 2 * l + r ) / 3 ; double m2 = ( l + 2 * r ) / 3 ; if ( f ( x , m1 ) >= f ( x , m2 )) l = m1 ; else r = m2 ; } return f ( x , l ); } int iter_num = 300 ; double lx , rx , ly , ry ; function < double ( double , double ) > f ; };","title":"\u5e73\u9762\u4e09\u5206\u641c\u7d22"},{"location":"competitive_programming/basic/sorting/merge_sort/","text":"\u5f52\u5e76\u6392\u5e8f \u4ee3\u7801 void merge ( int * a , int l , int m , int r ) { // Merge two sub-arraies a[l...m] & a[m + 1...r] into a[l...r]. int n1 = m - l + 1 ; int n2 = r - m ; int L [ n1 ], R [ n2 ]; for ( int i = 0 ; i < n1 ; i ++ ) L [ i ] = a [ l + i ]; for ( int j = 0 ; j < n2 ; j ++ ) R [ j ] = a [ m + 1 + j ]; int i = 0 , j = 0 , k = l ; // Initial index of left array, right array, merged array. while ( i < n1 && j < n2 ) if ( L [ i ] <= R [ j ]) a [ k ++ ] = L [ i ++ ]; else a [ k ++ ] = R [ j ++ ]; while ( i < n1 ) a [ k ++ ] = L [ i ++ ]; while ( j < n2 ) a [ k ++ ] = R [ j ++ ]; } void merge_sort ( int * a , int l , int r ) { // Sort array a[l...r]. if ( l >= r ) return ; int m = ( l + r ) >> 1 ; merge_sort ( a , l , m ); merge_sort ( a , m + 1 , r ); merge ( a , l , m , r ); } \u7b97\u6cd5 \u5206\u6cbb\u6cd5\uff0c\u540e\u5e8f\u9012\u5f52\u3002 \u5c06\u6570\u7ec4\u6298\u534a\u5206\u6210\u5de6\u3001\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6392\u5e8f\uff0c\u518d\u5bf9\u6709\u5e8f\u7684\u5de6\u3001\u53f3\u4e24\u90e8\u5206\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"competitive_programming/basic/sorting/merge_sort/#_1","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"competitive_programming/basic/sorting/merge_sort/#_2","text":"void merge ( int * a , int l , int m , int r ) { // Merge two sub-arraies a[l...m] & a[m + 1...r] into a[l...r]. int n1 = m - l + 1 ; int n2 = r - m ; int L [ n1 ], R [ n2 ]; for ( int i = 0 ; i < n1 ; i ++ ) L [ i ] = a [ l + i ]; for ( int j = 0 ; j < n2 ; j ++ ) R [ j ] = a [ m + 1 + j ]; int i = 0 , j = 0 , k = l ; // Initial index of left array, right array, merged array. while ( i < n1 && j < n2 ) if ( L [ i ] <= R [ j ]) a [ k ++ ] = L [ i ++ ]; else a [ k ++ ] = R [ j ++ ]; while ( i < n1 ) a [ k ++ ] = L [ i ++ ]; while ( j < n2 ) a [ k ++ ] = R [ j ++ ]; } void merge_sort ( int * a , int l , int r ) { // Sort array a[l...r]. if ( l >= r ) return ; int m = ( l + r ) >> 1 ; merge_sort ( a , l , m ); merge_sort ( a , m + 1 , r ); merge ( a , l , m , r ); }","title":"\u4ee3\u7801"},{"location":"competitive_programming/basic/sorting/merge_sort/#_3","text":"\u5206\u6cbb\u6cd5\uff0c\u540e\u5e8f\u9012\u5f52\u3002 \u5c06\u6570\u7ec4\u6298\u534a\u5206\u6210\u5de6\u3001\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6392\u5e8f\uff0c\u518d\u5bf9\u6709\u5e8f\u7684\u5de6\u3001\u53f3\u4e24\u90e8\u5206\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/basic/sorting/quick_sort/","text":"\u5feb\u901f\u6392\u5e8f \u4ee3\u7801 void quick ( int * a , int l , int r ) { // Sort a[l...r]. if ( l >= r ) return ; int i = l + 1 , j = r ; while ( 1 ) { // while ( ! ( a [ l ] < a [ i ] || i == r )) i ++ ; while ( ! ( a [ l ] >= a [ j ] || j == l )) j -- ; if ( i < j ) { int tmp = a [ i ]; a [ i ] = a [ j ], a [ j ] = tmp ; } else break ; } int tmp = a [ l ]; a [ l ] = a [ j ], a [ j ] = tmp ; quick ( a , l , j - 1 ); quick ( a , j + 1 , r ); } \u7b97\u6cd5 \u5206\u6cbb\u6cd5\uff0c\u5148\u5e8f\u9012\u5f52\u3002 \u5c06\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u6309\u9996\u5143\u5927\u5c0f\u5206\u8fb9\uff0c\u518d\u5bf9\u4e24\u8fb9\u5206\u522b\u9012\u5f52\u5904\u7406\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002 \u5b9e\u73b0 \u4e0a\u8ff0\u201c\u5206\u8fb9\u201d\u64cd\u4f5c \u51fa\u81ea\u5510\u53d1\u6839\u8001\u5e08\u7684\u300a\u6570\u636e\u7ed3\u6784\u300b\u6559\u6750\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u4ece\u5e8f\u5217\u4e24\u7aef\u5047\u5e01\u5c06\u6574\u4e2a\u5e8f\u5217\u6309\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5206\u7c7b\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"competitive_programming/basic/sorting/quick_sort/#_1","text":"","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"competitive_programming/basic/sorting/quick_sort/#_2","text":"void quick ( int * a , int l , int r ) { // Sort a[l...r]. if ( l >= r ) return ; int i = l + 1 , j = r ; while ( 1 ) { // while ( ! ( a [ l ] < a [ i ] || i == r )) i ++ ; while ( ! ( a [ l ] >= a [ j ] || j == l )) j -- ; if ( i < j ) { int tmp = a [ i ]; a [ i ] = a [ j ], a [ j ] = tmp ; } else break ; } int tmp = a [ l ]; a [ l ] = a [ j ], a [ j ] = tmp ; quick ( a , l , j - 1 ); quick ( a , j + 1 , r ); }","title":"\u4ee3\u7801"},{"location":"competitive_programming/basic/sorting/quick_sort/#_3","text":"\u5206\u6cbb\u6cd5\uff0c\u5148\u5e8f\u9012\u5f52\u3002 \u5c06\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u6309\u9996\u5143\u5927\u5c0f\u5206\u8fb9\uff0c\u518d\u5bf9\u4e24\u8fb9\u5206\u522b\u9012\u5f52\u5904\u7406\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/basic/sorting/quick_sort/#_4","text":"\u4e0a\u8ff0\u201c\u5206\u8fb9\u201d\u64cd\u4f5c \u51fa\u81ea\u5510\u53d1\u6839\u8001\u5e08\u7684\u300a\u6570\u636e\u7ed3\u6784\u300b\u6559\u6750\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u4ece\u5e8f\u5217\u4e24\u7aef\u5047\u5e01\u5c06\u6574\u4e2a\u5e8f\u5217\u6309\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5206\u7c7b\u3002","title":"\u5b9e\u73b0"},{"location":"competitive_programming/basic/sorting/radix_sort/","text":"\u57fa\u6570\u6392\u5e8f","title":"\u57fa\u6570\u6392\u5e8f"},{"location":"competitive_programming/basic/sorting/radix_sort/#_1","text":"","title":"\u57fa\u6570\u6392\u5e8f"},{"location":"competitive_programming/big_data/bloom_filter/","text":"\u5e03\u9686\u8fc7\u6ee4\u5668 \u95ee\u9898 \u7ef4\u62a4\u4e00\u4e2a\u6d77\u91cf\u6570\u636e\u7684\u96c6\u5408\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u65b0\u5143\u7d20\uff0c\u5feb\u901f\u5224\u65ad\u8be5\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\u3002 \u539f\u7406 \u5bf9\u4e8e\u53ef\u653e\u5165\u5185\u5b58\u91cf\u7ea7\u7684\u6570\u636e\uff0c\u7ecf\u5178\u7684\u96c6\u5408\u7ed3\u6784\u53ef\u4ee5\u662f \u5e73\u8861\u6811 \u548c \u54c8\u5e0c\u8868 \u3002\u4f46\u65e0\u8bba\u54ea\u4e00\u79cd\u65b9\u6cd5\u90fd\u79bb\u4e0d\u5f00\u4e00\u70b9 \u2014\u2014 \u5b58\u50a8\u6240\u6709\u539f\u59cb\u6570\u503c \u6bd4\u5982\u5728\u722c\u866b\u573a\u666f\u5f53\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e4b\u524d\u722c\u8fc7\u7684\u7f51\u7ad9\u3002\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u7f51\u7ad9\u90fd\u8981\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u722c\u8fc7\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u5f53\u4e2d\uff0c\u6211\u4eec\u5e76\u5173\u5fc3\u4e4b\u524d\u722c\u8fc7\u7684\u7f51\u7ad9\u6709\u54ea\u4e9b\uff0c\u800c\u53ea\u662f\u5173\u5fc3 \u73b0\u5728\u7684\u7f51\u7ad9\u6709\u6ca1\u6709\u5728\u4e4b\u524d\u51fa\u73b0\u8fc7 \u3002\u4e5f\u5c31\u662f\u4e4b\u524d\u51fa\u73b0\u8fc7\u4ec0\u4e48\u4e0d\u91cd\u8981\uff0c\u5f53\u524d\u7684\u662f\u5426\u51fa\u73b0\u8fc7\u624d\u91cd\u8981\u3002 \u65e0\u8bba\u5229\u7528\u5e73\u8861\u6811\u3001Trie\u3001\u6216\u662fAC\u81ea\u52a8\u673a\u7b49\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u67e5\u627e\uff0c\u4f46\u662f\u90fd\u79bb\u4e0d\u5f00\u5b58\u50a8\u4e0b\u6240\u6709\u7684\u5b57\u7b26\u4e32\u3002 \u4f5c\u5982\u4e0b\u4f30\u7b97\uff1a\u4e00\u4e2a\u7f51\u5740\u5927\u6982 100 100 \u4e2a\u5b57\u7b26\uff0c\u5360 0.1 0.1 KB\uff0c\u5982\u679c\u662f\u4e00\u4ebf\u4e2a\u7f51\u5740\uff0c\u5c31\u9700\u8981 10 10 GB\u4e86\uff0c\u5982\u679c\u662f\u4e00\u767e\u4ebf\u6216\u4e00\u5343\u4ebf\u5462\uff1f\u663e\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b58\u50a8\u5168\u90e8\u539f\u59cb\u6570\u503c\u662f\u4e0d\u53ef\u884c\u7684\u3002\u8fd9\u65f6\u5e03\u9686\u8fc7\u6ee4\u5668\u6d3e\u4e0a\u4e86\u7528\u573a\uff0c\u5b83\u7684\u505a\u6cd5\u5de7\u5999\uff0c\u4e0d\u9700\u8981\u5b58\u50a8\u4e0b\u539f\u503c\uff0c\u539f\u7406\u5982\u4e0b\uff1a \u5e03\u9686\u8fc7\u6ee4\u5668\u672c\u8eab\u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a m m \u7684\u4e00\u7ef4 bool \u578b\u6570\u7ec4\uff0c\u6bcf\u4e00\u4f4d\u53ea\u6709\u4e00\u4e2a\u4e8c\u503c\u9879 0 0 \u6216 1 1 \uff0c\u53ea\u5360\u4e00\u4f4d\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u589e\u7684\u9879\uff0c\u6211\u4eec\u4f7f\u7528 K K \u79cd\u4e0d\u540c\u7684\u54c8\u5e0c\u51fd\u6570\u5c06\u5176\u6620\u5c04\u5230 [0, m-1] [0, m-1] \uff0c\u5e76\u5c06 bool \u6570\u7ec4\u5bf9\u5e94\u7684\u4f4d\u7f6e\u6807\u8bb0\u4e3a 1 1 \u3002 \u56fe\u89e3\u5e03\u9686\u8fc7\u6ee4\u5668 \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a m = 12 m = 12 \uff0c\u5177\u6709 k = 3 k = 3 \u7ec4\u54c8\u5e0c\u51fd\u6570\u7684\u5e03\u9686\u8fc7\u6ee4\u5668\uff1a \u521d\u59cb\u65f6\u6807\u8bb0\u6570\u7ec4\u5168\u90e8\u4e3a 0 0 Key1 Key1 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (0, 2, 6) (0, 2, 6) \uff0c\u5224\u65ad\u672a\u51fa\u73b0\u8fc7\uff0c\u6253\u6807\u8bb0 Key2 Key2 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (5, 6, 10) (5, 6, 10) \uff0c\u5224\u65ad\u672a\u51fa\u73b0\u8fc7\uff0c\u5728\u672a\u51fa\u73b0\u7684\u4f4d\u4e0a\u6253\u6807\u8bb0 Key3 Key3 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (2, 6, 10) (2, 6, 10) \uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u90fd\u5df2\u88ab\u6807\u8bb0\uff0c\u6545\u5224\u65ad \u53ef\u80fd\u51fa\u73b0\u8fc7 \u7531\u4ee5\u4e0a\u5206\u6790\u53ef\u77e5\u5e03\u9686\u8fc7\u6ee4\u5668\u5bf9\u4e8e\u201c\u672a\u51fa\u73b0\u201d\u7684\u5224\u65ad\u662f\u51c6\u786e\u7684\uff0c\u4f46\u65e0\u6cd5\u5bf9\u51fa\u73b0\u8fc7\u505a\u51fa\u7edd\u5bf9\u6b63\u786e\u7684\u5224\u65ad\u3002 \u4ee3\u7801\u5b9e\u73b0 \u4f20\u5165\u4e00\u7ec4\u54c8\u5e0c\u51fd\u6570\uff0c\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff1a template < typename T > class BloomFilter { public : BloomFilter ( vector < function < int ( T ) >> hash_functions ) : hash_functions_ ( hash_functions ) { flags_ . assign ( hash_functions_ . size (), false ); } void Add ( T key ) { for ( auto hash_function : hash_functions_ ) { flags_ [ hash_function ( key )] = true ; } } bool MaybeOccurred ( T key ) { for ( auto hash_function : hash_functions_ ) { if ( ! flags_ [ hash_function ( key )]) return false ; } return true ; } private : vector < function < int ( T ) >> hash_functions_ ; vector < bool > flags_ ; }; \u9519\u8bef\u7387\u5206\u6790 \u4ee4 m m \u8868\u793a\u6807\u8bb0\u6570\u7ec4\u7684\u957f\u5ea6\uff0c k k \u8868\u793a\u54c8\u5e0c\u51fd\u6570\u7684\u4e2a\u6570\uff0c n n \u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u8bb0\u5f55\u7684\u5143\u7d20\u6570\u91cf\u3002 \u5f53 m m \u5f88\u5927\u65f6\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684key\uff0c\u5176\u88ab\u8bef\u5224\u51fa\u73b0\u8fc7\u7684\u6982\u7387\u4e3a\uff1a p = \\left[ 1 - e^{- \\frac{nk}{m}} \\right] ^ k p = \\left[ 1 - e^{- \\frac{nk}{m}} \\right] ^ k \u7ecf\u63a8\u6f14\u53ef\u5f97\uff1a m = - \\frac{n \\ln p}{(\\ln 2)^2} m = - \\frac{n \\ln p}{(\\ln 2)^2} k = \\frac{m}{n} \\ln 2 k = \\frac{m}{n} \\ln 2 \u6839\u636e\u4e0a\u8ff0\u7ed3\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u9884\u8bbe\u7684\u9519\u8bef\u7387 p p \u548c\u6570\u636e\u91cf\u4f30\u8ba1 n n \u6765\u786e\u5b9a\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u53c2\u6570 m, k m, k \u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5c40\u9650\u6027 \u7075\u9b42\u62f7\u95ee \u5e03\u9686\u8fc7\u6ee4\u5668\u53ef\u4ee5 \u5220\u9664\u5143\u7d20 \u5417\uff1f \u7b54\u6848\u662f \u4e0d\u652f\u6301 \u3002\u56e0\u4e3a\u6807\u5fd7\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u4e0d\u662f\u88ab\u67d0\u4e2akey\u72ec\u5360\u7684\uff0c\u5220\u9664\u67d0\u4e00\u4f4d\u4f1a\u4f7f\u5bf9\u540c\u6837\u6620\u5c04\u5230\u8be5\u4f4d\u7684\u5176\u4ed6key\u7684 \u4e0d\u5b58\u5728\u6027 \u505a\u51fa\u9519\u8bef\u5224\u65ad\u3002 \u6709\u4e00\u79cd\u6539\u8fdb\u7684\u65b9\u6cd5\u662f\u5c06\u6807\u8bb0\u6570\u7ec4\u4ece\u6807\u8bb0\u662f\u5426\u51fa\u73b0\u8fc7\u6539\u4e3a\u6807\u8bb0\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u5220\u9664\u67d0\u4e2akey\u7684\u64cd\u4f5c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6key\u4e86\u3002 \u4e4d\u4e00\u770b\u8fd9\u79cd\u505a\u6cd5\u4f3c\u4e4e\u53ef\u884c\uff0c\u4f46\u5176\u5b9e\u4e5f\u6709\u7f3a\u9677\uff1a\u5f53\u67d0\u4e2a\u88ab\u5224\u65ad\u4e3a\u53ef\u80fd\u51fa\u73b0\u8fc7\u7684key\u9700\u8981\u88ab\u5220\u9664\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u51c6\u786e\u5224\u65ad\u5176\u662f\u5426\u51fa\u73b0\u8fc7\uff0c \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5f3a\u884c\u5220\u9664\u540c\u6837\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6key\u4ea7\u751f\u7684\u6807\u8bb0 \u3002 \u7ed3\u8bba \u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u4e2a\u4f18\u7f3a\u70b9\u90fd\u975e\u5e38\u660e\u663e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f18\u70b9\u662f\uff1a \u901f\u5ea6\u5feb\u3001\u5185\u5b58\u6d88\u8017\u5c0f\u3001\u4ee3\u7801\u5b9e\u73b0\u7b80\u5355 \uff1b\u7f3a\u70b9\u662f\uff1a \u4e0d\u80fd\u4e25\u683c\u5224\u65ad\u5b58\u5728\u3001\u4e0d\u652f\u6301\u5220\u9664\u5143\u7d20 \u3002","title":"\u5e03\u9686\u8fc7\u6ee4\u5668"},{"location":"competitive_programming/big_data/bloom_filter/#_1","text":"","title":"\u5e03\u9686\u8fc7\u6ee4\u5668"},{"location":"competitive_programming/big_data/bloom_filter/#_2","text":"\u7ef4\u62a4\u4e00\u4e2a\u6d77\u91cf\u6570\u636e\u7684\u96c6\u5408\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u65b0\u5143\u7d20\uff0c\u5feb\u901f\u5224\u65ad\u8be5\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/big_data/bloom_filter/#_3","text":"\u5bf9\u4e8e\u53ef\u653e\u5165\u5185\u5b58\u91cf\u7ea7\u7684\u6570\u636e\uff0c\u7ecf\u5178\u7684\u96c6\u5408\u7ed3\u6784\u53ef\u4ee5\u662f \u5e73\u8861\u6811 \u548c \u54c8\u5e0c\u8868 \u3002\u4f46\u65e0\u8bba\u54ea\u4e00\u79cd\u65b9\u6cd5\u90fd\u79bb\u4e0d\u5f00\u4e00\u70b9 \u2014\u2014 \u5b58\u50a8\u6240\u6709\u539f\u59cb\u6570\u503c \u6bd4\u5982\u5728\u722c\u866b\u573a\u666f\u5f53\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e4b\u524d\u722c\u8fc7\u7684\u7f51\u7ad9\u3002\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u7f51\u7ad9\u90fd\u8981\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u722c\u8fc7\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u5f53\u4e2d\uff0c\u6211\u4eec\u5e76\u5173\u5fc3\u4e4b\u524d\u722c\u8fc7\u7684\u7f51\u7ad9\u6709\u54ea\u4e9b\uff0c\u800c\u53ea\u662f\u5173\u5fc3 \u73b0\u5728\u7684\u7f51\u7ad9\u6709\u6ca1\u6709\u5728\u4e4b\u524d\u51fa\u73b0\u8fc7 \u3002\u4e5f\u5c31\u662f\u4e4b\u524d\u51fa\u73b0\u8fc7\u4ec0\u4e48\u4e0d\u91cd\u8981\uff0c\u5f53\u524d\u7684\u662f\u5426\u51fa\u73b0\u8fc7\u624d\u91cd\u8981\u3002 \u65e0\u8bba\u5229\u7528\u5e73\u8861\u6811\u3001Trie\u3001\u6216\u662fAC\u81ea\u52a8\u673a\u7b49\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u67e5\u627e\uff0c\u4f46\u662f\u90fd\u79bb\u4e0d\u5f00\u5b58\u50a8\u4e0b\u6240\u6709\u7684\u5b57\u7b26\u4e32\u3002 \u4f5c\u5982\u4e0b\u4f30\u7b97\uff1a\u4e00\u4e2a\u7f51\u5740\u5927\u6982 100 100 \u4e2a\u5b57\u7b26\uff0c\u5360 0.1 0.1 KB\uff0c\u5982\u679c\u662f\u4e00\u4ebf\u4e2a\u7f51\u5740\uff0c\u5c31\u9700\u8981 10 10 GB\u4e86\uff0c\u5982\u679c\u662f\u4e00\u767e\u4ebf\u6216\u4e00\u5343\u4ebf\u5462\uff1f\u663e\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b58\u50a8\u5168\u90e8\u539f\u59cb\u6570\u503c\u662f\u4e0d\u53ef\u884c\u7684\u3002\u8fd9\u65f6\u5e03\u9686\u8fc7\u6ee4\u5668\u6d3e\u4e0a\u4e86\u7528\u573a\uff0c\u5b83\u7684\u505a\u6cd5\u5de7\u5999\uff0c\u4e0d\u9700\u8981\u5b58\u50a8\u4e0b\u539f\u503c\uff0c\u539f\u7406\u5982\u4e0b\uff1a \u5e03\u9686\u8fc7\u6ee4\u5668\u672c\u8eab\u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a m m \u7684\u4e00\u7ef4 bool \u578b\u6570\u7ec4\uff0c\u6bcf\u4e00\u4f4d\u53ea\u6709\u4e00\u4e2a\u4e8c\u503c\u9879 0 0 \u6216 1 1 \uff0c\u53ea\u5360\u4e00\u4f4d\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u589e\u7684\u9879\uff0c\u6211\u4eec\u4f7f\u7528 K K \u79cd\u4e0d\u540c\u7684\u54c8\u5e0c\u51fd\u6570\u5c06\u5176\u6620\u5c04\u5230 [0, m-1] [0, m-1] \uff0c\u5e76\u5c06 bool \u6570\u7ec4\u5bf9\u5e94\u7684\u4f4d\u7f6e\u6807\u8bb0\u4e3a 1 1 \u3002","title":"\u539f\u7406"},{"location":"competitive_programming/big_data/bloom_filter/#_4","text":"\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a m = 12 m = 12 \uff0c\u5177\u6709 k = 3 k = 3 \u7ec4\u54c8\u5e0c\u51fd\u6570\u7684\u5e03\u9686\u8fc7\u6ee4\u5668\uff1a \u521d\u59cb\u65f6\u6807\u8bb0\u6570\u7ec4\u5168\u90e8\u4e3a 0 0 Key1 Key1 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (0, 2, 6) (0, 2, 6) \uff0c\u5224\u65ad\u672a\u51fa\u73b0\u8fc7\uff0c\u6253\u6807\u8bb0 Key2 Key2 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (5, 6, 10) (5, 6, 10) \uff0c\u5224\u65ad\u672a\u51fa\u73b0\u8fc7\uff0c\u5728\u672a\u51fa\u73b0\u7684\u4f4d\u4e0a\u6253\u6807\u8bb0 Key3 Key3 \u7684\u54c8\u5e0c\u5143\u7956\u4e3a (2, 6, 10) (2, 6, 10) \uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u90fd\u5df2\u88ab\u6807\u8bb0\uff0c\u6545\u5224\u65ad \u53ef\u80fd\u51fa\u73b0\u8fc7 \u7531\u4ee5\u4e0a\u5206\u6790\u53ef\u77e5\u5e03\u9686\u8fc7\u6ee4\u5668\u5bf9\u4e8e\u201c\u672a\u51fa\u73b0\u201d\u7684\u5224\u65ad\u662f\u51c6\u786e\u7684\uff0c\u4f46\u65e0\u6cd5\u5bf9\u51fa\u73b0\u8fc7\u505a\u51fa\u7edd\u5bf9\u6b63\u786e\u7684\u5224\u65ad\u3002","title":"\u56fe\u89e3\u5e03\u9686\u8fc7\u6ee4\u5668"},{"location":"competitive_programming/big_data/bloom_filter/#_5","text":"\u4f20\u5165\u4e00\u7ec4\u54c8\u5e0c\u51fd\u6570\uff0c\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff1a template < typename T > class BloomFilter { public : BloomFilter ( vector < function < int ( T ) >> hash_functions ) : hash_functions_ ( hash_functions ) { flags_ . assign ( hash_functions_ . size (), false ); } void Add ( T key ) { for ( auto hash_function : hash_functions_ ) { flags_ [ hash_function ( key )] = true ; } } bool MaybeOccurred ( T key ) { for ( auto hash_function : hash_functions_ ) { if ( ! flags_ [ hash_function ( key )]) return false ; } return true ; } private : vector < function < int ( T ) >> hash_functions_ ; vector < bool > flags_ ; };","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"competitive_programming/big_data/bloom_filter/#_6","text":"\u4ee4 m m \u8868\u793a\u6807\u8bb0\u6570\u7ec4\u7684\u957f\u5ea6\uff0c k k \u8868\u793a\u54c8\u5e0c\u51fd\u6570\u7684\u4e2a\u6570\uff0c n n \u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u8bb0\u5f55\u7684\u5143\u7d20\u6570\u91cf\u3002 \u5f53 m m \u5f88\u5927\u65f6\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684key\uff0c\u5176\u88ab\u8bef\u5224\u51fa\u73b0\u8fc7\u7684\u6982\u7387\u4e3a\uff1a p = \\left[ 1 - e^{- \\frac{nk}{m}} \\right] ^ k p = \\left[ 1 - e^{- \\frac{nk}{m}} \\right] ^ k \u7ecf\u63a8\u6f14\u53ef\u5f97\uff1a m = - \\frac{n \\ln p}{(\\ln 2)^2} m = - \\frac{n \\ln p}{(\\ln 2)^2} k = \\frac{m}{n} \\ln 2 k = \\frac{m}{n} \\ln 2 \u6839\u636e\u4e0a\u8ff0\u7ed3\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u9884\u8bbe\u7684\u9519\u8bef\u7387 p p \u548c\u6570\u636e\u91cf\u4f30\u8ba1 n n \u6765\u786e\u5b9a\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u53c2\u6570 m, k m, k \u3002","title":"\u9519\u8bef\u7387\u5206\u6790"},{"location":"competitive_programming/big_data/bloom_filter/#_7","text":"","title":"\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5c40\u9650\u6027"},{"location":"competitive_programming/big_data/bloom_filter/#_8","text":"\u5e03\u9686\u8fc7\u6ee4\u5668\u53ef\u4ee5 \u5220\u9664\u5143\u7d20 \u5417\uff1f \u7b54\u6848\u662f \u4e0d\u652f\u6301 \u3002\u56e0\u4e3a\u6807\u5fd7\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u4e0d\u662f\u88ab\u67d0\u4e2akey\u72ec\u5360\u7684\uff0c\u5220\u9664\u67d0\u4e00\u4f4d\u4f1a\u4f7f\u5bf9\u540c\u6837\u6620\u5c04\u5230\u8be5\u4f4d\u7684\u5176\u4ed6key\u7684 \u4e0d\u5b58\u5728\u6027 \u505a\u51fa\u9519\u8bef\u5224\u65ad\u3002 \u6709\u4e00\u79cd\u6539\u8fdb\u7684\u65b9\u6cd5\u662f\u5c06\u6807\u8bb0\u6570\u7ec4\u4ece\u6807\u8bb0\u662f\u5426\u51fa\u73b0\u8fc7\u6539\u4e3a\u6807\u8bb0\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u5220\u9664\u67d0\u4e2akey\u7684\u64cd\u4f5c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6key\u4e86\u3002 \u4e4d\u4e00\u770b\u8fd9\u79cd\u505a\u6cd5\u4f3c\u4e4e\u53ef\u884c\uff0c\u4f46\u5176\u5b9e\u4e5f\u6709\u7f3a\u9677\uff1a\u5f53\u67d0\u4e2a\u88ab\u5224\u65ad\u4e3a\u53ef\u80fd\u51fa\u73b0\u8fc7\u7684key\u9700\u8981\u88ab\u5220\u9664\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u51c6\u786e\u5224\u65ad\u5176\u662f\u5426\u51fa\u73b0\u8fc7\uff0c \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5f3a\u884c\u5220\u9664\u540c\u6837\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6key\u4ea7\u751f\u7684\u6807\u8bb0 \u3002","title":"\u7075\u9b42\u62f7\u95ee"},{"location":"competitive_programming/big_data/bloom_filter/#_9","text":"\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u4e2a\u4f18\u7f3a\u70b9\u90fd\u975e\u5e38\u660e\u663e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f18\u70b9\u662f\uff1a \u901f\u5ea6\u5feb\u3001\u5185\u5b58\u6d88\u8017\u5c0f\u3001\u4ee3\u7801\u5b9e\u73b0\u7b80\u5355 \uff1b\u7f3a\u70b9\u662f\uff1a \u4e0d\u80fd\u4e25\u683c\u5224\u65ad\u5b58\u5728\u3001\u4e0d\u652f\u6301\u5220\u9664\u5143\u7d20 \u3002","title":"\u7ed3\u8bba"},{"location":"competitive_programming/data_structure/btree/","text":"B\u6811 B\u6811\u662f\u4e00\u4e2a\u81ea\u5e73\u8861\u641c\u7d22\u6811\u3002 \u672c\u9875\u5185\u5bb9\u53c2\u8003\u81eaGeeksForGeeks \u95ee\u9898 \u8bbe\u8ba1\u4e00\u79cd\u975e\u5185\u5b58\u6570\u636e\u7ed3\u6784\u7528\u4e8e\u7ec4\u7ec7\u786c\u76d8\u4e2d\u7684\u5927\u91cf\u6570\u636e\u3002 \u601d\u60f3 \u5927\u591a\u6570\u5176\u4ed6\u7684\u81ea\u5e73\u8861\u641c\u7d22\u6811\uff08\u5982AVL\uff0c\u7ea2\u9ed1\u6811\uff09\u90fd\u5047\u8bbe\u5c06\u6240\u6709\u5185\u5bb9\u653e\u5728 \u4e3b\u5b58 \u4e2d\u3002B\u6811\u7684\u4f5c\u7528\u662f\u7ec4\u7ec7\u89c4\u6a21\u5927 \u65e0\u6cd5\u5168\u90e8\u653e\u5165\u4e3b\u5b58 \u7684\u6570\u636e\u3002\u5f53key\u7684\u6570\u91cf\u5f88\u591a\u65f6\uff0c\u6570\u636e\u4ece\u786c\u76d8\u4e2d\u662f\u4ee5 block \u7684\u5f62\u5f0f\u88ab\u8bfb\u53d6\u3002B\u6811\u7684\u601d\u60f3\u662f\u5c3d\u91cf \u51cf\u5c11\u786c\u76d8\u8bfb\u53d6\u7684\u6b21\u6570 \u3002\u5927\u591a\u6570\u6811\u7684\u64cd\u4f5c\uff08\u641c\u7d22\u3001\u63d2\u5165\u3001\u5220\u9664\u3001\u6700\u5927\u3001\u6700\u5c0f\u7b49\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(h) O(h) \uff0c\u5176\u4e2d h h \u662f\u6811\u7684\u9ad8\u5ea6\u3002B\u6811\u662f\u4e00\u4e2a\u5f88 \u80d6 \u7684\u6811\u7684\uff0c\u901a\u8fc7\u5c3d\u53ef\u80fd\u589e\u5927\u8282\u70b9\u7684\u5ea6\u6570\u6765\u6700\u5c0f\u5316B\u6811\u7684\u9ad8\u5ea6\u3002\u4e00\u822c\u5730\uff0cB\u6811 \u8282\u70b9\u7684\u5ea6\u6570\u4fdd\u6301\u4e0e\u78c1\u76d8block\u5927\u5c0f\u76f8\u540c\u7684\u6570\u503c \u3002\u7531\u4e8eB\u6811\u7684\u9ad8\u5ea6\u5f88\u5c0f\uff0c\u8bfb\u53d6\u78c1\u76d8\u7684\u6b21\u6570\u76f8\u6bd4\u5176\u4ed6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u5982AVL\u3001\u7ea2\u9ed1\u6811\uff09\u6709\u4e86\u5927\u5e45\u7f29\u5c0f\u3002 \u6027\u8d28 \u6240\u6709\u53f6\u8282\u70b9\u5728\u540c\u4e00\u5c42\u7ea7 \u4e00\u4e2aB\u6811\u7684\u7ed3\u6784\u7531\u6700\u5c0f\u5ea6\u6570 t t \u786e\u5b9a\uff0c t t \u7684\u503c\u7531\u78c1\u76d8block\u5927\u5c0f\u51b3\u5b9a \u9664\u6839\u8282\u70b9\u5916\u7684\u6240\u6709\u8282\u70b9\u6700\u5c11\u5305\u542b t t \u4e2akey\uff0c\u6839\u8282\u70b9\u53ef\u80fd\u6700\u5c11\u4ec5\u5305\u542b 1 1 \u4e2akey \u6240\u6709\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\u6700\u5927\u5305\u542b 2t-1 2t-1 \u4e2akey \u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u7b49\u4e8e\u5176\u4e2d\u5305\u542b\u7684key\u7684\u6570\u91cf +1 +1 \u8282\u70b9\u4e2d\u7684key\u6309\u5347\u5e8f\u6392\u5217\uff0c k1 \u548c k2 \u4e4b\u95f4\u7684\u5b50\u8282\u70b9\u5305\u542b\u6240\u6709\u4f4d\u4e8e\u533a\u95f4 (k1, k2) (k1, k2) \u4e4b\u5185\u7684key \u4e0eBST\u4e0d\u540c\u7684\u662f\uff1aB\u6811\u5411\u4e0a\u751f\u957f\uff0cBST\u5411\u4e0b\u751f\u957f \u4e0eBST\u76f8\u540c\u7684\u662f\uff1a\u589e\u3001\u5220\u3001\u6539\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u4e0b\u9762\u662f\u4e00\u4e2a t=3 t=3 \u7684B\u6811\u793a\u610f\u56fe\uff1a \u64cd\u4f5c \u5bf9\u4e8eB\u6811\uff0c\u53ea\u8bfb\u64cd\u4f5c\u641c\u7d22\u548c\u904d\u5386\u7684\u64cd\u4f5c\u65b9\u6cd5\u662f\u663e\u7136\u7684\uff08\u4e0eBST\u7c7b\u4f3c\uff09\uff1a \u641c\u7d22 \u4ece\u6839\u8282\u70b9\u9012\u5f52\u5730\u5411\u4e0b\u641c\u7d22\u3002\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u5305\u542b\u76ee\u6807key\uff0c\u5219\u641c\u7d22\u6210\u529f\uff0c\u5426\u5219\u9012\u5f52\u641c\u7d22\u5305\u542b\u76ee\u6807\u7684\u533a\u95f4\u5b50\u6811\u3002\u5f53\u641c\u7d22\u5230\u6708\u5b50\u8282\u70b9\u4e14\u4ecd\u4e0d\u5305\u542b\u76ee\u6807 key \uff0c\u5219\u641c\u7d22\u5931\u8d25\u3002 \u904d\u5386 \u4ece\u5de6\u5230\u53f3\u9012\u5f52\u626b\u63cf\u5b69\u5b50\u8282\u70b9\u3002\u6bcf\u4e24\u6b21\u5bf9\u5b69\u5b50\u8282\u70b9\u9012\u5f52\u626b\u63cf\u4e4b\u95f4\u626b\u63cf\u4e8c\u8005\u4f4d\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u8fb9\u754c key \u3002 \u63d2\u5165 \u63d2\u5165\u64cd\u4f5c\u7531\u4e8e\u9700\u8981\u6dfb\u52a0\u5143\u7d20\u5e76\u4fdd\u6301B\u6811\u672c\u8eab\u7684\u7ed3\u6784\uff0c\u505a\u6cd5\u4e0d\u90a3\u4e48\u663e\u7136\u3002 \u8bbe\u5f85\u63d2\u5165\u7684key\u4e3a k \u3002\u7c7b\u4f3cBST\uff0c\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u904d\u5386\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u5c06 k \u63d2\u5165\u8be5\u8282\u70b9\uff0c\u4f46\u9700\u8981\u4fdd\u8bc1\u8be5\u8282\u70b9\u6709\u8db3\u591f\u7684\u5bb9\u91cf\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u53f6\u8282\u70b9\u7684\u5bb9\u91cf\u603b\u662f\u591f\u7528\u7684\uff0c\u589e\u52a0\u5bf9\u8282\u70b9\u7684 \u5206\u88c2 \u64cd\u4f5c SplitChild \uff0c\u7528\u4e8e\u5206\u88c2\u67d0\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u5206\u88c2\u7684\u8fc7\u7a0b\uff0c\u6ce8\u610f\u5230\u5206\u5272\u70b9\u4e0a\u79fb\u7684\u8fc7\u7a0b\u5bfc\u81f4B\u6811\u5411\u4e0a\u751f\u957f\uff0c\u800c\u4e0d\u50cfBST\u5355\u7eaf\u5411\u4e0b\u751f\u957f\u3002 \u5982\u4e0a\u8ba8\u8bba\uff0c\u5f53\u589e\u52a0\u4e00\u4e2a\u65b0key\uff0c\u6211\u4eec\u4ece\u6839\u8282\u70b9\u8d70\u5230\u53f6\u8282\u70b9\uff0c\u6bcf\u5f53\u4e0b\u6c89\u5230\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u5148\u68c0\u67e5\u76ee\u6807\u8282\u70b9\u662f\u5426\u5df2\u6ee1\uff0c\u5982\u679c\u5df2\u6ee1\u5219\u6267\u884c \u5206\u88c2 \u3000\u64cd\u4f5c\u3002 \u63d2\u5165\u7b97\u6cd5 \uff1a \u521d\u59cb\u5316 x \u4e3a\u6839 \u53ea\u8981 x \u4e0d\u662f\u53f6\u8282\u70b9\uff0c\u505a\u4e0b\u8ff0\u64cd\u4f5c\uff1a a) \u627e\u5230 x \u4e0b\u4e00\u5c42\u7684\u76ee\u6807\u4e0b\u6c89\u8282\u70b9 y b) \u5982\u679c y \u672a\u6ee1\uff0c\u5219\u5c06 x \u6307\u5411 y c) \u5982\u679c y \u5df2\u6ee1\uff0c\u5219\u5c06\u5176\u5206\u88c2\u5e76\u5c06 x \u6307\u5411 y \u7684\u5206\u88c2\u7ed3\u679c\u4e4b\u4e00\u3002\u6b64\u65f6\u4f5c\u4e3a\u5206\u754c\u70b9\u7684key\u88ab\u79fb\u5230 x \u7b2c2\u6b65\u7684\u5faa\u73af\u5f53 x \u4e3a\u53f6\u8282\u70b9\u7684\u65f6\u5019\u7ed3\u675f\u3002\u6b64\u65f6\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5bf9\u6240\u6709\u6ee1\u5458\u8282\u70b9\u8fdb\u884c\u5206\u88c2\uff0c x \u5fc5\u7136\u6709\u81f3\u5c11 1 1 \u4e2akey\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u6545\u5c06 k \u63d2\u5165 x \u5373\u53ef\u3002 \u4e0b\u56fe\u8868\u793a\u4e00\u68f5B\u6811\u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u5176\u4e2d\u6700\u5c0f\u8282\u70b9\u5ea6\u6570 t=3 t=3 \uff0c\u5e8f\u5217 [10, 20, 30, 40, 50, 60, 70, 80, 90] [10, 20, 30, 40, 50, 60, 70, 80, 90] \u987a\u6b21\u63d2\u5165\u4e00\u68f5\u521d\u59cb\u4e3a\u7a7a\u7684B\u6811\u3002 \u56fe\u89e3B\u6811\u7684\u6784\u9020 \u5f00\u59cb\u65f6root\u4e3a\u7a7a\uff0c\u6211\u4eec\u5148\u63d2\u5165 10 10 \uff1a \u73b0\u5728\u63d2\u5165 20, 30, 40, 50 20, 30, 40, 50 \uff0c\u76f4\u5230\u6839\u8282\u70b9\u6210\u5458\u6570\u91cf\u5230\u8fbe\u4e0a\u9650 2 \\times 3 - 1 = 5 2 \\times 3 - 1 = 5 \u4e4b\u524d\uff0c\u65b0\u5143\u7d20\u90fd\u88ab\u63d2\u5165\u6839\u8282\u70b9\uff1a \u73b0\u5728\u63d2\u5165 60 60 \uff0c\u6709\u6839\u8282\u70b9\u5df2\u6ee1\uff0c\u6211\u4eec\u9996\u5148\u5c06\u5176\u5206\u88c2\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u5c06 60 60 \u63d2\u5165\u9002\u5f53\u7684\u8282\u70b9\uff1a \u73b0\u5728\u63d2\u5165 70, 80 70, 80 \uff0c\u671f\u95f4\u4e0d\u4f1a\u53d1\u751f\u5206\u88c2\uff1a \u73b0\u5728\u63d2\u5165 90 90 \uff0c\u8fd9\u6b21\u63d2\u5165\u4f1a\u5bfc\u81f4\u4e00\u6b21\u5206\u88c2\uff0c\u4f4d\u4e8e\u5206\u754c\u70b9\u7684key\u5c06\u88ab\u4e0a\u5347\u5230\u7236\u8282\u70b9\uff1a \u5220\u9664 \u76f8\u6bd4\u63d2\u5165\u64cd\u4f5c\uff0c\u5220\u9664\u64cd\u4f5c\u66f4\u590d\u6742\uff0c\u539f\u56e0\u5728\u4e8e\u5f85\u5220\u9664\u7684key\u53ef\u80fd\u4f4d\u4e8e\u5305\u542b\u975e\u53f6\u8282\u70b9\u7684\u4efb\u610f\u8282\u70b9\uff0c\u800c\u6bcf\u5f53\u5220\u9664\u4e00\u4e2a\u4f4d\u4e8e\u975e\u53f6\u8282\u70b9\u7684key\u65f6\uff0c\u6211\u4eec\u90fd\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5176\u5b69\u5b50\u8282\u70b9\u3002 \u5728\u63d2\u5165\u64cd\u4f5c\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u6301B\u6811\u7684\u7279\u6027\uff0c\u5f53\u63d2\u5165key\u5bfc\u81f4\u8282\u70b9 \u8fc7\u5927 \u65f6\u6211\u4eec\u6267\u884c\u5206\u88c2\u64cd\u4f5c\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5220\u9664\u64cd\u4f5c\u4e0d\u4f1a\u5bfc\u81f4\u8282\u70b9 \u8fc7\u5c0f \uff08\u552f\u4e00\u4f8b\u5916\uff1a\u6839\u8282\u70b9\u5141\u8bb8\u5305\u542b\u5c11\u4e8e t - 1 t - 1 \u4e2akey\uff09\u3002\u6b63\u5982\u5728\u63d2\u5165\u64cd\u4f5c\u4e2d\u9700\u8981\u5bf9\u5305\u542b k \u7684\u8282\u70b9\u4e2d\u9971\u548c\u7684\u505a\u7279\u6b8a\u5904\u7406\uff0c\u5220\u9664\u64cd\u4f5c\u4e2d\u4e5f\u9700\u8981\u5bf9\u5305\u542b k \u7684\u8282\u70b9\uff08\u6839\u8282\u70b9\u9664\u5916\uff09\u4e2d\u6210\u5458\u6570\u91cf\u8fbe\u5230\u6700\u4f4e\u9650\u5236\u7684\u505a\u7279\u6b8a\u5904\u7406\u3002 \u5220\u9664\u8fc7\u7a0b\u4ece x \u5305\u542b k \u7684\u5b50\u6811\u4e2d\u5220\u9664 k \u3002\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u4fdd\u8bc1\u6bcf\u6b21\u5728\u8282\u70b9 x \u4e0a\u9012\u5f52\u8c03\u7528\u8be5\u7b97\u6cd5\uff0c x \u4e2dkey\u7684\u6570\u91cf\u90fd\u4e0d\u5c11\u4e8e\u6700\u5c0f\u5ea6\u6570 t t \u3002\u6ce8\u610f\u5230\u8fd9\u4e2a\u9650\u5236\u9700\u8981\u7ef4\u62a4\u6bd4\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u5ea6\u6570\u591a 1 1 \u4e2akey\uff0c\u6240\u4ee5\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e00\u4e2akey\u9700\u8981\u5728\u9012\u5f52\u4e0b\u6c89\u4e4b\u524d\u79fb\u52a8\u5230\u90a3\u4e2a\u5b69\u5b50\u8282\u70b9\u3001\u8fd9\u4e2a \u66f4\u5f3a\u7684\u6761\u4ef6 \u5141\u8bb8\u6211\u4eec\u5728B\u6811\u4e2d\u5220\u9664key\u7684\u8fc7\u7a0b\u4e2d\u4ec5\u6cbf\u7740\u6811\u679d\u5411\u4e0b\u79fb\u52a8\u4e00\u8d9f\u800c\u4e0d\u7528\u56de\u6eaf\uff08\u53ea\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u6211\u4eec\u4e4b\u540e\u4f1a\u89e3\u91ca\uff09\u3002\u5728\u4e0b\u8ff0\u5220\u9664\u7b97\u6cd5\u4e2d\uff0c\u5f53\u6839\u8282\u70b9 x \u4e00\u65e6\u4e3a\u7a7a\uff08\u8fd9\u79cd\u60c5\u51b5\u4f1a\u53d1\u751f\u57282c\u548c3b\u4e2d\uff09\uff0c\u6211\u4eec\u5c31\u5220\u9664 x \uff0c\u5e76\u8ba9 x \u552f\u4e00\u7684\u5b50\u8282\u70b9\u6210\u4e3a\u65b0\u7684\u6839\u8282\u70b9\u3002 \u5220\u9664\u7b97\u6cd5 \uff1a \u82e5\u952e k \u5728\u8282\u70b9 x \u4e2d\u4e14 x \u662f\u53f6\u8282\u70b9\uff0c\u5c06 k \u4ece x \u4e2d\u5220\u9664\u5373\u53ef \u82e5\u952e k \u5728\u8282\u70b9 x \u4e2d\u4e14 x \u662f\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\uff1a a) \u82e5\u533a\u95f4\u8986\u76d6 k \u7684\u5b50\u8282\u70b9 y \u6240\u5305\u542bkey\u7684\u6570\u91cf\u6700\u5c11\u4e0d\u5c11\u4e8e t t \uff0c\u627e\u5230\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u4e2d k \u7684\u524d\u9a71 k0 \u3002\u9012\u5f52\u5730\u5220\u9664 k0 \uff0c\u5e76\u5c06 x \u4e2d\u7684 k \u6362\u6210 k0 b) \u82e5 y \u6240\u5305\u542b\u7684key\u7684\u6570\u91cf\u5c0f\u4e8e t t \uff0c\u5bf9\u79f0\u5730\uff0c\u68c0\u67e5 x \u4e2d\u7d27\u968f k \u7684\u540e\u7ee7\u8282\u70b9 z \uff0c\u82e5 z \u81f3\u5c11\u5177\u6709 t \u4e2a\u952e\uff0c\u5219\u5728\u4ee5 z \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u627e\u5230 k \u7684\u540e\u7ee7 k0 \u3002\u9012\u5f52\u5220\u9664 k0 \uff0c\u7136\u540e\u5c06 x \u4e2d\u7684 k \u66ff\u6362\u6210 k0 \uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u8d9f\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\u627e\u5230\u5e76\u5220\u9664 k0 \uff09 c) \u5426\u5219\uff0c\u82e5 y \u548c z \u7684\u952e\u6570\u90fd\u662f t - 1 t - 1 \uff0c\u5c06 k \u548c z \u4e2d\u7684\u6240\u6709\u952e\u5408\u5e76\u5230 y \uff0c\u5982\u6b64 x \u540c\u65f6\u4e22\u6389 k \u548c\u6307\u5411 z \u7684\u6307\u9488\uff0c y \u6b64\u65f6\u952e\u6570\u4e3a 2t - 1 2t - 1 \u3002\u63a5\u7740\u91ca\u653e z \u5e76\u4ece y \u4e2d\u9012\u5f52\u5730\u5220\u9664 k \u3002 \u82e5\u952e k \u4e0d\u5728\u5185\u90e8\u8282\u70b9 x \u4e2d\uff0c\u5219\u786e\u5b9a\u4e00\u5b9a\u5305\u542b k \u7684\u9002\u5f53\u5b50\u6811\u7684\u6839 x.c(i) \u3002\u5982\u679c x.c(i) \u4ec5\u5177\u6709 t - 1 t - 1 \u4e2a\u952e\uff0c\u5219\u6839\u636e\u9700\u8981\u6267\u884c\u6b65\u9aa4 3a \u6216 3b \uff0c\u4ee5\u786e\u4fdd\u4e0b\u964d\u5230\u5305\u542b\u81f3\u5c11 t t \u4e2a\u952e\u7684\u8282\u70b9\u3002\u7136\u540e\u901a\u8fc7\u9012\u5f52 x \u7684\u9002\u5f53\u5b69\u5b50\u6765\u5b8c\u6210\uff1a a) \u82e5 x.c(i) \u4ec5\u5177\u6709 t - 1 t - 1 \u4e2a\u952e\uff0c \u4f46\u6709\u4e00\u4e2a\u952e\u6570\u81f3\u5c11\u4e3a t \u7684\u76f4\u63a5\u540c\u7ea7\uff0c\u4ece x \u4e2d\u4e0b\u79fb\u67d0\u4e2a\u952e\u5230 x.c(i) \uff0c\u518d\u4ece x.c(i) \u7684\u76f4\u63a5\u5de6\u6216\u53f3\u540c\u7ea7\u4e2d\u4e0a\u79fb\u4e00\u4e2a\u952e\u5230 x \uff0c\u7136\u540e\u5c06\u9002\u5f53\u7684\u5b50\u8282\u70b9\u6307\u9488\u4ece x.c(i) \u7684\u76f4\u63a5\u540c\u7ea7\u6307\u5411\u5176\u672c\u8eab\u3002 b) \u82e5 x.c(i) \u4e0e\u5176\u4e24\u4e2a\u76f4\u63a5\u540c\u7ea7\u7684\u952e\u6570\u90fd\u662f t - 1 t - 1 \uff0c\u5c06 x.c(i) \u4e0e\u5176\u4e2d\u4e00\u4e2a\u5408\u5e76\uff0c\u671f\u95f4\u5c06 x \u4e2d\u7684\u4e00\u4e2a\u952e\u4e0b\u79fb\u5230\u5408\u5e76\u8282\u70b9\uff0c\u4f5c\u4e3a\u5176\u5206\u754c\u952e\u3002 \u7531\u4e8eB\u6811\u4e2d\u7684\u5927\u591a\u6570\u952e\u90fd\u5728\u53f6\u5b50\u4e2d\uff0c\u56e0\u6b64\u5220\u9664\u64cd\u4f5c\u6700\u5e38\u7528\u4e8e\u4ece\u53f6\u5b50\u4e2d\u5220\u9664\u952e\uff0c\u6b64\u65f6\u201c\u9012\u5f52\u201d\u5220\u9664\u53ea\u9700\u4e00\u8d9f\u4e0b\u884c\uff0c\u800c\u65e0\u9700\u56de\u6eaf\u5904\u7406\u3002\u5bf9\u4e8e\u4ece\u5185\u90e8\u8282\u70b9\u5220\u9664\u4e00\u4e2a\u952e\u7684\u60c5\u51b5\uff0c\u5728\u7b97\u6cd5\u4e0b\u6c89\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5fc5\u987b\u8fd4\u56de\u5220\u9664\u952e\u7684\u8282\u70b9\uff0c\u624d\u80fd\u7528\u5176\u524d\u9a71\u540e\u8005\u540e\u7ee7\u66ff\u6362\u952e\uff082a\u548c2b\u7684\u60c5\u51b5\uff09 \u56fe\u89e3B\u6811\u7684\u5220\u9664\u64cd\u4f5c C++\u5b9e\u73b0 /* The deletion function has been compartmentalized into 8 functions for ease of understanding and clarity The following functions are exclusive for deletion In class BTreeNode: 1) Remove 2) RemoveFromLeaf 3) RemoveFromNonLeaf 4) GetPred 5) GetSucc 6) BorrowFromPrev 7) BorrowFromNext 8) Merge 9) FindKey In class BTree: 1) Remove The removal of a key from a B-Tree is a fairly complicated process. The program handles all the 6 different cases that might arise while removing a key. Testing: The code has been tested using the B-Tree provided in the CLRS book( included in the main function ) along with other cases. Reference: CLRS3 - Chapter 18 - (499-502) It is advised to read the material in CLRS before taking a look at the code. */ #include <iostream> using namespace std ; // A BTree node class BTreeNode { public : BTreeNode ( int _t , bool _leaf ); // Constructor // A function to traverse all nodes in a subtree rooted with this node void Traverse (); // A function to search a key in subtree rooted with this node. BTreeNode * Search ( int k ); // returns NULL if k is not present. // A function that returns the index of the first key that is greater // or equal to k int FindKey ( int k ); // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void InsertNonFull ( int k ); // A utility function to split the child y of this node. i is index // of y in child array C[]. The Child y must be full when this // function is called void SplitChild ( int i , BTreeNode * y ); // A wrapper function to remove the key k in subtree rooted with // this node. void Remove ( int k ); // A function to remove the key present in idx-th position in // this node which is a leaf void RemoveFromLeaf ( int idx ); // A function to remove the key present in idx-th position in // this node which is a non-leaf node void RemoveFromNonLeaf ( int idx ); // A function to get the predecessor of the key- where the key // is present in the idx-th position in the node int GetPred ( int idx ); // A function to get the successor of the key- where the key // is present in the idx-th position in the node int GetSucc ( int idx ); // A function to fill up the child node present in the idx-th // position in the C[] array if that child has less than t-1 keys void Fill ( int idx ); // A function to borrow a key from the C[idx-1]-th node and place // it in C[idx]th node void BorrowFromPrev ( int idx ); // A function to borrow a key from the C[idx+1]-th node and place it // in C[idx]th node void BorrowFromNext ( int idx ); // A function to merge idx-th child of the node with (idx+1)th child of // the node void Merge ( int idx ); // Make BTree friend of this so that we can access private members of // this class in BTree functions friend class BTree ; private : int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false }; class BTree { public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } void Traverse () { if ( root != NULL ) root -> Traverse (); } // function to search a key in this tree BTreeNode * Search ( int k ) { return ( root == NULL ) ? NULL : root -> Search ( k ); } // The main function that inserts a new key in this B-Tree void Insert ( int k ); // The main function that removes a new key in thie B-Tree void Remove ( int k ); private : BTreeNode * root ; // Pointer to root node int t ; // Minimum degree }; BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t - 1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // A utility function that returns the index of the first key that is // greater than or equal to k int BTreeNode :: FindKey ( int k ) { int idx = 0 ; while ( idx < n && keys [ idx ] < k ) ++ idx ; return idx ; } // A function to remove the key k from the sub-tree rooted with this node void BTreeNode :: Remove ( int k ) { int idx = FindKey ( k ); // The key to be removed is present in this node if ( idx < n && keys [ idx ] == k ) { // If the node is a leaf node - RemoveFromLeaf is called // Otherwise, RemoveFromNonLeaf function is called if ( leaf ) RemoveFromLeaf ( idx ); else RemoveFromNonLeaf ( idx ); } else { // If this node is a leaf node, then the key is not present in tree if ( leaf ) { cout << \"The key \" << k << \" is does not exist in the tree \\n \" ; return ; } // The key to be removed is present in the sub-tree rooted with this // node The flag indicates whether the key is present in the sub-tree // rooted with the last child of this node bool flag = (( idx == n ) ? true : false ); // If the child where the key is supposed to exist has less that t keys, // we fill that child if ( C [ idx ] -> n < t ) Fill ( idx ); // If the last child has been merged, it must have merged with the // previous child and so we recurse on the (idx-1)th child. Else, we // recurse on the (idx)th child which now has atleast t keys if ( flag && idx > n ) C [ idx - 1 ] -> Remove ( k ); else C [ idx ] -> Remove ( k ); } return ; } // A function to remove the idx-th key from this node - which is a leaf node void BTreeNode :: RemoveFromLeaf ( int idx ) { // Move all the keys after the idx-th pos one place backward for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i - 1 ] = keys [ i ]; // Reduce the count of keys n -- ; return ; } // A function to remove the idx-th key from this node - which is a non-leaf node void BTreeNode :: RemoveFromNonLeaf ( int idx ) { int k = keys [ idx ]; // If the child that precedes k (C[idx]) has atleast t keys, // find the predecessor 'pred' of k in the subtree rooted at // C[idx]. Replace k by pred. Recursively delete pred // in C[idx] if ( C [ idx ] -> n >= t ) { int pred = GetPred ( idx ); keys [ idx ] = pred ; C [ idx ] -> Remove ( pred ); } // If the child C[idx] has less that t keys, examine C[idx+1]. // If C[idx+1] has atleast t keys, find the successor 'succ' of k in // the subtree rooted at C[idx+1] // Replace k by succ // Recursively delete succ in C[idx+1] else if ( C [ idx + 1 ] -> n >= t ) { int succ = GetSucc ( idx ); keys [ idx ] = succ ; C [ idx + 1 ] -> Remove ( succ ); } // If both C[idx] and C[idx+1] has less that t keys,merge k and all of // C[idx+1] into C[idx] Now C[idx] contains 2t-1 keys Free C[idx+1] and // recursively delete k from C[idx] else { Merge ( idx ); C [ idx ] -> Remove ( k ); } return ; } // A function to get predecessor of keys[idx] int BTreeNode :: GetPred ( int idx ) { // Keep moving to the right most node until we reach a leaf BTreeNode * cur = C [ idx ]; while ( ! cur -> leaf ) cur = cur -> C [ cur -> n ]; // Return the last key of the leaf return cur -> keys [ cur -> n - 1 ]; } int BTreeNode :: GetSucc ( int idx ) { // Keep moving the left most node starting from C[idx+1] until we reach a // leaf BTreeNode * cur = C [ idx + 1 ]; while ( ! cur -> leaf ) cur = cur -> C [ 0 ]; // Return the first key of the leaf return cur -> keys [ 0 ]; } // A function to fill child C[idx] which has less than t-1 keys void BTreeNode :: Fill ( int idx ) { // If the previous child(C[idx-1]) has more than t-1 keys, borrow a key // from that child if ( idx != 0 && C [ idx - 1 ] -> n >= t ) BorrowFromPrev ( idx ); // If the next child(C[idx+1]) has more than t-1 keys, borrow a key // from that child else if ( idx != n && C [ idx + 1 ] -> n >= t ) BorrowFromNext ( idx ); // Merge C[idx] with its sibling // If C[idx] is the last child, merge it with with its previous sibling // Otherwise merge it with its next sibling else { if ( idx != n ) Merge ( idx ); else Merge ( idx - 1 ); } return ; } // A function to borrow a key from C[idx-1] and insert it // into C[idx] void BTreeNode :: BorrowFromPrev ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx - 1 ]; // The last key from C[idx-1] goes up to the parent and key[idx-1] // from parent is inserted as the first key in C[idx]. Thus, the loses // sibling one key and child gains one key // Moving all key in C[idx] one step ahead for ( int i = child -> n - 1 ; i >= 0 ; -- i ) child -> keys [ i + 1 ] = child -> keys [ i ]; // If C[idx] is not a leaf, move all its child pointers one step ahead if ( ! child -> leaf ) { for ( int i = child -> n ; i >= 0 ; -- i ) child -> C [ i + 1 ] = child -> C [ i ]; } // Setting child's first key equal to keys[idx-1] from the current node child -> keys [ 0 ] = keys [ idx - 1 ]; // Moving sibling's last child as C[idx]'s first child if ( ! child -> leaf ) child -> C [ 0 ] = sibling -> C [ sibling -> n ]; // Moving the key from the sibling to the parent // This reduces the number of keys in the sibling keys [ idx - 1 ] = sibling -> keys [ sibling -> n - 1 ]; child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to borrow a key from the C[idx+1] and place // it in C[idx] void BTreeNode :: BorrowFromNext ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // keys[idx] is inserted as the last key in C[idx] child -> keys [( child -> n )] = keys [ idx ]; // Sibling's first child is inserted as the last child // into C[idx] if ( ! ( child -> leaf )) child -> C [( child -> n ) + 1 ] = sibling -> C [ 0 ]; // The first key from sibling is inserted into keys[idx] keys [ idx ] = sibling -> keys [ 0 ]; // Moving all keys in sibling one step behind for ( int i = 1 ; i < sibling -> n ; ++ i ) sibling -> keys [ i - 1 ] = sibling -> keys [ i ]; // Moving the child pointers one step behind if ( ! sibling -> leaf ) { for ( int i = 1 ; i <= sibling -> n ; ++ i ) sibling -> C [ i - 1 ] = sibling -> C [ i ]; } // Increasing and decreasing the key count of C[idx] and C[idx+1] // respectively child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to merge C[idx] with C[idx+1] // C[idx+1] is freed after merging void BTreeNode :: Merge ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // Pulling a key from the current node and inserting it into (t-1)th // position of C[idx] child -> keys [ t - 1 ] = keys [ idx ]; // Copying the keys from C[idx+1] to C[idx] at the end for ( int i = 0 ; i < sibling -> n ; ++ i ) child -> keys [ i + t ] = sibling -> keys [ i ]; // Copying the child pointers from C[idx+1] to C[idx] if ( ! child -> leaf ) { for ( int i = 0 ; i <= sibling -> n ; ++ i ) child -> C [ i + t ] = sibling -> C [ i ]; } // Moving all keys after idx in the current node one step before - // to fill the gap created by moving keys[idx] to C[idx] for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i - 1 ] = keys [ i ]; // Moving the child pointers after (idx+1) in the current node one // step before for ( int i = idx + 2 ; i <= n ; ++ i ) C [ i - 1 ] = C [ i ]; // Updating the key count of child and the current node child -> n += sibling -> n + 1 ; n -- ; // Freeing the memory occupied by sibling delete ( sibling ); return ; } // The main function that inserts a new key in this B-Tree void BTree :: Insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t - 1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> SplitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> InsertNonFull ( k ); // Change root root = s ; } else // If root is not full, call InsertNonFull for root root -> InsertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: InsertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n - 1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t - 1 ) { // If the child is full, then split it SplitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> InsertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: SplitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t - 1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find location of // new key and move all greater keys one space ahead for ( int j = n - 1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t - 1 ]; // Increment count of keys in this node n = n + 1 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: Traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> Traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> Traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: Search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> Search ( k ); } void BTree :: Remove ( int k ) { if ( ! root ) { cout << \"The tree is empty \\n \" ; return ; } // Call the remove function for root root -> Remove ( k ); // If the root node has 0 keys, make its first child as the new root // if it has a child, otherwise set root as NULL if ( root -> n == 0 ) { BTreeNode * tmp = root ; if ( root -> leaf ) root = NULL ; else root = root -> C [ 0 ]; // Free the old root delete tmp ; } return ; } \u6d4b\u8bd5\u4ee3\u7801\uff1a // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . Insert ( 1 ); t . Insert ( 3 ); t . Insert ( 7 ); t . Insert ( 10 ); t . Insert ( 11 ); t . Insert ( 13 ); t . Insert ( 14 ); t . Insert ( 15 ); t . Insert ( 18 ); t . Insert ( 16 ); t . Insert ( 19 ); t . Insert ( 24 ); t . Insert ( 25 ); t . Insert ( 26 ); t . Insert ( 21 ); t . Insert ( 4 ); t . Insert ( 5 ); t . Insert ( 20 ); t . Insert ( 22 ); t . Insert ( 2 ); t . Insert ( 17 ); t . Insert ( 12 ); t . Insert ( 6 ); cout << \"Traversal of tree constructed is \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 6 ); cout << \"Traversal of tree after removing 6 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 13 ); cout << \"Traversal of tree after removing 13 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 7 ); cout << \"Traversal of tree after removing 7 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 4 ); cout << \"Traversal of tree after removing 4 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 2 ); cout << \"Traversal of tree after removing 2 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 16 ); cout << \"Traversal of tree after removing 16 \\n \" ; t . Traverse (); cout << endl ; return 0 ; } \u8f93\u51fa\uff1a Traversal of tree constructed is 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 6 1 2 3 4 5 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 13 1 2 3 4 5 7 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 7 1 2 3 4 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 4 1 2 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 2 1 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 16 1 3 5 10 11 12 14 15 17 18 19 20 21 22 24 25 26","title":"B\u6811"},{"location":"competitive_programming/data_structure/btree/#b","text":"B\u6811\u662f\u4e00\u4e2a\u81ea\u5e73\u8861\u641c\u7d22\u6811\u3002 \u672c\u9875\u5185\u5bb9\u53c2\u8003\u81eaGeeksForGeeks","title":"B\u6811"},{"location":"competitive_programming/data_structure/btree/#_1","text":"\u8bbe\u8ba1\u4e00\u79cd\u975e\u5185\u5b58\u6570\u636e\u7ed3\u6784\u7528\u4e8e\u7ec4\u7ec7\u786c\u76d8\u4e2d\u7684\u5927\u91cf\u6570\u636e\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/btree/#_2","text":"\u5927\u591a\u6570\u5176\u4ed6\u7684\u81ea\u5e73\u8861\u641c\u7d22\u6811\uff08\u5982AVL\uff0c\u7ea2\u9ed1\u6811\uff09\u90fd\u5047\u8bbe\u5c06\u6240\u6709\u5185\u5bb9\u653e\u5728 \u4e3b\u5b58 \u4e2d\u3002B\u6811\u7684\u4f5c\u7528\u662f\u7ec4\u7ec7\u89c4\u6a21\u5927 \u65e0\u6cd5\u5168\u90e8\u653e\u5165\u4e3b\u5b58 \u7684\u6570\u636e\u3002\u5f53key\u7684\u6570\u91cf\u5f88\u591a\u65f6\uff0c\u6570\u636e\u4ece\u786c\u76d8\u4e2d\u662f\u4ee5 block \u7684\u5f62\u5f0f\u88ab\u8bfb\u53d6\u3002B\u6811\u7684\u601d\u60f3\u662f\u5c3d\u91cf \u51cf\u5c11\u786c\u76d8\u8bfb\u53d6\u7684\u6b21\u6570 \u3002\u5927\u591a\u6570\u6811\u7684\u64cd\u4f5c\uff08\u641c\u7d22\u3001\u63d2\u5165\u3001\u5220\u9664\u3001\u6700\u5927\u3001\u6700\u5c0f\u7b49\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(h) O(h) \uff0c\u5176\u4e2d h h \u662f\u6811\u7684\u9ad8\u5ea6\u3002B\u6811\u662f\u4e00\u4e2a\u5f88 \u80d6 \u7684\u6811\u7684\uff0c\u901a\u8fc7\u5c3d\u53ef\u80fd\u589e\u5927\u8282\u70b9\u7684\u5ea6\u6570\u6765\u6700\u5c0f\u5316B\u6811\u7684\u9ad8\u5ea6\u3002\u4e00\u822c\u5730\uff0cB\u6811 \u8282\u70b9\u7684\u5ea6\u6570\u4fdd\u6301\u4e0e\u78c1\u76d8block\u5927\u5c0f\u76f8\u540c\u7684\u6570\u503c \u3002\u7531\u4e8eB\u6811\u7684\u9ad8\u5ea6\u5f88\u5c0f\uff0c\u8bfb\u53d6\u78c1\u76d8\u7684\u6b21\u6570\u76f8\u6bd4\u5176\u4ed6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u5982AVL\u3001\u7ea2\u9ed1\u6811\uff09\u6709\u4e86\u5927\u5e45\u7f29\u5c0f\u3002","title":"\u601d\u60f3"},{"location":"competitive_programming/data_structure/btree/#_3","text":"\u6240\u6709\u53f6\u8282\u70b9\u5728\u540c\u4e00\u5c42\u7ea7 \u4e00\u4e2aB\u6811\u7684\u7ed3\u6784\u7531\u6700\u5c0f\u5ea6\u6570 t t \u786e\u5b9a\uff0c t t \u7684\u503c\u7531\u78c1\u76d8block\u5927\u5c0f\u51b3\u5b9a \u9664\u6839\u8282\u70b9\u5916\u7684\u6240\u6709\u8282\u70b9\u6700\u5c11\u5305\u542b t t \u4e2akey\uff0c\u6839\u8282\u70b9\u53ef\u80fd\u6700\u5c11\u4ec5\u5305\u542b 1 1 \u4e2akey \u6240\u6709\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\u6700\u5927\u5305\u542b 2t-1 2t-1 \u4e2akey \u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u7b49\u4e8e\u5176\u4e2d\u5305\u542b\u7684key\u7684\u6570\u91cf +1 +1 \u8282\u70b9\u4e2d\u7684key\u6309\u5347\u5e8f\u6392\u5217\uff0c k1 \u548c k2 \u4e4b\u95f4\u7684\u5b50\u8282\u70b9\u5305\u542b\u6240\u6709\u4f4d\u4e8e\u533a\u95f4 (k1, k2) (k1, k2) \u4e4b\u5185\u7684key \u4e0eBST\u4e0d\u540c\u7684\u662f\uff1aB\u6811\u5411\u4e0a\u751f\u957f\uff0cBST\u5411\u4e0b\u751f\u957f \u4e0eBST\u76f8\u540c\u7684\u662f\uff1a\u589e\u3001\u5220\u3001\u6539\u7684\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \u4e0b\u9762\u662f\u4e00\u4e2a t=3 t=3 \u7684B\u6811\u793a\u610f\u56fe\uff1a","title":"\u6027\u8d28"},{"location":"competitive_programming/data_structure/btree/#_4","text":"\u5bf9\u4e8eB\u6811\uff0c\u53ea\u8bfb\u64cd\u4f5c\u641c\u7d22\u548c\u904d\u5386\u7684\u64cd\u4f5c\u65b9\u6cd5\u662f\u663e\u7136\u7684\uff08\u4e0eBST\u7c7b\u4f3c\uff09\uff1a","title":"\u64cd\u4f5c"},{"location":"competitive_programming/data_structure/btree/#_5","text":"\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5730\u5411\u4e0b\u641c\u7d22\u3002\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u5305\u542b\u76ee\u6807key\uff0c\u5219\u641c\u7d22\u6210\u529f\uff0c\u5426\u5219\u9012\u5f52\u641c\u7d22\u5305\u542b\u76ee\u6807\u7684\u533a\u95f4\u5b50\u6811\u3002\u5f53\u641c\u7d22\u5230\u6708\u5b50\u8282\u70b9\u4e14\u4ecd\u4e0d\u5305\u542b\u76ee\u6807 key \uff0c\u5219\u641c\u7d22\u5931\u8d25\u3002","title":"\u641c\u7d22"},{"location":"competitive_programming/data_structure/btree/#_6","text":"\u4ece\u5de6\u5230\u53f3\u9012\u5f52\u626b\u63cf\u5b69\u5b50\u8282\u70b9\u3002\u6bcf\u4e24\u6b21\u5bf9\u5b69\u5b50\u8282\u70b9\u9012\u5f52\u626b\u63cf\u4e4b\u95f4\u626b\u63cf\u4e8c\u8005\u4f4d\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u8fb9\u754c key \u3002","title":"\u904d\u5386"},{"location":"competitive_programming/data_structure/btree/#_7","text":"\u63d2\u5165\u64cd\u4f5c\u7531\u4e8e\u9700\u8981\u6dfb\u52a0\u5143\u7d20\u5e76\u4fdd\u6301B\u6811\u672c\u8eab\u7684\u7ed3\u6784\uff0c\u505a\u6cd5\u4e0d\u90a3\u4e48\u663e\u7136\u3002 \u8bbe\u5f85\u63d2\u5165\u7684key\u4e3a k \u3002\u7c7b\u4f3cBST\uff0c\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u904d\u5386\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u5c06 k \u63d2\u5165\u8be5\u8282\u70b9\uff0c\u4f46\u9700\u8981\u4fdd\u8bc1\u8be5\u8282\u70b9\u6709\u8db3\u591f\u7684\u5bb9\u91cf\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u53f6\u8282\u70b9\u7684\u5bb9\u91cf\u603b\u662f\u591f\u7528\u7684\uff0c\u589e\u52a0\u5bf9\u8282\u70b9\u7684 \u5206\u88c2 \u64cd\u4f5c SplitChild \uff0c\u7528\u4e8e\u5206\u88c2\u67d0\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u5206\u88c2\u7684\u8fc7\u7a0b\uff0c\u6ce8\u610f\u5230\u5206\u5272\u70b9\u4e0a\u79fb\u7684\u8fc7\u7a0b\u5bfc\u81f4B\u6811\u5411\u4e0a\u751f\u957f\uff0c\u800c\u4e0d\u50cfBST\u5355\u7eaf\u5411\u4e0b\u751f\u957f\u3002 \u5982\u4e0a\u8ba8\u8bba\uff0c\u5f53\u589e\u52a0\u4e00\u4e2a\u65b0key\uff0c\u6211\u4eec\u4ece\u6839\u8282\u70b9\u8d70\u5230\u53f6\u8282\u70b9\uff0c\u6bcf\u5f53\u4e0b\u6c89\u5230\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u5148\u68c0\u67e5\u76ee\u6807\u8282\u70b9\u662f\u5426\u5df2\u6ee1\uff0c\u5982\u679c\u5df2\u6ee1\u5219\u6267\u884c \u5206\u88c2 \u3000\u64cd\u4f5c\u3002 \u63d2\u5165\u7b97\u6cd5 \uff1a \u521d\u59cb\u5316 x \u4e3a\u6839 \u53ea\u8981 x \u4e0d\u662f\u53f6\u8282\u70b9\uff0c\u505a\u4e0b\u8ff0\u64cd\u4f5c\uff1a a) \u627e\u5230 x \u4e0b\u4e00\u5c42\u7684\u76ee\u6807\u4e0b\u6c89\u8282\u70b9 y b) \u5982\u679c y \u672a\u6ee1\uff0c\u5219\u5c06 x \u6307\u5411 y c) \u5982\u679c y \u5df2\u6ee1\uff0c\u5219\u5c06\u5176\u5206\u88c2\u5e76\u5c06 x \u6307\u5411 y \u7684\u5206\u88c2\u7ed3\u679c\u4e4b\u4e00\u3002\u6b64\u65f6\u4f5c\u4e3a\u5206\u754c\u70b9\u7684key\u88ab\u79fb\u5230 x \u7b2c2\u6b65\u7684\u5faa\u73af\u5f53 x \u4e3a\u53f6\u8282\u70b9\u7684\u65f6\u5019\u7ed3\u675f\u3002\u6b64\u65f6\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5bf9\u6240\u6709\u6ee1\u5458\u8282\u70b9\u8fdb\u884c\u5206\u88c2\uff0c x \u5fc5\u7136\u6709\u81f3\u5c11 1 1 \u4e2akey\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u6545\u5c06 k \u63d2\u5165 x \u5373\u53ef\u3002 \u4e0b\u56fe\u8868\u793a\u4e00\u68f5B\u6811\u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u5176\u4e2d\u6700\u5c0f\u8282\u70b9\u5ea6\u6570 t=3 t=3 \uff0c\u5e8f\u5217 [10, 20, 30, 40, 50, 60, 70, 80, 90] [10, 20, 30, 40, 50, 60, 70, 80, 90] \u987a\u6b21\u63d2\u5165\u4e00\u68f5\u521d\u59cb\u4e3a\u7a7a\u7684B\u6811\u3002","title":"\u63d2\u5165"},{"location":"competitive_programming/data_structure/btree/#b_1","text":"\u5f00\u59cb\u65f6root\u4e3a\u7a7a\uff0c\u6211\u4eec\u5148\u63d2\u5165 10 10 \uff1a \u73b0\u5728\u63d2\u5165 20, 30, 40, 50 20, 30, 40, 50 \uff0c\u76f4\u5230\u6839\u8282\u70b9\u6210\u5458\u6570\u91cf\u5230\u8fbe\u4e0a\u9650 2 \\times 3 - 1 = 5 2 \\times 3 - 1 = 5 \u4e4b\u524d\uff0c\u65b0\u5143\u7d20\u90fd\u88ab\u63d2\u5165\u6839\u8282\u70b9\uff1a \u73b0\u5728\u63d2\u5165 60 60 \uff0c\u6709\u6839\u8282\u70b9\u5df2\u6ee1\uff0c\u6211\u4eec\u9996\u5148\u5c06\u5176\u5206\u88c2\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u5c06 60 60 \u63d2\u5165\u9002\u5f53\u7684\u8282\u70b9\uff1a \u73b0\u5728\u63d2\u5165 70, 80 70, 80 \uff0c\u671f\u95f4\u4e0d\u4f1a\u53d1\u751f\u5206\u88c2\uff1a \u73b0\u5728\u63d2\u5165 90 90 \uff0c\u8fd9\u6b21\u63d2\u5165\u4f1a\u5bfc\u81f4\u4e00\u6b21\u5206\u88c2\uff0c\u4f4d\u4e8e\u5206\u754c\u70b9\u7684key\u5c06\u88ab\u4e0a\u5347\u5230\u7236\u8282\u70b9\uff1a","title":"\u56fe\u89e3B\u6811\u7684\u6784\u9020"},{"location":"competitive_programming/data_structure/btree/#_8","text":"\u76f8\u6bd4\u63d2\u5165\u64cd\u4f5c\uff0c\u5220\u9664\u64cd\u4f5c\u66f4\u590d\u6742\uff0c\u539f\u56e0\u5728\u4e8e\u5f85\u5220\u9664\u7684key\u53ef\u80fd\u4f4d\u4e8e\u5305\u542b\u975e\u53f6\u8282\u70b9\u7684\u4efb\u610f\u8282\u70b9\uff0c\u800c\u6bcf\u5f53\u5220\u9664\u4e00\u4e2a\u4f4d\u4e8e\u975e\u53f6\u8282\u70b9\u7684key\u65f6\uff0c\u6211\u4eec\u90fd\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5176\u5b69\u5b50\u8282\u70b9\u3002 \u5728\u63d2\u5165\u64cd\u4f5c\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u6301B\u6811\u7684\u7279\u6027\uff0c\u5f53\u63d2\u5165key\u5bfc\u81f4\u8282\u70b9 \u8fc7\u5927 \u65f6\u6211\u4eec\u6267\u884c\u5206\u88c2\u64cd\u4f5c\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5220\u9664\u64cd\u4f5c\u4e0d\u4f1a\u5bfc\u81f4\u8282\u70b9 \u8fc7\u5c0f \uff08\u552f\u4e00\u4f8b\u5916\uff1a\u6839\u8282\u70b9\u5141\u8bb8\u5305\u542b\u5c11\u4e8e t - 1 t - 1 \u4e2akey\uff09\u3002\u6b63\u5982\u5728\u63d2\u5165\u64cd\u4f5c\u4e2d\u9700\u8981\u5bf9\u5305\u542b k \u7684\u8282\u70b9\u4e2d\u9971\u548c\u7684\u505a\u7279\u6b8a\u5904\u7406\uff0c\u5220\u9664\u64cd\u4f5c\u4e2d\u4e5f\u9700\u8981\u5bf9\u5305\u542b k \u7684\u8282\u70b9\uff08\u6839\u8282\u70b9\u9664\u5916\uff09\u4e2d\u6210\u5458\u6570\u91cf\u8fbe\u5230\u6700\u4f4e\u9650\u5236\u7684\u505a\u7279\u6b8a\u5904\u7406\u3002 \u5220\u9664\u8fc7\u7a0b\u4ece x \u5305\u542b k \u7684\u5b50\u6811\u4e2d\u5220\u9664 k \u3002\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981\u4fdd\u8bc1\u6bcf\u6b21\u5728\u8282\u70b9 x \u4e0a\u9012\u5f52\u8c03\u7528\u8be5\u7b97\u6cd5\uff0c x \u4e2dkey\u7684\u6570\u91cf\u90fd\u4e0d\u5c11\u4e8e\u6700\u5c0f\u5ea6\u6570 t t \u3002\u6ce8\u610f\u5230\u8fd9\u4e2a\u9650\u5236\u9700\u8981\u7ef4\u62a4\u6bd4\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u5ea6\u6570\u591a 1 1 \u4e2akey\uff0c\u6240\u4ee5\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e00\u4e2akey\u9700\u8981\u5728\u9012\u5f52\u4e0b\u6c89\u4e4b\u524d\u79fb\u52a8\u5230\u90a3\u4e2a\u5b69\u5b50\u8282\u70b9\u3001\u8fd9\u4e2a \u66f4\u5f3a\u7684\u6761\u4ef6 \u5141\u8bb8\u6211\u4eec\u5728B\u6811\u4e2d\u5220\u9664key\u7684\u8fc7\u7a0b\u4e2d\u4ec5\u6cbf\u7740\u6811\u679d\u5411\u4e0b\u79fb\u52a8\u4e00\u8d9f\u800c\u4e0d\u7528\u56de\u6eaf\uff08\u53ea\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u6211\u4eec\u4e4b\u540e\u4f1a\u89e3\u91ca\uff09\u3002\u5728\u4e0b\u8ff0\u5220\u9664\u7b97\u6cd5\u4e2d\uff0c\u5f53\u6839\u8282\u70b9 x \u4e00\u65e6\u4e3a\u7a7a\uff08\u8fd9\u79cd\u60c5\u51b5\u4f1a\u53d1\u751f\u57282c\u548c3b\u4e2d\uff09\uff0c\u6211\u4eec\u5c31\u5220\u9664 x \uff0c\u5e76\u8ba9 x \u552f\u4e00\u7684\u5b50\u8282\u70b9\u6210\u4e3a\u65b0\u7684\u6839\u8282\u70b9\u3002 \u5220\u9664\u7b97\u6cd5 \uff1a \u82e5\u952e k \u5728\u8282\u70b9 x \u4e2d\u4e14 x \u662f\u53f6\u8282\u70b9\uff0c\u5c06 k \u4ece x \u4e2d\u5220\u9664\u5373\u53ef \u82e5\u952e k \u5728\u8282\u70b9 x \u4e2d\u4e14 x \u662f\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\uff1a a) \u82e5\u533a\u95f4\u8986\u76d6 k \u7684\u5b50\u8282\u70b9 y \u6240\u5305\u542bkey\u7684\u6570\u91cf\u6700\u5c11\u4e0d\u5c11\u4e8e t t \uff0c\u627e\u5230\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u4e2d k \u7684\u524d\u9a71 k0 \u3002\u9012\u5f52\u5730\u5220\u9664 k0 \uff0c\u5e76\u5c06 x \u4e2d\u7684 k \u6362\u6210 k0 b) \u82e5 y \u6240\u5305\u542b\u7684key\u7684\u6570\u91cf\u5c0f\u4e8e t t \uff0c\u5bf9\u79f0\u5730\uff0c\u68c0\u67e5 x \u4e2d\u7d27\u968f k \u7684\u540e\u7ee7\u8282\u70b9 z \uff0c\u82e5 z \u81f3\u5c11\u5177\u6709 t \u4e2a\u952e\uff0c\u5219\u5728\u4ee5 z \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u627e\u5230 k \u7684\u540e\u7ee7 k0 \u3002\u9012\u5f52\u5220\u9664 k0 \uff0c\u7136\u540e\u5c06 x \u4e2d\u7684 k \u66ff\u6362\u6210 k0 \uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u8d9f\u5411\u4e0b\u7684\u8fc7\u7a0b\u4e2d\u627e\u5230\u5e76\u5220\u9664 k0 \uff09 c) \u5426\u5219\uff0c\u82e5 y \u548c z \u7684\u952e\u6570\u90fd\u662f t - 1 t - 1 \uff0c\u5c06 k \u548c z \u4e2d\u7684\u6240\u6709\u952e\u5408\u5e76\u5230 y \uff0c\u5982\u6b64 x \u540c\u65f6\u4e22\u6389 k \u548c\u6307\u5411 z \u7684\u6307\u9488\uff0c y \u6b64\u65f6\u952e\u6570\u4e3a 2t - 1 2t - 1 \u3002\u63a5\u7740\u91ca\u653e z \u5e76\u4ece y \u4e2d\u9012\u5f52\u5730\u5220\u9664 k \u3002 \u82e5\u952e k \u4e0d\u5728\u5185\u90e8\u8282\u70b9 x \u4e2d\uff0c\u5219\u786e\u5b9a\u4e00\u5b9a\u5305\u542b k \u7684\u9002\u5f53\u5b50\u6811\u7684\u6839 x.c(i) \u3002\u5982\u679c x.c(i) \u4ec5\u5177\u6709 t - 1 t - 1 \u4e2a\u952e\uff0c\u5219\u6839\u636e\u9700\u8981\u6267\u884c\u6b65\u9aa4 3a \u6216 3b \uff0c\u4ee5\u786e\u4fdd\u4e0b\u964d\u5230\u5305\u542b\u81f3\u5c11 t t \u4e2a\u952e\u7684\u8282\u70b9\u3002\u7136\u540e\u901a\u8fc7\u9012\u5f52 x \u7684\u9002\u5f53\u5b69\u5b50\u6765\u5b8c\u6210\uff1a a) \u82e5 x.c(i) \u4ec5\u5177\u6709 t - 1 t - 1 \u4e2a\u952e\uff0c \u4f46\u6709\u4e00\u4e2a\u952e\u6570\u81f3\u5c11\u4e3a t \u7684\u76f4\u63a5\u540c\u7ea7\uff0c\u4ece x \u4e2d\u4e0b\u79fb\u67d0\u4e2a\u952e\u5230 x.c(i) \uff0c\u518d\u4ece x.c(i) \u7684\u76f4\u63a5\u5de6\u6216\u53f3\u540c\u7ea7\u4e2d\u4e0a\u79fb\u4e00\u4e2a\u952e\u5230 x \uff0c\u7136\u540e\u5c06\u9002\u5f53\u7684\u5b50\u8282\u70b9\u6307\u9488\u4ece x.c(i) \u7684\u76f4\u63a5\u540c\u7ea7\u6307\u5411\u5176\u672c\u8eab\u3002 b) \u82e5 x.c(i) \u4e0e\u5176\u4e24\u4e2a\u76f4\u63a5\u540c\u7ea7\u7684\u952e\u6570\u90fd\u662f t - 1 t - 1 \uff0c\u5c06 x.c(i) \u4e0e\u5176\u4e2d\u4e00\u4e2a\u5408\u5e76\uff0c\u671f\u95f4\u5c06 x \u4e2d\u7684\u4e00\u4e2a\u952e\u4e0b\u79fb\u5230\u5408\u5e76\u8282\u70b9\uff0c\u4f5c\u4e3a\u5176\u5206\u754c\u952e\u3002 \u7531\u4e8eB\u6811\u4e2d\u7684\u5927\u591a\u6570\u952e\u90fd\u5728\u53f6\u5b50\u4e2d\uff0c\u56e0\u6b64\u5220\u9664\u64cd\u4f5c\u6700\u5e38\u7528\u4e8e\u4ece\u53f6\u5b50\u4e2d\u5220\u9664\u952e\uff0c\u6b64\u65f6\u201c\u9012\u5f52\u201d\u5220\u9664\u53ea\u9700\u4e00\u8d9f\u4e0b\u884c\uff0c\u800c\u65e0\u9700\u56de\u6eaf\u5904\u7406\u3002\u5bf9\u4e8e\u4ece\u5185\u90e8\u8282\u70b9\u5220\u9664\u4e00\u4e2a\u952e\u7684\u60c5\u51b5\uff0c\u5728\u7b97\u6cd5\u4e0b\u6c89\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5fc5\u987b\u8fd4\u56de\u5220\u9664\u952e\u7684\u8282\u70b9\uff0c\u624d\u80fd\u7528\u5176\u524d\u9a71\u540e\u8005\u540e\u7ee7\u66ff\u6362\u952e\uff082a\u548c2b\u7684\u60c5\u51b5\uff09","title":"\u5220\u9664"},{"location":"competitive_programming/data_structure/btree/#b_2","text":"","title":"\u56fe\u89e3B\u6811\u7684\u5220\u9664\u64cd\u4f5c"},{"location":"competitive_programming/data_structure/btree/#c","text":"/* The deletion function has been compartmentalized into 8 functions for ease of understanding and clarity The following functions are exclusive for deletion In class BTreeNode: 1) Remove 2) RemoveFromLeaf 3) RemoveFromNonLeaf 4) GetPred 5) GetSucc 6) BorrowFromPrev 7) BorrowFromNext 8) Merge 9) FindKey In class BTree: 1) Remove The removal of a key from a B-Tree is a fairly complicated process. The program handles all the 6 different cases that might arise while removing a key. Testing: The code has been tested using the B-Tree provided in the CLRS book( included in the main function ) along with other cases. Reference: CLRS3 - Chapter 18 - (499-502) It is advised to read the material in CLRS before taking a look at the code. */ #include <iostream> using namespace std ; // A BTree node class BTreeNode { public : BTreeNode ( int _t , bool _leaf ); // Constructor // A function to traverse all nodes in a subtree rooted with this node void Traverse (); // A function to search a key in subtree rooted with this node. BTreeNode * Search ( int k ); // returns NULL if k is not present. // A function that returns the index of the first key that is greater // or equal to k int FindKey ( int k ); // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void InsertNonFull ( int k ); // A utility function to split the child y of this node. i is index // of y in child array C[]. The Child y must be full when this // function is called void SplitChild ( int i , BTreeNode * y ); // A wrapper function to remove the key k in subtree rooted with // this node. void Remove ( int k ); // A function to remove the key present in idx-th position in // this node which is a leaf void RemoveFromLeaf ( int idx ); // A function to remove the key present in idx-th position in // this node which is a non-leaf node void RemoveFromNonLeaf ( int idx ); // A function to get the predecessor of the key- where the key // is present in the idx-th position in the node int GetPred ( int idx ); // A function to get the successor of the key- where the key // is present in the idx-th position in the node int GetSucc ( int idx ); // A function to fill up the child node present in the idx-th // position in the C[] array if that child has less than t-1 keys void Fill ( int idx ); // A function to borrow a key from the C[idx-1]-th node and place // it in C[idx]th node void BorrowFromPrev ( int idx ); // A function to borrow a key from the C[idx+1]-th node and place it // in C[idx]th node void BorrowFromNext ( int idx ); // A function to merge idx-th child of the node with (idx+1)th child of // the node void Merge ( int idx ); // Make BTree friend of this so that we can access private members of // this class in BTree functions friend class BTree ; private : int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false }; class BTree { public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } void Traverse () { if ( root != NULL ) root -> Traverse (); } // function to search a key in this tree BTreeNode * Search ( int k ) { return ( root == NULL ) ? NULL : root -> Search ( k ); } // The main function that inserts a new key in this B-Tree void Insert ( int k ); // The main function that removes a new key in thie B-Tree void Remove ( int k ); private : BTreeNode * root ; // Pointer to root node int t ; // Minimum degree }; BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t - 1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // A utility function that returns the index of the first key that is // greater than or equal to k int BTreeNode :: FindKey ( int k ) { int idx = 0 ; while ( idx < n && keys [ idx ] < k ) ++ idx ; return idx ; } // A function to remove the key k from the sub-tree rooted with this node void BTreeNode :: Remove ( int k ) { int idx = FindKey ( k ); // The key to be removed is present in this node if ( idx < n && keys [ idx ] == k ) { // If the node is a leaf node - RemoveFromLeaf is called // Otherwise, RemoveFromNonLeaf function is called if ( leaf ) RemoveFromLeaf ( idx ); else RemoveFromNonLeaf ( idx ); } else { // If this node is a leaf node, then the key is not present in tree if ( leaf ) { cout << \"The key \" << k << \" is does not exist in the tree \\n \" ; return ; } // The key to be removed is present in the sub-tree rooted with this // node The flag indicates whether the key is present in the sub-tree // rooted with the last child of this node bool flag = (( idx == n ) ? true : false ); // If the child where the key is supposed to exist has less that t keys, // we fill that child if ( C [ idx ] -> n < t ) Fill ( idx ); // If the last child has been merged, it must have merged with the // previous child and so we recurse on the (idx-1)th child. Else, we // recurse on the (idx)th child which now has atleast t keys if ( flag && idx > n ) C [ idx - 1 ] -> Remove ( k ); else C [ idx ] -> Remove ( k ); } return ; } // A function to remove the idx-th key from this node - which is a leaf node void BTreeNode :: RemoveFromLeaf ( int idx ) { // Move all the keys after the idx-th pos one place backward for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i - 1 ] = keys [ i ]; // Reduce the count of keys n -- ; return ; } // A function to remove the idx-th key from this node - which is a non-leaf node void BTreeNode :: RemoveFromNonLeaf ( int idx ) { int k = keys [ idx ]; // If the child that precedes k (C[idx]) has atleast t keys, // find the predecessor 'pred' of k in the subtree rooted at // C[idx]. Replace k by pred. Recursively delete pred // in C[idx] if ( C [ idx ] -> n >= t ) { int pred = GetPred ( idx ); keys [ idx ] = pred ; C [ idx ] -> Remove ( pred ); } // If the child C[idx] has less that t keys, examine C[idx+1]. // If C[idx+1] has atleast t keys, find the successor 'succ' of k in // the subtree rooted at C[idx+1] // Replace k by succ // Recursively delete succ in C[idx+1] else if ( C [ idx + 1 ] -> n >= t ) { int succ = GetSucc ( idx ); keys [ idx ] = succ ; C [ idx + 1 ] -> Remove ( succ ); } // If both C[idx] and C[idx+1] has less that t keys,merge k and all of // C[idx+1] into C[idx] Now C[idx] contains 2t-1 keys Free C[idx+1] and // recursively delete k from C[idx] else { Merge ( idx ); C [ idx ] -> Remove ( k ); } return ; } // A function to get predecessor of keys[idx] int BTreeNode :: GetPred ( int idx ) { // Keep moving to the right most node until we reach a leaf BTreeNode * cur = C [ idx ]; while ( ! cur -> leaf ) cur = cur -> C [ cur -> n ]; // Return the last key of the leaf return cur -> keys [ cur -> n - 1 ]; } int BTreeNode :: GetSucc ( int idx ) { // Keep moving the left most node starting from C[idx+1] until we reach a // leaf BTreeNode * cur = C [ idx + 1 ]; while ( ! cur -> leaf ) cur = cur -> C [ 0 ]; // Return the first key of the leaf return cur -> keys [ 0 ]; } // A function to fill child C[idx] which has less than t-1 keys void BTreeNode :: Fill ( int idx ) { // If the previous child(C[idx-1]) has more than t-1 keys, borrow a key // from that child if ( idx != 0 && C [ idx - 1 ] -> n >= t ) BorrowFromPrev ( idx ); // If the next child(C[idx+1]) has more than t-1 keys, borrow a key // from that child else if ( idx != n && C [ idx + 1 ] -> n >= t ) BorrowFromNext ( idx ); // Merge C[idx] with its sibling // If C[idx] is the last child, merge it with with its previous sibling // Otherwise merge it with its next sibling else { if ( idx != n ) Merge ( idx ); else Merge ( idx - 1 ); } return ; } // A function to borrow a key from C[idx-1] and insert it // into C[idx] void BTreeNode :: BorrowFromPrev ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx - 1 ]; // The last key from C[idx-1] goes up to the parent and key[idx-1] // from parent is inserted as the first key in C[idx]. Thus, the loses // sibling one key and child gains one key // Moving all key in C[idx] one step ahead for ( int i = child -> n - 1 ; i >= 0 ; -- i ) child -> keys [ i + 1 ] = child -> keys [ i ]; // If C[idx] is not a leaf, move all its child pointers one step ahead if ( ! child -> leaf ) { for ( int i = child -> n ; i >= 0 ; -- i ) child -> C [ i + 1 ] = child -> C [ i ]; } // Setting child's first key equal to keys[idx-1] from the current node child -> keys [ 0 ] = keys [ idx - 1 ]; // Moving sibling's last child as C[idx]'s first child if ( ! child -> leaf ) child -> C [ 0 ] = sibling -> C [ sibling -> n ]; // Moving the key from the sibling to the parent // This reduces the number of keys in the sibling keys [ idx - 1 ] = sibling -> keys [ sibling -> n - 1 ]; child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to borrow a key from the C[idx+1] and place // it in C[idx] void BTreeNode :: BorrowFromNext ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // keys[idx] is inserted as the last key in C[idx] child -> keys [( child -> n )] = keys [ idx ]; // Sibling's first child is inserted as the last child // into C[idx] if ( ! ( child -> leaf )) child -> C [( child -> n ) + 1 ] = sibling -> C [ 0 ]; // The first key from sibling is inserted into keys[idx] keys [ idx ] = sibling -> keys [ 0 ]; // Moving all keys in sibling one step behind for ( int i = 1 ; i < sibling -> n ; ++ i ) sibling -> keys [ i - 1 ] = sibling -> keys [ i ]; // Moving the child pointers one step behind if ( ! sibling -> leaf ) { for ( int i = 1 ; i <= sibling -> n ; ++ i ) sibling -> C [ i - 1 ] = sibling -> C [ i ]; } // Increasing and decreasing the key count of C[idx] and C[idx+1] // respectively child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to merge C[idx] with C[idx+1] // C[idx+1] is freed after merging void BTreeNode :: Merge ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // Pulling a key from the current node and inserting it into (t-1)th // position of C[idx] child -> keys [ t - 1 ] = keys [ idx ]; // Copying the keys from C[idx+1] to C[idx] at the end for ( int i = 0 ; i < sibling -> n ; ++ i ) child -> keys [ i + t ] = sibling -> keys [ i ]; // Copying the child pointers from C[idx+1] to C[idx] if ( ! child -> leaf ) { for ( int i = 0 ; i <= sibling -> n ; ++ i ) child -> C [ i + t ] = sibling -> C [ i ]; } // Moving all keys after idx in the current node one step before - // to fill the gap created by moving keys[idx] to C[idx] for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i - 1 ] = keys [ i ]; // Moving the child pointers after (idx+1) in the current node one // step before for ( int i = idx + 2 ; i <= n ; ++ i ) C [ i - 1 ] = C [ i ]; // Updating the key count of child and the current node child -> n += sibling -> n + 1 ; n -- ; // Freeing the memory occupied by sibling delete ( sibling ); return ; } // The main function that inserts a new key in this B-Tree void BTree :: Insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t - 1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> SplitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> InsertNonFull ( k ); // Change root root = s ; } else // If root is not full, call InsertNonFull for root root -> InsertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: InsertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n - 1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t - 1 ) { // If the child is full, then split it SplitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> InsertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: SplitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t - 1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find location of // new key and move all greater keys one space ahead for ( int j = n - 1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t - 1 ]; // Increment count of keys in this node n = n + 1 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: Traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> Traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> Traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: Search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> Search ( k ); } void BTree :: Remove ( int k ) { if ( ! root ) { cout << \"The tree is empty \\n \" ; return ; } // Call the remove function for root root -> Remove ( k ); // If the root node has 0 keys, make its first child as the new root // if it has a child, otherwise set root as NULL if ( root -> n == 0 ) { BTreeNode * tmp = root ; if ( root -> leaf ) root = NULL ; else root = root -> C [ 0 ]; // Free the old root delete tmp ; } return ; } \u6d4b\u8bd5\u4ee3\u7801\uff1a // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . Insert ( 1 ); t . Insert ( 3 ); t . Insert ( 7 ); t . Insert ( 10 ); t . Insert ( 11 ); t . Insert ( 13 ); t . Insert ( 14 ); t . Insert ( 15 ); t . Insert ( 18 ); t . Insert ( 16 ); t . Insert ( 19 ); t . Insert ( 24 ); t . Insert ( 25 ); t . Insert ( 26 ); t . Insert ( 21 ); t . Insert ( 4 ); t . Insert ( 5 ); t . Insert ( 20 ); t . Insert ( 22 ); t . Insert ( 2 ); t . Insert ( 17 ); t . Insert ( 12 ); t . Insert ( 6 ); cout << \"Traversal of tree constructed is \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 6 ); cout << \"Traversal of tree after removing 6 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 13 ); cout << \"Traversal of tree after removing 13 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 7 ); cout << \"Traversal of tree after removing 7 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 4 ); cout << \"Traversal of tree after removing 4 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 2 ); cout << \"Traversal of tree after removing 2 \\n \" ; t . Traverse (); cout << endl ; t . Remove ( 16 ); cout << \"Traversal of tree after removing 16 \\n \" ; t . Traverse (); cout << endl ; return 0 ; } \u8f93\u51fa\uff1a Traversal of tree constructed is 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 6 1 2 3 4 5 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 13 1 2 3 4 5 7 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 7 1 2 3 4 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 4 1 2 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 2 1 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 16 1 3 5 10 11 12 14 15 17 18 19 20 21 22 24 25 26","title":"C++\u5b9e\u73b0"},{"location":"competitive_programming/data_structure/fenwick/","text":"Fenwick/\u6811\u72b6\u6570\u7ec4 Fenwick\u6811\uff0c\u4e5f\u53ebbinary index tree\uff0c\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5143\u7d20\u503c\u548c\u8ba1\u7b97\u524d\u7f00\u548c\u64cd\u4f5c \u95ee\u9898 \u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c \u4ee3\u7801 template < typename T > class BIT { public : BIT () {} BIT ( int _sz ) : sz ( _sz ) { bit = vector < T > ( sz + 1 , 0 ); } BIT ( vector < T > arr ) : sz (( int ) arr . size ()) { bit = vector < T > ( sz + 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } void Add ( int x , T val ) { for ( x ++ ; x <= sz ; x += x & - x ) bit [ x ] += val ; } T Query ( int x ) { // Sum [0, x] T ans = 0 ; for ( x ++ ; x ; x -= x & - x ) ans += bit [ x ]; return ans ; } T Query ( int l , int r ) { // Sum [l, r) return Query ( r - 1 ) - Query ( l - 1 ); } private : int sz ; vector < T > bit ; }; \u7b97\u6cd5 \u6811\u4e2d\u8282\u70b9\u7f16\u53f7 i i \u4ee3\u8868\u524di\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u662f\u76f8\u6bd4\u7236\u8282\u70b9\u591a\u51fa\u6765\u7684\u90a3\u4e00\u90e8\u5206\u5143\u7d20\u548c\u3002\u987e\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u56de\u6eaf\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u4e4b\u548c\u5c31\u662f\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u6ce8\uff1a\u82e5 x x \u4e3a\u6b63\uff0c\u5219 x \\& -x x \\& -x \u4e3a x x \u4f4e\u4f4d 1 1 \u6240\u4ee3\u8868\u7684\u6570\u3002 \u8ba8\u8bba \u4e0e\u7ebf\u6bb5\u6811\u7684\u533a\u522b \u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\uff0c\u4ece\u6811\u72b6\u6570\u7ec4\u7d22\u5f15\u66f4\u65b0\u7684\u65b9\u5f0f\u53ef\u89c1\u7aef\u502a\uff1a BIT\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u51cf\u53bb\u6216\u52a0\u4e0a\u6700\u4f4e\u4f4d 1 1 \uff0c\u7ebf\u6bb5\u6811\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u5de6\u79fb\u6216\u53f3\u79fb 1 1 \u4f4d\u3002\u8fd9\u5bfc\u81f4\u6811\u72b6\u6570\u7ec4\u7684\u7236\u5b50\u8282\u70b9\u6240\u8868\u5f81\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u4e00\u679d\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e00\u8d77\u6784\u6210\u4e00\u4e2a\u7d22\u5f15\u6240\u51b3\u5b9a\u524d\u7f00\u7684\u5185\u5bb9\uff1b\u800c\u7ebf\u6bb5\u6811\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u91cd\u5408\u7684\uff0c\u751a\u81f3\u7236\u8282\u70b9 p p \u5b58\u50a8\u7684\u503c\u5c31\u662f\u7531\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\uff08 p << 1 p << 1 \u548c p << 1 | 1 p << 1 | 1 \uff09\u76f4\u63a5\u51b3\u5b9a\u7684\u3002\u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u800c\u7ebf\u6bb5\u6811\u5374\u652f\u6301\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e3a\u6b64\u989d\u5916\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u6ce8\uff1a\u6811\u72b6\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(2n) O(2n) \u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"competitive_programming/data_structure/fenwick/#fenwick","text":"Fenwick\u6811\uff0c\u4e5f\u53ebbinary index tree\uff0c\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5143\u7d20\u503c\u548c\u8ba1\u7b97\u524d\u7f00\u548c\u64cd\u4f5c","title":"Fenwick/\u6811\u72b6\u6570\u7ec4"},{"location":"competitive_programming/data_structure/fenwick/#_1","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/fenwick/#_2","text":"template < typename T > class BIT { public : BIT () {} BIT ( int _sz ) : sz ( _sz ) { bit = vector < T > ( sz + 1 , 0 ); } BIT ( vector < T > arr ) : sz (( int ) arr . size ()) { bit = vector < T > ( sz + 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } void Add ( int x , T val ) { for ( x ++ ; x <= sz ; x += x & - x ) bit [ x ] += val ; } T Query ( int x ) { // Sum [0, x] T ans = 0 ; for ( x ++ ; x ; x -= x & - x ) ans += bit [ x ]; return ans ; } T Query ( int l , int r ) { // Sum [l, r) return Query ( r - 1 ) - Query ( l - 1 ); } private : int sz ; vector < T > bit ; };","title":"\u4ee3\u7801"},{"location":"competitive_programming/data_structure/fenwick/#_3","text":"\u6811\u4e2d\u8282\u70b9\u7f16\u53f7 i i \u4ee3\u8868\u524di\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u662f\u76f8\u6bd4\u7236\u8282\u70b9\u591a\u51fa\u6765\u7684\u90a3\u4e00\u90e8\u5206\u5143\u7d20\u548c\u3002\u987e\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u56de\u6eaf\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u4e4b\u548c\u5c31\u662f\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u6ce8\uff1a\u82e5 x x \u4e3a\u6b63\uff0c\u5219 x \\& -x x \\& -x \u4e3a x x \u4f4e\u4f4d 1 1 \u6240\u4ee3\u8868\u7684\u6570\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/data_structure/fenwick/#_4","text":"\u4e0e\u7ebf\u6bb5\u6811\u7684\u533a\u522b \u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\uff0c\u4ece\u6811\u72b6\u6570\u7ec4\u7d22\u5f15\u66f4\u65b0\u7684\u65b9\u5f0f\u53ef\u89c1\u7aef\u502a\uff1a BIT\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u51cf\u53bb\u6216\u52a0\u4e0a\u6700\u4f4e\u4f4d 1 1 \uff0c\u7ebf\u6bb5\u6811\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u5de6\u79fb\u6216\u53f3\u79fb 1 1 \u4f4d\u3002\u8fd9\u5bfc\u81f4\u6811\u72b6\u6570\u7ec4\u7684\u7236\u5b50\u8282\u70b9\u6240\u8868\u5f81\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u4e00\u679d\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e00\u8d77\u6784\u6210\u4e00\u4e2a\u7d22\u5f15\u6240\u51b3\u5b9a\u524d\u7f00\u7684\u5185\u5bb9\uff1b\u800c\u7ebf\u6bb5\u6811\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u91cd\u5408\u7684\uff0c\u751a\u81f3\u7236\u8282\u70b9 p p \u5b58\u50a8\u7684\u503c\u5c31\u662f\u7531\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\uff08 p << 1 p << 1 \u548c p << 1 | 1 p << 1 | 1 \uff09\u76f4\u63a5\u51b3\u5b9a\u7684\u3002\u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u800c\u7ebf\u6bb5\u6811\u5374\u652f\u6301\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e3a\u6b64\u989d\u5916\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u6ce8\uff1a\u6811\u72b6\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(2n) O(2n) \u3002","title":"\u8ba8\u8bba"},{"location":"competitive_programming/data_structure/lru_cache/","text":"LRU\u7f13\u5b58 \u95ee\u9898 \u8bbe\u8ba1\u4e00\u79cd\u952e\u3001\u503c\u5bf9\u7684\u5bb9\u5668\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 get get \u548c set set \u64cd\u4f5c\uff1a get(key) get(key) - \u5982\u679c\u7f13\u5b58\u4e2d\u5b58\u5728 key key \uff0c\u5219\u8fd4\u56de\u5176\u5bf9\u5e94\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 -1 set(key, value) set(key, value) - \u5982\u679c key key \u5df2\u5b58\u5728\u5219\u66f4\u65b0\u5176\u5bf9\u5e94\u7684\u503c\uff0c\u5426\u5219\u52a0\u5165\u65b0\u7684\u952e\u503c\u5bf9 (key, value) (key, value) \uff0c\u5982\u679c\u5bb9\u5668\u5df2\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u5219\u8e22\u51fa\u4e0a\u6b21\u8bbf\u95ee\u8ddd\u79bb\u6700\u8fdc\u7684\u952e\u503c\u5bf9 \u5206\u6790 \u7531\u4e8e\u9700\u8981\u523b\u753b\u8bbf\u95ee\u987a\u5e8f\uff0c\u5e76\u4e14\u9700\u8981\u5feb\u901f\u5c06\u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u79fb\u5230\u5934\u90e8\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u952e\u3001\u503c\u5bf9\u7684\u53cc\u5411\u94fe\u8868 std::list \u6765\u5b9e\u73b0\u3002 \u8fdb\u4e00\u6b65\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a std::unordered_map \u6765\u7ef4\u62a4 key key \u5230\u94fe\u8868\u8282\u70b9\uff08\u952e\u503c\u5bf9\uff09\u7684\u8fed\u4ee3\u5668\u7684\u54c8\u5e0c\u3002 \u4ee3\u7801 class LRUcache { public : LRUcache ( int capacity ) { this -> capacity = capacity ; } int Get ( int key ) { if ( cache_map . find ( key ) == cache_map . end ()) return - 1 ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); return cache_map [ key ] -> v ; } void Set ( int key , int value ) { if ( cache_map . find ( key ) == cache_map . end ()) { if ( cache_list . size () == capacity ) { cache_map . erase ( cache_list . back (). k ); cache_list . pop_back (); } cache_list . push_front ( CacheNode ( key , value )); cache_map [ key ] = cache_list . begin (); } else { cache_map [ key ] -> v = value ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); } } private : struct CacheNode { int k , v ; CacheNode () {} CacheNode ( int _k , int _v ) : k ( _k ), v ( _v ) {} }; int capacity ; list < CacheNode > cache_list ; unordered_map < int , list < CacheNode >:: iterator > cache_map ; }; CacheNode CacheNode - \u952e\u503c\u5bf9\uff08\u94fe\u8868\u8282\u70b9\uff09 cache\\_list cache\\_list - \u5185\u90e8\u94fe\u8868 cache\\_map cache\\_map - \u4ece key key \u5230\u952e\u503c\u5bf9\u5730\u5740\u7684\u54c8\u5e0c","title":"LRU\u7f13\u5b58"},{"location":"competitive_programming/data_structure/lru_cache/#lru","text":"","title":"LRU\u7f13\u5b58"},{"location":"competitive_programming/data_structure/lru_cache/#_1","text":"\u8bbe\u8ba1\u4e00\u79cd\u952e\u3001\u503c\u5bf9\u7684\u5bb9\u5668\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 get get \u548c set set \u64cd\u4f5c\uff1a get(key) get(key) - \u5982\u679c\u7f13\u5b58\u4e2d\u5b58\u5728 key key \uff0c\u5219\u8fd4\u56de\u5176\u5bf9\u5e94\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 -1 set(key, value) set(key, value) - \u5982\u679c key key \u5df2\u5b58\u5728\u5219\u66f4\u65b0\u5176\u5bf9\u5e94\u7684\u503c\uff0c\u5426\u5219\u52a0\u5165\u65b0\u7684\u952e\u503c\u5bf9 (key, value) (key, value) \uff0c\u5982\u679c\u5bb9\u5668\u5df2\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u5219\u8e22\u51fa\u4e0a\u6b21\u8bbf\u95ee\u8ddd\u79bb\u6700\u8fdc\u7684\u952e\u503c\u5bf9","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/lru_cache/#_2","text":"\u7531\u4e8e\u9700\u8981\u523b\u753b\u8bbf\u95ee\u987a\u5e8f\uff0c\u5e76\u4e14\u9700\u8981\u5feb\u901f\u5c06\u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u79fb\u5230\u5934\u90e8\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u952e\u3001\u503c\u5bf9\u7684\u53cc\u5411\u94fe\u8868 std::list \u6765\u5b9e\u73b0\u3002 \u8fdb\u4e00\u6b65\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a std::unordered_map \u6765\u7ef4\u62a4 key key \u5230\u94fe\u8868\u8282\u70b9\uff08\u952e\u503c\u5bf9\uff09\u7684\u8fed\u4ee3\u5668\u7684\u54c8\u5e0c\u3002","title":"\u5206\u6790"},{"location":"competitive_programming/data_structure/lru_cache/#_3","text":"class LRUcache { public : LRUcache ( int capacity ) { this -> capacity = capacity ; } int Get ( int key ) { if ( cache_map . find ( key ) == cache_map . end ()) return - 1 ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); return cache_map [ key ] -> v ; } void Set ( int key , int value ) { if ( cache_map . find ( key ) == cache_map . end ()) { if ( cache_list . size () == capacity ) { cache_map . erase ( cache_list . back (). k ); cache_list . pop_back (); } cache_list . push_front ( CacheNode ( key , value )); cache_map [ key ] = cache_list . begin (); } else { cache_map [ key ] -> v = value ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); } } private : struct CacheNode { int k , v ; CacheNode () {} CacheNode ( int _k , int _v ) : k ( _k ), v ( _v ) {} }; int capacity ; list < CacheNode > cache_list ; unordered_map < int , list < CacheNode >:: iterator > cache_map ; }; CacheNode CacheNode - \u952e\u503c\u5bf9\uff08\u94fe\u8868\u8282\u70b9\uff09 cache\\_list cache\\_list - \u5185\u90e8\u94fe\u8868 cache\\_map cache\\_map - \u4ece key key \u5230\u952e\u503c\u5bf9\u5730\u5740\u7684\u54c8\u5e0c","title":"\u4ee3\u7801"},{"location":"competitive_programming/data_structure/segment_tree/","text":"\u7ebf\u6bb5\u6811 \u76f8\u8f83Fenwick\u6811\uff0c\u7ebf\u6bb5\u6811\u9664\u4e86\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5236\u5b9a\u5143\u7d20\u548c\u8ba1\u7b97\u533a\u95f4\u548c\u4ee5\u5916\uff0c\u8fd8\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u8ba1\u7b97\u533a\u95f4\u6700\u503c\uff0c\u4f46\u4e3a\u6b64\u591a\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u5f00\u9500\u3002 \u95ee\u9898 \u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c \u4ee3\u7801 \u7528\u4e8e\u7ef4\u62a4\u533a\u95f4\u6c42\u548c\u7684\u7ebf\u6bb5\u6811\uff1a template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = 0 ; for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans += sgt [ l ++ ]; if ( r & 1 ) ans += sgt [ -- r ]; } return ans ; } void Add ( int x , T val ) { for ( sgt [ x += sz ] += val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = sgt [ x ] + sgt [ x ^ 1 ]; } private : int sz ; vector < T > sgt ; }; \u64cd\u4f5c\u8bf4\u660e\uff1a using ll = long long ; // \u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u6bb5\u6811 SGT < ll > s ( 10 ); for ( int i = 0 ; i < 10 ; i ++ ) { s . Add ( i , i ); } // \u67e5\u8be2 [3, 7) \u7684\u548c int sum = s . Query ( 3 , 7 ); cout << sum << endl ; \u8f93\u51fa\uff1a 18 \u7b97\u6cd5 \u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u6709\u5947\u6570\u4e2a\u8282\u70b9\u7684\u7684\u5b8c\u5168\u4e8c\u53c9\u6811: \u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u540e\u534a\u6bb5\uff08\u53f6\u8282\u70b9\uff09\u5b58\u50a8\u4e86\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u6545\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u65e0\u8bba\u5efa\u7acb\u3001\u6c42\u548c\u6216\u8005\u66f4\u65b0\u503c\u90fd\u662f\u5148\u5b9a\u4f4d\u5230\u53f6\u8282\u70b9\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u3002 \u5177\u4f53\u5730\uff0c\u533a\u95f4\u548c\u64cd\u4f5c\u662f\u5148\u5c06\u8868\u5f81\u5de6\u53f3\u7aef\u70b9\u6307\u9488\u5b9a\u4f4d\u5728\u53f6\u8282\u70b9\u76f8\u5e94\u4f4d\u7f6e\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4e0a\u79fb\u7d27\u7f29\uff0c\u8fc7\u7a0b\u6bcf\u5f53\u7aef\u70b9\u51fa\u73b0\u5947\u6570\u5219\u9700\u8981\u201c\u63a5\u6f0f\u201d\u2014\u2014\u5176\u4e2d\u5de6\u7aef\u662f\u95ed\u533a\u95f4\u6240\u4ee5\u5148\u52a0\u518d\u7f29\uff0c\u53f3\u7aef\u662f\u5f00\u533a\u95f4\u6240\u4ee5\u5148\u7f29\u518d\u52a0\u3002 \u8ba8\u8bba \u5173\u4e8e\u4e3a\u4ec0\u4e48\u6570\u7ec4\u8868\u793a\u7684\u4e8c\u53c9\u6811\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0b\u6807 0 0 \u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u5bf9\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\u7f16\u53f7\uff0c\u5982\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u5219\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u548c\u7236\u4eb2\u5206\u522b\u4e3a p << 1 p << 1 , p << 1 | 1 p << 1 | 1 , p >> 1 p >> 1 \uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u53ef\u4ee5\u53ea\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u3002\u7136\u800c\u82e5\u6839\u8282\u70b9\u4ece\u5f00\u59cb\u7f16\u53f7\uff0c\u5219\u8282\u70b9p\u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u4e3a 2p + 1 2p + 1 , 2p + 2 2p + 2 \uff0c\u7236\u4eb2\u7684\u7d22\u5f15\u4e0e p p \u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u7d22\u5f15\u8f6c\u79fb\u56e0\u800c\u590d\u6742\u5f97\u591a\u3002 \u53d8\u4f53 \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3001\u67e5\u8be2\u533a\u95f4\u6700\u503c\u3002 \u6700\u5927\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: min (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = max ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = max ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = max ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; }; \u6700\u5c0f\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: max (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = min ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = min ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = min ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; };","title":"\u7ebf\u6bb5\u6811"},{"location":"competitive_programming/data_structure/segment_tree/#_1","text":"\u76f8\u8f83Fenwick\u6811\uff0c\u7ebf\u6bb5\u6811\u9664\u4e86\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5236\u5b9a\u5143\u7d20\u548c\u8ba1\u7b97\u533a\u95f4\u548c\u4ee5\u5916\uff0c\u8fd8\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u8ba1\u7b97\u533a\u95f4\u6700\u503c\uff0c\u4f46\u4e3a\u6b64\u591a\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u5f00\u9500\u3002","title":"\u7ebf\u6bb5\u6811"},{"location":"competitive_programming/data_structure/segment_tree/#_2","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/segment_tree/#_3","text":"\u7528\u4e8e\u7ef4\u62a4\u533a\u95f4\u6c42\u548c\u7684\u7ebf\u6bb5\u6811\uff1a template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = 0 ; for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans += sgt [ l ++ ]; if ( r & 1 ) ans += sgt [ -- r ]; } return ans ; } void Add ( int x , T val ) { for ( sgt [ x += sz ] += val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = sgt [ x ] + sgt [ x ^ 1 ]; } private : int sz ; vector < T > sgt ; }; \u64cd\u4f5c\u8bf4\u660e\uff1a using ll = long long ; // \u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u6bb5\u6811 SGT < ll > s ( 10 ); for ( int i = 0 ; i < 10 ; i ++ ) { s . Add ( i , i ); } // \u67e5\u8be2 [3, 7) \u7684\u548c int sum = s . Query ( 3 , 7 ); cout << sum << endl ; \u8f93\u51fa\uff1a 18","title":"\u4ee3\u7801"},{"location":"competitive_programming/data_structure/segment_tree/#_4","text":"\u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u6709\u5947\u6570\u4e2a\u8282\u70b9\u7684\u7684\u5b8c\u5168\u4e8c\u53c9\u6811: \u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u540e\u534a\u6bb5\uff08\u53f6\u8282\u70b9\uff09\u5b58\u50a8\u4e86\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u6545\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u65e0\u8bba\u5efa\u7acb\u3001\u6c42\u548c\u6216\u8005\u66f4\u65b0\u503c\u90fd\u662f\u5148\u5b9a\u4f4d\u5230\u53f6\u8282\u70b9\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u3002 \u5177\u4f53\u5730\uff0c\u533a\u95f4\u548c\u64cd\u4f5c\u662f\u5148\u5c06\u8868\u5f81\u5de6\u53f3\u7aef\u70b9\u6307\u9488\u5b9a\u4f4d\u5728\u53f6\u8282\u70b9\u76f8\u5e94\u4f4d\u7f6e\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4e0a\u79fb\u7d27\u7f29\uff0c\u8fc7\u7a0b\u6bcf\u5f53\u7aef\u70b9\u51fa\u73b0\u5947\u6570\u5219\u9700\u8981\u201c\u63a5\u6f0f\u201d\u2014\u2014\u5176\u4e2d\u5de6\u7aef\u662f\u95ed\u533a\u95f4\u6240\u4ee5\u5148\u52a0\u518d\u7f29\uff0c\u53f3\u7aef\u662f\u5f00\u533a\u95f4\u6240\u4ee5\u5148\u7f29\u518d\u52a0\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/data_structure/segment_tree/#_5","text":"\u5173\u4e8e\u4e3a\u4ec0\u4e48\u6570\u7ec4\u8868\u793a\u7684\u4e8c\u53c9\u6811\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0b\u6807 0 0 \u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u5bf9\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\u7f16\u53f7\uff0c\u5982\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u5219\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u548c\u7236\u4eb2\u5206\u522b\u4e3a p << 1 p << 1 , p << 1 | 1 p << 1 | 1 , p >> 1 p >> 1 \uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u53ef\u4ee5\u53ea\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u3002\u7136\u800c\u82e5\u6839\u8282\u70b9\u4ece\u5f00\u59cb\u7f16\u53f7\uff0c\u5219\u8282\u70b9p\u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u4e3a 2p + 1 2p + 1 , 2p + 2 2p + 2 \uff0c\u7236\u4eb2\u7684\u7d22\u5f15\u4e0e p p \u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u7d22\u5f15\u8f6c\u79fb\u56e0\u800c\u590d\u6742\u5f97\u591a\u3002","title":"\u8ba8\u8bba"},{"location":"competitive_programming/data_structure/segment_tree/#_6","text":"\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3001\u67e5\u8be2\u533a\u95f4\u6700\u503c\u3002 \u6700\u5927\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: min (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = max ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = max ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = max ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; }; \u6700\u5c0f\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: max (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = min ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = min ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = min ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; };","title":"\u53d8\u4f53"},{"location":"competitive_programming/data_structure/skiplist/","text":"\u8df3\u8868 \u95ee\u9898 \u5b9e\u73b0\u4e00\u79cd\u96c6\u5408\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a 1. \u63d2\u5165 / Insert 2. \u5220\u9664 / Delete 3. \u67e5\u627e / Search 4. \u6309\u5e8f\u904d\u5386 \u663e\u7136\uff0c \u5e73\u8861\u6811 \uff08\u5982\u7ea2\u9ed1\u6811\uff09\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u7ec4\u7ec7\u6570\u636e\u53ef\u4ee5\u6253\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \uff0c\u800c\u987a\u5e8f\u8fed\u4ee3\u989d\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4ec0\u4e48\u601d\u8def\uff1f \u8df3\u8868 \u901a\u8fc7\u5728\u6709\u5e8f\u94fe\u8868\u4e0a\u589e\u52a0\u82e5\u5e72\u7ea7\u7d22\u5f15\u5c42\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 \u5177\u4f53\u5730\uff0c\u5728\u6709\u5e8f\u94fe\u8868\u4e0a\u589e\u52a0\u7ed9\u5b9a\u5c42\u6570\u4e0a\u9650\u7684\u7d22\u5f15\uff0c\u5c06\u90e8\u5206\u4f4d\u4e8e\u4f4e\u5c42\u7684\u8282\u70b9\u6309\u7167\u6982\u7387\u4e0a\u79fb\u5f62\u6210\u5bf9\u4e0b\u7ea7\u7684\u7d22\u5f15\uff0c\u7531\u4e8e\u968f\u673a\u6027\u8df3\u8868\u7684\u6700\u7ec8\u5f62\u6001\u5f80\u5f80\u662f\u4e0d\u552f\u4e00\u7684\u3002 C++\u5b9e\u73b0 \u5b9e\u73b0\u6210\u5458\u4e3a int \u578b\u7684\u8df3\u8868 SkipList \u7c7b\uff1a class Node { public : int key ; // Array to hold pointers to node of different level Node ** forward ; Node ( int , int ); }; Node :: Node ( int key , int level ) { this -> key = key ; // Allocate memory to forward forward = new Node * [ level + 1 ]; // Fill forward array with 0(NULL) memset ( forward , 0 , sizeof ( Node * ) * ( level + 1 )); }; class SkipList { public : SkipList ( int , float ); friend ostream & operator << ( ostream & out , const SkipList & src ); void Insert ( int ); void Delete ( int ); bool Search ( int ); private : int RandomLevel (); Node * CreateNode ( int , int ); // Maximum level for this skip list int MAXLVL ; // P is the fraction of the nodes with level // i pointers also having level i+1 pointers float P ; // current level of skip list int level ; // pointer to header node Node * header ; }; SkipList :: SkipList ( int MAXLVL , float P ) { this -> MAXLVL = MAXLVL ; this -> P = P ; level = 0 ; // create header node and initialize key to -1 header = new Node ( - 1 , MAXLVL ); }; int SkipList :: RandomLevel () { float r = ( float ) rand () / RAND_MAX ; int lvl = 0 ; while ( r < P && lvl < MAXLVL ) { lvl ++ ; r = ( float ) rand () / RAND_MAX ; } return lvl ; }; Node * SkipList :: CreateNode ( int key , int level ) { Node * n = new Node ( key , level ); return n ; }; void SkipList :: Insert ( int key ) { Node * current = header ; // create update array and initialize it Node * update [ MAXLVL + 1 ]; memset ( update , 0 , sizeof ( Node * ) * ( MAXLVL + 1 )); /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] != NULL && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; update [ i ] = current ; } /* reached level 0 and forward pointer to right, which is desired position to insert key. */ current = current -> forward [ 0 ]; /* if current is NULL that means we have reached to end of the level or current's key is not equal to key to insert that means we have to insert node between update[0] and current node */ if ( current == NULL || current -> key != key ) { // Generate a random level for node int rlevel = RandomLevel (); /* If random level is greater than list's current level (node with highest level inserted in list so far), initialize update value with pointer to header for further use */ if ( rlevel > level ) { for ( int i = level + 1 ; i < rlevel + 1 ; i ++ ) update [ i ] = header ; // Update the list current level level = rlevel ; } // create new node with random level generated Node * n = CreateNode ( key , rlevel ); // insert node by rearranging pointers for ( int i = 0 ; i <= rlevel ; i ++ ) { n -> forward [ i ] = update [ i ] -> forward [ i ]; update [ i ] -> forward [ i ] = n ; } // cout << \"Successfully Inserted key \" << key << \"\\n\"; } }; void SkipList :: Delete ( int key ) { Node * current = header ; // create update array and initialize it Node * update [ MAXLVL + 1 ]; memset ( update , 0 , sizeof ( Node * ) * ( MAXLVL + 1 )); /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] != NULL && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; update [ i ] = current ; } /* reached level 0 and forward pointer to right, which is possibly our desired node.*/ current = current -> forward [ 0 ]; // If current node is target node if ( current != NULL and current -> key == key ) { /* start from lowest level and rearrange pointers just like we do in singly linked list to remove target node */ for ( int i = 0 ; i <= level ; i ++ ) { /* If at level i, next node is not target node, break the loop, no need to move further level */ if ( update [ i ] -> forward [ i ] != current ) break ; update [ i ] -> forward [ i ] = current -> forward [ i ]; } // Remove levels having no elements while ( level > 0 && header -> forward [ level ] == 0 ) level -- ; // cout << \"Successfully deleted key \" << key << \"\\n\"; } }; // Search for element in skip list bool SkipList :: Search ( int key ) { Node * current = header ; /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; } /* reached level 0 and advance pointer to right, which is possibly our desired node*/ current = current -> forward [ 0 ]; // If current node have key equal to // search key, we have found our target node if ( current and current -> key == key ) return true ; else return false ; }; // Display SkipList by overriding '<<' operator ostream & operator << ( ostream & out , const SkipList & src ) { cout << \" \\n *****Skip List*****\" << \" \\n \" ; for ( int i = 0 ; i <= src . level ; i ++ ) { Node * node = src . header -> forward [ i ]; cout << \"Level \" << i << \": \" ; while ( node != NULL ) { cout << node -> key << \" \" ; node = node -> forward [ i ]; } cout << \" \\n \" ; } return out ; } \u6d4b\u8bd5\u4ee3\u7801\uff1a int main () { // Seed random number generator srand (( unsigned ) time ( 0 )); // create SkipList object with MAXLVL and P SkipList lst ( 3 , 0.5 ); lst . Insert ( 3 ); lst . Insert ( 6 ); lst . Insert ( 7 ); lst . Insert ( 9 ); lst . Insert ( 12 ); lst . Insert ( 19 ); lst . Insert ( 17 ); lst . Insert ( 26 ); lst . Insert ( 21 ); lst . Insert ( 25 ); cout << lst << endl ; // Search for node 19 cout << \"search 19: \" ; cout << lst . Search ( 19 ) << endl ; // Delete node 19 lst . Delete ( 19 ); cout << lst << endl ; // Search for node 19 cout << \"search 19: \" ; cout << lst . Search ( 19 ) << endl ; } \u8f93\u51fa\uff1a ***** Skip List ***** Level 0 : 3 6 7 9 12 17 19 21 25 26 Level 1 : 3 7 9 19 21 Level 2 : 19 search 19 : 1 ***** Skip List ***** Level 0 : 3 6 7 9 12 17 21 25 26 Level 1 : 3 7 9 21 search 19 : 0","title":"\u8df3\u8868"},{"location":"competitive_programming/data_structure/skiplist/#_1","text":"","title":"\u8df3\u8868"},{"location":"competitive_programming/data_structure/skiplist/#_2","text":"\u5b9e\u73b0\u4e00\u79cd\u96c6\u5408\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a 1. \u63d2\u5165 / Insert 2. \u5220\u9664 / Delete 3. \u67e5\u627e / Search 4. \u6309\u5e8f\u904d\u5386 \u663e\u7136\uff0c \u5e73\u8861\u6811 \uff08\u5982\u7ea2\u9ed1\u6811\uff09\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u7ec4\u7ec7\u6570\u636e\u53ef\u4ee5\u6253\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(\\log n) O(\\log n) \uff0c\u800c\u987a\u5e8f\u8fed\u4ee3\u989d\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4ec0\u4e48\u601d\u8def\uff1f","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/skiplist/#_3","text":"\u901a\u8fc7\u5728\u6709\u5e8f\u94fe\u8868\u4e0a\u589e\u52a0\u82e5\u5e72\u7ea7\u7d22\u5f15\u5c42\u5b9e\u73b0\u4e0a\u8ff0\u9700\u6c42\u3002 \u5177\u4f53\u5730\uff0c\u5728\u6709\u5e8f\u94fe\u8868\u4e0a\u589e\u52a0\u7ed9\u5b9a\u5c42\u6570\u4e0a\u9650\u7684\u7d22\u5f15\uff0c\u5c06\u90e8\u5206\u4f4d\u4e8e\u4f4e\u5c42\u7684\u8282\u70b9\u6309\u7167\u6982\u7387\u4e0a\u79fb\u5f62\u6210\u5bf9\u4e0b\u7ea7\u7684\u7d22\u5f15\uff0c\u7531\u4e8e\u968f\u673a\u6027\u8df3\u8868\u7684\u6700\u7ec8\u5f62\u6001\u5f80\u5f80\u662f\u4e0d\u552f\u4e00\u7684\u3002","title":"\u8df3\u8868"},{"location":"competitive_programming/data_structure/skiplist/#c","text":"\u5b9e\u73b0\u6210\u5458\u4e3a int \u578b\u7684\u8df3\u8868 SkipList \u7c7b\uff1a class Node { public : int key ; // Array to hold pointers to node of different level Node ** forward ; Node ( int , int ); }; Node :: Node ( int key , int level ) { this -> key = key ; // Allocate memory to forward forward = new Node * [ level + 1 ]; // Fill forward array with 0(NULL) memset ( forward , 0 , sizeof ( Node * ) * ( level + 1 )); }; class SkipList { public : SkipList ( int , float ); friend ostream & operator << ( ostream & out , const SkipList & src ); void Insert ( int ); void Delete ( int ); bool Search ( int ); private : int RandomLevel (); Node * CreateNode ( int , int ); // Maximum level for this skip list int MAXLVL ; // P is the fraction of the nodes with level // i pointers also having level i+1 pointers float P ; // current level of skip list int level ; // pointer to header node Node * header ; }; SkipList :: SkipList ( int MAXLVL , float P ) { this -> MAXLVL = MAXLVL ; this -> P = P ; level = 0 ; // create header node and initialize key to -1 header = new Node ( - 1 , MAXLVL ); }; int SkipList :: RandomLevel () { float r = ( float ) rand () / RAND_MAX ; int lvl = 0 ; while ( r < P && lvl < MAXLVL ) { lvl ++ ; r = ( float ) rand () / RAND_MAX ; } return lvl ; }; Node * SkipList :: CreateNode ( int key , int level ) { Node * n = new Node ( key , level ); return n ; }; void SkipList :: Insert ( int key ) { Node * current = header ; // create update array and initialize it Node * update [ MAXLVL + 1 ]; memset ( update , 0 , sizeof ( Node * ) * ( MAXLVL + 1 )); /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] != NULL && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; update [ i ] = current ; } /* reached level 0 and forward pointer to right, which is desired position to insert key. */ current = current -> forward [ 0 ]; /* if current is NULL that means we have reached to end of the level or current's key is not equal to key to insert that means we have to insert node between update[0] and current node */ if ( current == NULL || current -> key != key ) { // Generate a random level for node int rlevel = RandomLevel (); /* If random level is greater than list's current level (node with highest level inserted in list so far), initialize update value with pointer to header for further use */ if ( rlevel > level ) { for ( int i = level + 1 ; i < rlevel + 1 ; i ++ ) update [ i ] = header ; // Update the list current level level = rlevel ; } // create new node with random level generated Node * n = CreateNode ( key , rlevel ); // insert node by rearranging pointers for ( int i = 0 ; i <= rlevel ; i ++ ) { n -> forward [ i ] = update [ i ] -> forward [ i ]; update [ i ] -> forward [ i ] = n ; } // cout << \"Successfully Inserted key \" << key << \"\\n\"; } }; void SkipList :: Delete ( int key ) { Node * current = header ; // create update array and initialize it Node * update [ MAXLVL + 1 ]; memset ( update , 0 , sizeof ( Node * ) * ( MAXLVL + 1 )); /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] != NULL && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; update [ i ] = current ; } /* reached level 0 and forward pointer to right, which is possibly our desired node.*/ current = current -> forward [ 0 ]; // If current node is target node if ( current != NULL and current -> key == key ) { /* start from lowest level and rearrange pointers just like we do in singly linked list to remove target node */ for ( int i = 0 ; i <= level ; i ++ ) { /* If at level i, next node is not target node, break the loop, no need to move further level */ if ( update [ i ] -> forward [ i ] != current ) break ; update [ i ] -> forward [ i ] = current -> forward [ i ]; } // Remove levels having no elements while ( level > 0 && header -> forward [ level ] == 0 ) level -- ; // cout << \"Successfully deleted key \" << key << \"\\n\"; } }; // Search for element in skip list bool SkipList :: Search ( int key ) { Node * current = header ; /* start from highest level of skip list move the current pointer forward while key is greater than key of node next to current Otherwise inserted current in update and move one level down and continue search */ for ( int i = level ; i >= 0 ; i -- ) { while ( current -> forward [ i ] && current -> forward [ i ] -> key < key ) current = current -> forward [ i ]; } /* reached level 0 and advance pointer to right, which is possibly our desired node*/ current = current -> forward [ 0 ]; // If current node have key equal to // search key, we have found our target node if ( current and current -> key == key ) return true ; else return false ; }; // Display SkipList by overriding '<<' operator ostream & operator << ( ostream & out , const SkipList & src ) { cout << \" \\n *****Skip List*****\" << \" \\n \" ; for ( int i = 0 ; i <= src . level ; i ++ ) { Node * node = src . header -> forward [ i ]; cout << \"Level \" << i << \": \" ; while ( node != NULL ) { cout << node -> key << \" \" ; node = node -> forward [ i ]; } cout << \" \\n \" ; } return out ; } \u6d4b\u8bd5\u4ee3\u7801\uff1a int main () { // Seed random number generator srand (( unsigned ) time ( 0 )); // create SkipList object with MAXLVL and P SkipList lst ( 3 , 0.5 ); lst . Insert ( 3 ); lst . Insert ( 6 ); lst . Insert ( 7 ); lst . Insert ( 9 ); lst . Insert ( 12 ); lst . Insert ( 19 ); lst . Insert ( 17 ); lst . Insert ( 26 ); lst . Insert ( 21 ); lst . Insert ( 25 ); cout << lst << endl ; // Search for node 19 cout << \"search 19: \" ; cout << lst . Search ( 19 ) << endl ; // Delete node 19 lst . Delete ( 19 ); cout << lst << endl ; // Search for node 19 cout << \"search 19: \" ; cout << lst . Search ( 19 ) << endl ; } \u8f93\u51fa\uff1a ***** Skip List ***** Level 0 : 3 6 7 9 12 17 19 21 25 26 Level 1 : 3 7 9 19 21 Level 2 : 19 search 19 : 1 ***** Skip List ***** Level 0 : 3 6 7 9 12 17 21 25 26 Level 1 : 3 7 9 21 search 19 : 0","title":"C++\u5b9e\u73b0"},{"location":"competitive_programming/data_structure/union_find/","text":"\u5e76\u67e5\u96c6 \u95ee\u9898 \u5bf9\u4e8e\u6709 n n \u4e2a\u8282\u70b9\u7684\u56fe\uff0c\u8bbe\u8ba1\u4e00\u79cd\u7ef4\u62a4\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a Find(i) - \u67e5\u8be2\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf Union(i, j) - \u8fde\u63a5\u7f16\u53f7\u4e3a i i \u548c j j \u7684\u8282\u70b9\uff08\u4e8c\u8005\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u8fde\u901a\uff09 \u4ee3\u7801 class UnionFind { public : UnionFind ( int _sz ) : sz ( _sz ) { pre = vector < int > ( sz ); for ( int i = 0 ; i < sz ; i ++ ) pre [ i ] = i ; } int Find ( int x ) { // Find root. int r = x ; while ( r != pre [ r ]) r = pre [ r ]; // Path compress. while ( x != r ) { int tmp = pre [ x ]; pre [ x ] = r ; x = tmp ; } return r ; } void Join ( int x , int y ) { int rx = Find ( x ), ry = Find ( y ); if ( rx != ry ) pre [ rx ] = ry ; } int size () { return sz ; } private : int sz ; vector < int > pre ; }; \u7b97\u6cd5 \u6570\u7ec4 pre pre \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u5bfc\u8282\u70b9\u3002 \u5e76\u67e5\u96c6\u6bcf\u6b21 Union \u64cd\u4f5c\u968f\u673a\u5c06\u4e00\u4e2a\u95e8\u6d3e\u7684\u638c\u95e8\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u95e8\u6d3e\u638c\u95e8\u7684\u76f4\u63a5\u4e0a\u7ea7\uff1b\u800c\u6bcf\u6b21 Find \u64cd\u4f5c\u5728\u9010\u5c42\u5411\u4e0a\u627e\u5230\u638c\u95e8\u4e4b\u540e\u53c8\u5c06\u8def\u5f84\u4e2d\u6240\u6709\u8fc7\u7a0b\u8282\u70b9\u90fd\u6539\u6210\u638c\u95e8\u7684\u76f4\u63a5\u4e0b\u7ea7\u3002\u6240\u4ee5\u8bf4\uff0c\u5f53 Union \u64cd\u4f5c\u7684\u589e\u591a\u4f1a\u5bfc\u81f4\u6811\u72b6\u6570\u636e\u7ed3\u6784\u8d8b\u4e8e\u4e0d\u5e73\u8861\uff0c\u800c Find \u64cd\u4f5c\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c06\u6700\u7ec8\u5bfc\u81f4\u6240\u6709\u8282\u70b9\u90fd\u4ee5\u638c\u95e8\u4e3a\u76f4\u63a5\u4e0a\u7ea7\uff08\u6c47\u62a5\u8ddd\u79bb\u53d8\u6210 1 1 \uff09\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"competitive_programming/data_structure/union_find/#_1","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"competitive_programming/data_structure/union_find/#_2","text":"\u5bf9\u4e8e\u6709 n n \u4e2a\u8282\u70b9\u7684\u56fe\uff0c\u8bbe\u8ba1\u4e00\u79cd\u7ef4\u62a4\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a Find(i) - \u67e5\u8be2\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf Union(i, j) - \u8fde\u63a5\u7f16\u53f7\u4e3a i i \u548c j j \u7684\u8282\u70b9\uff08\u4e8c\u8005\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u8fde\u901a\uff09","title":"\u95ee\u9898"},{"location":"competitive_programming/data_structure/union_find/#_3","text":"class UnionFind { public : UnionFind ( int _sz ) : sz ( _sz ) { pre = vector < int > ( sz ); for ( int i = 0 ; i < sz ; i ++ ) pre [ i ] = i ; } int Find ( int x ) { // Find root. int r = x ; while ( r != pre [ r ]) r = pre [ r ]; // Path compress. while ( x != r ) { int tmp = pre [ x ]; pre [ x ] = r ; x = tmp ; } return r ; } void Join ( int x , int y ) { int rx = Find ( x ), ry = Find ( y ); if ( rx != ry ) pre [ rx ] = ry ; } int size () { return sz ; } private : int sz ; vector < int > pre ; };","title":"\u4ee3\u7801"},{"location":"competitive_programming/data_structure/union_find/#_4","text":"\u6570\u7ec4 pre pre \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u5bfc\u8282\u70b9\u3002 \u5e76\u67e5\u96c6\u6bcf\u6b21 Union \u64cd\u4f5c\u968f\u673a\u5c06\u4e00\u4e2a\u95e8\u6d3e\u7684\u638c\u95e8\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u95e8\u6d3e\u638c\u95e8\u7684\u76f4\u63a5\u4e0a\u7ea7\uff1b\u800c\u6bcf\u6b21 Find \u64cd\u4f5c\u5728\u9010\u5c42\u5411\u4e0a\u627e\u5230\u638c\u95e8\u4e4b\u540e\u53c8\u5c06\u8def\u5f84\u4e2d\u6240\u6709\u8fc7\u7a0b\u8282\u70b9\u90fd\u6539\u6210\u638c\u95e8\u7684\u76f4\u63a5\u4e0b\u7ea7\u3002\u6240\u4ee5\u8bf4\uff0c\u5f53 Union \u64cd\u4f5c\u7684\u589e\u591a\u4f1a\u5bfc\u81f4\u6811\u72b6\u6570\u636e\u7ed3\u6784\u8d8b\u4e8e\u4e0d\u5e73\u8861\uff0c\u800c Find \u64cd\u4f5c\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c06\u6700\u7ec8\u5bfc\u81f4\u6240\u6709\u8282\u70b9\u90fd\u4ee5\u638c\u95e8\u4e3a\u76f4\u63a5\u4e0a\u7ea7\uff08\u6c47\u62a5\u8ddd\u79bb\u53d8\u6210 1 1 \uff09\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/graph_theory/bipartite_matching/","text":"\u4e8c\u5206\u56fe\u5339\u914d \u672c\u9875\u9762\u90e8\u5206\u5b9a\u4e49\u5f15\u81ea\u672c\u79d1\u540c\u5b66renfei\u7684 \u4e2a\u4eba\u535a\u5ba2 \u3002 \u95ee\u9898\uff08\u6700\u5927\u4e8c\u5206\u5339\u914d\uff09 \u7ed9\u5b9a\u4e8c\u5206\u56fe\uff0c\u6c42\u89e3\u5176\u6700\u5927\u5339\u914d\u7684\u5339\u914d\u8fb9\u6570 \u4e8c\u5206\u56fe \u4e8c\u5206\u56fe G=(V,E) G=(V,E) \u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u9876\u70b9\u96c6 V V \u53ef\u5206\u89e3\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 A, B A, B \uff0c\u5bf9 \\forall e=(a, b) \\in E \\forall e=(a, b) \\in E \u6709 a \\in A, b \\in B a \\in A, b \\in B \u5339\u914d \u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u53d8\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u6700\u5927\u5339\u914d \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u6709\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d \u7b97\u6cd5 \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u95ee\u9898\u5728CLRS\u7684\u89e3\u6cd5\u662f\u7531\u6700\u5927\u7f51\u7edc\u6d41\u7684\u7b97\u6cd5\u89c4\u7ea6\u5f97\u5230\u3002\u4f46\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e0d\u65ad\u5bfb\u627e \u589e\u5e7f\u8def \u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u8fd9\u79cd\u6c42\u6700\u5927\u5339\u914d\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5308\u7259\u5229\u7b97\u6cd5\u3002 \u4ea4\u66ff\u8def\u4e0e\u589e\u5e7f\u8def \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002 \u4ee3\u7801 class Match { public : Match ( int _n , int _m ) : n ( _n ), m ( _m ) { assert ( 0 <= n && 0 <= m ); g . resize ( n ); } void Add ( int from , int to ) { assert ( 0 <= from && from <= n && 0 <= to && to <= m ); g [ from ]. push_back ( to ); } int MaxMatchNum () { int res = 0 , iter = 0 ; vector < int > pa ( n , - 1 ), pb ( m , - 1 ), was ( n , 0 ); while ( 1 ) { iter ++ ; int add = 0 ; function < bool ( int ) > Dfs = [ & ]( int v ) { // Find an augmenting path starting from v was [ v ] = iter ; for ( int u : g [ v ]) if ( pb [ u ] == - 1 ) { pa [ v ] = u ; pb [ u ] = v ; return true ; } for ( int u : g [ v ]) if ( was [ pb [ u ]] != iter && Dfs ( pb [ u ])) { pa [ v ] = u ; pb [ u ] = v ; return true ; } return false ; }; for ( int i = 0 ; i < n ; i ++ ) if ( pa [ i ] == - 1 && Dfs ( i )) add ++ ; if ( add == 0 ) break ; res += add ; } return res ; } private : int n , m ; vector < vector < int >> g ; }; n, m n, m - \u4e8c\u5206\u56fe\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u9876\u70b9\u96c6\u7684\u9876\u70b9\u6570 g g - \u4e8c\u5206\u56fe res res - \u5f53\u524d\u5339\u914d\u6570 pa pa - A A \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 pb pb - B B \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 iter iter - \u5f53\u524d\u8fed\u4ee3\u6b21\u6570 was was - A A \u4e2d\u9876\u70b9\u6700\u8fd1\u88ab\u4fee\u6539\u7684\u8fed\u4ee3\u8f6e\u6b21\uff08\u5b9e\u73b0\u4e2d\u914d\u5408 iter iter \u7528\u4e8e\u5bfb\u627e\u5f53\u524d\u8f6e\u6b21\u4e2d\u672a\u88ab\u4fee\u6539\u7684\u70b9\uff0c\u907f\u514d\u589e\u5e7f\u8def\u627e\u5230\u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u70b9\u4e0a\uff09 \u8ba8\u8bba Q: \u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4ece\u5de6\u4fa7\u5f00\u59cb\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u6709\u6ca1\u6709\u53ef\u80fd\u6f0f\u6389\u4ece\u53f3\u4fa7\u5f00\u59cb\u7684\u589e\u5e7f\u8def\u5462\uff1f A: \u4e0d\u4f1a\uff0c\u56e0\u4e3a\u589e\u5e7f\u8def\u7684\u957f\u5ea6\u5fc5\u7136\u662f\u5947\u6570\u8df3\uff0c\u8fd9\u5bfc\u81f4\u8d77\u70b9\u7ec8\u70b9\u5fc5\u7136\u4f4d\u4e8e\u5206\u522b\u4f4d\u4e8e\u5de6\u53f3\u4e24\u4fa7\uff0c\u7531\u4e8c\u5206\u56fe\u7684\u65e0\u5411\u6027\uff0c\u4e0d\u59a8\u53d6\u5de6\u4fa7\u70b9\u4e3a\u8d77\u70b9\u3002","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_1","text":"\u672c\u9875\u9762\u90e8\u5206\u5b9a\u4e49\u5f15\u81ea\u672c\u79d1\u540c\u5b66renfei\u7684 \u4e2a\u4eba\u535a\u5ba2 \u3002","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_2","text":"\u7ed9\u5b9a\u4e8c\u5206\u56fe\uff0c\u6c42\u89e3\u5176\u6700\u5927\u5339\u914d\u7684\u5339\u914d\u8fb9\u6570","title":"\u95ee\u9898\uff08\u6700\u5927\u4e8c\u5206\u5339\u914d\uff09"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_3","text":"\u4e8c\u5206\u56fe G=(V,E) G=(V,E) \u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u9876\u70b9\u96c6 V V \u53ef\u5206\u89e3\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 A, B A, B \uff0c\u5bf9 \\forall e=(a, b) \\in E \\forall e=(a, b) \\in E \u6709 a \\in A, b \\in B a \\in A, b \\in B","title":"\u4e8c\u5206\u56fe"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_4","text":"\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u53d8\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u6700\u5927\u5339\u914d \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u6709\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d","title":"\u5339\u914d"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_5","text":"\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u95ee\u9898\u5728CLRS\u7684\u89e3\u6cd5\u662f\u7531\u6700\u5927\u7f51\u7edc\u6d41\u7684\u7b97\u6cd5\u89c4\u7ea6\u5f97\u5230\u3002\u4f46\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e0d\u65ad\u5bfb\u627e \u589e\u5e7f\u8def \u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u8fd9\u79cd\u6c42\u6700\u5927\u5339\u914d\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5308\u7259\u5229\u7b97\u6cd5\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_6","text":"\u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002","title":"\u4ea4\u66ff\u8def\u4e0e\u589e\u5e7f\u8def"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_7","text":"class Match { public : Match ( int _n , int _m ) : n ( _n ), m ( _m ) { assert ( 0 <= n && 0 <= m ); g . resize ( n ); } void Add ( int from , int to ) { assert ( 0 <= from && from <= n && 0 <= to && to <= m ); g [ from ]. push_back ( to ); } int MaxMatchNum () { int res = 0 , iter = 0 ; vector < int > pa ( n , - 1 ), pb ( m , - 1 ), was ( n , 0 ); while ( 1 ) { iter ++ ; int add = 0 ; function < bool ( int ) > Dfs = [ & ]( int v ) { // Find an augmenting path starting from v was [ v ] = iter ; for ( int u : g [ v ]) if ( pb [ u ] == - 1 ) { pa [ v ] = u ; pb [ u ] = v ; return true ; } for ( int u : g [ v ]) if ( was [ pb [ u ]] != iter && Dfs ( pb [ u ])) { pa [ v ] = u ; pb [ u ] = v ; return true ; } return false ; }; for ( int i = 0 ; i < n ; i ++ ) if ( pa [ i ] == - 1 && Dfs ( i )) add ++ ; if ( add == 0 ) break ; res += add ; } return res ; } private : int n , m ; vector < vector < int >> g ; }; n, m n, m - \u4e8c\u5206\u56fe\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u9876\u70b9\u96c6\u7684\u9876\u70b9\u6570 g g - \u4e8c\u5206\u56fe res res - \u5f53\u524d\u5339\u914d\u6570 pa pa - A A \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 pb pb - B B \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 iter iter - \u5f53\u524d\u8fed\u4ee3\u6b21\u6570 was was - A A \u4e2d\u9876\u70b9\u6700\u8fd1\u88ab\u4fee\u6539\u7684\u8fed\u4ee3\u8f6e\u6b21\uff08\u5b9e\u73b0\u4e2d\u914d\u5408 iter iter \u7528\u4e8e\u5bfb\u627e\u5f53\u524d\u8f6e\u6b21\u4e2d\u672a\u88ab\u4fee\u6539\u7684\u70b9\uff0c\u907f\u514d\u589e\u5e7f\u8def\u627e\u5230\u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u70b9\u4e0a\uff09","title":"\u4ee3\u7801"},{"location":"competitive_programming/graph_theory/bipartite_matching/#_8","text":"Q: \u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4ece\u5de6\u4fa7\u5f00\u59cb\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u6709\u6ca1\u6709\u53ef\u80fd\u6f0f\u6389\u4ece\u53f3\u4fa7\u5f00\u59cb\u7684\u589e\u5e7f\u8def\u5462\uff1f A: \u4e0d\u4f1a\uff0c\u56e0\u4e3a\u589e\u5e7f\u8def\u7684\u957f\u5ea6\u5fc5\u7136\u662f\u5947\u6570\u8df3\uff0c\u8fd9\u5bfc\u81f4\u8d77\u70b9\u7ec8\u70b9\u5fc5\u7136\u4f4d\u4e8e\u5206\u522b\u4f4d\u4e8e\u5de6\u53f3\u4e24\u4fa7\uff0c\u7531\u4e8c\u5206\u56fe\u7684\u65e0\u5411\u6027\uff0c\u4e0d\u59a8\u53d6\u5de6\u4fa7\u70b9\u4e3a\u8d77\u70b9\u3002","title":"\u8ba8\u8bba"},{"location":"competitive_programming/graph_theory/dijkstra/","text":"\u5355\u6e90\u6700\u77ed\u8def \u95ee\u9898 \u7ed9\u5b9a\u5e26\u975e\u8d1f\u6743\u7684\u6709\u5411\u56fe g g \u548c\u6e90\u9876\u70b9 s s \uff0c\u6c42\u4eces\u51fa\u53d1\u5230\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int INF = 2e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; bool vis [ maxn ]; int dis [ maxn ]; int pre [ maxn ]; void Dijkstra ( int s ) { for ( int i = 0 ; i < n ; i ++ ) { // Init. dis [ i ] = g [ s ][ i ]; vis [ i ] = i == s ? true : false ; pre [ i ] = dis [ i ] == INF ? - 1 : s ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { // n - 1 steps. int mn = INF ; int u = s ; for ( int j = 0 ; j < n ; j ++ ) // Find the closest vertex u can be reached from s. if ( ! vis [ j ] && dis [ j ] < mn ) u = j , mn = dis [ j ]; vis [ u ] = true ; for ( int j = 0 ; j < n ; j ++ ) // Update distance according to u if ( ! vis [ j ] && g [ u ][ j ] < INF ) if ( dis [ u ] + g [ u ][ j ] < dis [ j ]) dis [ j ] = dis [ u ] + g [ u ][ j ], pre [ j ] = u ; } } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf vis vis - \u5df2\u8bbf\u95ee\u9876\u70b9\u6807\u8bb0\uff08\u5df2\u8bbf\u95ee\u9876\u70b9\u96c6\u5408 U U \uff09 dis dis - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 pre pre - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u7ed3\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09 \u7b97\u6cd5 Dijkstra\u7b97\u6cd5\u603b\u662f\u9009\u62e9\u5269\u4f59\u70b9\u96c6\u4e2d\u6700\u8fd1\u7684\u9876\u70b9\u52a0\u5165\u5230\u5df2\u8bbf\u95ee\u70b9\u96c6\uff0c\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u6b32\u8bc1\u660e\u5176\u6b63\u786e\u6027\u5373\u662f\u8bc1\u660e\u8d2a\u5fc3\u8fc7\u7a0b\u6bcf\u4e00\u6b65\u7684\u5c40\u90e8\u6700\u4f18\u5728\u8be5\u95ee\u9898\u4e2d\u5c31\u662f\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4e0a\u8ff0\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \uff0c\u9002\u5408\u7a20\u5bc6\u56fe\u3002\u7528\u57fa\u4e8e\u5806\u7ed3\u6784\u7684\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5df2\u8bbf\u95ee\u70b9\u96c6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u4e4b\u3002\u7b97\u6cd5\u5171 |V| |V| \u6b65\uff0c\u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u4e3a \u5bfb\u627e\u6700\u8fd1\u70b9 \u548c \u66f4\u65b0\u8ddd\u79bb \u590d\u6742\u5ea6\u4e4b\u548c\u3002\u6839\u636eCLRS\uff0c\u4e8c\u53c9\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O((V+E)\\log E) O((V+E)\\log E) \uff0c\u6590\u6ce2\u90a3\u5951\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V\\log V + E) O(V\\log V + E) \u3002","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"competitive_programming/graph_theory/dijkstra/#_1","text":"","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"competitive_programming/graph_theory/dijkstra/#_2","text":"\u7ed9\u5b9a\u5e26\u975e\u8d1f\u6743\u7684\u6709\u5411\u56fe g g \u548c\u6e90\u9876\u70b9 s s \uff0c\u6c42\u4eces\u51fa\u53d1\u5230\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/graph_theory/dijkstra/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int INF = 2e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; bool vis [ maxn ]; int dis [ maxn ]; int pre [ maxn ]; void Dijkstra ( int s ) { for ( int i = 0 ; i < n ; i ++ ) { // Init. dis [ i ] = g [ s ][ i ]; vis [ i ] = i == s ? true : false ; pre [ i ] = dis [ i ] == INF ? - 1 : s ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { // n - 1 steps. int mn = INF ; int u = s ; for ( int j = 0 ; j < n ; j ++ ) // Find the closest vertex u can be reached from s. if ( ! vis [ j ] && dis [ j ] < mn ) u = j , mn = dis [ j ]; vis [ u ] = true ; for ( int j = 0 ; j < n ; j ++ ) // Update distance according to u if ( ! vis [ j ] && g [ u ][ j ] < INF ) if ( dis [ u ] + g [ u ][ j ] < dis [ j ]) dis [ j ] = dis [ u ] + g [ u ][ j ], pre [ j ] = u ; } } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf vis vis - \u5df2\u8bbf\u95ee\u9876\u70b9\u6807\u8bb0\uff08\u5df2\u8bbf\u95ee\u9876\u70b9\u96c6\u5408 U U \uff09 dis dis - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 pre pre - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u7ed3\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09","title":"\u4ee3\u7801"},{"location":"competitive_programming/graph_theory/dijkstra/#_4","text":"Dijkstra\u7b97\u6cd5\u603b\u662f\u9009\u62e9\u5269\u4f59\u70b9\u96c6\u4e2d\u6700\u8fd1\u7684\u9876\u70b9\u52a0\u5165\u5230\u5df2\u8bbf\u95ee\u70b9\u96c6\uff0c\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u6b32\u8bc1\u660e\u5176\u6b63\u786e\u6027\u5373\u662f\u8bc1\u660e\u8d2a\u5fc3\u8fc7\u7a0b\u6bcf\u4e00\u6b65\u7684\u5c40\u90e8\u6700\u4f18\u5728\u8be5\u95ee\u9898\u4e2d\u5c31\u662f\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4e0a\u8ff0\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \uff0c\u9002\u5408\u7a20\u5bc6\u56fe\u3002\u7528\u57fa\u4e8e\u5806\u7ed3\u6784\u7684\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5df2\u8bbf\u95ee\u70b9\u96c6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u4e4b\u3002\u7b97\u6cd5\u5171 |V| |V| \u6b65\uff0c\u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u4e3a \u5bfb\u627e\u6700\u8fd1\u70b9 \u548c \u66f4\u65b0\u8ddd\u79bb \u590d\u6742\u5ea6\u4e4b\u548c\u3002\u6839\u636eCLRS\uff0c\u4e8c\u53c9\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O((V+E)\\log E) O((V+E)\\log E) \uff0c\u6590\u6ce2\u90a3\u5951\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V\\log V + E) O(V\\log V + E) \u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/graph_theory/floyd/","text":"\u6240\u6709\u70b9\u5bf9\u95f4\u7684\u6700\u77ed\u8def\u5f84 \u95ee\u9898 \u7ed9\u5b9a\u5e26\u5b9e\u6570\u6743\u7684\u6709\u5411\u56fe g g \uff0c\u6c42\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int INF = 1e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ][ maxn ]; int p [ maxn ][ maxn ]; void Floyd () { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) d [ i ][ j ] = g [ i ][ j ], p [ i ][ j ] = - 1 ; for ( int k = 0 ; k < n ; k ++ ) for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( d [ i ][ k ] + d [ k ][ j ] < d [ i ][ j ]) d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ], p [ i ][ j ] = k ; } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf d d - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6 p p - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u4e2d\u8f6c\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09 \u7b97\u6cd5 Floyd\u7b97\u6cd5\u5c5e\u4e8e\u52a8\u6001\u89c4\u5212\uff0c \u91cd\u53e0\u5b50\u95ee\u9898 \u662f\u201c\u53ef\u4ee5\u4f7f\u7528\u524d k k \u4e2a\u9876\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\u201d\u3002","title":"\u6240\u6709\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u8def"},{"location":"competitive_programming/graph_theory/floyd/#_1","text":"","title":"\u6240\u6709\u70b9\u5bf9\u95f4\u7684\u6700\u77ed\u8def\u5f84"},{"location":"competitive_programming/graph_theory/floyd/#_2","text":"\u7ed9\u5b9a\u5e26\u5b9e\u6570\u6743\u7684\u6709\u5411\u56fe g g \uff0c\u6c42\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb","title":"\u95ee\u9898"},{"location":"competitive_programming/graph_theory/floyd/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int INF = 1e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ][ maxn ]; int p [ maxn ][ maxn ]; void Floyd () { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) d [ i ][ j ] = g [ i ][ j ], p [ i ][ j ] = - 1 ; for ( int k = 0 ; k < n ; k ++ ) for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( d [ i ][ k ] + d [ k ][ j ] < d [ i ][ j ]) d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ], p [ i ][ j ] = k ; } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf d d - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6 p p - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u4e2d\u8f6c\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09","title":"\u4ee3\u7801"},{"location":"competitive_programming/graph_theory/floyd/#_4","text":"Floyd\u7b97\u6cd5\u5c5e\u4e8e\u52a8\u6001\u89c4\u5212\uff0c \u91cd\u53e0\u5b50\u95ee\u9898 \u662f\u201c\u53ef\u4ee5\u4f7f\u7528\u524d k k \u4e2a\u9876\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\u201d\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u95ee\u9898 \u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe g g \uff0c\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u8fb9\u7684\u603b\u6743\u91cd\u6700\u5c0f \u7b97\u6cd5I - Prim \u7ef4\u62a4\u4e00\u4e2aMST\u70b9\u96c6\uff0c\u521d\u59cb\u53ea\u6709\u4efb\u4e00\u70b9\uff08\u4e00\u822c\u53d6\u7f16\u53f7\u4e3a 0 0 \u7684\u70b9\uff09\uff0c\u6bcf\u6b21\u53d6\u6240\u6709\u4e00\u7aef\u5728MST\u70b9\u96c6\u5185\u90e8\u53e6\u4e00\u7aef\u5728MST\u70b9\u96c6\u5916\u90e8\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u5c06\u8be5\u8fb9\u7684\u53e6\u4e00\u7aef\u52a0\u5165MST\u70b9\u96c6\u5e76\u8bb0\u5f55\u8be5\u8fb9\uff0c\u5219\u7ecf\u8fc7 n-1 n-1 \u6b65\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 Prim\u7b97\u6cd5\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u5176\u6b63\u786e\u6027\u57fa\u4e8eMST\u6027\u8d28\uff1a \u5bf9\u4e8e\u4e00\u9897 \u6b63\u5728\u6784\u9020\u4e2d \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bbe U, V U, V \u5206\u522b\u4e3a\u6811\u7684\u9876\u70b9\u96c6\u53ca\u5176\u8865\u96c6\u3002\u82e5\u8fb9 (u, v) (u, v) \u4e3a\u4e00\u7aef\u5728\u5f53\u524d\u70b9\u96c6\u4e2d u \\in U u \\in U \uff0c\u53e6\u4e00\u7aef\u4e0d\u5728\u5f53\u524d\u70b9\u96c6\u4e2d v \\in V v \\in V \uff0c\u4e14\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u9897\u5305\u542b\u8be5\u8fb9 (u, v) (u, v) \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 10 ; const int INF = 2e9 ; int n ; int G [ maxn ][ maxn ]; int NextVertex ( int low_cost [], bool mst_set []) { int mn = INF , mn_idx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( ! mst_set [ i ] && low_cost [ i ] < mn ) mn = low_cost [ i ], mn_idx = i ; return mn_idx ; } ll PrimMST () { int par [ n ]; // Store which inner vertex to connect for outer vertexes. int low_cost [ n ]; // lowest cost for outer vertexes to connect to a inner vertex. bool mst_set [ n ]; // Mark inner vertices. // Initially put the 1st vertex into mst_set. mst_set [ 0 ] = true , par [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; i ++ ) low_cost [ i ] = G [ 0 ][ i ], mst_set [ i ] = false , par [ i ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { // There are n - 1 steps to construct MST. int u = NextVertex ( low_cost , mst_set ); mst_set [ u ] = true ; for ( int v = 0 ; v < n ; v ++ ) if ( ! mst_set [ v ] && G [ u ][ v ] < low_cost [ v ]) par [ v ] = u , low_cost [ v ] = G [ u ][ v ]; } ll ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) ans += G [ i ][ par [ i ]]; return ans ; } G G - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf par par - par[i] par[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u9876\u70b9\u5728\u88ab\u52a0\u5165MST\u7684\u65f6\u5019\u6240\u8fde\u7684\u6b63\u5728\u751f\u6210\u4e2dMST\u4e0a\u7684\u9876\u70b9\uff08\u7528\u4e8e\u83b7\u53d6\u5177\u4f53\u751f\u6210\u6811\u7684\u8fb9\u96c6\uff0c par[1, n-1] par[1, n-1] \u5373\u4e3a\u6240\u6c42\uff09 low_cost low_cost - \u5f53\u524d\u9636\u6bb5\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u4e4b\u5916\u7684\u70b9\u5230\u5f53\u524dMST\u7684\u6700\u77ed\u8ddd\u79bb $ mst_set mst_set - \u5c5e\u4e8e\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u7684\u9876\u70b9\u6807\u8bb0 \u4ee5\u4e0a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \u3002 \u7b97\u6cd52 - Kruskal Kruskal\u7b97\u6cd5\u7684\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5982\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u53ef\u5c06\u6b65\u9aa4\u603b\u7ed3\u5982\u4e0b\uff1a \u65b0\u5efa\u56fe G G \uff0c\u56fe G G \u4e2d\u6709\u4e0e\u539f\u56fe\u76f8\u540c\u7684\u9876\u70b9\uff0c\u4f46\u6ca1\u6709\u8fb9\uff1b \u5c06\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b \u4ece\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u56fe G G \u5185\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u6dfb\u52a0\u8fd9\u6761\u8fb9\u5230\u56fe G G \u4e2d\uff1b \u91cd\u590d3\uff0c\u76f4\u5230\u56fe G G \u53ea\u5269\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002 \uff08\u6ce8\uff1a\u8be5\u56fe\u53ea\u5173\u6ce8\u52a8\u6001\u8fde\u901a\u6027\uff0c\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u5c31\u597d\u3002\uff09 \u4f18\u5316 \u6839\u636eCLRS\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u5806\uff0c\u5219\u53ef\u4ee5\u5c06Prim\u548cKruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5728 O(E\\log V) O(E\\log V) \uff0c\u5982\u679c\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5806\uff0cPrim\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u6539\u5584\u4e3a O(E+V\\log V) O(E+V\\log V) \u3002\u6b64\u8fd0\u884c\u65f6\u95f4\u5728 |V| \\ll |E| |V| \\ll |E| \uff08\u7a00\u758f\u56fe\uff09 \u7684\u60c5\u51b5\u4e0b\u8f83\u4e8c\u53c9\u5806\u6709\u76f8\u5f53\u5927\u7684\u6539\u8fdb\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#_2","text":"\u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe g g \uff0c\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u8fb9\u7684\u603b\u6743\u91cd\u6700\u5c0f","title":"\u95ee\u9898"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#i-prim","text":"\u7ef4\u62a4\u4e00\u4e2aMST\u70b9\u96c6\uff0c\u521d\u59cb\u53ea\u6709\u4efb\u4e00\u70b9\uff08\u4e00\u822c\u53d6\u7f16\u53f7\u4e3a 0 0 \u7684\u70b9\uff09\uff0c\u6bcf\u6b21\u53d6\u6240\u6709\u4e00\u7aef\u5728MST\u70b9\u96c6\u5185\u90e8\u53e6\u4e00\u7aef\u5728MST\u70b9\u96c6\u5916\u90e8\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u5c06\u8be5\u8fb9\u7684\u53e6\u4e00\u7aef\u52a0\u5165MST\u70b9\u96c6\u5e76\u8bb0\u5f55\u8be5\u8fb9\uff0c\u5219\u7ecf\u8fc7 n-1 n-1 \u6b65\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 Prim\u7b97\u6cd5\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u5176\u6b63\u786e\u6027\u57fa\u4e8eMST\u6027\u8d28\uff1a \u5bf9\u4e8e\u4e00\u9897 \u6b63\u5728\u6784\u9020\u4e2d \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bbe U, V U, V \u5206\u522b\u4e3a\u6811\u7684\u9876\u70b9\u96c6\u53ca\u5176\u8865\u96c6\u3002\u82e5\u8fb9 (u, v) (u, v) \u4e3a\u4e00\u7aef\u5728\u5f53\u524d\u70b9\u96c6\u4e2d u \\in U u \\in U \uff0c\u53e6\u4e00\u7aef\u4e0d\u5728\u5f53\u524d\u70b9\u96c6\u4e2d v \\in V v \\in V \uff0c\u4e14\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u9897\u5305\u542b\u8be5\u8fb9 (u, v) (u, v) \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002","title":"\u7b97\u6cd5I - Prim"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#_3","text":"#include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 10 ; const int INF = 2e9 ; int n ; int G [ maxn ][ maxn ]; int NextVertex ( int low_cost [], bool mst_set []) { int mn = INF , mn_idx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( ! mst_set [ i ] && low_cost [ i ] < mn ) mn = low_cost [ i ], mn_idx = i ; return mn_idx ; } ll PrimMST () { int par [ n ]; // Store which inner vertex to connect for outer vertexes. int low_cost [ n ]; // lowest cost for outer vertexes to connect to a inner vertex. bool mst_set [ n ]; // Mark inner vertices. // Initially put the 1st vertex into mst_set. mst_set [ 0 ] = true , par [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; i ++ ) low_cost [ i ] = G [ 0 ][ i ], mst_set [ i ] = false , par [ i ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { // There are n - 1 steps to construct MST. int u = NextVertex ( low_cost , mst_set ); mst_set [ u ] = true ; for ( int v = 0 ; v < n ; v ++ ) if ( ! mst_set [ v ] && G [ u ][ v ] < low_cost [ v ]) par [ v ] = u , low_cost [ v ] = G [ u ][ v ]; } ll ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) ans += G [ i ][ par [ i ]]; return ans ; } G G - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf par par - par[i] par[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u9876\u70b9\u5728\u88ab\u52a0\u5165MST\u7684\u65f6\u5019\u6240\u8fde\u7684\u6b63\u5728\u751f\u6210\u4e2dMST\u4e0a\u7684\u9876\u70b9\uff08\u7528\u4e8e\u83b7\u53d6\u5177\u4f53\u751f\u6210\u6811\u7684\u8fb9\u96c6\uff0c par[1, n-1] par[1, n-1] \u5373\u4e3a\u6240\u6c42\uff09 low_cost low_cost - \u5f53\u524d\u9636\u6bb5\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u4e4b\u5916\u7684\u70b9\u5230\u5f53\u524dMST\u7684\u6700\u77ed\u8ddd\u79bb $ mst_set mst_set - \u5c5e\u4e8e\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u7684\u9876\u70b9\u6807\u8bb0 \u4ee5\u4e0a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \u3002","title":"\u4ee3\u7801"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#2-kruskal","text":"Kruskal\u7b97\u6cd5\u7684\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5982\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u53ef\u5c06\u6b65\u9aa4\u603b\u7ed3\u5982\u4e0b\uff1a \u65b0\u5efa\u56fe G G \uff0c\u56fe G G \u4e2d\u6709\u4e0e\u539f\u56fe\u76f8\u540c\u7684\u9876\u70b9\uff0c\u4f46\u6ca1\u6709\u8fb9\uff1b \u5c06\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b \u4ece\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u56fe G G \u5185\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u6dfb\u52a0\u8fd9\u6761\u8fb9\u5230\u56fe G G \u4e2d\uff1b \u91cd\u590d3\uff0c\u76f4\u5230\u56fe G G \u53ea\u5269\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002 \uff08\u6ce8\uff1a\u8be5\u56fe\u53ea\u5173\u6ce8\u52a8\u6001\u8fde\u901a\u6027\uff0c\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u5c31\u597d\u3002\uff09","title":"\u7b97\u6cd52 - Kruskal"},{"location":"competitive_programming/graph_theory/minimum_spanning_tree/#_4","text":"\u6839\u636eCLRS\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u5806\uff0c\u5219\u53ef\u4ee5\u5c06Prim\u548cKruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5728 O(E\\log V) O(E\\log V) \uff0c\u5982\u679c\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5806\uff0cPrim\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u6539\u5584\u4e3a O(E+V\\log V) O(E+V\\log V) \u3002\u6b64\u8fd0\u884c\u65f6\u95f4\u5728 |V| \\ll |E| |V| \\ll |E| \uff08\u7a00\u758f\u56fe\uff09 \u7684\u60c5\u51b5\u4e0b\u8f83\u4e8c\u53c9\u5806\u6709\u76f8\u5f53\u5927\u7684\u6539\u8fdb\u3002","title":"\u4f18\u5316"},{"location":"competitive_programming/math/catalan_number/","text":"Catalan number / \u5361\u7279\u5170\u6570 \u95ee\u9898 n n \u5bf9\u62ec\u53f7 () \u6784\u6210\u7684\u5e8f\u5217\uff0c\u6c42\u6ee1\u8db3\u62ec\u53f7\u5408\u6cd5\u5339\u914d\u7684\u6392\u5217\u6570\u91cf\u3002 \u5206\u6790 \u6392\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e00\u5b9a\u662f ( \u8bc1\u660e\uff1a\u5982\u679c\u9996\u5143\u662f ) \u5219\u5176\u65e0\u6cd5\u88ab\u5339\u914d \u7ed9\u5b9a\u5408\u6cd5\u6392\u5217\uff0c\u5219\u5339\u914d\u65b9\u5f0f\u552f\u4e00 \u8bbe a_i a_i \u8868\u793a\u7531 i i \u5bf9\u62ec\u53f7\u7ec4\u6210\u7684\u5339\u914d\u6392\u5217\u7684\u6570\u91cf\uff0c\u663e\u7136 a_1 = 1 a_1 = 1 \uff0c\u4ece\u4e0b\u9762\u7684\u9012\u63a8\u5f0f\u5206\u6790\u4e2d\u53ef\u4ee5\u770b\u51fa a_0 a_0 \u8d77\u5230\u4e86\u4e58\u6cd5\u5e7a\u5143\u7684\u4f5c\u7528\uff0c\u6545\u4ee4 a_0 = 1 a_0 = 1 \u3002 \u5bf9\u4e8e\u7531 n n \u5bf9\u62ec\u53f7\u7ec4\u6210\u7684\u6392\u5217\uff0c\u8003\u8651\u4e0e\u9996\u4f4d ( \u5339\u914d\u7684 ) \u7684\u4f4d\u7f6e\uff0c\u5176\u5de6\u53f3\u5404\u6709\u4e00\u4e2a\u957f\u5ea6\u66f4\u77ed\u7684\u5339\u914d\u5e8f\u5217\uff0c\u9012\u63a8\u5f0f\u4e3a a_n = \\sum_{i=0}^{n-1} a_i a_{n - 1 - i} a_n = \\sum_{i=0}^{n-1} a_i a_{n - 1 - i} \u5982\u6b64\u53ef\u4ee5\u5728 O(n^2) O(n^2) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u7ed3\u679c\u3002 Catalan\u6570 \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6570\u5217 {a_1, a_2, ...} {a_1, a_2, ...} \u79f0\u4e3a Catalan\u6570\u5217 \u3002 \u901a\u9879 a_n a_n \u79f0\u4e3a Catalan\u6570 \u901a\u9879\u516c\u5f0f \u4e0a\u8ff0\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a a_0 = a_1 = 1 a_0 = a_1 = 1 a_n = \\frac{C_{2n}^n}{n+1} (n \\geq 2, n \\in \\mathbb{N}_+) a_n = \\frac{C_{2n}^n}{n+1} (n \\geq 2, n \\in \\mathbb{N}_+) \u5173\u4e8e Catalan\u6570 \u7684\u5e38\u89c1\u516c\u5f0f a_n = \\begin{cases} \\sum_{i=1}^{n} a_{i-1} a_{n-i} & n \\geq 2, n \\in \\mathbb{N_{+}}\\ 1 & n = 0, 1 \\end{cases} a_n = \\begin{cases} \\sum_{i=1}^{n} a_{i-1} a_{n-i} & n \\geq 2, n \\in \\mathbb{N_{+}}\\ 1 & n = 0, 1 \\end{cases} a_n = \\frac{a_{n-1} (4n-2)}{n+1} a_n = \\frac{a_{n-1} (4n-2)}{n+1} a_n = C_{2n}^{n} - C_{2n}^{n-1} a_n = C_{2n}^{n} - C_{2n}^{n-1} \u53ef\u7528Catalan\u6570\u5217\u5efa\u6a21\u7684\u95ee\u9898 \u4e70\u7968\u627e\u96f6\uff1a 2n 2n \u4e2a\u4eba\u4e70\u7968\uff0c\u7968\u4ef7 50 50 \uff0c\u5176\u4e2d n n \u4e2a\u4eba\u624b\u4e2d\u63e1\u6709 100 100 \u5143\u949e\u7968\uff0c n n \u4e2a\u4eba\u624b\u4e2d\u63e1\u6709 50 50 \u5143\u949e\u7968\u3002\u5047\u8bbe\u5f00\u59cb\u65f6\u552e\u7968\u5904\u6ca1\u6709\u96f6\u94b1\uff0c\u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u6392\u961f\u65b9\u5f0f\u53ef\u4ee5\u907f\u514d\u51fa\u73b0\u627e\u4e0d\u5f00\u94b1\u7684\u95ee\u9898\uff1f n n \u4e2a\u8282\u70b9\u53ef\u6784\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811 \u591a\u8fb9\u5f62\u5212\u5206\u6210\u4e09\u89d2\u5f62\u7684\u95ee\u9898\uff1a\u6c42\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5212\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570 \u7c7b\u4f3c\u9898\u76ee\uff1a\u5706\u4e0a\u7684 2n 2n \u4e2a\u70b9\uff0c\u6210\u5bf9\u8fde\u63a5\u5f97\u5230 n n \u6761\u7ebf\u6bb5\u4e0d\u60f3\u4ea4\uff0c\u6c42\u53ef\u884c\u7684\u65b9\u6cd5\u6570 \u8def\u5f84\u8ba1\u6570\u95ee\u9898\uff1a \u8003\u8651\u975e\u964d\u8def\u5f84 \u4ece (0, 0) (0, 0) \u5230 (m, n) (m, n) \u7684\u975e\u964d\u8def\u5f84\u6570\u7b49\u4e8e m m \u4e2a x x \u548c n n \u4e2a y y \u7684\u6392\u5217\u6570\uff0c\u5373 C_{n + m}^m C_{n + m}^m \u4ece 0, 0 0, 0 \u5230 n, n n, n \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u63a5\u89e6\u76f4\u7ebf y = x y = x \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u5148\u8003\u8651 y=x y=x \u4e0b\u65b9\u7684\u8def\u5f84\uff0c\u90fd\u662f\u4ece (0, 0) (0, 0) \u51fa\u53d1\uff0c\u7ecf\u8fc7 (1, 0) (1, 0) \u53ca (n, n-1) (n, n-1) \u5230 (n,n) (n,n) \uff0c\u53ef\u4ee5\u770b\u505a\u662f (1,0) (1,0) \u5230 (n,n-1) (n,n-1) \u4e0d\u63a5\u89e6 y=x y=x \u7684\u975e\u964d\u8def\u5f84\u6570\u3002 \u6240\u6709\u7684\u7684\u975e\u964d\u8def\u5f84\u6709 C_{2n-2}^{n-1} C_{2n-2}^{n-1} \u6761\u3002\u5bf9\u4e8e\u8fd9\u91cc\u9762\u4efb\u610f\u4e00\u6761\u63a5\u89e6\u4e86 y=x y=x \u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u628a\u5b83\u6700\u540e\u79bb\u5f00\u8fd9\u6761\u7ebf\u7684\u70b9\u5230 (1,0) (1,0) \u4e4b\u95f4\u7684\u90e8\u5206\u5173\u4e8e y=x y=x \u5bf9\u79f0\u53d8\u6362\uff0c\u5c31\u5f97\u5230\u4ece (0,1) (0,1) \u5230 (n,n-1) (n,n-1) \u7684\u4e00\u6761\u975e\u964d\u8def\u5f84\u3002\u53cd\u4e4b\u4e5f\u6210\u7acb\u3002\u4ece\u800c y=x y=x \u4e0b\u65b9\u7684\u975e\u964d\u8def\u5f84\u6570\u662f C_{2n-2}^{n-1} - C_{2n-2}^n C_{2n-2}^{n-1} - C_{2n-2}^n \u3002\u6839\u636e\u5bf9\u79f0\u6027\u53ef\u77e5\u6240\u6c42\u7b54\u6848\u4e3a 2(C_{2n-2}^{n-1} - C_{2n-2}^n) 2(C_{2n-2}^{n-1} - C_{2n-2}^n) \u3002","title":"\u5361\u7279\u5170\u6570"},{"location":"competitive_programming/math/catalan_number/#catalan-number","text":"","title":"Catalan number / \u5361\u7279\u5170\u6570"},{"location":"competitive_programming/math/catalan_number/#_1","text":"n n \u5bf9\u62ec\u53f7 () \u6784\u6210\u7684\u5e8f\u5217\uff0c\u6c42\u6ee1\u8db3\u62ec\u53f7\u5408\u6cd5\u5339\u914d\u7684\u6392\u5217\u6570\u91cf\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/math/catalan_number/#_2","text":"\u6392\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e00\u5b9a\u662f ( \u8bc1\u660e\uff1a\u5982\u679c\u9996\u5143\u662f ) \u5219\u5176\u65e0\u6cd5\u88ab\u5339\u914d \u7ed9\u5b9a\u5408\u6cd5\u6392\u5217\uff0c\u5219\u5339\u914d\u65b9\u5f0f\u552f\u4e00 \u8bbe a_i a_i \u8868\u793a\u7531 i i \u5bf9\u62ec\u53f7\u7ec4\u6210\u7684\u5339\u914d\u6392\u5217\u7684\u6570\u91cf\uff0c\u663e\u7136 a_1 = 1 a_1 = 1 \uff0c\u4ece\u4e0b\u9762\u7684\u9012\u63a8\u5f0f\u5206\u6790\u4e2d\u53ef\u4ee5\u770b\u51fa a_0 a_0 \u8d77\u5230\u4e86\u4e58\u6cd5\u5e7a\u5143\u7684\u4f5c\u7528\uff0c\u6545\u4ee4 a_0 = 1 a_0 = 1 \u3002 \u5bf9\u4e8e\u7531 n n \u5bf9\u62ec\u53f7\u7ec4\u6210\u7684\u6392\u5217\uff0c\u8003\u8651\u4e0e\u9996\u4f4d ( \u5339\u914d\u7684 ) \u7684\u4f4d\u7f6e\uff0c\u5176\u5de6\u53f3\u5404\u6709\u4e00\u4e2a\u957f\u5ea6\u66f4\u77ed\u7684\u5339\u914d\u5e8f\u5217\uff0c\u9012\u63a8\u5f0f\u4e3a a_n = \\sum_{i=0}^{n-1} a_i a_{n - 1 - i} a_n = \\sum_{i=0}^{n-1} a_i a_{n - 1 - i} \u5982\u6b64\u53ef\u4ee5\u5728 O(n^2) O(n^2) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u7ed3\u679c\u3002","title":"\u5206\u6790"},{"location":"competitive_programming/math/catalan_number/#catalan","text":"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6570\u5217 {a_1, a_2, ...} {a_1, a_2, ...} \u79f0\u4e3a Catalan\u6570\u5217 \u3002 \u901a\u9879 a_n a_n \u79f0\u4e3a Catalan\u6570","title":"Catalan\u6570"},{"location":"competitive_programming/math/catalan_number/#_3","text":"\u4e0a\u8ff0\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a a_0 = a_1 = 1 a_0 = a_1 = 1 a_n = \\frac{C_{2n}^n}{n+1} (n \\geq 2, n \\in \\mathbb{N}_+) a_n = \\frac{C_{2n}^n}{n+1} (n \\geq 2, n \\in \\mathbb{N}_+)","title":"\u901a\u9879\u516c\u5f0f"},{"location":"competitive_programming/math/catalan_number/#catalan_1","text":"a_n = \\begin{cases} \\sum_{i=1}^{n} a_{i-1} a_{n-i} & n \\geq 2, n \\in \\mathbb{N_{+}}\\ 1 & n = 0, 1 \\end{cases} a_n = \\begin{cases} \\sum_{i=1}^{n} a_{i-1} a_{n-i} & n \\geq 2, n \\in \\mathbb{N_{+}}\\ 1 & n = 0, 1 \\end{cases} a_n = \\frac{a_{n-1} (4n-2)}{n+1} a_n = \\frac{a_{n-1} (4n-2)}{n+1} a_n = C_{2n}^{n} - C_{2n}^{n-1} a_n = C_{2n}^{n} - C_{2n}^{n-1}","title":"\u5173\u4e8e Catalan\u6570 \u7684\u5e38\u89c1\u516c\u5f0f"},{"location":"competitive_programming/math/catalan_number/#catalan_2","text":"\u4e70\u7968\u627e\u96f6\uff1a 2n 2n \u4e2a\u4eba\u4e70\u7968\uff0c\u7968\u4ef7 50 50 \uff0c\u5176\u4e2d n n \u4e2a\u4eba\u624b\u4e2d\u63e1\u6709 100 100 \u5143\u949e\u7968\uff0c n n \u4e2a\u4eba\u624b\u4e2d\u63e1\u6709 50 50 \u5143\u949e\u7968\u3002\u5047\u8bbe\u5f00\u59cb\u65f6\u552e\u7968\u5904\u6ca1\u6709\u96f6\u94b1\uff0c\u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u6392\u961f\u65b9\u5f0f\u53ef\u4ee5\u907f\u514d\u51fa\u73b0\u627e\u4e0d\u5f00\u94b1\u7684\u95ee\u9898\uff1f n n \u4e2a\u8282\u70b9\u53ef\u6784\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811 \u591a\u8fb9\u5f62\u5212\u5206\u6210\u4e09\u89d2\u5f62\u7684\u95ee\u9898\uff1a\u6c42\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5212\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570 \u7c7b\u4f3c\u9898\u76ee\uff1a\u5706\u4e0a\u7684 2n 2n \u4e2a\u70b9\uff0c\u6210\u5bf9\u8fde\u63a5\u5f97\u5230 n n \u6761\u7ebf\u6bb5\u4e0d\u60f3\u4ea4\uff0c\u6c42\u53ef\u884c\u7684\u65b9\u6cd5\u6570 \u8def\u5f84\u8ba1\u6570\u95ee\u9898\uff1a \u8003\u8651\u975e\u964d\u8def\u5f84 \u4ece (0, 0) (0, 0) \u5230 (m, n) (m, n) \u7684\u975e\u964d\u8def\u5f84\u6570\u7b49\u4e8e m m \u4e2a x x \u548c n n \u4e2a y y \u7684\u6392\u5217\u6570\uff0c\u5373 C_{n + m}^m C_{n + m}^m \u4ece 0, 0 0, 0 \u5230 n, n n, n \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u63a5\u89e6\u76f4\u7ebf y = x y = x \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u5148\u8003\u8651 y=x y=x \u4e0b\u65b9\u7684\u8def\u5f84\uff0c\u90fd\u662f\u4ece (0, 0) (0, 0) \u51fa\u53d1\uff0c\u7ecf\u8fc7 (1, 0) (1, 0) \u53ca (n, n-1) (n, n-1) \u5230 (n,n) (n,n) \uff0c\u53ef\u4ee5\u770b\u505a\u662f (1,0) (1,0) \u5230 (n,n-1) (n,n-1) \u4e0d\u63a5\u89e6 y=x y=x \u7684\u975e\u964d\u8def\u5f84\u6570\u3002 \u6240\u6709\u7684\u7684\u975e\u964d\u8def\u5f84\u6709 C_{2n-2}^{n-1} C_{2n-2}^{n-1} \u6761\u3002\u5bf9\u4e8e\u8fd9\u91cc\u9762\u4efb\u610f\u4e00\u6761\u63a5\u89e6\u4e86 y=x y=x \u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u628a\u5b83\u6700\u540e\u79bb\u5f00\u8fd9\u6761\u7ebf\u7684\u70b9\u5230 (1,0) (1,0) \u4e4b\u95f4\u7684\u90e8\u5206\u5173\u4e8e y=x y=x \u5bf9\u79f0\u53d8\u6362\uff0c\u5c31\u5f97\u5230\u4ece (0,1) (0,1) \u5230 (n,n-1) (n,n-1) \u7684\u4e00\u6761\u975e\u964d\u8def\u5f84\u3002\u53cd\u4e4b\u4e5f\u6210\u7acb\u3002\u4ece\u800c y=x y=x \u4e0b\u65b9\u7684\u975e\u964d\u8def\u5f84\u6570\u662f C_{2n-2}^{n-1} - C_{2n-2}^n C_{2n-2}^{n-1} - C_{2n-2}^n \u3002\u6839\u636e\u5bf9\u79f0\u6027\u53ef\u77e5\u6240\u6c42\u7b54\u6848\u4e3a 2(C_{2n-2}^{n-1} - C_{2n-2}^n) 2(C_{2n-2}^{n-1} - C_{2n-2}^n) \u3002","title":"\u53ef\u7528Catalan\u6570\u5217\u5efa\u6a21\u7684\u95ee\u9898"},{"location":"competitive_programming/math/combination/","text":"\u7ec4\u5408\u6570 \u95ee\u9898 \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u63d0\u4f9b\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \u7684\u65b9\u6cd5\uff0c\u7ed3\u679c\u5bf9 10^9 + 7 10^9 + 7 \u53d6\u6a21 \u4ee3\u7801 \u4ee5\u4e0b Combination \u63d0\u4f9b int C(int x, int y) \u65b9\u6cd5\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y C_x^y \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u8981\u6c42 0 \\leq y \\leq x \\leq 2e5 0 \\leq y \\leq x \\leq 2e5 \uff0c\u5e76\u63d0\u4f9b\u4e86\u4fee\u6539\u4e0a\u9650\u7684\u6784\u9020\u51fd\u6570\u3002 class Combination { public : Combination () { PreProcess (); } Combination ( int _mx ) : mx ( _mx ) { PreProcess (); } int C ( int x , int y ) { // Choose y from x. assert ( 0 <= y ), assert ( y <= x ), assert ( x <= mx ); return 1ll * fac [ x ] * facinv [ y ] % mod * facinv [ x - y ] % mod ; } private : int mx = 2e5 ; int mod = 1e9 + 7 ; vector < int > fac , facinv ; int qpower ( int a , int b ) { int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % mod ; a = 1ll * a * a % mod ; b >>= 1 ; } return ans ; } void PreProcess () { fac . resize ( mx + 1 ), facinv . resize ( mx + 1 ); fac [ 0 ] = 1 ; for ( int i = 1 ; i <= mx ; i ++ ) { fac [ i ] = 1ll * fac [ i - 1 ] * i % mod ; } facinv [ mx ] = qpower ( fac [ mx ], mod - 2 ); for ( int i = mx - 1 ; i >= 0 ; i -- ) { facinv [ i ] = 1ll * facinv [ i + 1 ] * ( i + 1 ) % mod ; } } }; \u7b97\u6cd5 \u6839\u636e\u7ec4\u5408\u6570\u8ba1\u7b97\u5f0f C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \uff0c\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9884\u5904\u7406\u6c42\u51fa x \\in [0, x_{max}] x \\in [0, x_{max}] \u8303\u56f4\u5185\u6240\u6709\u6570\u7684\u9636\u4e58 x! x! \u548c\u9636\u4e58\u7684\u4e58\u6cd5\u9006\u5143 (x!)^{-1} (x!)^{-1} \u3002 \u663e\u7136\uff0c\u9636\u4e58\u8868 x! x! \u53ef\u4ee5\u5728 O(n) O(n) \u65f6\u95f4\u5185\u5f97\u5230\u3002 \u4e0b\u9762\u6c42\u9636\u4e58\u8868\u7684\u9006\u5143\u8868\uff1a \u7531 ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x \u53ef\u77e5\u9636\u4e58\u9006\u5143\u8868\u53ef\u964d\u5e8f\u751f\u6210\uff0c\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u521d\u59cb\u503c (x_{max}!)^{-1} (x_{max}!)^{-1} \u5462\uff1f \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u53ef\u5f97 a \\cdot a^{p-2} \\equiv 1 \\pmod p a \\cdot a^{p-2} \\equiv 1 \\pmod p \u7531\u4e0a\u5f0f\u53ef\u77e5 a^{p-2} a^{p-2} \u53ef\u4f5c\u4e3a a a \u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u5373 (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p","title":"\u7ec4\u5408\u6570"},{"location":"competitive_programming/math/combination/#_1","text":"","title":"\u7ec4\u5408\u6570"},{"location":"competitive_programming/math/combination/#_2","text":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u63d0\u4f9b\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \u7684\u65b9\u6cd5\uff0c\u7ed3\u679c\u5bf9 10^9 + 7 10^9 + 7 \u53d6\u6a21","title":"\u95ee\u9898"},{"location":"competitive_programming/math/combination/#_3","text":"\u4ee5\u4e0b Combination \u63d0\u4f9b int C(int x, int y) \u65b9\u6cd5\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y C_x^y \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u8981\u6c42 0 \\leq y \\leq x \\leq 2e5 0 \\leq y \\leq x \\leq 2e5 \uff0c\u5e76\u63d0\u4f9b\u4e86\u4fee\u6539\u4e0a\u9650\u7684\u6784\u9020\u51fd\u6570\u3002 class Combination { public : Combination () { PreProcess (); } Combination ( int _mx ) : mx ( _mx ) { PreProcess (); } int C ( int x , int y ) { // Choose y from x. assert ( 0 <= y ), assert ( y <= x ), assert ( x <= mx ); return 1ll * fac [ x ] * facinv [ y ] % mod * facinv [ x - y ] % mod ; } private : int mx = 2e5 ; int mod = 1e9 + 7 ; vector < int > fac , facinv ; int qpower ( int a , int b ) { int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % mod ; a = 1ll * a * a % mod ; b >>= 1 ; } return ans ; } void PreProcess () { fac . resize ( mx + 1 ), facinv . resize ( mx + 1 ); fac [ 0 ] = 1 ; for ( int i = 1 ; i <= mx ; i ++ ) { fac [ i ] = 1ll * fac [ i - 1 ] * i % mod ; } facinv [ mx ] = qpower ( fac [ mx ], mod - 2 ); for ( int i = mx - 1 ; i >= 0 ; i -- ) { facinv [ i ] = 1ll * facinv [ i + 1 ] * ( i + 1 ) % mod ; } } };","title":"\u4ee3\u7801"},{"location":"competitive_programming/math/combination/#_4","text":"\u6839\u636e\u7ec4\u5408\u6570\u8ba1\u7b97\u5f0f C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \uff0c\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9884\u5904\u7406\u6c42\u51fa x \\in [0, x_{max}] x \\in [0, x_{max}] \u8303\u56f4\u5185\u6240\u6709\u6570\u7684\u9636\u4e58 x! x! \u548c\u9636\u4e58\u7684\u4e58\u6cd5\u9006\u5143 (x!)^{-1} (x!)^{-1} \u3002 \u663e\u7136\uff0c\u9636\u4e58\u8868 x! x! \u53ef\u4ee5\u5728 O(n) O(n) \u65f6\u95f4\u5185\u5f97\u5230\u3002 \u4e0b\u9762\u6c42\u9636\u4e58\u8868\u7684\u9006\u5143\u8868\uff1a \u7531 ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x \u53ef\u77e5\u9636\u4e58\u9006\u5143\u8868\u53ef\u964d\u5e8f\u751f\u6210\uff0c\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u521d\u59cb\u503c (x_{max}!)^{-1} (x_{max}!)^{-1} \u5462\uff1f \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u53ef\u5f97 a \\cdot a^{p-2} \\equiv 1 \\pmod p a \\cdot a^{p-2} \\equiv 1 \\pmod p \u7531\u4e0a\u5f0f\u53ef\u77e5 a^{p-2} a^{p-2} \u53ef\u4f5c\u4e3a a a \u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u5373 (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p","title":"\u7b97\u6cd5"},{"location":"competitive_programming/math/eratosthenes/","text":"\u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u9009\u6cd5 \u95ee\u9898 \u5bfb\u627e n n \u4ee5\u5185\u6240\u6709\u7d20\u6570\u3002 \u7b97\u6cd5 \u521d\u59cb\u5316\u957f\u5ea6\u4e3a n n \u7684\u7a7a\u8868\u672a\u88ab\u6807\u8bb0\uff0c\u4ece 2 2 \u5230 n n \u9012\u589e\uff0c\u82e5\u5f53\u524d\u5143\u7d20\u672a\u88ab\u6807\u8bb0\uff0c\u5219\u8bb0\u5f55\u8be5\u5143\u7d20\u4e3a\u7d20\u6570\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5728 n n \u4ee5\u5185\u7684\u6240\u6709\u500d\u6570\u4e3a\u5408\u6570\u3002 \u6ce8\u610f\u5230 \u6807\u8bb0\u500d\u6570\u4e3a\u5408\u6570 \u7684\u64cd\u4f5c\u53ea\u5bf9 [2, \\sqrt{n}] [2, \\sqrt{n}] \u8303\u56f4\u5185\u627e\u5230\u7684\u7d20\u6570\u64cd\u4f5c\u5373\u53ef\u3002 \u53ef\u8bc1\u660e\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log \\log n) O(n\\log \\log n) \u3002 \u4ee3\u7801 const int N = 20 ; bool vis [ N + 5 ]; std :: vector < int > Eratosthenes_sieve () { std :: vector < int > primes ; for ( int i = 2 ; i <= N ; i ++ ) { if ( ! vis [ i ]) primes . push_back ( i ); for ( int j = i * i ; j <= N ; j += i ) if ( ! vis [ j ]) vis [ j ] = true ; } return primes ; } \u5e94\u7528 \u751f\u6210 n n \u4ee5\u5185\u6240\u6709\u6574\u6570\u7684\u6700\u5c0f\u7d20\u56e0\u6570 \u5728\u6807\u8bb0 p p \u7684\u6240\u6709\u500d\u6570\u7684\u8fc7\u7a0b\u4e2d p p \u5373\u4e3a\u6240\u6709\u500d\u6570\u7684\u6700\u5c0f\u7d20\u56e0\u6570\u3002","title":"\u57c3\u62c9\u6258\u8272\u5c3c\u7b5b"},{"location":"competitive_programming/math/eratosthenes/#_1","text":"","title":"\u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u9009\u6cd5"},{"location":"competitive_programming/math/eratosthenes/#_2","text":"\u5bfb\u627e n n \u4ee5\u5185\u6240\u6709\u7d20\u6570\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/math/eratosthenes/#_3","text":"\u521d\u59cb\u5316\u957f\u5ea6\u4e3a n n \u7684\u7a7a\u8868\u672a\u88ab\u6807\u8bb0\uff0c\u4ece 2 2 \u5230 n n \u9012\u589e\uff0c\u82e5\u5f53\u524d\u5143\u7d20\u672a\u88ab\u6807\u8bb0\uff0c\u5219\u8bb0\u5f55\u8be5\u5143\u7d20\u4e3a\u7d20\u6570\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5728 n n \u4ee5\u5185\u7684\u6240\u6709\u500d\u6570\u4e3a\u5408\u6570\u3002 \u6ce8\u610f\u5230 \u6807\u8bb0\u500d\u6570\u4e3a\u5408\u6570 \u7684\u64cd\u4f5c\u53ea\u5bf9 [2, \\sqrt{n}] [2, \\sqrt{n}] \u8303\u56f4\u5185\u627e\u5230\u7684\u7d20\u6570\u64cd\u4f5c\u5373\u53ef\u3002 \u53ef\u8bc1\u660e\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n\\log \\log n) O(n\\log \\log n) \u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/math/eratosthenes/#_4","text":"const int N = 20 ; bool vis [ N + 5 ]; std :: vector < int > Eratosthenes_sieve () { std :: vector < int > primes ; for ( int i = 2 ; i <= N ; i ++ ) { if ( ! vis [ i ]) primes . push_back ( i ); for ( int j = i * i ; j <= N ; j += i ) if ( ! vis [ j ]) vis [ j ] = true ; } return primes ; }","title":"\u4ee3\u7801"},{"location":"competitive_programming/math/eratosthenes/#_5","text":"\u751f\u6210 n n \u4ee5\u5185\u6240\u6709\u6574\u6570\u7684\u6700\u5c0f\u7d20\u56e0\u6570 \u5728\u6807\u8bb0 p p \u7684\u6240\u6709\u500d\u6570\u7684\u8fc7\u7a0b\u4e2d p p \u5373\u4e3a\u6240\u6709\u500d\u6570\u7684\u6700\u5c0f\u7d20\u56e0\u6570\u3002","title":"\u5e94\u7528"},{"location":"competitive_programming/math/greatest_common_devisor/","text":"\u6700\u5927\u516c\u7ea6\u6570 Euclid\u7b97\u6cd5 \u8ba1\u7b97 big big \u548c small small \uff08\u5176\u4e2d small \\leq big small \\leq big \uff09\u7684\u6700\u5927\u516c\u7ea6\u6570 \u53ea\u8981 samll samll \u4e0d\u4e3a 0 0 \u5219\uff1a big\uff0csamll = small\uff0cbig \\pmod {small} big\uff0csamll = small\uff0cbig \\pmod {small} \u5426\u5219\uff1a big big \u4e3a\u6240\u6c42 Euclid\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(max(big)) O(max(big)) \u3002 \u4ee3\u7801 \u8fed\u4ee3\u7248 int gcd ( int big , int small ) { int tmp ; while ( small != 0 ) tmp = small , small = big % small , big = small ; return big ; } \u9012\u5f52\u7248 int gcd ( int big , int small ) { if ( small == 0 ) return big ; return gcd ( big % small , small ); }","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"competitive_programming/math/greatest_common_devisor/#_1","text":"","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"competitive_programming/math/greatest_common_devisor/#euclid","text":"\u8ba1\u7b97 big big \u548c small small \uff08\u5176\u4e2d small \\leq big small \\leq big \uff09\u7684\u6700\u5927\u516c\u7ea6\u6570 \u53ea\u8981 samll samll \u4e0d\u4e3a 0 0 \u5219\uff1a big\uff0csamll = small\uff0cbig \\pmod {small} big\uff0csamll = small\uff0cbig \\pmod {small} \u5426\u5219\uff1a big big \u4e3a\u6240\u6c42 Euclid\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(max(big)) O(max(big)) \u3002","title":"Euclid\u7b97\u6cd5"},{"location":"competitive_programming/math/greatest_common_devisor/#_2","text":"\u8fed\u4ee3\u7248 int gcd ( int big , int small ) { int tmp ; while ( small != 0 ) tmp = small , small = big % small , big = small ; return big ; } \u9012\u5f52\u7248 int gcd ( int big , int small ) { if ( small == 0 ) return big ; return gcd ( big % small , small ); }","title":"\u4ee3\u7801"},{"location":"competitive_programming/math/inverse/","text":"\u4e58\u6cd5\u9006\u5143 \u95ee\u9898 \u5728 O(n) O(n) \u65f6\u95f4\u5185\u6c42\u51fa 0 0 \u5230 n n \u4e4b\u95f4\u6240\u6709\u6570\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 1000005 ; const ll MOD = 1000000007 ; ll qpw ( ll a , ll b ) { ll ans = 1 ; while ( b ) { if ( b & 1 ) ans = ans * a % MOD , b -- ; a = a * a % MOD ; b >>= 1 ; } return ans ; } ll inv [ maxn + 1 ]; void pre_process () { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= maxn ; i ++ ) inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ; } \u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 x x \uff0c\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u57fa\u4e8e\u975e\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u5728 O(\\log p) O(\\log p) \u7684\u65f6\u95f4\u6c42\u51fa\uff0c\u5373 x^{-1}=x^{p-2} \\pmod {p-2} x^{-1}=x^{p-2} \\pmod {p-2} \u66f4\u8fdb\u4e00\u6b65\uff0c\u5229\u7528 \u52a8\u6001\u89c4\u5212 \u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4 T(n) T(n) \u751f\u6210\u524d n n \u4e2a\u6b63\u6574\u6570\u7684\u4e58\u6cd5\u9006\u5143\u8868\u3002 \u5bf9\u4e8e x^{-1} \\pmod p x^{-1} \\pmod p \uff0c\u9996\u5148\u5c06 p p \u5206\u6210 x x \u7684\u4f59\u6570\u548c\u500d\u6570\u4e24\u90e8\u5206\uff1a \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \u5176\u4e2d a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor \u4e8e\u662f\u6709 a + bx \\equiv 0 \\pmod p a + bx \\equiv 0 \\pmod p \u5c06 a a \u79fb\u5230\u53f3\u8fb9\u5e76\u5728\u4e24\u8fb9\u540c\u65f6\u4e58 b^{-1} b^{-1} x \\equiv -b^{-1}a \\pmod p x \\equiv -b^{-1}a \\pmod p \u5bf9\u4e24\u8fb9\u53d6\u9006 x^{-1} = (-b)a^{-1} \\pmod p x^{-1} = (-b)a^{-1} \\pmod p \u5c06 -b=p-\\lfloor\\frac{p}{x}\\rfloor -b=p-\\lfloor\\frac{p}{x}\\rfloor $ \u5e26\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p \u81f3\u6b64\u5f97\u5230\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u7531\u4e8e (p%x) < x (p%x) < x \uff0c\u6545\u5728\u6c42\u89e3 x^{-1} x^{-1} \u65f6\uff0c (p\\%x)^{-1} (p\\%x)^{-1} \u662f\u5df2\u7ecf\u6c42\u89e3\u8fc7\u7684\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7ed3\u679c\u3002","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"competitive_programming/math/inverse/#_1","text":"","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"competitive_programming/math/inverse/#_2","text":"\u5728 O(n) O(n) \u65f6\u95f4\u5185\u6c42\u51fa 0 0 \u5230 n n \u4e4b\u95f4\u6240\u6709\u6570\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/math/inverse/#_3","text":"#include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 1000005 ; const ll MOD = 1000000007 ; ll qpw ( ll a , ll b ) { ll ans = 1 ; while ( b ) { if ( b & 1 ) ans = ans * a % MOD , b -- ; a = a * a % MOD ; b >>= 1 ; } return ans ; } ll inv [ maxn + 1 ]; void pre_process () { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= maxn ; i ++ ) inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ; }","title":"\u4ee3\u7801"},{"location":"competitive_programming/math/inverse/#_4","text":"\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 x x \uff0c\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u57fa\u4e8e\u975e\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u5728 O(\\log p) O(\\log p) \u7684\u65f6\u95f4\u6c42\u51fa\uff0c\u5373 x^{-1}=x^{p-2} \\pmod {p-2} x^{-1}=x^{p-2} \\pmod {p-2} \u66f4\u8fdb\u4e00\u6b65\uff0c\u5229\u7528 \u52a8\u6001\u89c4\u5212 \u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4 T(n) T(n) \u751f\u6210\u524d n n \u4e2a\u6b63\u6574\u6570\u7684\u4e58\u6cd5\u9006\u5143\u8868\u3002 \u5bf9\u4e8e x^{-1} \\pmod p x^{-1} \\pmod p \uff0c\u9996\u5148\u5c06 p p \u5206\u6210 x x \u7684\u4f59\u6570\u548c\u500d\u6570\u4e24\u90e8\u5206\uff1a \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \u5176\u4e2d a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor \u4e8e\u662f\u6709 a + bx \\equiv 0 \\pmod p a + bx \\equiv 0 \\pmod p \u5c06 a a \u79fb\u5230\u53f3\u8fb9\u5e76\u5728\u4e24\u8fb9\u540c\u65f6\u4e58 b^{-1} b^{-1} x \\equiv -b^{-1}a \\pmod p x \\equiv -b^{-1}a \\pmod p \u5bf9\u4e24\u8fb9\u53d6\u9006 x^{-1} = (-b)a^{-1} \\pmod p x^{-1} = (-b)a^{-1} \\pmod p \u5c06 -b=p-\\lfloor\\frac{p}{x}\\rfloor -b=p-\\lfloor\\frac{p}{x}\\rfloor $ \u5e26\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p \u81f3\u6b64\u5f97\u5230\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u7531\u4e8e (p%x) < x (p%x) < x \uff0c\u6545\u5728\u6c42\u89e3 x^{-1} x^{-1} \u65f6\uff0c (p\\%x)^{-1} (p\\%x)^{-1} \u662f\u5df2\u7ecf\u6c42\u89e3\u8fc7\u7684\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7ed3\u679c\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/math/quick_power/","text":"\u5feb\u901f\u5e42 \u95ee\u9898 \u5728 O(\\log{b}) O(\\log{b}) \u65f6\u95f4\u5185\u6c42\u5e42\u503c a^b a^b \uff0c\u7ed3\u679c\u5bf9 MOD MOD \u53d6\u4f59\u3002 \u4ee3\u7801 const int MOD = 1000000007 ; int qpw ( int a , int b ) { // Quick power for a^b. int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % MOD ; a = 1ll * a * a % MOD ; b >>= 1 ; } return ans ; }","title":"\u5feb\u901f\u5e42"},{"location":"competitive_programming/math/quick_power/#_1","text":"","title":"\u5feb\u901f\u5e42"},{"location":"competitive_programming/math/quick_power/#_2","text":"\u5728 O(\\log{b}) O(\\log{b}) \u65f6\u95f4\u5185\u6c42\u5e42\u503c a^b a^b \uff0c\u7ed3\u679c\u5bf9 MOD MOD \u53d6\u4f59\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/math/quick_power/#_3","text":"const int MOD = 1000000007 ; int qpw ( int a , int b ) { // Quick power for a^b. int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % MOD ; a = 1ll * a * a % MOD ; b >>= 1 ; } return ans ; }","title":"\u4ee3\u7801"},{"location":"competitive_programming/string/suffix_array/","text":"\u540e\u7f00\u6570\u7ec4 \u4e00\u4e9b\u7ea6\u5b9a \u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 0 \u5f00\u59cb\u3002 \u540e\u7f00 i i \u8868\u793a\u4ee5\u4e0b\u6807 i i \u7684\u5b57\u7b26\u5f00\u59cb\u7684\u540e\u7f00\u3002 \u57fa\u672c\u6982\u5ff5 \u540e\u7f00\u6570\u7ec4\uff08Suffix Array\uff09\u4e3b\u8981\u662f\u4e24\u4e2a\u6570\u7ec4\uff1a sa sa \u548c rk rk \u3002 \u5176\u4e2d\uff0c sa sa \u4e3a\u6240\u6709\u540e\u7f00\u6309\u5b57\u7b26\u4e32\u5e8f\u7684\u5347\u5e8f\u6392\u5217\uff0c rk[i] rk[i] \u8868\u793a\u540e\u7f00 i i \u5728 sa sa \u4e2d\u7684\u4e0b\u6807\u3002 \u751f\u6210\u65b9\u6cd5 \u6734\u7d20 O(n^2 \\log n) O(n^2 \\log n) \u505a\u6cd5 \u57fa\u4e8e\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u6734\u7d20\u6392\u5e8f\u5b9e\u73b0\uff0c\u5176\u4e2d\u6bd4\u4ef7\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\u662f O(n) O(n) \u7684\uff0c\u6545\u6392\u5e8f\u603b\u65f6\u95f4\u662f O(n^2 \\log n) O(n^2 \\log n) \u3002 \u57fa\u4e8e\u500d\u589e\u7684 O(n \\log^2 n) O(n \\log^2 n) \u505a\u6cd5 \u4e00\u53e5\u8bdd\uff1a\u500d\u589e\u5b50\u4e32\u7684\u957f\u5ea6\u4e0a\u9650\uff0c\u7ef4\u62a4\u540d\u6b21\u6570\u7ec4 rk rk \uff0c\u76f4\u5230\u957f\u5ea6\u4e0a\u9650\u8fbe\u5230 n n \u3002 \u8be5\u8fc7\u7a0b\u8fdb\u884c \\log n \\log n \u6b21\u6392\u5e8f\uff0c\u6bcf\u6b21\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\log n) O(n \\log n) \u3002 \u521d\u59cb\u957f\u5ea6\u4e0a\u9650\u4e3a 1 1 \uff0c\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u6392\u5e8f\uff0c\u5f97\u5230\u540d\u8bcd\u6570\u7ec4 rk_1 rk_1 \u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u957f\u5ea6\u4e0a\u9650\u4e3a w w \u7684\u5b50\u4e32\u6392\u540d rk_w rk_w \uff0c\u5219\u4e8c\u5143\u7ec4\u5e8f\u5217 p[i] = (rk_w[i], rk_w[i + w]) p[i] = (rk_w[i], rk_w[i + w]) \u6392\u5e8f\u5f97\u5230\u7684\u540d\u8bcd\u6570\u7ec4\u5373\u4e3a\u957f\u5ea6\u4e0a\u9650\u4e3a 2w 2w \u7684\u5b50\u4e32\u6392\u540d rk_{2w} rk_{2w} \u3002 \u6ce8 \uff1a\u82e5\u7b2c\u4e8c\u5173\u952e\u5b57\u4e0d\u5b58\u5728\uff08 i + w i + w \u8d8a\u754c\uff09\u5219\u53d6 -1 -1 \u5373\u53ef\u3002 \u5faa\u73af\u6267\u884c\u4e0a\u4e00\u6b65\u76f4\u5230\u957f\u5ea6\u4e0a\u9650\u5927\u4e8e\u7b49\u4e8e\u539f\u5b57\u7b26\u4e32\u957f\u5ea6 n n \u3002 \u5f15\u5165\u57fa\u6570\u6392\u5e8f\u548c\u8ba1\u6570\u6392\u5e8f\u4f18\u5316\u5230 O(n \\log n) O(n \\log n) \u5728\u57fa\u4e8e\u500d\u589e\u7684 O(n \\log^2 n) O(n \\log^2 n) \u505a\u6cd5\u4e2d\uff0c\u5355\u6b21\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e3a O(n \\log n) O(n \\log n) \u3002\u5982\u679c\u80fd O(n) O(n) \u6392\u5e8f\uff0c\u5c31\u80fd\u5c06\u603b\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(n \\log n) O(n \\log n) \u3002 \u7531\u4e8e\u5355\u6b21\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u5173\u952e\u5b57\u662f\u6392\u540d\uff0c\u503c\u57df\u4e3a O(n) O(n) \uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u53cc\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u57fa\u6570\u6392\u5e8f \u4f18\u5316\u81f3 O(n) O(n) \u3002 \u5e38\u6570\u4f18\u5316 \u7b2c\u4e8c\u5173\u952e\u5b57\u65e0\u9700\u8ba1\u6570\u6392\u5e8f \u4f18\u5316\u8ba1\u6570\u6392\u5e8f\u7684\u503c\u57df \u7f13\u5b58 rk[id[i]] rk[id[i]] \uff0c\u51cf\u5c11\u4e0d\u8fde\u7eed\u5185\u5b58\u8bbf\u95ee \u7528 cmp \u51fd\u6570\u6765\u8ba1\u7b97\u662f\u5426\u91cd\u590d \u4e00\u4e9b\u5e94\u7528 Height\u6570\u7ec4 Height\u6570\u7ec4\u7684\u5e94\u7528","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"competitive_programming/string/suffix_array/#_1","text":"","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"competitive_programming/string/suffix_array/#_2","text":"\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 0 \u5f00\u59cb\u3002 \u540e\u7f00 i i \u8868\u793a\u4ee5\u4e0b\u6807 i i \u7684\u5b57\u7b26\u5f00\u59cb\u7684\u540e\u7f00\u3002","title":"\u4e00\u4e9b\u7ea6\u5b9a"},{"location":"competitive_programming/string/suffix_array/#_3","text":"\u540e\u7f00\u6570\u7ec4\uff08Suffix Array\uff09\u4e3b\u8981\u662f\u4e24\u4e2a\u6570\u7ec4\uff1a sa sa \u548c rk rk \u3002 \u5176\u4e2d\uff0c sa sa \u4e3a\u6240\u6709\u540e\u7f00\u6309\u5b57\u7b26\u4e32\u5e8f\u7684\u5347\u5e8f\u6392\u5217\uff0c rk[i] rk[i] \u8868\u793a\u540e\u7f00 i i \u5728 sa sa \u4e2d\u7684\u4e0b\u6807\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"competitive_programming/string/suffix_array/#_4","text":"","title":"\u751f\u6210\u65b9\u6cd5"},{"location":"competitive_programming/string/suffix_array/#on2-log-non2-log-n","text":"\u57fa\u4e8e\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u6734\u7d20\u6392\u5e8f\u5b9e\u73b0\uff0c\u5176\u4e2d\u6bd4\u4ef7\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\u662f O(n) O(n) \u7684\uff0c\u6545\u6392\u5e8f\u603b\u65f6\u95f4\u662f O(n^2 \\log n) O(n^2 \\log n) \u3002","title":"\u6734\u7d20 O(n^2 \\log n)O(n^2 \\log n) \u505a\u6cd5"},{"location":"competitive_programming/string/suffix_array/#on-log2-non-log2-n","text":"\u4e00\u53e5\u8bdd\uff1a\u500d\u589e\u5b50\u4e32\u7684\u957f\u5ea6\u4e0a\u9650\uff0c\u7ef4\u62a4\u540d\u6b21\u6570\u7ec4 rk rk \uff0c\u76f4\u5230\u957f\u5ea6\u4e0a\u9650\u8fbe\u5230 n n \u3002 \u8be5\u8fc7\u7a0b\u8fdb\u884c \\log n \\log n \u6b21\u6392\u5e8f\uff0c\u6bcf\u6b21\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n \\log n) O(n \\log n) \u3002 \u521d\u59cb\u957f\u5ea6\u4e0a\u9650\u4e3a 1 1 \uff0c\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u8fdb\u884c\u6392\u5e8f\uff0c\u5f97\u5230\u540d\u8bcd\u6570\u7ec4 rk_1 rk_1 \u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u957f\u5ea6\u4e0a\u9650\u4e3a w w \u7684\u5b50\u4e32\u6392\u540d rk_w rk_w \uff0c\u5219\u4e8c\u5143\u7ec4\u5e8f\u5217 p[i] = (rk_w[i], rk_w[i + w]) p[i] = (rk_w[i], rk_w[i + w]) \u6392\u5e8f\u5f97\u5230\u7684\u540d\u8bcd\u6570\u7ec4\u5373\u4e3a\u957f\u5ea6\u4e0a\u9650\u4e3a 2w 2w \u7684\u5b50\u4e32\u6392\u540d rk_{2w} rk_{2w} \u3002 \u6ce8 \uff1a\u82e5\u7b2c\u4e8c\u5173\u952e\u5b57\u4e0d\u5b58\u5728\uff08 i + w i + w \u8d8a\u754c\uff09\u5219\u53d6 -1 -1 \u5373\u53ef\u3002 \u5faa\u73af\u6267\u884c\u4e0a\u4e00\u6b65\u76f4\u5230\u957f\u5ea6\u4e0a\u9650\u5927\u4e8e\u7b49\u4e8e\u539f\u5b57\u7b26\u4e32\u957f\u5ea6 n n \u3002","title":"\u57fa\u4e8e\u500d\u589e\u7684 O(n \\log^2 n)O(n \\log^2 n) \u505a\u6cd5"},{"location":"competitive_programming/string/suffix_array/#on-log-non-log-n","text":"\u5728\u57fa\u4e8e\u500d\u589e\u7684 O(n \\log^2 n) O(n \\log^2 n) \u505a\u6cd5\u4e2d\uff0c\u5355\u6b21\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e3a O(n \\log n) O(n \\log n) \u3002\u5982\u679c\u80fd O(n) O(n) \u6392\u5e8f\uff0c\u5c31\u80fd\u5c06\u603b\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(n \\log n) O(n \\log n) \u3002 \u7531\u4e8e\u5355\u6b21\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u5173\u952e\u5b57\u662f\u6392\u540d\uff0c\u503c\u57df\u4e3a O(n) O(n) \uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u53cc\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u57fa\u6570\u6392\u5e8f \u4f18\u5316\u81f3 O(n) O(n) \u3002","title":"\u5f15\u5165\u57fa\u6570\u6392\u5e8f\u548c\u8ba1\u6570\u6392\u5e8f\u4f18\u5316\u5230 O(n \\log n)O(n \\log n)"},{"location":"competitive_programming/string/suffix_array/#_5","text":"","title":"\u5e38\u6570\u4f18\u5316"},{"location":"competitive_programming/string/suffix_array/#_6","text":"","title":"\u7b2c\u4e8c\u5173\u952e\u5b57\u65e0\u9700\u8ba1\u6570\u6392\u5e8f"},{"location":"competitive_programming/string/suffix_array/#_7","text":"","title":"\u4f18\u5316\u8ba1\u6570\u6392\u5e8f\u7684\u503c\u57df"},{"location":"competitive_programming/string/suffix_array/#rkidirkidi","text":"","title":"\u7f13\u5b58 rk[id[i]]rk[id[i]]\uff0c\u51cf\u5c11\u4e0d\u8fde\u7eed\u5185\u5b58\u8bbf\u95ee"},{"location":"competitive_programming/string/suffix_array/#cmp","text":"","title":"\u7528cmp\u51fd\u6570\u6765\u8ba1\u7b97\u662f\u5426\u91cd\u590d"},{"location":"competitive_programming/string/suffix_array/#_8","text":"","title":"\u4e00\u4e9b\u5e94\u7528"},{"location":"competitive_programming/string/suffix_array/#height","text":"","title":"Height\u6570\u7ec4"},{"location":"competitive_programming/string/suffix_array/#height_1","text":"","title":"Height\u6570\u7ec4\u7684\u5e94\u7528"},{"location":"competitive_programming/string/suffix_automation/","text":"\u540e\u7f00\u81ea\u52a8\u673a \u672c\u8282\u5185\u5bb9\u90e8\u5206\u6765\u81ea\u9648\u7acb\u67702012NOI\u51ac\u4ee4\u8425\u8bb2\u7a3f\uff0c\u5728\u6b64\u5bf9\u9648\u7acb\u6770\u5bf9SAM\u6240\u505a\u7684\u603b\u7ed3\u8868\u793a\u611f\u8c22\u3002 \u672c\u8282\u5c06\u4ece\u6027\u8d28\u5206\u6790\u3001\u7ebf\u6027\u65f6\u95f4\u6784\u9020\u7b97\u6cd5\u4e24\u4e2a\u5c42\u9762\u6765\u8ba8\u8bba\u540e\u7f00\u81ea\u52a8\u673a\u3002 SAM\u5206\u6790 \u8bbe\u8981\u5206\u6790\u7684\u5b57\u7b26\u4e32\u4e3a\uff0cSAM\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u589e\u52a0\u4e86\u540e\u7f00\u94fe\u7684DFA\uff08\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002\u5176\u72b6\u6001\u662f\u7684\u6240\u6709\u5b50\u4e32\u7684\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\u96c6\u5408\uff08right\u96c6\u5408\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u6240\u5305\u542b\u7684\u6240\u6709\u5b50\u4e32\u662f\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4e00\u7cfb\u5217\u957f\u5ea6\u8fde\u7eed\u7684\u540e\u7f00\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u8981\u4e48\u4e0d\u76f8\u4ea4\uff0c\u8981\u4e48\u76f8\u4e92\u771f\u5305\u542b\uff0c\u8fd9\u6761\u6027\u8d28\u4fdd\u8bc1\u4e86\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\u4e2a\u6784\u6210\u4e86\u4e00\u68f5\u6811\u72b6\u7ed3\u6784\uff0c\u5c06\u5176\u79f0\u4e3aparent\u6811\u3002 SAM\u7684\u7ebf\u6027\u6784\u9020\u7b97\u6cd5 \u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001 st st \uff0c\u8bb0\u5f55\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 val val \uff0c\u53e6\u5916\u8bb0\u5f55\u5176\u5728 parent parent \u6811\u4e0a\u7684\u7236\u4eb2\u5730\u5740\uff0c\u4ee5\u53ca\u5176\u5728 DFA DFA \u4e2d\u7684\u8f6c\u79fb\u8fb9\u3002\u5219\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u533a\u95f4\u4e3a [st \\rightarrow par \\rightarrow val, st \\rightarrow val] [st \\rightarrow par \\rightarrow val, st \\rightarrow val] \u3002\u91c7\u7528\u5982\u4e0b\u589e\u91cf\u6cd5\u5728\u7ebf\u6784\u9020\uff1a \u4ee4\u5f53\u524d\u4e32\u4e3a T T \uff0c\u52a0\u5165\u5b57\u7b26 x x \u4ee4 p=ST(T), Right(p)=\\{length(T)\\} p=ST(T), Right(p)=\\{length(T)\\} \u7684\u8282\u70b9 \u65b0\u5efa np=ST(Tx), Right(p)=\\{llength(T) + 1\\} np=ST(Tx), Right(p)=\\{llength(T) + 1\\} \u7684\u8282\u70b9 \u5bf9\u4e8e p p \u548c p p \u6ca1\u6709\u6807\u53f7 x x \u7684\u7956\u5148 v v , trans(v, x)=np trans(v, x)=np \u627e\u5230 p p \u7684\u7b2c\u4e00\u4e2a\u5b58\u5728\u6807\u53f7 x x \u7684\u8fb9\u7684\u7956\u5148 v_p v_p \u3002\u5982\u679c\u8fd9\u6837\u7684 v_p v_p \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Parent(np)=root Parent(np)=root \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u4ee4 q=trans(v_p, x) q=trans(v_p, x) \uff0c\u82e5 MAX(q)=MAX(v_p) + 1 MAX(q)=MAX(v_p) + 1 \uff0c\u4ee4 Parent(np)=q Parent(np)=q \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u5426\u5219\u65b0\u5efa\u8282\u70b9 nq nq \uff0c\u4ee4 trans(nq, *)=trans(q, *) trans(nq, *)=trans(q, *) \u7528 nq nq \u66ff\u4ee3 q q \u5728 parent parent \u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8ba9 q q \u548c np np \u90fd\u6210\u4e3a nq nq \u7684\u5b69\u5b50 Parent(nq)=Parent(q) Parent(nq)=Parent(q) Parent(q) = nq Parent(q) = nq Parent(np)=nq Parent(np)=nq \u5bf9\u6240\u6709 trans(v, x)=q trans(v, x)=q \u7684 p p \u7684\u7956\u5148 v v \uff0c trans(v, x) trans(v, x) \u6539\u6210 nq nq \u4ee3\u7801 struct State { State * par , * trans [ 26 ]; int val ; State ( int _val ) : par ( 0 ), val ( _val ) { memset ( trans , 0 , sizeof trans ); } }; State * root , * last = new State ( 0 ); void extend ( int w ) { State * p = last ; State * np = p ? new State ( p -> val + 1 ) : new State ( 1 ); while ( p && p -> trans [ w ] == 0 ) p -> trans [ w ] = np , p = p -> par ; if ( p == 0 ) np -> par = root ; else { State * q = p -> trans [ w ]; if ( p -> val + 1 == q -> val ) np -> par = q ; else { State * nq = new State ( p -> val + 1 ); memcpy ( nq -> trans , q -> trans , sizeof q -> trans ); nq -> par = q -> par ; q -> par = nq ; np -> par = nq ; while ( p && p -> trans [ w ] == q ) p -> trans [ w ] = nq , p = p -> par ; } } last = np ; } \u5e94\u7528 \u6c42\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \u6cbf s\\#s s\\#s \u7684SAM\u6309\u7167\u5b57\u5178\u5e8f\u79fb\u52a8 len(s) len(s) \u6b21\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e3a\u6240\u6c42\uff0c\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u7ebf\u6027\u3002 \u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32 A, B A, B \u7684LCS\uff08\u6700\u957f\u516c\u5171\u8fde\u7eed\u5b50\u4e32 \u5f85\u7eed...","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"competitive_programming/string/suffix_automation/#_1","text":"\u672c\u8282\u5185\u5bb9\u90e8\u5206\u6765\u81ea\u9648\u7acb\u67702012NOI\u51ac\u4ee4\u8425\u8bb2\u7a3f\uff0c\u5728\u6b64\u5bf9\u9648\u7acb\u6770\u5bf9SAM\u6240\u505a\u7684\u603b\u7ed3\u8868\u793a\u611f\u8c22\u3002 \u672c\u8282\u5c06\u4ece\u6027\u8d28\u5206\u6790\u3001\u7ebf\u6027\u65f6\u95f4\u6784\u9020\u7b97\u6cd5\u4e24\u4e2a\u5c42\u9762\u6765\u8ba8\u8bba\u540e\u7f00\u81ea\u52a8\u673a\u3002","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"competitive_programming/string/suffix_automation/#sam","text":"\u8bbe\u8981\u5206\u6790\u7684\u5b57\u7b26\u4e32\u4e3a\uff0cSAM\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u589e\u52a0\u4e86\u540e\u7f00\u94fe\u7684DFA\uff08\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002\u5176\u72b6\u6001\u662f\u7684\u6240\u6709\u5b50\u4e32\u7684\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\u96c6\u5408\uff08right\u96c6\u5408\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u6240\u5305\u542b\u7684\u6240\u6709\u5b50\u4e32\u662f\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4e00\u7cfb\u5217\u957f\u5ea6\u8fde\u7eed\u7684\u540e\u7f00\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u8981\u4e48\u4e0d\u76f8\u4ea4\uff0c\u8981\u4e48\u76f8\u4e92\u771f\u5305\u542b\uff0c\u8fd9\u6761\u6027\u8d28\u4fdd\u8bc1\u4e86\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\u4e2a\u6784\u6210\u4e86\u4e00\u68f5\u6811\u72b6\u7ed3\u6784\uff0c\u5c06\u5176\u79f0\u4e3aparent\u6811\u3002","title":"SAM\u5206\u6790"},{"location":"competitive_programming/string/suffix_automation/#sam_1","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001 st st \uff0c\u8bb0\u5f55\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 val val \uff0c\u53e6\u5916\u8bb0\u5f55\u5176\u5728 parent parent \u6811\u4e0a\u7684\u7236\u4eb2\u5730\u5740\uff0c\u4ee5\u53ca\u5176\u5728 DFA DFA \u4e2d\u7684\u8f6c\u79fb\u8fb9\u3002\u5219\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u533a\u95f4\u4e3a [st \\rightarrow par \\rightarrow val, st \\rightarrow val] [st \\rightarrow par \\rightarrow val, st \\rightarrow val] \u3002\u91c7\u7528\u5982\u4e0b\u589e\u91cf\u6cd5\u5728\u7ebf\u6784\u9020\uff1a \u4ee4\u5f53\u524d\u4e32\u4e3a T T \uff0c\u52a0\u5165\u5b57\u7b26 x x \u4ee4 p=ST(T), Right(p)=\\{length(T)\\} p=ST(T), Right(p)=\\{length(T)\\} \u7684\u8282\u70b9 \u65b0\u5efa np=ST(Tx), Right(p)=\\{llength(T) + 1\\} np=ST(Tx), Right(p)=\\{llength(T) + 1\\} \u7684\u8282\u70b9 \u5bf9\u4e8e p p \u548c p p \u6ca1\u6709\u6807\u53f7 x x \u7684\u7956\u5148 v v , trans(v, x)=np trans(v, x)=np \u627e\u5230 p p \u7684\u7b2c\u4e00\u4e2a\u5b58\u5728\u6807\u53f7 x x \u7684\u8fb9\u7684\u7956\u5148 v_p v_p \u3002\u5982\u679c\u8fd9\u6837\u7684 v_p v_p \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Parent(np)=root Parent(np)=root \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u4ee4 q=trans(v_p, x) q=trans(v_p, x) \uff0c\u82e5 MAX(q)=MAX(v_p) + 1 MAX(q)=MAX(v_p) + 1 \uff0c\u4ee4 Parent(np)=q Parent(np)=q \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u5426\u5219\u65b0\u5efa\u8282\u70b9 nq nq \uff0c\u4ee4 trans(nq, *)=trans(q, *) trans(nq, *)=trans(q, *) \u7528 nq nq \u66ff\u4ee3 q q \u5728 parent parent \u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8ba9 q q \u548c np np \u90fd\u6210\u4e3a nq nq \u7684\u5b69\u5b50 Parent(nq)=Parent(q) Parent(nq)=Parent(q) Parent(q) = nq Parent(q) = nq Parent(np)=nq Parent(np)=nq \u5bf9\u6240\u6709 trans(v, x)=q trans(v, x)=q \u7684 p p \u7684\u7956\u5148 v v \uff0c trans(v, x) trans(v, x) \u6539\u6210 nq nq","title":"SAM\u7684\u7ebf\u6027\u6784\u9020\u7b97\u6cd5"},{"location":"competitive_programming/string/suffix_automation/#_2","text":"struct State { State * par , * trans [ 26 ]; int val ; State ( int _val ) : par ( 0 ), val ( _val ) { memset ( trans , 0 , sizeof trans ); } }; State * root , * last = new State ( 0 ); void extend ( int w ) { State * p = last ; State * np = p ? new State ( p -> val + 1 ) : new State ( 1 ); while ( p && p -> trans [ w ] == 0 ) p -> trans [ w ] = np , p = p -> par ; if ( p == 0 ) np -> par = root ; else { State * q = p -> trans [ w ]; if ( p -> val + 1 == q -> val ) np -> par = q ; else { State * nq = new State ( p -> val + 1 ); memcpy ( nq -> trans , q -> trans , sizeof q -> trans ); nq -> par = q -> par ; q -> par = nq ; np -> par = nq ; while ( p && p -> trans [ w ] == q ) p -> trans [ w ] = nq , p = p -> par ; } } last = np ; }","title":"\u4ee3\u7801"},{"location":"competitive_programming/string/suffix_automation/#_3","text":"\u6c42\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \u6cbf s\\#s s\\#s \u7684SAM\u6309\u7167\u5b57\u5178\u5e8f\u79fb\u52a8 len(s) len(s) \u6b21\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e3a\u6240\u6c42\uff0c\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u7ebf\u6027\u3002 \u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32 A, B A, B \u7684LCS\uff08\u6700\u957f\u516c\u5171\u8fde\u7eed\u5b50\u4e32 \u5f85\u7eed...","title":"\u5e94\u7528"},{"location":"competitive_programming/string/trie/","text":"\u5b57\u5178\u6811 \u95ee\u9898 \u7ed9\u5b9a\u5b57\u7b26\u96c6\uff0c\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5355\u8bcd\u96c6\u5408\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165/Add - \u5c06\u5355\u8bcd\u52a0\u5165\u96c6\u5408 \u5220\u9664/Remove - \u5c06\u5355\u8bcd\u4ece\u96c6\u5408\u4e2d\u53bb\u9664 \u67e5\u627e/Find - \u5224\u65ad\u76ee\u6807\u5355\u8bcd\u662f\u5426\u5728\u96c6\u5408\u4e2d \u4ee3\u7801 \u4e0b\u9762\u7684\u5b57\u5178\u6811\uff0c\u652f\u6301\u7531 26 26 \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u6784\u6210\u7684\u5355\u8bcd\u7684\u589e\u3001\u5220\u3001\u67e5\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b57\u7b26\u96c6\uff0c\u53ea\u9700\u6539\u53d8\u7c7b\u4e2d\u4ece\u5b57\u7b26\u5230\u5176\u5728\u5b57\u7b26\u96c6\u4e2d\u7684\u5e8f\u53f7\u7684\u6620\u5c04\u5373\u53ef\u3002 class Trie { public : Trie () {} virtual ~ Trie () { RemoveTrie ( root ); } void Add ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] != nullptr ) cur = cur -> next [ word [ i ] - 'a' ]; else { TrieNode * tmp = new TrieNode ( false ); cur -> next [ word [ i ] - 'a' ] = tmp ; cur = tmp ; } if ( i == word . size () - 1 ) cur -> isword = true ; } } void Remove ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) { cout << \" \\\" \" << word << \" \\\" \" << \"was not in Trie.\" << endl ; return ; } cur = cur -> next [ word [ i ] - 'a' ]; } cur -> isword = false ; } bool Find ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) return false ; cur = cur -> next [ word [ i ] - 'a' ]; } return cur -> isword ; } private : static const int alphabat_size = 26 ; struct TrieNode { bool isword ; TrieNode * next [ alphabat_size ]; TrieNode () {} TrieNode ( bool _isword ) : isword ( _isword ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) next [ i ] = nullptr ; } }; TrieNode * root = new TrieNode ( false ); void RemoveTrie ( TrieNode * cur ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) if ( cur -> next [ i ] != nullptr ) RemoveTrie ( cur -> next [ i ]); delete cur ; } }; \u9700\u8981\u6ce8\u610f Trie \u7c7b\u4e2d\u7528\u94fe\u5f0f\u7ed3\u6784\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u6790\u6784\u51fd\u6570\u4e2d\u8981\u9012\u5f52\u5220\u9664\u3002 \u7b97\u6cd5 \u5b57\u5178\u6811\u662f\u4e00\u68f5\u5ea6\u6570\u7b49\u4e8e\u5b57\u7b26\u8868\u5927\u5c0f\u7684\u591a\u53c9\u6811\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5355\u8bcd\u957f\u5ea6 l l \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5373 O(l) O(l) \u3002 \u5e94\u7528 \u4ece\u5b57\u5178\u6811\u7684\u7684\u6839\u8282\u70b9DFS\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u6392\u5e8f\u3002","title":"\u5b57\u5178\u6811"},{"location":"competitive_programming/string/trie/#_1","text":"","title":"\u5b57\u5178\u6811"},{"location":"competitive_programming/string/trie/#_2","text":"\u7ed9\u5b9a\u5b57\u7b26\u96c6\uff0c\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5355\u8bcd\u96c6\u5408\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165/Add - \u5c06\u5355\u8bcd\u52a0\u5165\u96c6\u5408 \u5220\u9664/Remove - \u5c06\u5355\u8bcd\u4ece\u96c6\u5408\u4e2d\u53bb\u9664 \u67e5\u627e/Find - \u5224\u65ad\u76ee\u6807\u5355\u8bcd\u662f\u5426\u5728\u96c6\u5408\u4e2d","title":"\u95ee\u9898"},{"location":"competitive_programming/string/trie/#_3","text":"\u4e0b\u9762\u7684\u5b57\u5178\u6811\uff0c\u652f\u6301\u7531 26 26 \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u6784\u6210\u7684\u5355\u8bcd\u7684\u589e\u3001\u5220\u3001\u67e5\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b57\u7b26\u96c6\uff0c\u53ea\u9700\u6539\u53d8\u7c7b\u4e2d\u4ece\u5b57\u7b26\u5230\u5176\u5728\u5b57\u7b26\u96c6\u4e2d\u7684\u5e8f\u53f7\u7684\u6620\u5c04\u5373\u53ef\u3002 class Trie { public : Trie () {} virtual ~ Trie () { RemoveTrie ( root ); } void Add ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] != nullptr ) cur = cur -> next [ word [ i ] - 'a' ]; else { TrieNode * tmp = new TrieNode ( false ); cur -> next [ word [ i ] - 'a' ] = tmp ; cur = tmp ; } if ( i == word . size () - 1 ) cur -> isword = true ; } } void Remove ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) { cout << \" \\\" \" << word << \" \\\" \" << \"was not in Trie.\" << endl ; return ; } cur = cur -> next [ word [ i ] - 'a' ]; } cur -> isword = false ; } bool Find ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) return false ; cur = cur -> next [ word [ i ] - 'a' ]; } return cur -> isword ; } private : static const int alphabat_size = 26 ; struct TrieNode { bool isword ; TrieNode * next [ alphabat_size ]; TrieNode () {} TrieNode ( bool _isword ) : isword ( _isword ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) next [ i ] = nullptr ; } }; TrieNode * root = new TrieNode ( false ); void RemoveTrie ( TrieNode * cur ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) if ( cur -> next [ i ] != nullptr ) RemoveTrie ( cur -> next [ i ]); delete cur ; } }; \u9700\u8981\u6ce8\u610f Trie \u7c7b\u4e2d\u7528\u94fe\u5f0f\u7ed3\u6784\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u6790\u6784\u51fd\u6570\u4e2d\u8981\u9012\u5f52\u5220\u9664\u3002","title":"\u4ee3\u7801"},{"location":"competitive_programming/string/trie/#_4","text":"\u5b57\u5178\u6811\u662f\u4e00\u68f5\u5ea6\u6570\u7b49\u4e8e\u5b57\u7b26\u8868\u5927\u5c0f\u7684\u591a\u53c9\u6811\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5355\u8bcd\u957f\u5ea6 l l \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5373 O(l) O(l) \u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/string/trie/#_5","text":"\u4ece\u5b57\u5178\u6811\u7684\u7684\u6839\u8282\u70b9DFS\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u6392\u5e8f\u3002","title":"\u5e94\u7528"},{"location":"competitive_programming/string/z-func/","text":"Z\u51fd\u6570\uff08\u6269\u5c55KMP\uff09 \u95ee\u9898 \u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \uff0c\u8fd4\u56de\u5b57\u7b26\u4e32 z z \uff0c z[i] z[i] \u662f s[i, n - 1] s[i, n - 1] \u4e0e s s \u7684LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u7684\u957f\u5ea6\u3002 \u4ee3\u7801 vector < int > ZFunction ( string s ) { int n = s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( z [ i - l ], r - i + 1 ); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) z [ i ] ++ ; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; } \u7b97\u6cd5 \u7ef4\u62a4\u5df2\u53d1\u73b0\u7684\u6700\u9760\u53f3\u4fa7\u7684\u5339\u914d\u6bb5 [l ,r] [l ,r] \uff0c\u5373\u7b97\u6cd5\u5f53\u524d\u626b\u63cf\u5230\u7684\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5230\u7b97\u6cd5\u4e2d for \u5faa\u73af\u7684\u521d\u59cb\u4f4d\u7f6e\u4e3a 1 1 \uff0c\u5982\u679c\u521d\u59cb\u4f4d\u7f6e\u4e3a 0 0 \u5219\u7b2c\u4e00\u6b21\u6267\u884c\u5faa\u73af\u65f6 [l, r] [l, r] \u88ab\u8bbe\u7f6e\u6210 [0, n - 1] [0, n - 1] \uff0c\u7b97\u6cd5\u8fdb\u800c\u9000\u5316\u6210\u6734\u7d20\u7684 O(n^2) O(n^2) \u7248\u672c\u3002 \u590d\u6742\u5ea6 \u65f6\u95f4\u3000 O(n) O(n) \u6ce8\u610f\u5230 for \u5faa\u73af\u6700\u591a\u6267\u884c n n \u6b21\uff0c\u53ea\u9700\u8bc1\u660e\u5185\u5c42 while \u5faa\u73af\u7684\u6267\u884c\u6b21\u6570\u4e0a\u7ebf\u662f O(n) O(n) \u7684\u3002\u4e0d\u96be\u8bc1\u660e while \u6bcf\u6b21\u6267\u884c\u5fc5\u7136\u4f7f\u53f3\u8fb9\u754c r \u589e\u5927 1 1 \u3002","title":"Z \u51fd\u6570\uff08\u6269\u5c55KMP\uff09"},{"location":"competitive_programming/string/z-func/#zkmp","text":"","title":"Z\u51fd\u6570\uff08\u6269\u5c55KMP\uff09"},{"location":"competitive_programming/string/z-func/#_1","text":"\u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \uff0c\u8fd4\u56de\u5b57\u7b26\u4e32 z z \uff0c z[i] z[i] \u662f s[i, n - 1] s[i, n - 1] \u4e0e s s \u7684LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u7684\u957f\u5ea6\u3002","title":"\u95ee\u9898"},{"location":"competitive_programming/string/z-func/#_2","text":"vector < int > ZFunction ( string s ) { int n = s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( z [ i - l ], r - i + 1 ); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) z [ i ] ++ ; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; }","title":"\u4ee3\u7801"},{"location":"competitive_programming/string/z-func/#_3","text":"\u7ef4\u62a4\u5df2\u53d1\u73b0\u7684\u6700\u9760\u53f3\u4fa7\u7684\u5339\u914d\u6bb5 [l ,r] [l ,r] \uff0c\u5373\u7b97\u6cd5\u5f53\u524d\u626b\u63cf\u5230\u7684\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5230\u7b97\u6cd5\u4e2d for \u5faa\u73af\u7684\u521d\u59cb\u4f4d\u7f6e\u4e3a 1 1 \uff0c\u5982\u679c\u521d\u59cb\u4f4d\u7f6e\u4e3a 0 0 \u5219\u7b2c\u4e00\u6b21\u6267\u884c\u5faa\u73af\u65f6 [l, r] [l, r] \u88ab\u8bbe\u7f6e\u6210 [0, n - 1] [0, n - 1] \uff0c\u7b97\u6cd5\u8fdb\u800c\u9000\u5316\u6210\u6734\u7d20\u7684 O(n^2) O(n^2) \u7248\u672c\u3002","title":"\u7b97\u6cd5"},{"location":"competitive_programming/string/z-func/#_4","text":"\u65f6\u95f4\u3000 O(n) O(n) \u6ce8\u610f\u5230 for \u5faa\u73af\u6700\u591a\u6267\u884c n n \u6b21\uff0c\u53ea\u9700\u8bc1\u660e\u5185\u5c42 while \u5faa\u73af\u7684\u6267\u884c\u6b21\u6570\u4e0a\u7ebf\u662f O(n) O(n) \u7684\u3002\u4e0d\u96be\u8bc1\u660e while \u6bcf\u6b21\u6267\u884c\u5fc5\u7136\u4f7f\u53f3\u8fb9\u754c r \u589e\u5927 1 1 \u3002","title":"\u590d\u6742\u5ea6"},{"location":"design_pattern/add_layers/","text":"\u589e\u52a0\u62bd\u8c61\u5c42\u7ea7\uff0c\u9694\u79bb\u590d\u6742\u53d8\u5316 \u5c01\u88c5\u591a\u6001\u521b\u5efa\u8fc7\u7a0b - \u7b80\u5355\u5de5\u5382\u6a21\u5f0f \u5728\u9762\u5411\u63a5\u53e3\u7f16\u7a0b\u7684\u5b9e\u8df5\u4e2d\uff0c\u7ecf\u5e38\u505a\u7684\u64cd\u4f5c\u662f\u5c06\u57fa\u7c7b\u6307\u9488\u53ea\u4e0a\u4e00\u4e2a\u5b50\u7c7b\u5bf9\u8c61\uff0c\u76f8\u6bd4\u4e8e\u663e\u5f0f\u5730\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u8bb2\u591a\u6001\u5bf9\u8c61\u7684\u9009\u62e9\u4e0e\u6784\u9020\u8fc7\u7a0b\u5c01\u88c5\u8d77\u6765\u3002 \u5c01\u88c5\u591a\u6001\u5bf9\u8c61\u7684\u9009\u62e9\u4e0e\u521b\u5efa \u5148\u9694\u79bb\u5f00\uff08\u501f\u52a9\u5c01\u88c5\uff09\uff0c\u518d\u5f90\u56fe\u4e4b\uff08\u589e\u52a0\u53d8\u5316\uff09 \u5c06\u521b\u5efa\u5bf9\u8c61\u4e2d\u7684\u201c\u9009\u62e9\u6027\u201d\u5265\u79bb\u51fa\u6765 \u4f5c\u4e3a\u63a7\u5236\u521b\u5efa\u8fc7\u7a0b\u7684\u53c2\u6570 \u4ece\u4f7f\u7528\u5177\u4f53\u7c7b\u7684\u7c7b\u578b\u540d\u79f0\u6765\u76f4\u63a5\u63a7\u5236\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u8f6c\u53d8\u6210\u4f7f\u7528\u53d8\u91cf\u548c\u7b26\u53f7\u6765\u95f4\u63a5\u63a7\u5236\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u3002 \u5c01\u88c5\u591a\u53f0\u5bf9\u8c61\u7684\u9009\u62e9\u8fc7\u7a0b \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u5c01\u88c5\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b \u7b80\u5355\u5de5\u5382\u6a21\u5f0f \u4e0b\u65b9\u5de5\u5382\u7c7b\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6839\u636e\u7c7b\u4f53\u7cfb\u7684\u6269\u5145\u4e0d\u65ad\u589e\u52a0\u5206\u652f\u8bed\u53e5\uff0c\u4ee5\u4fbf\u6839\u636e\u9700\u8981\u8fd4\u56de\u6307\u5b9a\u7684\u5177\u4f53\u4ea7\u54c1\uff0c\u662f\u7ecf\u5e38\u53d8\u52a8\u7684\u7c7b\u3002 class Factory { public : static ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; // \u5f53\u4ea7\u54c1\u7c7b\u4f53\u7cfb\u6269\u5145\u65f6\uff0c\u5728\u6b64\u589e\u52a0\u4ee3\u7801 return nullptr ; } }; \u4e0a\u8ff0 Factory \u7684\u4f5c\u7528\u53ea\u662f\u5305\u88c5\u4e00\u4e0b\u9759\u6001\u6784\u9020\u51fd\u6570 Create \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06 Factory \u5f53\u505a\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u53bb\u4f7f\u7528 class Factory { public : ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; return nullptr ; } }; \u6b64\u65f6\u63a5\u53e3\u5bf9\u8c61\u7684\u521b\u5efa\u7ec6\u8282\u88ab\u5b8c\u5168\u5265\u79bb int main () { ProductID id ; cin >> id ; ProductBase * ptr ; ptr = Factory :: Create ( id ); Use ( ptr ); } \u7b80\u5355\u5de5\u5382\u6a21\u5f0f \uff1a \u5c06\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b\u5c01\u88c5\u8d77\u6765\uff0c\u4f7f\u201c\u7b56\u7565\u201d\u4e0e\u7b97\u6cd5\u7684\u9009\u62e9\u66f4\u76f4\u89c2\u3002 \u589e\u52a0\u62bd\u8c61\u5c42 - \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f \u5de5\u5382\u4e0d\u5177\u5907\u5177\u4f53\u4ea7\u54c1\u53c2\u6570 \u5bf9\u4e8e\u4e0a\u9762\u7684 \u7b80\u5355\u5de5\u5382 \u6a21\u5f0f\uff0c\u751f\u6210\u54ea\u79cd\u5bf9\u8c61\u662f\u7531 Factory \u7c7b\u7684\u63a5\u53e3\u6839\u636e\u4f20\u5165\u53c2\u6570\u6765\u51b3\u5b9a\u7684\u3002\u6b64\u65f6\uff0c\u751f\u6210\u5bf9\u8c61\u7684\u7c7b\u540d\u662f\u201c\u770b\u5f97\u89c1\u201d\u7684\uff08Hardcode\u5728\u6e90\u7801\u4e2d\uff09\u3002 \u4f46\u5982\u679c\u7f16\u5199\u5de5\u5382\u65f6\u5e76\u4e0d\u77e5\u9053\u53ef\u80fd\u7684\u5b50\u7c7b\u96c6\u5408\u600e\u4e48\u529e\uff1f\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u6d3e\u751f\u589e\u52a0\u62bd\u8c61\u5c42\u6765\u589e\u52a0\u4f7f\u7528\u7075\u6d3b\u6027\u3002 \u82e5\u65e0\u6cd5\u786e\u5b9a\u591a\u6001\u5bf9\u8c61\u7684\u5177\u4f53\u7c7b \u5728\u589e\u52a0\u4e00\u5c42\u201c\u62bd\u8c61\u5c42\u201d\uff1a\u4ece Factory \u6d3e\u751f\u4e00\u4e2a\u5b50\u7c7b\uff0c\u4e0d\u80fd\u786e\u5b9a\u7684\u95ee\u9898\uff08\u4f7f\u7528\u5177\u4f53\u7c7b\u540d\u521b\u5efa\u4ea7\u54c1\u5bf9\u8c61\uff09\u4ea4\u7ed9\u4ed6\u89e3\u51b3\uff01 \u5bf9\u8fd9\u4e2a\u5b50\u7c7b\u800c\u8a00\uff0c\u5b83\u7684\u201c\u5b9e\u73b0\u8005\u201d\uff08\u7a0b\u5e8f\u5458\u3001\u4ee3\u7801\u4e0a\u4e0b\u6587\u73af\u5883\uff09\u662f\u77e5\u9053\u5177\u4f53\u4ea7\u54c1\u7684\u7c7b\u540d\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u521b\u5efa\u76f8\u5e94\u5bf9\uff01 \u901a\u8fc7\u6d3e\u751f\u5f15\u5165\u7684\u62bd\u8c61\u5c42\u589e\u52a0\u4e86\u4f7f\u7528\u7075\u6d3b\u6027 \u4e00\u65b9\u9762\u4f7f\u7528\u57fa\u7c7b\u80fd\u5c06\u65e0\u6cd5\u786e\u5b9a\u7684\u4e8b\u60c5\u4ea4\u7531\u5b50\u7c7b\u53bb\u786e\u5b9a\uff1b \u53e6\u4e00\u65b9\u9762\u4e5f\u4f7f\u79ef\u7d2f\u63d0\u4f9b\u7684\u63a5\u53e3\u4e0d\u6536\u67d0\u4e9b\u4fe1\u606f\u7684\u7ea6\u675f\u3002 class Factory { public : virtual ProductBase * Create ( ProductID ) = 0 ; }; class MyFactory : public Factory { public : ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; // \u5f53\u4ea7\u54c1\u4f53\u7cfb\u6269\u5145\u65f6\uff0c\u5728\u6b64\u589e\u52a0\u4ee3\u7801 return nullptr ; } }; \u201c\u6401\u7f6e\u8d77\u6765\uff0c\u7559\u7ed9\u540e\u4ee3\u89e3\u51b3\u5427\u201d \u2014\u2014\u6bdb\u6cfd\u4e1c \u5bf9\u4e8e Factory \u7c7b\u7684\u7f16\u5199\u8005\uff0c\u638c\u63e1\u7684\u4fe1\u606f\u662f Create \u51fd\u6570\u7684\u58f0\u660e\u5f62\u5f0f\uff0c\u4f46\u5177\u4f53\u5bf9\u8c61\u7684\u7c7b\u578b\u96c6\u5408\u672a\u77e5\uff0c\u7559\u7ed9\u5de5\u5382\u5b50\u7c7b\u53bb\u89e3\u51b3\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u5de5\u5382+\u4ea7\u54c1\u7684\u53cc\u91cd\u591a\u6001 int main () { ProductBase * ptr ; // \u4ea7\u54c1\u57fa\u7c7b\u6307\u9488 Factory * fact_ptr ; // \u5de5\u5382\u57fa\u7c7b\u6307\u9488 fact_ptr = new MyFactory ; ptr = fact_ptr -> Create ( A_ID ); Use ( ptr ); ptr = fact_ptr -> Create ( B_ID ); Use ( ptr ); fact_ptr -> Create ( C_ID ) -> Interface (); } \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f \u7ee7\u627f\u4f53\u7cfb\u7684UML\u56fe \u8fd9\u79cd\u8bbe\u8ba1\u88abErich Gamma\u7b49\u4eba\u6210\u4e3a \u5de5\u5382\u65b9\u6cd5 \u6a21\u5f0f \u76f8\u4e92\u5173\u8054\u5bf9\u8c61\u7684\u521b\u5efa - \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u521b\u5efa\u63a5\u53e3\u96c6\u6210 \u62ff\u87ba\u4e1d\u9489\u548c\u87ba\u4e1d\u5200\u4e3e\u4f8b\uff0c\u87ba\u4e1d\u9489\u6709\u4e00\u5b57\u7eb9\u3001\u5341\u5b57\u82b1\u3001\u516d\u8fb9\u5f62\u7b49\uff0c\u76f8\u5e94\u5730\u87ba\u4e1d\u5200\u4e5f\u6709\u5bf9\u5e94\u7684\u5b9e\u73b0\u3002\u73b0\u5728\u5047\u8bbe\u6709\u87ba\u4e1d\u5200\u548c\u87ba\u4e1d\u9489\u5de5\u5382\uff0c\u5219\u4e8c\u8005\u751f\u4ea7\u7684\u4ea7\u54c1\u7c7b\u578b\u5e94\u8be5\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u6709\u201c\u5173\u8054\u201d\u7684\u591a\u6001\u5bf9\u8c61\uff0c\u600e\u6837\u8bbe\u8ba1\u5de5\u5382\u80fd\u591f\u4f53\u73b0\u8fd9\u79cd\u201c\u5173\u8054\u201d\u6027\u5462\uff1f \u65e2\u7136\u591a\u79cd\u5bf9\u8c61\u95f4\u5b58\u5728\u5173\u8054\u5173\u7cfb\uff0c\u90a3\u5c31\u5e94\u8be5\u5c06\u521b\u5efa\u5b83\u4eec\u7684\u63a5\u53e3\u96c6\u6210\u5230\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u521b\u5efa\u591a\u79cd\u5bf9\u8c61\u7684\u65b0\u63a5\u53e3\uff01 \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u5c06\u5173\u8054\u5bf9\u8c61\u7684\u751f\u6210\u63a5\u53e3\u96c6\u6210\uff08\u5408\u5e76\uff09\u5230\u5355\u4e2a\u521b\u5efa\u7c7b\u4e2d\uff0c\u5728\u5b9e\u73b0\u8be5\u7c7b\u65f6\u4fdd\u8bc1\u5404\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u8054\u6027\u7b26\u5408\u8981\u6c42\u3002 \u4e0a\u8ff0\u8bbe\u8ba1\u601d\u8def\u88abErich Gamma\u7b49\u4eba\u79f0\u4e3a \u62bd\u8c61\u5de5\u5382 \u6a21\u5f0f\u3002 \u603b\u7ed3 \u8bbe\u8ba1\u539f\u5219 \u5f00\u95ed\u539f\u5219 \u5355\u4e00\u8d23\u4efb\u539f\u5219 \u8bbe\u8ba1\u6a21\u5f0f \u7b56\u7565\u6a21\u5f0f \u59d4\u6258\u6a21\u5f0f \u6865\u63a5\u6a21\u5f0f \u9002\u914d\u5668\u6a21\u5f0f \u4ee3\u7406\u6a21\u5f0f \u88c5\u9970\u6a21\u5f0f \u8d23\u4efb\u94fe\u6a21\u5f0f \u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u3001\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u3001\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u672a\u6d89\u53ca\u7684\u6a21\u5f0f \u89e3\u91ca\u5668\u6a21\u5f0f \u547d\u4ee4\u6a21\u5f0f \uff08\u7528\u4e8e\u4ea4\u4e92\u5f0f\u7a0b\u5e8f\u3001\u72b6\u6001\u4fdd\u5b58\uff09 \u72b6\u6001\u6a21\u5f0f \uff08\u7c7b\u4f3c\u4e8e\u72b6\u6001\u673a\uff09","title":"\u589e\u52a0\u62bd\u8c61\u5c42\u7ea7"},{"location":"design_pattern/add_layers/#_1","text":"","title":"\u589e\u52a0\u62bd\u8c61\u5c42\u7ea7\uff0c\u9694\u79bb\u590d\u6742\u53d8\u5316"},{"location":"design_pattern/add_layers/#-","text":"\u5728\u9762\u5411\u63a5\u53e3\u7f16\u7a0b\u7684\u5b9e\u8df5\u4e2d\uff0c\u7ecf\u5e38\u505a\u7684\u64cd\u4f5c\u662f\u5c06\u57fa\u7c7b\u6307\u9488\u53ea\u4e0a\u4e00\u4e2a\u5b50\u7c7b\u5bf9\u8c61\uff0c\u76f8\u6bd4\u4e8e\u663e\u5f0f\u5730\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u8bb2\u591a\u6001\u5bf9\u8c61\u7684\u9009\u62e9\u4e0e\u6784\u9020\u8fc7\u7a0b\u5c01\u88c5\u8d77\u6765\u3002","title":"\u5c01\u88c5\u591a\u6001\u521b\u5efa\u8fc7\u7a0b - \u7b80\u5355\u5de5\u5382\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#_2","text":"\u5148\u9694\u79bb\u5f00\uff08\u501f\u52a9\u5c01\u88c5\uff09\uff0c\u518d\u5f90\u56fe\u4e4b\uff08\u589e\u52a0\u53d8\u5316\uff09 \u5c06\u521b\u5efa\u5bf9\u8c61\u4e2d\u7684\u201c\u9009\u62e9\u6027\u201d\u5265\u79bb\u51fa\u6765 \u4f5c\u4e3a\u63a7\u5236\u521b\u5efa\u8fc7\u7a0b\u7684\u53c2\u6570 \u4ece\u4f7f\u7528\u5177\u4f53\u7c7b\u7684\u7c7b\u578b\u540d\u79f0\u6765\u76f4\u63a5\u63a7\u5236\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u8f6c\u53d8\u6210\u4f7f\u7528\u53d8\u91cf\u548c\u7b26\u53f7\u6765\u95f4\u63a5\u63a7\u5236\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u3002 \u5c01\u88c5\u591a\u53f0\u5bf9\u8c61\u7684\u9009\u62e9\u8fc7\u7a0b \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u5c01\u88c5\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b","title":"\u5c01\u88c5\u591a\u6001\u5bf9\u8c61\u7684\u9009\u62e9\u4e0e\u521b\u5efa"},{"location":"design_pattern/add_layers/#_3","text":"\u4e0b\u65b9\u5de5\u5382\u7c7b\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u6839\u636e\u7c7b\u4f53\u7cfb\u7684\u6269\u5145\u4e0d\u65ad\u589e\u52a0\u5206\u652f\u8bed\u53e5\uff0c\u4ee5\u4fbf\u6839\u636e\u9700\u8981\u8fd4\u56de\u6307\u5b9a\u7684\u5177\u4f53\u4ea7\u54c1\uff0c\u662f\u7ecf\u5e38\u53d8\u52a8\u7684\u7c7b\u3002 class Factory { public : static ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; // \u5f53\u4ea7\u54c1\u7c7b\u4f53\u7cfb\u6269\u5145\u65f6\uff0c\u5728\u6b64\u589e\u52a0\u4ee3\u7801 return nullptr ; } }; \u4e0a\u8ff0 Factory \u7684\u4f5c\u7528\u53ea\u662f\u5305\u88c5\u4e00\u4e0b\u9759\u6001\u6784\u9020\u51fd\u6570 Create \uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06 Factory \u5f53\u505a\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u53bb\u4f7f\u7528 class Factory { public : ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; return nullptr ; } }; \u6b64\u65f6\u63a5\u53e3\u5bf9\u8c61\u7684\u521b\u5efa\u7ec6\u8282\u88ab\u5b8c\u5168\u5265\u79bb int main () { ProductID id ; cin >> id ; ProductBase * ptr ; ptr = Factory :: Create ( id ); Use ( ptr ); } \u7b80\u5355\u5de5\u5382\u6a21\u5f0f \uff1a \u5c06\u591a\u6001\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b\u5c01\u88c5\u8d77\u6765\uff0c\u4f7f\u201c\u7b56\u7565\u201d\u4e0e\u7b97\u6cd5\u7684\u9009\u62e9\u66f4\u76f4\u89c2\u3002","title":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#-_1","text":"","title":"\u589e\u52a0\u62bd\u8c61\u5c42 - \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#_4","text":"\u5bf9\u4e8e\u4e0a\u9762\u7684 \u7b80\u5355\u5de5\u5382 \u6a21\u5f0f\uff0c\u751f\u6210\u54ea\u79cd\u5bf9\u8c61\u662f\u7531 Factory \u7c7b\u7684\u63a5\u53e3\u6839\u636e\u4f20\u5165\u53c2\u6570\u6765\u51b3\u5b9a\u7684\u3002\u6b64\u65f6\uff0c\u751f\u6210\u5bf9\u8c61\u7684\u7c7b\u540d\u662f\u201c\u770b\u5f97\u89c1\u201d\u7684\uff08Hardcode\u5728\u6e90\u7801\u4e2d\uff09\u3002 \u4f46\u5982\u679c\u7f16\u5199\u5de5\u5382\u65f6\u5e76\u4e0d\u77e5\u9053\u53ef\u80fd\u7684\u5b50\u7c7b\u96c6\u5408\u600e\u4e48\u529e\uff1f\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u6d3e\u751f\u589e\u52a0\u62bd\u8c61\u5c42\u6765\u589e\u52a0\u4f7f\u7528\u7075\u6d3b\u6027\u3002 \u82e5\u65e0\u6cd5\u786e\u5b9a\u591a\u6001\u5bf9\u8c61\u7684\u5177\u4f53\u7c7b \u5728\u589e\u52a0\u4e00\u5c42\u201c\u62bd\u8c61\u5c42\u201d\uff1a\u4ece Factory \u6d3e\u751f\u4e00\u4e2a\u5b50\u7c7b\uff0c\u4e0d\u80fd\u786e\u5b9a\u7684\u95ee\u9898\uff08\u4f7f\u7528\u5177\u4f53\u7c7b\u540d\u521b\u5efa\u4ea7\u54c1\u5bf9\u8c61\uff09\u4ea4\u7ed9\u4ed6\u89e3\u51b3\uff01 \u5bf9\u8fd9\u4e2a\u5b50\u7c7b\u800c\u8a00\uff0c\u5b83\u7684\u201c\u5b9e\u73b0\u8005\u201d\uff08\u7a0b\u5e8f\u5458\u3001\u4ee3\u7801\u4e0a\u4e0b\u6587\u73af\u5883\uff09\u662f\u77e5\u9053\u5177\u4f53\u4ea7\u54c1\u7684\u7c7b\u540d\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u521b\u5efa\u76f8\u5e94\u5bf9\uff01 \u901a\u8fc7\u6d3e\u751f\u5f15\u5165\u7684\u62bd\u8c61\u5c42\u589e\u52a0\u4e86\u4f7f\u7528\u7075\u6d3b\u6027 \u4e00\u65b9\u9762\u4f7f\u7528\u57fa\u7c7b\u80fd\u5c06\u65e0\u6cd5\u786e\u5b9a\u7684\u4e8b\u60c5\u4ea4\u7531\u5b50\u7c7b\u53bb\u786e\u5b9a\uff1b \u53e6\u4e00\u65b9\u9762\u4e5f\u4f7f\u79ef\u7d2f\u63d0\u4f9b\u7684\u63a5\u53e3\u4e0d\u6536\u67d0\u4e9b\u4fe1\u606f\u7684\u7ea6\u675f\u3002 class Factory { public : virtual ProductBase * Create ( ProductID ) = 0 ; }; class MyFactory : public Factory { public : ProductBase * Create ( ProductID id ) { if ( id == A_ID ) return new ProductA ; if ( id == B_ID ) return new ProductB ; // \u5f53\u4ea7\u54c1\u4f53\u7cfb\u6269\u5145\u65f6\uff0c\u5728\u6b64\u589e\u52a0\u4ee3\u7801 return nullptr ; } }; \u201c\u6401\u7f6e\u8d77\u6765\uff0c\u7559\u7ed9\u540e\u4ee3\u89e3\u51b3\u5427\u201d \u2014\u2014\u6bdb\u6cfd\u4e1c \u5bf9\u4e8e Factory \u7c7b\u7684\u7f16\u5199\u8005\uff0c\u638c\u63e1\u7684\u4fe1\u606f\u662f Create \u51fd\u6570\u7684\u58f0\u660e\u5f62\u5f0f\uff0c\u4f46\u5177\u4f53\u5bf9\u8c61\u7684\u7c7b\u578b\u96c6\u5408\u672a\u77e5\uff0c\u7559\u7ed9\u5de5\u5382\u5b50\u7c7b\u53bb\u89e3\u51b3\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u5de5\u5382+\u4ea7\u54c1\u7684\u53cc\u91cd\u591a\u6001 int main () { ProductBase * ptr ; // \u4ea7\u54c1\u57fa\u7c7b\u6307\u9488 Factory * fact_ptr ; // \u5de5\u5382\u57fa\u7c7b\u6307\u9488 fact_ptr = new MyFactory ; ptr = fact_ptr -> Create ( A_ID ); Use ( ptr ); ptr = fact_ptr -> Create ( B_ID ); Use ( ptr ); fact_ptr -> Create ( C_ID ) -> Interface (); }","title":"\u5de5\u5382\u4e0d\u5177\u5907\u5177\u4f53\u4ea7\u54c1\u53c2\u6570"},{"location":"design_pattern/add_layers/#_5","text":"\u7ee7\u627f\u4f53\u7cfb\u7684UML\u56fe \u8fd9\u79cd\u8bbe\u8ba1\u88abErich Gamma\u7b49\u4eba\u6210\u4e3a \u5de5\u5382\u65b9\u6cd5 \u6a21\u5f0f","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#-_2","text":"","title":"\u76f8\u4e92\u5173\u8054\u5bf9\u8c61\u7684\u521b\u5efa - \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#_6","text":"\u62ff\u87ba\u4e1d\u9489\u548c\u87ba\u4e1d\u5200\u4e3e\u4f8b\uff0c\u87ba\u4e1d\u9489\u6709\u4e00\u5b57\u7eb9\u3001\u5341\u5b57\u82b1\u3001\u516d\u8fb9\u5f62\u7b49\uff0c\u76f8\u5e94\u5730\u87ba\u4e1d\u5200\u4e5f\u6709\u5bf9\u5e94\u7684\u5b9e\u73b0\u3002\u73b0\u5728\u5047\u8bbe\u6709\u87ba\u4e1d\u5200\u548c\u87ba\u4e1d\u9489\u5de5\u5382\uff0c\u5219\u4e8c\u8005\u751f\u4ea7\u7684\u4ea7\u54c1\u7c7b\u578b\u5e94\u8be5\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u6709\u201c\u5173\u8054\u201d\u7684\u591a\u6001\u5bf9\u8c61\uff0c\u600e\u6837\u8bbe\u8ba1\u5de5\u5382\u80fd\u591f\u4f53\u73b0\u8fd9\u79cd\u201c\u5173\u8054\u201d\u6027\u5462\uff1f \u65e2\u7136\u591a\u79cd\u5bf9\u8c61\u95f4\u5b58\u5728\u5173\u8054\u5173\u7cfb\uff0c\u90a3\u5c31\u5e94\u8be5\u5c06\u521b\u5efa\u5b83\u4eec\u7684\u63a5\u53e3\u96c6\u6210\u5230\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u521b\u5efa\u591a\u79cd\u5bf9\u8c61\u7684\u65b0\u63a5\u53e3\uff01","title":"\u521b\u5efa\u63a5\u53e3\u96c6\u6210"},{"location":"design_pattern/add_layers/#_7","text":"\u5c06\u5173\u8054\u5bf9\u8c61\u7684\u751f\u6210\u63a5\u53e3\u96c6\u6210\uff08\u5408\u5e76\uff09\u5230\u5355\u4e2a\u521b\u5efa\u7c7b\u4e2d\uff0c\u5728\u5b9e\u73b0\u8be5\u7c7b\u65f6\u4fdd\u8bc1\u5404\u4e2a\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u8054\u6027\u7b26\u5408\u8981\u6c42\u3002 \u4e0a\u8ff0\u8bbe\u8ba1\u601d\u8def\u88abErich Gamma\u7b49\u4eba\u79f0\u4e3a \u62bd\u8c61\u5de5\u5382 \u6a21\u5f0f\u3002","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f"},{"location":"design_pattern/add_layers/#_8","text":"\u8bbe\u8ba1\u539f\u5219 \u5f00\u95ed\u539f\u5219 \u5355\u4e00\u8d23\u4efb\u539f\u5219 \u8bbe\u8ba1\u6a21\u5f0f \u7b56\u7565\u6a21\u5f0f \u59d4\u6258\u6a21\u5f0f \u6865\u63a5\u6a21\u5f0f \u9002\u914d\u5668\u6a21\u5f0f \u4ee3\u7406\u6a21\u5f0f \u88c5\u9970\u6a21\u5f0f \u8d23\u4efb\u94fe\u6a21\u5f0f \u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u3001\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u3001\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f \u672a\u6d89\u53ca\u7684\u6a21\u5f0f \u89e3\u91ca\u5668\u6a21\u5f0f \u547d\u4ee4\u6a21\u5f0f \uff08\u7528\u4e8e\u4ea4\u4e92\u5f0f\u7a0b\u5e8f\u3001\u72b6\u6001\u4fdd\u5b58\uff09 \u72b6\u6001\u6a21\u5f0f \uff08\u7c7b\u4f3c\u4e8e\u72b6\u6001\u673a\uff09","title":"\u603b\u7ed3"},{"location":"design_pattern/compose_interfaces/","text":"\u57fa\u4e8e\u63a5\u53e3\u7ec4\u5408\u5e94\u5bf9\u590d\u6742\u53d8\u5316 \u5df2\u6709\u8d44\u6e90\u7684\u7ec4\u5408 \u4f7f\u7528\u5df2\u6709\u8d44\u6e90\u7684\u5e38\u7528\u65b9\u5f0f \u7ee7\u627f\u3001\u7ec4\u5408\u3001\u6a21\u677f\u5b9e\u4f8b\u5316\uff08\u6cdb\u578b\u7f16\u7a0b\uff09 \u4f18\u5148\u4f7f\u7528 \u7ec4\u5408 \u800c\u4e0d\u662f \u7ee7\u627f \uff0c\u56e0\u4e3a\u7ec4\u5408\u6bd4\u8f83\u7075\u6d3b\uff0c\u4f46\u5982\u679c\u65b0\u4ee3\u7801\u91cc\u7684\u5bf9\u8c61\u548c\u539f\u6709\u4ee3\u7801\u7684\u5bf9\u8c61\u6709\u5929\u7136\u7684\u5305\u542b\u5173\u7cfb\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u7ee7\u627f\u6765\u590d\u7528\u4ee3\u7801\u3002 \u4ee5\u6808\u4e3a\u4f8b \u5b9e\u73b0\u6808\u7c7b\u578b\u2014\u2014FILO\u8868 \u5176\u5b9e\u4f8b\u80fd\u591f\u7ec4\u7ec7\u591a\u4e2a\u540c\u7c7b\u578b\u6570\u636e \u540e\u8fdb\u5148\u51fa \u63d0\u4f9b\u56db\u4e2a\u64cd\u4f5c\uff1a push , pop , top , empty \u5148\u5b9e\u73b0\u6574\u6570\u7684\u6808 \u4e00\u79cd\u65b9\u5f0f\u662f\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u539f\u59cb\u6570\u7ec4\u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u6808\u7c7b\uff1b \u8be5\u6808\u7c7b\u7684\u9700\u6c42\u4e0e std::vector \u7684 push_back , pop_back , back , empty \u63d0\u4f9b\u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u5728\u5b9e\u73b0\u4e0a\u53ea\u9700\u5728 std::vector \u7684\u57fa\u7840\u4e0a\u5c01\u88c5\u4e00\u5c42\u63a5\u53e3\u5373\u53ef\u3002 \u5f15\u5165\u63a5\u53e3 \u5c06\u63a5\u53e3\u4ee5\u7eaf\u865a\u51fd\u6570\u7684\u5f62\u5f0f\u5b9a\u4e49\u5728\u62bd\u8c61\u7c7b\u91cc\u9762\uff0c\u7531\u5b50\u7c7b\u53bb\u5b9e\u73b0\u3002 \u4f7f\u7528\u7684\u65f6\u5019\u8c03\u7528\u63a5\u53e3\u7c7b\uff0c\u4ee5\u6b64\u4fdd\u8bc1\u4f7f\u7528\u65b9\u5f0f\u4e0d\u53d8\u3002 \u5982\u6b64\u67d0\u4e2a\u7c7b\u7684\u4f7f\u7528\u8005\u548c\u5f00\u53d1\u8005\u7684\u5de5\u4f5c\u88ab\u5b8c\u5168\u9694\u79bb\u5f00\u3002 \u5047\u8bbe\u6309\u7167\u5982\u4e0bUML\u5b9e\u73b0\u57fa\u4e8e std::vector \u7684 Stack \uff1a \u8fd9\u91cc VectorStack \u7c7b\u662f\u4e00\u4e2a \u8f6c\u63a5\u7c7b \uff0c\u529f\u80fd\u7c7b\u4f3c\u4e8ethunder3\u8f6cUSB\u7684\u8f6c\u6362\u5934\u3002 \u9002\u914d\u5668\u6a21\u5f0f \u9002\u914d\u5668\u6a21\u5f0f \uff1a\u5bf9\u4e8e\u529f\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u4f46\u63a5\u53e3\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u5b9a\u4e49\u4e00\u4e2aAdapter\u7c7b\u4f7f\u7528\u7ec4\u5408\u5b9e\u73b0\u9002\u914d\u3002 \u8fd9\u91cc\u7684\u9002\u914d\u5668\u4f7f\u7528\u201c\u7ec4\u5408\u201d\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528\u201c\u7ee7\u627f\u201d\u5b9e\u73b0\u3002 \u591a\u91cd\u7ee7\u627f \u9664\u4e86\u201c\u7ec4\u5408\u201d\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u591a\u91cd\u7ee7\u627f\u201d\u5b9e\u73b0 VectorStack class VectorStack : public Stack , private vector < int > { public : VectorStack () : vector < int > () {} bool empty () { return vector < int >:: empty (); } void push ( int i ) { push_back ( i ); } void pop () { pop_back (); } int top () { return back (); } }; \u7531\u4e8e\u591a\u91cd\u7ee7\u627f\u662f\u5426\u5408\u7406\u5c1a\u5b58\u4e89\u8bba\uff0c\u5b9e\u9645\u4e2d\u4e0d\u5b58\u5728\u6b64\u5b9e\u73b0\u3002 C++\u5047\u8bbe\u7a0b\u5e8f\u5458\u77e5\u9053\u81ea\u5df1\u5728\u5e72\u4ec0\u4e48\uff0c\u6240\u4ee5\u5728\u529f\u80fd\u4e0a\u63d0\u4f9b\u4e86\u591a\u91cd\u7ee7\u627f \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0\u9002\u914d\uff0c\u79f0\u4f5c \u7c7bAdaapter \uff0cUML\u5982\u4e0b \u63a5\u53e3\u4e0d\u53d8\u65f6\u7684\u529f\u80fd\u53d8\u5316 \u667a\u80fd\u6307\u9488\u4e0e\u4ee3\u7406\u6a21\u5f0f \u8003\u8651\u591a\u4e2a\u6307\u9488\u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u91ca\u653e\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7684\u6307\u9488\u53d8\u6210\u4e86\u91ce\u6307\u9488\u3002\u8fd9\u91cc\u51fa\u73b0\u7684\u6839\u672c\u95ee\u9898\u662f\u6307\u9488\u4e4b\u95f4\u4e92\u76f8\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\u3002 \u5f15\u7528\u8ba1\u6570 \u95ee\u9898\u4e0a\u8ff0\u95ee\u9898\uff0c\u9700\u8981\u8ddf\u8e2a\u57fa\u7840\u5bf9\u8c61\u88ab\u591a\u5c11\u6307\u9488\u6240\u5171\u4eab\uff0c\u76f4\u5230\u5f15\u7528\u8ba1\u6570\u4e3a 0 0 \u65f6\u624d\u771f\u6b63\u91ca\u653e\u57fa\u7840\u5bf9\u8c61\u3002 \u201c\u667a\u80fd\u6307\u9488\u201d\u6a21\u677f #include <bits/stdc++.h> using namespace std ; template < typename T > class SmartPtr ; template < typename T > class UPtr { // \u8bbe\u8ba1\u4e00\u4e2a\u8f85\u52a9\u7c7b\u7528\u4f5cSmartPtr\u5b9e\u4f53\u7684\u5171\u4eab\u8ba1\u6570 private : friend class SmartPtr < T > ; UPtr ( T * ptr ) : p ( ptr ), count ( 1 ) {} ~ UPtr () { delete p ; } int count ; T * p ; }; template < typename T > class SmartPtr { public : SmartPtr ( T * ptr ) : rp ( new UPtr < T > ( ptr )) {} SmartPtr ( const SmartPtr < T >& sp ) : rp ( sp . rp ) { // \u62f7\u8d1d\u6784\u9020\uff0c\u5f15\u7528\u8ba1\u6570++ ++ rp -> count ; } SmartPtr & operator = ( const SmartPtr < T >& rhs ) { ++ rhs . rp -> count ; // \u5c06rhs\u7684\u5f15\u7528\u8ba1\u6570++ if ( -- rp -> count == 0 ) delete rp ; // \u539f\u6765\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570--\uff0c\u4e3a\u96f6\u5219\u91ca\u653e\u57fa\u7840\u5bf9\u8c61 rp = this . rp ; // \u6267\u884c\u5b9e\u9645\u8d4b\u503c\u64cd\u4f5c return * this ; } ~ SmartPtr () { if ( -- rp -> count == 0 ) delete rp ; // \u6790\u6784\u51fd\u6570\uff0c\u5f15\u7528\u8ba1\u6570--\uff0c\u4e3a\u96f6\u5219\u91ca\u653e\u57fa\u7840\u5bf9\u8c61 } // \u91cd\u8f7d\u6307\u9488\u64cd\u4f5c\u7b26 * \u548c -> T & operator * () { return * ( rp -> p ); } T * operator -> () { return rp -> p ; } private : UPtr < T >* rp ; }; // \u4f7f\u7528\u667a\u80fd\u6307\u9488\uff0c\u65e0\u9700\u8003\u8651\u91ca\u653e\u95ee\u9898 int main ( int argc , char * argv []) { SmartPtr < int > ptr1 ( new int ( 2 )); SmartPtr < int > ptr2 ( ptr1 ); SmartPtr < int > ptr3 = ptr2 ; cout << * ptr1 << endl ; * ptr1 = 20 ; cout << * ptr2 << endl ; } \u8f93\u51fa 2 20 \u667a\u80fd\u6307\u9488\u5206\u6790 SmartPtr<int> \u548c int* \u6709\u76f8\u540c\u7684\u63a5\u53e3 \u64cd\u4f5c\u7b26\uff1a * \u548c -> \u8d4b\u503c\u64cd\u4f5c\u7b26\u4e0e\u521d\u59cb\u5316\uff08\u62f7\u8d1d\u6784\u9020\uff09 \u91ca\u653e\uff08\u6790\u6784\uff09 SmartPtr<int> \u6bd4 int* \u589e\u52a0\u4e86\u4e00\u4e9b\u63a7\u5236\u64cd\u4f5c \u62f7\u8d1d\u6784\u9020\u65f6\u5f15\u7528\u8ba1\u6570 ++ \u6790\u6784\u65f6\u5f15\u7528\u8ba1\u6570 -- \uff0c\u76f4\u5230\u5f15\u7528\u8ba1\u6570\u4e3a\u96f6\u65f6\u91ca\u653e \u8d4b\u503c\u65f6\u5bf9\u5f53\u524d\u5f15\u7528\u8ba1\u6570\u548c\u53c2\u6570\u5f15\u7528\u8ba1\u6570\u5206\u522b\u5904\u7406 \u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4e3a \u4ee3\u7406\u6a21\u5f0f \u4ee5 SmartPtr \u7684\u8d4b\u503c\u64cd\u4f5c\u7b26 = \u4e3a\u4f8b \u9996\u5148\u505a\u4e00\u4e9b\"\u5176\u4ed6\u64cd\u4f5c\" \u7136\u540e\u6267\u884c\u4e86 int* \u7684\u8d4b\u503c\u64cd\u4f5c \u5728 int* \u7684\u8d4b\u503c\u64cd\u4f5c\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u66f4\u591a\u529f\u80fd \u63a5\u53e3\u4e0d\u53d8\uff0c\u529f\u80fd\u53d8\u5316 \u5e38\u88ab\u79f0\u4e3a \u4ee3\u7406\u6a21\u5f0f \u7528\u4e8e\u5bf9\u88ab\u4ee3\u7406\u5bf9\u8c61\u8fdb\u884c\u63a7\u5236\uff0c\u5982\u5f15\u7528\u8ba1\u6570\u63a7\u5236\u3001\u6743\u9650\u63a7\u5236\uff08\u88ab\u4ee3\u7406\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff09\u3001\u8fdc\u7a0b\u4ee3\u7406\uff08\u5c06\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u64cd\u4f5c\u4ee3\u7406\u5230\u672c\u5730\u5bf9\u8c61\uff09\u3001\u5ef6\u8fdf\u521d\u59cb\u5316\u7b49\u7b49\u3002 \u5ef6\u8fdf\u521d\u59cb\u5316 \u6709\u4e9b\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65f6\u95f4\u8f83\u957f\uff0c\u6bd4\u5982\u9700\u8981\u505a\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u7b49\u5230\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\u518d\u521d\u59cb\u5316\u3002 \u5ef6\u8fdf\u521d\u59cb\u5316\u7ecf\u5e38\u4e0e\u5f15\u7528\u8ba1\u6570\u7ed3\u5408\u4f7f\u7528\uff0c\u51cf\u5c11\u521d\u59cb\u5316\u7684\u6b21\u6570\u3002 class Proxy : public Object { public : Proxy () : object_ ( nullptr ) {} // \u4ee3\u7406\u7c7b\u5bf9\u8c61\u521d\u59cb\u5316\u65f6\u4e0d\u521d\u59cb\u5316\u5b9e\u9645\u5bf9\u8c61 ~ Proxy () { if ( object_ != nullptr ) delete object_ ; } void run () { // \u5b9e\u9645\u5bf9\u8c61\u521d\u59cb\u5316\u88ab\u5ef6\u8fdf\u5230\u8c03\u7528run\u51fd\u6570\u65f6\u8fdb\u884c if ( object_ == nullptr ) object_ = new RealObject (); object_ -> run (); // run\u51fd\u6570\u672c\u6765\u7684\u529f\u80fd } private : RealObject * object_ ; }; int main ( int argc , char * argv []) { Proxy proxy ; proxy . run (); } Lazy load\u7684\u597d\u5904\uff1a \u51cf\u5c11\u521d\u59cb\u5316\u65f6\u95f4 \u5f53\u548c\u5f15\u7528\u8ba1\u6570\u7ed3\u5408\u7684\u65f6\u5019\u80fd\u591f\u8282\u7701\u4e0d\u5fc5\u8981\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\uff08\u5c06\u591a\u4e2aProxy\u6307\u5411\u540c\u4e00\u4e2a\u5b9e\u9645\u5bf9\u8c61\uff09 \u6709\u4e9b\u5bf9\u8c61\u521d\u59cb\u5316\u4e4b\u540e\u4e0d\u4e00\u5b9a\u88ab\u4f7f\u7528\uff0c\u91c7\u7528lazy load\u7684\u65b9\u5f0f\u53ef\u4ee5\u51cf\u5c11\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u8d44\u6e90\u6d6a\u8d39 \u88c5\u9970 \u4ece\u5b9e\u73b0\u4e00\u4e2aTextViewer\u5f00\u59cb \u5047\u8bbe\u73b0\u6709\u4e00\u4e2a TextView \u5bf9\u8c61\uff0c\u80fd\u591f\u5728\u7a97\u53e3\u4e2d\u663e\u793a\u6587\u5b57\u3002\u73b0\u5728\u5e0c\u671b\u63a5\u53e3\u4e0d\u53d8\uff0c\u589e\u52a0\u6eda\u52a8\u6761\u3001\u8fb9\u6846\u3001... \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0 \u5229\u7528C++\u4e2d\u7684\u7ee7\u627f\uff0c\u4f9d\u9760\u591a\u6001\u5b9e\u73b0\u529f\u80fd\u591a\u6837\u5316\uff1a \u5f0a\u7aef\uff1a\u591a\u79cd TextView \u4e4b\u95f4\u6ca1\u6709\u5c42\u6b21\u5173\u7cfb\uff0c\u4e0d\u7528\u7684View\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002\u7531\u6b64\u5f53\u9700\u8981\u7684\u9644\u4ef6\u589e\u591a\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4 TextView \u7c7b\u4f53\u7cfb\u81a8\u80c0 \u3001\u4ee3\u7801\u5927\u91cf\u5197\u4f59\u3002 \u4f7f\u7528\u7b56\u7565\u6a21\u5f0f \u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f\uff0c\u4f7f\u7528\u7ec4\u5408\u52a8\u6001\u6539\u53d8\u7b56\u7565\u4ee5\u5b9e\u73b0\u591a\u53d8\u7684\u529f\u80fd \u7b56\u7565\u9009\u9879\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u4f7f\u5f97\u7ec4\u5408\u66f4\u52a0\u7075\u6d3b\uff0c\u6709\u6548\u6291\u5236\u4e86 \u7c7b\u81a8\u80c0 \u95ee\u9898\u3002 \u4f46\u662f\uff0c\u7b56\u7565\u9009\u9879\u9700\u8981\u9884\u5148\u5b9a\u4e49\uff0c\u65e0\u6cd5\u589e\u52a0\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u201c\u5de5\u5177\u680f\u201d\u7684\u65f6\u5019\uff0c\u9700\u8981\u5728 TextView \u5927\u7c7b\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u79cd\u64cd\u4f5c\u5e94\u8be5\u88ab\u907f\u514d\u3002 \u88c5\u9970\u6a21\u5f0f \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c TextView \u662f\u4e3b\u4f53\uff0c Border \u548c ScrollBar \u90fd\u662f\u7ed9 TextView \u589e\u52a0\u529f\u80fd\u7684\uff0c\u662f\u9644\u52a0\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 TextView \u4e0a\u201c\u6dfb\u52a0\u88c5\u9970\u201d\u6765\u5b9e\u73b0 Border \u548c ScrollBar \u800c\u65e0\u9700\u4fee\u6539 TextView \u3002 \u4ee3\u7801\u5b9e\u73b0 \u589e\u52a0\u4e00\u4e2a Component \u4f5c\u4e3a\u53ef\u663e\u793a\u5185\u5bb9\u7684\u57fa\u7c7b\uff0c TextView \u4f5c\u4e3a\u5176\u5b50\u7c7b\u3002\u800c\u6240\u6709\u7684 \u88c5\u9970\u7c7b \u90fd\u662f\u53ef\u663e\u793a\u7684\uff0c\u4e5f\u5c31\u90fd\u662f Component \u7684\u5b50\u7c7b\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u88c5\u9970\u7c7b\uff0c\u5b9e\u73b0\u4e0d\u540c\u7684\u88c5\u9970\u80fd\u529b\u3002 class Component { public : virtual ~ Component () {} virtual void Draw () = 0 ; }; class TextView : public Component { public : void Draw () { cout << \"TextView.\" << endl ; } }; class Decorator : public Component { public : Decorator ( Component * component ) : component_ ( component ) {} virtual void Addon () = 0 ; void Draw () { Addon (); component_ -> Draw (); } private : Component * component_ ; }; class Border : public Decorator { public : Border ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"Bordered \" ; } }; class HScroll : public Decorator { public : HScroll ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"HScrolled \" ; } }; class VScroll : public Decorator { public : VScroll ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"VScrolled \" ; } }; \u4f7f\u7528\u65f6\u5bf9 TextView \u8fdb\u884c\u9010\u5c42\u88c5\u9970\uff0c\u53ef\u4ee5\u7075\u6d3b\u5f97\u5230\u4e0d\u540c\u7684\u663e\u793a\u6548\u679c int main ( int argc , char ** argv ) { TextView text_view ; VScroll vs_text_view ( & text_view ); HScroll hs_vs_text_view ( & vs_text_view ); Border b_hs_vs_text_view ( & hs_vs_text_view ); b_hs_vs_text_view . Draw (); } \u8f93\u51fa\uff1a Bordered HScrolled VScrolled TextView. \u88c5\u9970\u6a21\u5f0f\u4e0e\u7b56\u7565\u6a21\u5f0f \u88c5\u9970\u6a21\u5f0f \u548c \u7b56\u7565\u6a21\u5f0f \u90fd\u901a\u8fc7\u5bf9\u8c61\u7684\u7ec4\u5408\u4fee\u6539\u5bf9\u8c61\u7684\u529f\u80fd\uff08\u8868\u73b0\uff09\uff0c\u4ee5\u7ec4\u5408\u7684\u65b9\u5f0f\u4ee3\u66ff\u7ee7\u627f\u4f7f\u7528\u66f4\u7075\u6d3b\u3002 \u4e0d\u540c\u70b9 \u7b56\u7565 \u88c5\u9970 \u4fee\u6539\u5bf9\u8c61\u529f\u80fd\u7684\u5185\u6838 \u4fee\u6539\u5bf9\u8c61\u529f\u80fd\u7684\u5916\u58f3 \u7ec4\u5efa\u5fc5\u987b\u4e86\u89e3\u6709\u54ea\u4e9b\u9700\u8981\u9009\u62e9\u7684\u7b56\u7565 \u7ec4\u5efa\u65e0\u9700\u4e86\u89e3\u6709\u54ea\u4e9b\u53ef\u4ee5\u88c5\u9970\u7684\u5185\u5bb9 \u88c5\u9970\u6a21\u5f0f\u4e0e\u4ee3\u7406\u6a21\u5f0f \u88c5\u9970\u6a21\u5f0f \u548c \u4ee3\u7406\u6a21\u5f0f \u90fd\u7528\u6765\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\u3002 \u53ef\u4ee5\u628a \u88c5\u9970 \u770b\u505a\u4e00\u8fde\u4e32\u7684 \u4ee3\u7406 \u88c5\u9970 \u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u589e\u52a0\u989d\u5916\u884c\u4e3a \u4e0d\u5f71\u54cd\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u539f\u6709\u529f\u80fd \u4e0d\u521b\u5efa\u88ab\u88c5\u9970\u5bf9\u8c61\uff0c\u53ea\u662f\u5c06\u65b0\u529f\u80fd\u6dfb\u52a0\u5230\u5df2\u6709\u5bf9\u8c61\u4e0a \u7ecf\u5e38\u591a\u5d4c\u5957\u88c5\u9970 \u4ee3\u7406 \u5e38\u7528\u6765\u5bf9\u88ab\u4ee3\u7406\u5bf9\u8c61\u8fdb\u884c\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236 \u88ab\u4ee3\u7406\u5bf9\u8c61\u4e0d\u5b58\u5728\u65f6\u521b\u5efa\u88ab\u4ee3\u7406\u5bf9\u8c61 \u5c11\u89c1\u591a\u91cd\u5d4c\u5957 \u8d23\u4efb\u7684\u4f20\u9012\u4e0e\u8d23\u4efb\u94fe \u88c5\u9970\u5668\u7684\u4f7f\u7528\u6210\u4e00\u79cd\u94fe\u5f0f\u8c03\u7528\u5173\u7cfb\uff0c\u6bcf\u5c42\u5bf9\u8c61\u65e0\u9700\u4e86\u89e3\u6574\u4e2a\u94fe\u7684\u5168\u8c8c\uff0c\u53ea\u9700\u77e5\u9053\u201c\u4e0b\u4e00\u4e2a\u201d\u5bf9\u8c61\u662f\u8c01\u5373\u53ef\u3002 \u8d23\u4efb\u94fe \u5c06\u4e00\u7cfb\u5217\u7684\u5904\u7406\u8005\u8fde\u57ce\u4e00\u6761\u94fe\uff0c\u5c06\u8bf7\u6c42\u6cbf\u7740\u8fd9\u4e2a\u94fe\u4f20\u9012\u5e76\u7531\u94fe\u4e0a\u7684\u5904\u7406\u7740\u4e88\u4ee5\u5904\u7406 \u4e00\u4e2a\u90ae\u4ef6\u8fc7\u6ee4\u5668 \u8bbe\u7f6e\u8fc7\u6ee4\u5668\uff1a\u6839\u636e\u53d1\u4ef6\u4eba\u3001\u6839\u636e\u4e3b\u9898\u3001\u6839\u636e\u5173\u952e\u5b57\u7b49 \u5b9e\u73b0 \u5b9a\u4e49\u8bf7\u6c42 class MailRequest { //... public : string GetSender (); string GetTitle (); string GetBody (); string GetAll (); void Accept () { reject_ = false ; } void Reject () { reject_ = true ; } bool IsReject () { return reject_ ; } private : bool reject_ ; }; \u5b9a\u4e49\u201c\u5904\u7406\u8005\u201d\uff0c\u201c\u5904\u7406\u8005\u201d\u7528 DoHandle() \u505a\u201c\u5206\u5185\u4e4b\u4e8b\u201d\uff0c\u5982\u4e0d\u6210\u529f\u518d\u5c06\u8f7b\u8f68\u53bb\u4f20\u9012\u7ed9\u540e\u7eed\u7684\u5904\u7406\u8005 class Handler { public : Handler ( Handler * successor ) : successor_ ( successor ) {} virtual ~ Handler () {} virtual bool DoHandle ( MailRequest * request ) = 0 ; void Handle ( MailRequest * request ) { if ( ! DoHandle ( request )) { if ( successor_ != nullptr ) successor_ -> Handle ( request ); } } private : Handler * successor_ ; }; \u5b9e\u73b0\u5404\u79cd\u8fc7\u6ee4\u5668\u903b\u8f91 class SenderFilter : public Handler { public : SenderFilter ( Handler * successor ) : Handler ( successor ); bool DoHandle ( MailRequest * request ) { if ( IsWhite ( request -> GetSender ())) { request -> Accept (); return true ; } if ( IsBlack ( request -> GetSender ())) { request -> Reject (); return true ; } return false ; } }; class TitleFilter : public Handler { public : TitleFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { if ( ! IsValid ( request -> GetTitle ())) { request -> Reject (); return true ; } return false ; } }; class BodyFilter : public Handler { public : BodyFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { for ( auto s : invalid_texts ) { if ( request -> GetBody (). find ( s ) != string :: npos ) { request -> Reject (); return true ; } } return false ; } private : vector < string > invalid_texts = { \"text1\" , \"text2\" /*, .....*/ }; }; \u4e00\u822c\u5728\u8d23\u4efb\u94fe\u672b\u7aef\u6709\u4e00\u4e2a\u7f3a\u7701\u7684\u5904\u7406\u8005 class DefaultFilter : public Handler { public : DefaultFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { request -> Accept (); return true ; } }; \u8d23\u4efb\u94fe\u7684\u4ea7\u751f\u4ece\u94fe\u5c3e\u5230\u94fe\u5934\u53cd\u5411\u58f0\u660e\uff0c\u4f7f\u7528\u8d23\u4efb\u94fe\u65f6\u53ea\u8981\u628a\u5904\u7406\u8bf7\u6c42\u4ea4\u7ed9\u8d23\u4efb\u94fe\u5f00\u59cb\u7684\u5904\u7406\u8005\u5373\u53ef\u3002 int main ( int argc , char * argv []) { DefaultFilter f1 ( nullptr ); BodyFilter f2 ( & f1 ); TitleFilter f3 ( & f2 ); SenderFilter f4 ( & f3 ); MailRequest * request = GetRequest (); f4 . Handle ( request ); if ( request -> IsReject ()) { cout << \"Rejected.\" << endl ; } else { cout << \"Accepted.\" << endl ; } } \u4e0e\u88c5\u9970\u3001\u4ee3\u7406\u5bf9\u6bd4 \u8d23\u4efb\u94fe\u4e0e\u88c5\u9970 \u4e24\u8005\u90fd\u6709\u201c\u8c03\u7528\u94fe\u201d\uff0c\u8d23\u4efb\u94fe\u5f3a\u8c03\u7684\u662f\u94fe\u6574\u4f53\u7684\u884c\u4e3a\uff0c\u800c\u88c5\u9970\u5219\u66f4\u5f3a\u8c03\u8c03\u7528\u94fe\u5e26\u6765\u7684\u7ec4\u7ec7\u7ed3\u679c\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u8d23\u4efb\u94fe\u4e0d\u4e00\u5b9a\u8c03\u7528\u5230\u5e95\uff0c\u53ef\u80fd\u5728\u67d0\u4e00\u73af\u5f97\u5230\u7ed3\u679c\uff1b\u4f46\u88c5\u9970\u94fe\u4e00\u5b9a\u8c03\u7528\u5230\u5e95\uff0c\u6bcf\u4e00\u73af\u90fd\u4f1a\u8d77\u4f5c\u7528\u3002 \u8d23\u4efb\u94fe\u4e0e\u4ee3\u7406 \u8d23\u4efb\u94fe\u4e5f\u53ef\u4ee5\u770b\u4f5c\u4e00\u8fde\u4e32\u4ee3\u7406\u3002 \u4ee3\u7406\u5f3a\u8c03\u63a7\u5236\u88ab\u4ee3\u7406\u5bf9\u8c61\uff0c\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\uff1b\u8d23\u4efb\u94fe\u5219\u7ec4\u7ec7\u591a\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u3002 \u5c0f\u7ed3 \u672c\u90e8\u5206\u8003\u8651\u5982\u4f55\u5c06\u5c0f\u7684\u7a0b\u5e8f\u6a21\u5757\u7ec4\u5408\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u3002 \u9002\u914d\u5668\u6a21\u5f0f - \u529f\u80fd\u6ee1\u8db3\uff0c\u63a5\u53e3\u6539\u53d8\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a \u7528 std::vector \u5b9e\u73b0\u7684 Stack \u7c7b\u3002 \u4ee3\u7406\u6a21\u5f0f - \u63a5\u53e3\u4e0d\u53d8\uff0c\u529f\u80fd\u589e\u52a0\uff08\u63a7\u5236\u903b\u8f91\uff09 - \u5e94\u7528\u4e3e\u4f8b\uff1a\u667a\u80fd\u6307\u9488\u3002 \u4ee3\u7406\u6a21\u5f0f \u548c \u59d4\u6258\u6a21\u5f0f \u7684\u5173\u7cfb\uff1a \u59d4\u6258 \u5f3a\u8c03\u4e3b\u7c7b\u628a\u529f\u80fd\u4ea4\u51fa\u53bb\uff0c \u4ee3\u7406 \u5219\u5f3a\u8c03\u5728\u4e3b\u7c7b\u6267\u884c\u524d\u6267\u884c\u4e00\u4e9b\u7279\u522b\u64cd\u4f5c\u3002 \u88c5\u9970\u5668\u6a21\u5f0f - \u5728\u53ef\u65b0\u6a21\u5757\u4e0a\u53e0\u52a0\u4e00\u7cfb\u5217\u9644\u52a0\u529f\u80fd\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a TextViewer \u52a0\u6eda\u52a8\u6761\u548c\u5de5\u5177\u680f \u8d23\u4efb\u94fe\u6a21\u5f0f - \u5bf9\u5bf9\u8c61\u6267\u884c\u4e00\u7cfb\u5217\u7684\u4efb\u52a1\uff0c\u53ef\u80fd\u7ec8\u6b62\u4e8e\u4efb\u4f55\u4e00\u73af\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a\u90ae\u4ef6\u8fc7\u6ee4\u5668 \u53e6\u5916\u6ce8\u610f\u6807\u51c6\u5e93\u548c\u5f00\u6e90\u4ee3\u7801\u7684\u4f7f\u7528\u3002","title":"\u63a5\u53e3\u7ec4\u5408"},{"location":"design_pattern/compose_interfaces/#_1","text":"","title":"\u57fa\u4e8e\u63a5\u53e3\u7ec4\u5408\u5e94\u5bf9\u590d\u6742\u53d8\u5316"},{"location":"design_pattern/compose_interfaces/#_2","text":"\u4f7f\u7528\u5df2\u6709\u8d44\u6e90\u7684\u5e38\u7528\u65b9\u5f0f \u7ee7\u627f\u3001\u7ec4\u5408\u3001\u6a21\u677f\u5b9e\u4f8b\u5316\uff08\u6cdb\u578b\u7f16\u7a0b\uff09 \u4f18\u5148\u4f7f\u7528 \u7ec4\u5408 \u800c\u4e0d\u662f \u7ee7\u627f \uff0c\u56e0\u4e3a\u7ec4\u5408\u6bd4\u8f83\u7075\u6d3b\uff0c\u4f46\u5982\u679c\u65b0\u4ee3\u7801\u91cc\u7684\u5bf9\u8c61\u548c\u539f\u6709\u4ee3\u7801\u7684\u5bf9\u8c61\u6709\u5929\u7136\u7684\u5305\u542b\u5173\u7cfb\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u7ee7\u627f\u6765\u590d\u7528\u4ee3\u7801\u3002","title":"\u5df2\u6709\u8d44\u6e90\u7684\u7ec4\u5408"},{"location":"design_pattern/compose_interfaces/#_3","text":"\u5b9e\u73b0\u6808\u7c7b\u578b\u2014\u2014FILO\u8868 \u5176\u5b9e\u4f8b\u80fd\u591f\u7ec4\u7ec7\u591a\u4e2a\u540c\u7c7b\u578b\u6570\u636e \u540e\u8fdb\u5148\u51fa \u63d0\u4f9b\u56db\u4e2a\u64cd\u4f5c\uff1a push , pop , top , empty \u5148\u5b9e\u73b0\u6574\u6570\u7684\u6808 \u4e00\u79cd\u65b9\u5f0f\u662f\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u539f\u59cb\u6570\u7ec4\u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u6808\u7c7b\uff1b \u8be5\u6808\u7c7b\u7684\u9700\u6c42\u4e0e std::vector \u7684 push_back , pop_back , back , empty \u63d0\u4f9b\u7684\u529f\u80fd\u7c7b\u4f3c\uff0c\u5728\u5b9e\u73b0\u4e0a\u53ea\u9700\u5728 std::vector \u7684\u57fa\u7840\u4e0a\u5c01\u88c5\u4e00\u5c42\u63a5\u53e3\u5373\u53ef\u3002","title":"\u4ee5\u6808\u4e3a\u4f8b"},{"location":"design_pattern/compose_interfaces/#_4","text":"\u5c06\u63a5\u53e3\u4ee5\u7eaf\u865a\u51fd\u6570\u7684\u5f62\u5f0f\u5b9a\u4e49\u5728\u62bd\u8c61\u7c7b\u91cc\u9762\uff0c\u7531\u5b50\u7c7b\u53bb\u5b9e\u73b0\u3002 \u4f7f\u7528\u7684\u65f6\u5019\u8c03\u7528\u63a5\u53e3\u7c7b\uff0c\u4ee5\u6b64\u4fdd\u8bc1\u4f7f\u7528\u65b9\u5f0f\u4e0d\u53d8\u3002 \u5982\u6b64\u67d0\u4e2a\u7c7b\u7684\u4f7f\u7528\u8005\u548c\u5f00\u53d1\u8005\u7684\u5de5\u4f5c\u88ab\u5b8c\u5168\u9694\u79bb\u5f00\u3002 \u5047\u8bbe\u6309\u7167\u5982\u4e0bUML\u5b9e\u73b0\u57fa\u4e8e std::vector \u7684 Stack \uff1a \u8fd9\u91cc VectorStack \u7c7b\u662f\u4e00\u4e2a \u8f6c\u63a5\u7c7b \uff0c\u529f\u80fd\u7c7b\u4f3c\u4e8ethunder3\u8f6cUSB\u7684\u8f6c\u6362\u5934\u3002","title":"\u5f15\u5165\u63a5\u53e3"},{"location":"design_pattern/compose_interfaces/#_5","text":"\u9002\u914d\u5668\u6a21\u5f0f \uff1a\u5bf9\u4e8e\u529f\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u4f46\u63a5\u53e3\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u5b9a\u4e49\u4e00\u4e2aAdapter\u7c7b\u4f7f\u7528\u7ec4\u5408\u5b9e\u73b0\u9002\u914d\u3002 \u8fd9\u91cc\u7684\u9002\u914d\u5668\u4f7f\u7528\u201c\u7ec4\u5408\u201d\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528\u201c\u7ee7\u627f\u201d\u5b9e\u73b0\u3002","title":"\u9002\u914d\u5668\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_6","text":"\u9664\u4e86\u201c\u7ec4\u5408\u201d\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201c\u591a\u91cd\u7ee7\u627f\u201d\u5b9e\u73b0 VectorStack class VectorStack : public Stack , private vector < int > { public : VectorStack () : vector < int > () {} bool empty () { return vector < int >:: empty (); } void push ( int i ) { push_back ( i ); } void pop () { pop_back (); } int top () { return back (); } }; \u7531\u4e8e\u591a\u91cd\u7ee7\u627f\u662f\u5426\u5408\u7406\u5c1a\u5b58\u4e89\u8bba\uff0c\u5b9e\u9645\u4e2d\u4e0d\u5b58\u5728\u6b64\u5b9e\u73b0\u3002 C++\u5047\u8bbe\u7a0b\u5e8f\u5458\u77e5\u9053\u81ea\u5df1\u5728\u5e72\u4ec0\u4e48\uff0c\u6240\u4ee5\u5728\u529f\u80fd\u4e0a\u63d0\u4f9b\u4e86\u591a\u91cd\u7ee7\u627f \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0\u9002\u914d\uff0c\u79f0\u4f5c \u7c7bAdaapter \uff0cUML\u5982\u4e0b","title":"\u591a\u91cd\u7ee7\u627f"},{"location":"design_pattern/compose_interfaces/#_7","text":"","title":"\u63a5\u53e3\u4e0d\u53d8\u65f6\u7684\u529f\u80fd\u53d8\u5316"},{"location":"design_pattern/compose_interfaces/#_8","text":"\u8003\u8651\u591a\u4e2a\u6307\u9488\u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u91ca\u653e\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7684\u6307\u9488\u53d8\u6210\u4e86\u91ce\u6307\u9488\u3002\u8fd9\u91cc\u51fa\u73b0\u7684\u6839\u672c\u95ee\u9898\u662f\u6307\u9488\u4e4b\u95f4\u4e92\u76f8\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\u3002","title":"\u667a\u80fd\u6307\u9488\u4e0e\u4ee3\u7406\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_9","text":"\u95ee\u9898\u4e0a\u8ff0\u95ee\u9898\uff0c\u9700\u8981\u8ddf\u8e2a\u57fa\u7840\u5bf9\u8c61\u88ab\u591a\u5c11\u6307\u9488\u6240\u5171\u4eab\uff0c\u76f4\u5230\u5f15\u7528\u8ba1\u6570\u4e3a 0 0 \u65f6\u624d\u771f\u6b63\u91ca\u653e\u57fa\u7840\u5bf9\u8c61\u3002 \u201c\u667a\u80fd\u6307\u9488\u201d\u6a21\u677f #include <bits/stdc++.h> using namespace std ; template < typename T > class SmartPtr ; template < typename T > class UPtr { // \u8bbe\u8ba1\u4e00\u4e2a\u8f85\u52a9\u7c7b\u7528\u4f5cSmartPtr\u5b9e\u4f53\u7684\u5171\u4eab\u8ba1\u6570 private : friend class SmartPtr < T > ; UPtr ( T * ptr ) : p ( ptr ), count ( 1 ) {} ~ UPtr () { delete p ; } int count ; T * p ; }; template < typename T > class SmartPtr { public : SmartPtr ( T * ptr ) : rp ( new UPtr < T > ( ptr )) {} SmartPtr ( const SmartPtr < T >& sp ) : rp ( sp . rp ) { // \u62f7\u8d1d\u6784\u9020\uff0c\u5f15\u7528\u8ba1\u6570++ ++ rp -> count ; } SmartPtr & operator = ( const SmartPtr < T >& rhs ) { ++ rhs . rp -> count ; // \u5c06rhs\u7684\u5f15\u7528\u8ba1\u6570++ if ( -- rp -> count == 0 ) delete rp ; // \u539f\u6765\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570--\uff0c\u4e3a\u96f6\u5219\u91ca\u653e\u57fa\u7840\u5bf9\u8c61 rp = this . rp ; // \u6267\u884c\u5b9e\u9645\u8d4b\u503c\u64cd\u4f5c return * this ; } ~ SmartPtr () { if ( -- rp -> count == 0 ) delete rp ; // \u6790\u6784\u51fd\u6570\uff0c\u5f15\u7528\u8ba1\u6570--\uff0c\u4e3a\u96f6\u5219\u91ca\u653e\u57fa\u7840\u5bf9\u8c61 } // \u91cd\u8f7d\u6307\u9488\u64cd\u4f5c\u7b26 * \u548c -> T & operator * () { return * ( rp -> p ); } T * operator -> () { return rp -> p ; } private : UPtr < T >* rp ; }; // \u4f7f\u7528\u667a\u80fd\u6307\u9488\uff0c\u65e0\u9700\u8003\u8651\u91ca\u653e\u95ee\u9898 int main ( int argc , char * argv []) { SmartPtr < int > ptr1 ( new int ( 2 )); SmartPtr < int > ptr2 ( ptr1 ); SmartPtr < int > ptr3 = ptr2 ; cout << * ptr1 << endl ; * ptr1 = 20 ; cout << * ptr2 << endl ; } \u8f93\u51fa 2 20","title":"\u5f15\u7528\u8ba1\u6570"},{"location":"design_pattern/compose_interfaces/#_10","text":"SmartPtr<int> \u548c int* \u6709\u76f8\u540c\u7684\u63a5\u53e3 \u64cd\u4f5c\u7b26\uff1a * \u548c -> \u8d4b\u503c\u64cd\u4f5c\u7b26\u4e0e\u521d\u59cb\u5316\uff08\u62f7\u8d1d\u6784\u9020\uff09 \u91ca\u653e\uff08\u6790\u6784\uff09 SmartPtr<int> \u6bd4 int* \u589e\u52a0\u4e86\u4e00\u4e9b\u63a7\u5236\u64cd\u4f5c \u62f7\u8d1d\u6784\u9020\u65f6\u5f15\u7528\u8ba1\u6570 ++ \u6790\u6784\u65f6\u5f15\u7528\u8ba1\u6570 -- \uff0c\u76f4\u5230\u5f15\u7528\u8ba1\u6570\u4e3a\u96f6\u65f6\u91ca\u653e \u8d4b\u503c\u65f6\u5bf9\u5f53\u524d\u5f15\u7528\u8ba1\u6570\u548c\u53c2\u6570\u5f15\u7528\u8ba1\u6570\u5206\u522b\u5904\u7406 \u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4e3a \u4ee3\u7406\u6a21\u5f0f \u4ee5 SmartPtr \u7684\u8d4b\u503c\u64cd\u4f5c\u7b26 = \u4e3a\u4f8b \u9996\u5148\u505a\u4e00\u4e9b\"\u5176\u4ed6\u64cd\u4f5c\" \u7136\u540e\u6267\u884c\u4e86 int* \u7684\u8d4b\u503c\u64cd\u4f5c \u5728 int* \u7684\u8d4b\u503c\u64cd\u4f5c\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u66f4\u591a\u529f\u80fd \u63a5\u53e3\u4e0d\u53d8\uff0c\u529f\u80fd\u53d8\u5316 \u5e38\u88ab\u79f0\u4e3a \u4ee3\u7406\u6a21\u5f0f \u7528\u4e8e\u5bf9\u88ab\u4ee3\u7406\u5bf9\u8c61\u8fdb\u884c\u63a7\u5236\uff0c\u5982\u5f15\u7528\u8ba1\u6570\u63a7\u5236\u3001\u6743\u9650\u63a7\u5236\uff08\u88ab\u4ee3\u7406\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff09\u3001\u8fdc\u7a0b\u4ee3\u7406\uff08\u5c06\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\u7684\u64cd\u4f5c\u4ee3\u7406\u5230\u672c\u5730\u5bf9\u8c61\uff09\u3001\u5ef6\u8fdf\u521d\u59cb\u5316\u7b49\u7b49\u3002","title":"\u667a\u80fd\u6307\u9488\u5206\u6790"},{"location":"design_pattern/compose_interfaces/#_11","text":"\u6709\u4e9b\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65f6\u95f4\u8f83\u957f\uff0c\u6bd4\u5982\u9700\u8981\u505a\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u7b49\u5230\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\u518d\u521d\u59cb\u5316\u3002 \u5ef6\u8fdf\u521d\u59cb\u5316\u7ecf\u5e38\u4e0e\u5f15\u7528\u8ba1\u6570\u7ed3\u5408\u4f7f\u7528\uff0c\u51cf\u5c11\u521d\u59cb\u5316\u7684\u6b21\u6570\u3002 class Proxy : public Object { public : Proxy () : object_ ( nullptr ) {} // \u4ee3\u7406\u7c7b\u5bf9\u8c61\u521d\u59cb\u5316\u65f6\u4e0d\u521d\u59cb\u5316\u5b9e\u9645\u5bf9\u8c61 ~ Proxy () { if ( object_ != nullptr ) delete object_ ; } void run () { // \u5b9e\u9645\u5bf9\u8c61\u521d\u59cb\u5316\u88ab\u5ef6\u8fdf\u5230\u8c03\u7528run\u51fd\u6570\u65f6\u8fdb\u884c if ( object_ == nullptr ) object_ = new RealObject (); object_ -> run (); // run\u51fd\u6570\u672c\u6765\u7684\u529f\u80fd } private : RealObject * object_ ; }; int main ( int argc , char * argv []) { Proxy proxy ; proxy . run (); } Lazy load\u7684\u597d\u5904\uff1a \u51cf\u5c11\u521d\u59cb\u5316\u65f6\u95f4 \u5f53\u548c\u5f15\u7528\u8ba1\u6570\u7ed3\u5408\u7684\u65f6\u5019\u80fd\u591f\u8282\u7701\u4e0d\u5fc5\u8981\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\uff08\u5c06\u591a\u4e2aProxy\u6307\u5411\u540c\u4e00\u4e2a\u5b9e\u9645\u5bf9\u8c61\uff09 \u6709\u4e9b\u5bf9\u8c61\u521d\u59cb\u5316\u4e4b\u540e\u4e0d\u4e00\u5b9a\u88ab\u4f7f\u7528\uff0c\u91c7\u7528lazy load\u7684\u65b9\u5f0f\u53ef\u4ee5\u51cf\u5c11\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u8d44\u6e90\u6d6a\u8d39","title":"\u5ef6\u8fdf\u521d\u59cb\u5316"},{"location":"design_pattern/compose_interfaces/#_12","text":"","title":"\u88c5\u9970"},{"location":"design_pattern/compose_interfaces/#textviewer","text":"\u5047\u8bbe\u73b0\u6709\u4e00\u4e2a TextView \u5bf9\u8c61\uff0c\u80fd\u591f\u5728\u7a97\u53e3\u4e2d\u663e\u793a\u6587\u5b57\u3002\u73b0\u5728\u5e0c\u671b\u63a5\u53e3\u4e0d\u53d8\uff0c\u589e\u52a0\u6eda\u52a8\u6761\u3001\u8fb9\u6846\u3001...","title":"\u4ece\u5b9e\u73b0\u4e00\u4e2aTextViewer\u5f00\u59cb"},{"location":"design_pattern/compose_interfaces/#_13","text":"\u5229\u7528C++\u4e2d\u7684\u7ee7\u627f\uff0c\u4f9d\u9760\u591a\u6001\u5b9e\u73b0\u529f\u80fd\u591a\u6837\u5316\uff1a \u5f0a\u7aef\uff1a\u591a\u79cd TextView \u4e4b\u95f4\u6ca1\u6709\u5c42\u6b21\u5173\u7cfb\uff0c\u4e0d\u7528\u7684View\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002\u7531\u6b64\u5f53\u9700\u8981\u7684\u9644\u4ef6\u589e\u591a\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4 TextView \u7c7b\u4f53\u7cfb\u81a8\u80c0 \u3001\u4ee3\u7801\u5927\u91cf\u5197\u4f59\u3002","title":"\u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0"},{"location":"design_pattern/compose_interfaces/#_14","text":"\u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f\uff0c\u4f7f\u7528\u7ec4\u5408\u52a8\u6001\u6539\u53d8\u7b56\u7565\u4ee5\u5b9e\u73b0\u591a\u53d8\u7684\u529f\u80fd \u7b56\u7565\u9009\u9879\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u4f7f\u5f97\u7ec4\u5408\u66f4\u52a0\u7075\u6d3b\uff0c\u6709\u6548\u6291\u5236\u4e86 \u7c7b\u81a8\u80c0 \u95ee\u9898\u3002 \u4f46\u662f\uff0c\u7b56\u7565\u9009\u9879\u9700\u8981\u9884\u5148\u5b9a\u4e49\uff0c\u65e0\u6cd5\u589e\u52a0\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u201c\u5de5\u5177\u680f\u201d\u7684\u65f6\u5019\uff0c\u9700\u8981\u5728 TextView \u5927\u7c7b\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u79cd\u64cd\u4f5c\u5e94\u8be5\u88ab\u907f\u514d\u3002","title":"\u4f7f\u7528\u7b56\u7565\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_15","text":"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c TextView \u662f\u4e3b\u4f53\uff0c Border \u548c ScrollBar \u90fd\u662f\u7ed9 TextView \u589e\u52a0\u529f\u80fd\u7684\uff0c\u662f\u9644\u52a0\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 TextView \u4e0a\u201c\u6dfb\u52a0\u88c5\u9970\u201d\u6765\u5b9e\u73b0 Border \u548c ScrollBar \u800c\u65e0\u9700\u4fee\u6539 TextView \u3002","title":"\u88c5\u9970\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_16","text":"\u589e\u52a0\u4e00\u4e2a Component \u4f5c\u4e3a\u53ef\u663e\u793a\u5185\u5bb9\u7684\u57fa\u7c7b\uff0c TextView \u4f5c\u4e3a\u5176\u5b50\u7c7b\u3002\u800c\u6240\u6709\u7684 \u88c5\u9970\u7c7b \u90fd\u662f\u53ef\u663e\u793a\u7684\uff0c\u4e5f\u5c31\u90fd\u662f Component \u7684\u5b50\u7c7b\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u88c5\u9970\u7c7b\uff0c\u5b9e\u73b0\u4e0d\u540c\u7684\u88c5\u9970\u80fd\u529b\u3002 class Component { public : virtual ~ Component () {} virtual void Draw () = 0 ; }; class TextView : public Component { public : void Draw () { cout << \"TextView.\" << endl ; } }; class Decorator : public Component { public : Decorator ( Component * component ) : component_ ( component ) {} virtual void Addon () = 0 ; void Draw () { Addon (); component_ -> Draw (); } private : Component * component_ ; }; class Border : public Decorator { public : Border ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"Bordered \" ; } }; class HScroll : public Decorator { public : HScroll ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"HScrolled \" ; } }; class VScroll : public Decorator { public : VScroll ( Component * component ) : Decorator ( component ) {} void Addon () { cout << \"VScrolled \" ; } }; \u4f7f\u7528\u65f6\u5bf9 TextView \u8fdb\u884c\u9010\u5c42\u88c5\u9970\uff0c\u53ef\u4ee5\u7075\u6d3b\u5f97\u5230\u4e0d\u540c\u7684\u663e\u793a\u6548\u679c int main ( int argc , char ** argv ) { TextView text_view ; VScroll vs_text_view ( & text_view ); HScroll hs_vs_text_view ( & vs_text_view ); Border b_hs_vs_text_view ( & hs_vs_text_view ); b_hs_vs_text_view . Draw (); } \u8f93\u51fa\uff1a Bordered HScrolled VScrolled TextView.","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"design_pattern/compose_interfaces/#_17","text":"\u88c5\u9970\u6a21\u5f0f \u548c \u7b56\u7565\u6a21\u5f0f \u90fd\u901a\u8fc7\u5bf9\u8c61\u7684\u7ec4\u5408\u4fee\u6539\u5bf9\u8c61\u7684\u529f\u80fd\uff08\u8868\u73b0\uff09\uff0c\u4ee5\u7ec4\u5408\u7684\u65b9\u5f0f\u4ee3\u66ff\u7ee7\u627f\u4f7f\u7528\u66f4\u7075\u6d3b\u3002 \u4e0d\u540c\u70b9 \u7b56\u7565 \u88c5\u9970 \u4fee\u6539\u5bf9\u8c61\u529f\u80fd\u7684\u5185\u6838 \u4fee\u6539\u5bf9\u8c61\u529f\u80fd\u7684\u5916\u58f3 \u7ec4\u5efa\u5fc5\u987b\u4e86\u89e3\u6709\u54ea\u4e9b\u9700\u8981\u9009\u62e9\u7684\u7b56\u7565 \u7ec4\u5efa\u65e0\u9700\u4e86\u89e3\u6709\u54ea\u4e9b\u53ef\u4ee5\u88c5\u9970\u7684\u5185\u5bb9","title":"\u88c5\u9970\u6a21\u5f0f\u4e0e\u7b56\u7565\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_18","text":"\u88c5\u9970\u6a21\u5f0f \u548c \u4ee3\u7406\u6a21\u5f0f \u90fd\u7528\u6765\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\u3002 \u53ef\u4ee5\u628a \u88c5\u9970 \u770b\u505a\u4e00\u8fde\u4e32\u7684 \u4ee3\u7406 \u88c5\u9970 \u4e3a\u88ab\u88c5\u9970\u5bf9\u8c61\u589e\u52a0\u989d\u5916\u884c\u4e3a \u4e0d\u5f71\u54cd\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u539f\u6709\u529f\u80fd \u4e0d\u521b\u5efa\u88ab\u88c5\u9970\u5bf9\u8c61\uff0c\u53ea\u662f\u5c06\u65b0\u529f\u80fd\u6dfb\u52a0\u5230\u5df2\u6709\u5bf9\u8c61\u4e0a \u7ecf\u5e38\u591a\u5d4c\u5957\u88c5\u9970 \u4ee3\u7406 \u5e38\u7528\u6765\u5bf9\u88ab\u4ee3\u7406\u5bf9\u8c61\u8fdb\u884c\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236 \u88ab\u4ee3\u7406\u5bf9\u8c61\u4e0d\u5b58\u5728\u65f6\u521b\u5efa\u88ab\u4ee3\u7406\u5bf9\u8c61 \u5c11\u89c1\u591a\u91cd\u5d4c\u5957","title":"\u88c5\u9970\u6a21\u5f0f\u4e0e\u4ee3\u7406\u6a21\u5f0f"},{"location":"design_pattern/compose_interfaces/#_19","text":"\u88c5\u9970\u5668\u7684\u4f7f\u7528\u6210\u4e00\u79cd\u94fe\u5f0f\u8c03\u7528\u5173\u7cfb\uff0c\u6bcf\u5c42\u5bf9\u8c61\u65e0\u9700\u4e86\u89e3\u6574\u4e2a\u94fe\u7684\u5168\u8c8c\uff0c\u53ea\u9700\u77e5\u9053\u201c\u4e0b\u4e00\u4e2a\u201d\u5bf9\u8c61\u662f\u8c01\u5373\u53ef\u3002","title":"\u8d23\u4efb\u7684\u4f20\u9012\u4e0e\u8d23\u4efb\u94fe"},{"location":"design_pattern/compose_interfaces/#_20","text":"\u5c06\u4e00\u7cfb\u5217\u7684\u5904\u7406\u8005\u8fde\u57ce\u4e00\u6761\u94fe\uff0c\u5c06\u8bf7\u6c42\u6cbf\u7740\u8fd9\u4e2a\u94fe\u4f20\u9012\u5e76\u7531\u94fe\u4e0a\u7684\u5904\u7406\u7740\u4e88\u4ee5\u5904\u7406","title":"\u8d23\u4efb\u94fe"},{"location":"design_pattern/compose_interfaces/#_21","text":"\u8bbe\u7f6e\u8fc7\u6ee4\u5668\uff1a\u6839\u636e\u53d1\u4ef6\u4eba\u3001\u6839\u636e\u4e3b\u9898\u3001\u6839\u636e\u5173\u952e\u5b57\u7b49","title":"\u4e00\u4e2a\u90ae\u4ef6\u8fc7\u6ee4\u5668"},{"location":"design_pattern/compose_interfaces/#_22","text":"\u5b9a\u4e49\u8bf7\u6c42 class MailRequest { //... public : string GetSender (); string GetTitle (); string GetBody (); string GetAll (); void Accept () { reject_ = false ; } void Reject () { reject_ = true ; } bool IsReject () { return reject_ ; } private : bool reject_ ; }; \u5b9a\u4e49\u201c\u5904\u7406\u8005\u201d\uff0c\u201c\u5904\u7406\u8005\u201d\u7528 DoHandle() \u505a\u201c\u5206\u5185\u4e4b\u4e8b\u201d\uff0c\u5982\u4e0d\u6210\u529f\u518d\u5c06\u8f7b\u8f68\u53bb\u4f20\u9012\u7ed9\u540e\u7eed\u7684\u5904\u7406\u8005 class Handler { public : Handler ( Handler * successor ) : successor_ ( successor ) {} virtual ~ Handler () {} virtual bool DoHandle ( MailRequest * request ) = 0 ; void Handle ( MailRequest * request ) { if ( ! DoHandle ( request )) { if ( successor_ != nullptr ) successor_ -> Handle ( request ); } } private : Handler * successor_ ; }; \u5b9e\u73b0\u5404\u79cd\u8fc7\u6ee4\u5668\u903b\u8f91 class SenderFilter : public Handler { public : SenderFilter ( Handler * successor ) : Handler ( successor ); bool DoHandle ( MailRequest * request ) { if ( IsWhite ( request -> GetSender ())) { request -> Accept (); return true ; } if ( IsBlack ( request -> GetSender ())) { request -> Reject (); return true ; } return false ; } }; class TitleFilter : public Handler { public : TitleFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { if ( ! IsValid ( request -> GetTitle ())) { request -> Reject (); return true ; } return false ; } }; class BodyFilter : public Handler { public : BodyFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { for ( auto s : invalid_texts ) { if ( request -> GetBody (). find ( s ) != string :: npos ) { request -> Reject (); return true ; } } return false ; } private : vector < string > invalid_texts = { \"text1\" , \"text2\" /*, .....*/ }; }; \u4e00\u822c\u5728\u8d23\u4efb\u94fe\u672b\u7aef\u6709\u4e00\u4e2a\u7f3a\u7701\u7684\u5904\u7406\u8005 class DefaultFilter : public Handler { public : DefaultFilter ( Handler * successor ) : Handler ( successor ) {} bool DoHandle ( MailRequest * request ) { request -> Accept (); return true ; } }; \u8d23\u4efb\u94fe\u7684\u4ea7\u751f\u4ece\u94fe\u5c3e\u5230\u94fe\u5934\u53cd\u5411\u58f0\u660e\uff0c\u4f7f\u7528\u8d23\u4efb\u94fe\u65f6\u53ea\u8981\u628a\u5904\u7406\u8bf7\u6c42\u4ea4\u7ed9\u8d23\u4efb\u94fe\u5f00\u59cb\u7684\u5904\u7406\u8005\u5373\u53ef\u3002 int main ( int argc , char * argv []) { DefaultFilter f1 ( nullptr ); BodyFilter f2 ( & f1 ); TitleFilter f3 ( & f2 ); SenderFilter f4 ( & f3 ); MailRequest * request = GetRequest (); f4 . Handle ( request ); if ( request -> IsReject ()) { cout << \"Rejected.\" << endl ; } else { cout << \"Accepted.\" << endl ; } }","title":"\u5b9e\u73b0"},{"location":"design_pattern/compose_interfaces/#_23","text":"","title":"\u4e0e\u88c5\u9970\u3001\u4ee3\u7406\u5bf9\u6bd4"},{"location":"design_pattern/compose_interfaces/#_24","text":"\u4e24\u8005\u90fd\u6709\u201c\u8c03\u7528\u94fe\u201d\uff0c\u8d23\u4efb\u94fe\u5f3a\u8c03\u7684\u662f\u94fe\u6574\u4f53\u7684\u884c\u4e3a\uff0c\u800c\u88c5\u9970\u5219\u66f4\u5f3a\u8c03\u8c03\u7528\u94fe\u5e26\u6765\u7684\u7ec4\u7ec7\u7ed3\u679c\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u8d23\u4efb\u94fe\u4e0d\u4e00\u5b9a\u8c03\u7528\u5230\u5e95\uff0c\u53ef\u80fd\u5728\u67d0\u4e00\u73af\u5f97\u5230\u7ed3\u679c\uff1b\u4f46\u88c5\u9970\u94fe\u4e00\u5b9a\u8c03\u7528\u5230\u5e95\uff0c\u6bcf\u4e00\u73af\u90fd\u4f1a\u8d77\u4f5c\u7528\u3002","title":"\u8d23\u4efb\u94fe\u4e0e\u88c5\u9970"},{"location":"design_pattern/compose_interfaces/#_25","text":"\u8d23\u4efb\u94fe\u4e5f\u53ef\u4ee5\u770b\u4f5c\u4e00\u8fde\u4e32\u4ee3\u7406\u3002 \u4ee3\u7406\u5f3a\u8c03\u63a7\u5236\u88ab\u4ee3\u7406\u5bf9\u8c61\uff0c\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\uff1b\u8d23\u4efb\u94fe\u5219\u7ec4\u7ec7\u591a\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\u3002","title":"\u8d23\u4efb\u94fe\u4e0e\u4ee3\u7406"},{"location":"design_pattern/compose_interfaces/#_26","text":"\u672c\u90e8\u5206\u8003\u8651\u5982\u4f55\u5c06\u5c0f\u7684\u7a0b\u5e8f\u6a21\u5757\u7ec4\u5408\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u3002 \u9002\u914d\u5668\u6a21\u5f0f - \u529f\u80fd\u6ee1\u8db3\uff0c\u63a5\u53e3\u6539\u53d8\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a \u7528 std::vector \u5b9e\u73b0\u7684 Stack \u7c7b\u3002 \u4ee3\u7406\u6a21\u5f0f - \u63a5\u53e3\u4e0d\u53d8\uff0c\u529f\u80fd\u589e\u52a0\uff08\u63a7\u5236\u903b\u8f91\uff09 - \u5e94\u7528\u4e3e\u4f8b\uff1a\u667a\u80fd\u6307\u9488\u3002 \u4ee3\u7406\u6a21\u5f0f \u548c \u59d4\u6258\u6a21\u5f0f \u7684\u5173\u7cfb\uff1a \u59d4\u6258 \u5f3a\u8c03\u4e3b\u7c7b\u628a\u529f\u80fd\u4ea4\u51fa\u53bb\uff0c \u4ee3\u7406 \u5219\u5f3a\u8c03\u5728\u4e3b\u7c7b\u6267\u884c\u524d\u6267\u884c\u4e00\u4e9b\u7279\u522b\u64cd\u4f5c\u3002 \u88c5\u9970\u5668\u6a21\u5f0f - \u5728\u53ef\u65b0\u6a21\u5757\u4e0a\u53e0\u52a0\u4e00\u7cfb\u5217\u9644\u52a0\u529f\u80fd\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a TextViewer \u52a0\u6eda\u52a8\u6761\u548c\u5de5\u5177\u680f \u8d23\u4efb\u94fe\u6a21\u5f0f - \u5bf9\u5bf9\u8c61\u6267\u884c\u4e00\u7cfb\u5217\u7684\u4efb\u52a1\uff0c\u53ef\u80fd\u7ec8\u6b62\u4e8e\u4efb\u4f55\u4e00\u73af\u3002 - \u5e94\u7528\u4e3e\u4f8b\uff1a\u90ae\u4ef6\u8fc7\u6ee4\u5668 \u53e6\u5916\u6ce8\u610f\u6807\u51c6\u5e93\u548c\u5f00\u6e90\u4ee3\u7801\u7684\u4f7f\u7528\u3002","title":"\u5c0f\u7ed3"},{"location":"design_pattern/object_and_interface/","text":"\u5bf9\u8c61\u4e0e\u63a5\u53e3 \u4eceFOP\u5230OOP FOP - Functional oriented programming OOP - Object oriented programming \u76ee\u6807\uff1a\u5f15\u51fa\u5bf9\u8c61 \u601d\u8003\uff1a\u5982\u4f55\u786e\u5b9a\u5bf9\u8c61\u8fb9\u754c\u3001\u5c01\u88c5\u4ec0\u4e48\u3001\u66b4\u9732\u4ec0\u4e48\u3001\u9690\u85cf\u4ec0\u4e48 \u4ee5\u201d\u7535\u5b50\u8ba1\u4ef7\u5668\u4e3a\u4f8b\u201c \u5b9e\u73b0\u4e00\u4e2a\u7535\u5b50\u8ba1\u4ef7\u5668\uff0c\u6839\u636e\u591a\u4e2a\u5546\u54c1\u7684\u5355\u4ef7\u548c\u91cd\u91cf\u8ba1\u7b97\u603b\u4ef7\u3002 FOP\u7248\u672c #include <iostream> using namespace std ; int main () { float apple_price = 5.5 ; float banana_price = 3.4 ; float apple_weight = 0.0 ; float banana_weight = 0.0 ; float total = 0.0 ; cout << \"Weight of apple: \" << endl ; cin >> apple_weight ; cout << \"Weight of banana: \" << endl ; cin >> banana_weight ; total = apple_price * apple_weight + banana_price * banana_weight ; cout << \"Payment: \" << total << endl ; } \u53d8\u5316\u5206\u5c42 \u5bf9\u4e8e\u6bcf\u6b21\u90fd\u8981\u53d8\u5316\u7684\u201c\u91cd\u91cf\u201d\uff0c\u201c\u5355\u4ef7\u201d\u662f\u76f8\u5bf9\u4e0d\u53d8\u7684\u3002 \u4e3a\u533a\u5206\u4e24\u79cd\u4e0d\u540c\u5c42\u6b21\u7684\u201c\u53d8\u5316\u201d\uff0c\u201c\u5355\u4ef7\u201d\u5e94\u8be5\u88ab\u5c01\u5728\u8ba1\u4ef7\u5668\u91cc OOP\u7248\u672c #include <iostream> using namespace std ; class Calculator { public : Calculator ( float _apple_price , float _banana_price ) : apple_price ( _apple_price ), banana_price ( _banana_price ) {} float CalTotal ( float apple_weight , float banana_weight ); private : float apple_price , banana_price ; }; float Calculator :: CalTotal ( float apple_weight , float banana_weight ) { return apple_price * apple_weight + banana_price * banana_weight ; } int main () { Calculator c ( 5.5 , 3.4 ); float apple_weight = 0.0 ; float banana_weight = 0.0 ; cout << \"Weight of apple: \" << endl ; cin >> apple_weight ; cout << \"Weight of banana: \" << endl ; cin >> banana_weight ; cout << \"Payment: \" << c . CalTotal ( apple_weight , banana_weight ) << endl ; } \u5c01\u88c5 \u628a\u4e0d\u5e38\u53d8\u5316\u7684 apple_price \u548c banana_price \u5c01\u88c5\u8d77\u6765\uff0c\u5f62\u6210 Calculator \u6982\u5ff5\uff0c\u4f7f\u7528 Calculator \u65f6\u628a\u7ecf\u5e38\u53d8\u5316\u7684\u91cd\u91cf\u4f5c\u4e3a\u53c2\u6570\u3002 \u63a5\u53e3\uff1a\u7c7b\u66b4\u9732\u51fa\u6765\u7684\u90e8\u5206\uff0c\u662f\u7c7b\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u9690\u85cf\u5b9e\u73b0\u7ec6\u8282 UML\u7c7b\u56fe Calculator - apple_price: float - banana_price: float + CalTotal(in apple_weight: float, in banana_weight:float): float \u5982\u4f55\u62bd\u8c61\u51fa\u5bf9\u8c61 \u95ee\u9898 A, B, C, D A, B, C, D \u56db\u4e2a\u4eba\uff0c\u5176\u4e2d\u4e00\u4e2a\u4eba\u662f PyTorch \u7684\u4f5c\u8005\uff0c\u5bf9\u6b64\u56db\u4e2a\u4eba\u5206\u522b\u4f5c\u4e86\u9648\u8ff0\uff1a A A : \u4e0d\u662f\u6211 B B : \u4f5c\u8005\u662f C C C C : \u4f5c\u8005\u662f D D D D : C C \u8bf4\u5f97\u4e0d\u5bf9\u3000 \u5df2\u77e5\u5176\u4e2d\u6709\u4e09\u53e5\u771f\u8bdd\u3001\u4e00\u53e5\u5047\u8bdd\uff0c\u95ee\u4f5c\u8005\u662f\u8c01\uff1f FOP\u7248\u672c #include <iostream> using namespace std ; int main () { for ( char author = 'A' ; author <= 'D' ; author ++ ) { int count = 0 ; count += ( author != 'A' ); count += ( author == 'C' ); count += ( author == 'D' ); count += ( author != 'D' ); if ( count == 3 ) { cout << \"The author could be \" << author << endl ; break ; } } return 0 ; } OOP\u7248\u672c \u95ee\u9898\u4e2d\u53ef\u53d8\u7684\u90e8\u5206 \u63cf\u8ff0\u65b9\u6cd5 \u5019\u9009\u4eba\u6570\u91cf\u3000\u3000 \u6574\u578b\u53c2\u6570 n n \u771f\u5b9e\u9648\u8ff0\u7684\u6570\u91cf \u6574\u578b\u53c2\u6570\u3000 correct correct \u6bcf\u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u7684\u771f\u5b9e\u6027 \u4e00\u7ec4\u4e0e\u5019\u9009\u4eba\u5bf9\u5e94\u7684\u8fd4\u56de\u5e03\u5c14\u578b\u7684\u51fd\u6570 \u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u8fd4\u56de\u6bcf\u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u771f\u5b9e\u6027\u7684\u51fd\u6570\uff0c\u51fd\u6570\u7684\u5185\u90e8\u903b\u8f91\u4f9d\u8d56\u4e8e\u9648\u8ff0\u672c\u8eab\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u9648\u8ff0\u540c\u610f\u53ef\u4ee5\u8868\u8ff0\u4e3a\u4f5c\u8005\u3000\u662f/\u4e0d\u662f\u3000\u201c\u67d0\u4e2a\u4eba\u201d\u7684\u5f62\u5f0f\u3002 \u53ef\u4ee5\u91cd\u8f7d () \u8fd0\u7b97\u7b26\u6765\u5b9e\u73b0\u3002 #include <iostream> using namespace std ; class Candidate { public : Candidate ( bool _equal , char _author ) : equal ( _equal ), author ( _author ) {} bool operator ()( char suspect ); private : char author ; bool equal ; }; bool Candidate :: operator ()( char suspect ) { return equal ? ( suspect == author ) : ( suspect != author ); } char solve ( int number , int correct , Candidate * candidates ) { for ( int i = 0 ; i < number ; i ++ ) { int count = 0 ; char suspect = 'A' + i ; for ( int j = 0 ; j < number ; j ++ ) count += candidates [ j ]( suspect ); cout << count << endl ; if ( count == correct ) return suspect ; } return '\\0' ; } int main () { Candidate candidates [] = { Candidate ( false , 'A' ), Candidate ( true , 'C' ), Candidate ( true , 'D' ), Candidate ( false , 'D' )}; char suspect = solve ( 4 , 3 , candidates ); if ( suspect != '\\0' ) { cout << \"The author is \" << suspect << endl ; } else { cout << \"Nooooooooooooooop!\" << endl ; } } \u57fa\u4e8eOOP\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u95ee\u9898\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6269\u5c55\u5230 n n \u4e2a\u5019\u9009\u4eba\uff0c\u4e14\u6709 m m \u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u771f\u5b9e\u7684\u60c5\u51b5\u3002 \u5982\u4f55\u5b9a\u4e49\u63a5\u53e3 \u95ee\u9898\uff1a\u65cb\u8f6c\u77e9\u9635 \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u6574\u6570 N N \uff0c\u8f93\u51fa\u65cb\u8f6c\u77e9\u9635\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a 1, 16, 15, 14, 13\\\\ 2, 17, 24, 23, 12\\\\ 3, 18, 25, 22, 11\\\\ 4, 19, 20, 21, 10\\\\ 5, 6, 7, 8, 9 1, 16, 15, 14, 13\\\\ 2, 17, 24, 23, 12\\\\ 3, 18, 25, 22, 11\\\\ 4, 19, 20, 21, 10\\\\ 5, 6, 7, 8, 9 \u8bbe\u8ba1\u601d\u8def\uff1a\u81ea\u9876\u5411\u4e0b \u8fd9\u4e2a\u7c7b\u5982\u4f55\u88ab\u4f7f\u7528\uff1f Matrix obj ( size ); obj . fill (); cout << obj ; \u6839\u636e\u4f7f\u7528\u65b9\u6cd5\u8bbe\u8ba1 Matrix \u7684\u63a5\u53e3 class matrix { public : Matrix ( int size ); void fill (); friend ostream & operator << ( ostream & out , const Matrix & m ); }; \u5b9e\u73b0\u7c7b\u7684\u63a5\u53e3 \u786e\u5b9a\u9700\u8981\u54ea\u4e9b\u6210\u5458\u53d8\u91cf class Matrix { public : Matrix ( int size ); ~ Matrix (); void fill (); friend ostream & operator << ( ostream & out , const Matrix & m ); private : int size_ ; int * data_ ; }; \u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u8f93\u51fa\u6d41\u64cd\u4f5c\u7b26 Matrix :: Matrix ( int size ) : size_ ( size ) { data_ = new int [ size * size ]; memset ( data_ , 0 , sizeof ( int ) * size_ * size_ ); } Matrix ::~ Matrix () { delete [] data_ ; } ostream & operator << ( ostream & out , const Matrix & m ) { for ( int r = 0 ; r < m . size_ ; r ++ ) { for ( int c = 0 ; c < m . size_ ; c ++ ) cout << * ( m . data_ + r * m . size_ + c ) << '\\t' ; cout << endl ; } } \u5b9e\u73b0\u586b\u5145\u51fd\u6570 \u589e\u52a0\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\u8ba1\u7b97\u5e76\u586b\u5145 class Matrix { public : ... private : ... int FindPosition (); }; void Matrix :: fill () { for ( int num = 1 ; num <= size_ * size_ ; num ++ ) { int pos = FindPosition (); data_ [ pos ] = num ; } } \u5269\u4e0b\u7684\u4efb\u52a1\u5c31\u662f\u5b9e\u73b0 FindPosition() \u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u77e9\u9635\u5f62\u5f0f\uff0c\u4e5f\u53ea\u9700\u6539\u53d8 FindPosition \u5373\u53ef\u3002 \u591a\u6001\u7684\u5e94\u7528 \u7a0b\u5e8f\u8bbe\u8ba1\u7684 \u5f00\u95ed\u539f\u5219 \uff0c\u7a0b\u5e8f\u5bf9\u53d8\u5316\u7684\u9700\u6c42\u5e94\u8be5\u662fopen\u7684\uff0c\u4f46\u5e94\u8be5\u5c3d\u91cf\u4e0d\u6539\u52a8\u539f\u6709\u4ee3\u7801 \u8fd9\u65f6\u53ef\u4ee5\u5c06 FindPostion \u5728 Matrix \u5b9a\u4e49\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u6a21\u677f\u65b9\u6cd5 \u62bd\u8c61\u7c7b\uff08\u57fa\u7c7b\uff09\u5b9a\u4e49\u7b97\u6cd5\u4e0d\u53d8\u7684\u9aa8\u67b6\u3002 \u7b97\u6cd5\u7684\u9700\u8981\u6539\u53d8\u7684\u7ec6\u8282\u7531\u5b9e\u73b0\u7c7b\uff08\u5b50\u7c7b\uff09\u4ee5\u91cd\u5199\uff08override\uff09\u7684\u5b9e\u73b0\u3002 \u5728\u4f7f\u7528\u65f6\uff0c\u8c03\u7528\u62bd\u8c61\u7c7b\u7684\u7b97\u6cd5\u9aa8\u67b6\u65b9\u6cd5\uff0c\u518d\u7531\u8fd9\u4e2a\u65b9\u6cd5\u6839\u636e\u9700\u8981\u8c03\u7528\u7d2f\u7684\u7b97\u6cd5\u7ec6\u8282\u5b9e\u73b0\u3002 \u9488\u5bf9\u63a5\u53e3\u800c\u4e0d\u662f\u9488\u5bf9\u5b9e\u73b0 \u901a\u8fc7\u62bd\u8c61\u51fa\u201c\u62bd\u8c61\u6982\u5ff5\u201d\uff0c\u8bbe\u8ba1\u51fa\u63cf\u8ff0\u8fd9\u4e2a\u62bd\u8c61\u6982\u5ff5\u7684\u201c\u62bd\u8c61\u7c7b\u201d\uff0c\u6216\u79f0\u4e3a\u201c\u63a5\u53e3\u7c7b\u201d\uff0c\u8fd9\u4e2a\u7c7b\u6709\u4e00\u7cfb\u5217\uff08\u7eaf\uff09\u865a\u51fd\u6570\uff0c\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u7684\u201c\u63a5\u53e3\u201d \u5bf9\u8fd9\u4e2a\u63a5\u53e3\u7c7b\u8fdb\u884c\u7ee7\u627f\u5e76\u5b9e\u73b0\u8fd9\u4e9b\uff08\u7eaf\uff09\u865a\u51fd\u6570\uff0c\u4ece\u800c\u5f62\u6210\u8fd9\u4e2a\u62bd\u8c61\u6982\u5ff5\u7684\u201c\u5b9e\u73b0\u7c7b\u201d \u2014\u2014 \u5b9e\u73b0\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u4ee5\u9002\u5e94\u53d8\u5316 \u5728\u4f7f\u7528\u8fd9\u4e2a\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528\u63a5\u53e3\u7c7b\u6765\u5f15\u7528\u8fd9\u4e2a\u6982\u5ff5\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u5b9e\u73b0\u7c7b\uff0c\u4ece\u800c\u907f\u514d\u5b9e\u73b0\u7c7b\u7684\u6539\u53d8\u9020\u6210\u6574\u4e2a\u7a0b\u5e8f\u7684\u5927\u89c4\u6a21\u4fee\u6539","title":"\u5bf9\u8c61\u4e0e\u63a5\u53e3"},{"location":"design_pattern/object_and_interface/#_1","text":"","title":"\u5bf9\u8c61\u4e0e\u63a5\u53e3"},{"location":"design_pattern/object_and_interface/#fopoop","text":"FOP - Functional oriented programming OOP - Object oriented programming \u76ee\u6807\uff1a\u5f15\u51fa\u5bf9\u8c61 \u601d\u8003\uff1a\u5982\u4f55\u786e\u5b9a\u5bf9\u8c61\u8fb9\u754c\u3001\u5c01\u88c5\u4ec0\u4e48\u3001\u66b4\u9732\u4ec0\u4e48\u3001\u9690\u85cf\u4ec0\u4e48","title":"\u4eceFOP\u5230OOP"},{"location":"design_pattern/object_and_interface/#_2","text":"\u5b9e\u73b0\u4e00\u4e2a\u7535\u5b50\u8ba1\u4ef7\u5668\uff0c\u6839\u636e\u591a\u4e2a\u5546\u54c1\u7684\u5355\u4ef7\u548c\u91cd\u91cf\u8ba1\u7b97\u603b\u4ef7\u3002 FOP\u7248\u672c #include <iostream> using namespace std ; int main () { float apple_price = 5.5 ; float banana_price = 3.4 ; float apple_weight = 0.0 ; float banana_weight = 0.0 ; float total = 0.0 ; cout << \"Weight of apple: \" << endl ; cin >> apple_weight ; cout << \"Weight of banana: \" << endl ; cin >> banana_weight ; total = apple_price * apple_weight + banana_price * banana_weight ; cout << \"Payment: \" << total << endl ; }","title":"\u4ee5\u201d\u7535\u5b50\u8ba1\u4ef7\u5668\u4e3a\u4f8b\u201c"},{"location":"design_pattern/object_and_interface/#_3","text":"\u5bf9\u4e8e\u6bcf\u6b21\u90fd\u8981\u53d8\u5316\u7684\u201c\u91cd\u91cf\u201d\uff0c\u201c\u5355\u4ef7\u201d\u662f\u76f8\u5bf9\u4e0d\u53d8\u7684\u3002 \u4e3a\u533a\u5206\u4e24\u79cd\u4e0d\u540c\u5c42\u6b21\u7684\u201c\u53d8\u5316\u201d\uff0c\u201c\u5355\u4ef7\u201d\u5e94\u8be5\u88ab\u5c01\u5728\u8ba1\u4ef7\u5668\u91cc OOP\u7248\u672c #include <iostream> using namespace std ; class Calculator { public : Calculator ( float _apple_price , float _banana_price ) : apple_price ( _apple_price ), banana_price ( _banana_price ) {} float CalTotal ( float apple_weight , float banana_weight ); private : float apple_price , banana_price ; }; float Calculator :: CalTotal ( float apple_weight , float banana_weight ) { return apple_price * apple_weight + banana_price * banana_weight ; } int main () { Calculator c ( 5.5 , 3.4 ); float apple_weight = 0.0 ; float banana_weight = 0.0 ; cout << \"Weight of apple: \" << endl ; cin >> apple_weight ; cout << \"Weight of banana: \" << endl ; cin >> banana_weight ; cout << \"Payment: \" << c . CalTotal ( apple_weight , banana_weight ) << endl ; }","title":"\u53d8\u5316\u5206\u5c42"},{"location":"design_pattern/object_and_interface/#_4","text":"\u628a\u4e0d\u5e38\u53d8\u5316\u7684 apple_price \u548c banana_price \u5c01\u88c5\u8d77\u6765\uff0c\u5f62\u6210 Calculator \u6982\u5ff5\uff0c\u4f7f\u7528 Calculator \u65f6\u628a\u7ecf\u5e38\u53d8\u5316\u7684\u91cd\u91cf\u4f5c\u4e3a\u53c2\u6570\u3002 \u63a5\u53e3\uff1a\u7c7b\u66b4\u9732\u51fa\u6765\u7684\u90e8\u5206\uff0c\u662f\u7c7b\u6240\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u9690\u85cf\u5b9e\u73b0\u7ec6\u8282 UML\u7c7b\u56fe Calculator - apple_price: float - banana_price: float + CalTotal(in apple_weight: float, in banana_weight:float): float","title":"\u5c01\u88c5"},{"location":"design_pattern/object_and_interface/#_5","text":"","title":"\u5982\u4f55\u62bd\u8c61\u51fa\u5bf9\u8c61"},{"location":"design_pattern/object_and_interface/#_6","text":"A, B, C, D A, B, C, D \u56db\u4e2a\u4eba\uff0c\u5176\u4e2d\u4e00\u4e2a\u4eba\u662f PyTorch \u7684\u4f5c\u8005\uff0c\u5bf9\u6b64\u56db\u4e2a\u4eba\u5206\u522b\u4f5c\u4e86\u9648\u8ff0\uff1a A A : \u4e0d\u662f\u6211 B B : \u4f5c\u8005\u662f C C C C : \u4f5c\u8005\u662f D D D D : C C \u8bf4\u5f97\u4e0d\u5bf9\u3000 \u5df2\u77e5\u5176\u4e2d\u6709\u4e09\u53e5\u771f\u8bdd\u3001\u4e00\u53e5\u5047\u8bdd\uff0c\u95ee\u4f5c\u8005\u662f\u8c01\uff1f","title":"\u95ee\u9898"},{"location":"design_pattern/object_and_interface/#fop","text":"#include <iostream> using namespace std ; int main () { for ( char author = 'A' ; author <= 'D' ; author ++ ) { int count = 0 ; count += ( author != 'A' ); count += ( author == 'C' ); count += ( author == 'D' ); count += ( author != 'D' ); if ( count == 3 ) { cout << \"The author could be \" << author << endl ; break ; } } return 0 ; }","title":"FOP\u7248\u672c"},{"location":"design_pattern/object_and_interface/#oop","text":"\u95ee\u9898\u4e2d\u53ef\u53d8\u7684\u90e8\u5206 \u63cf\u8ff0\u65b9\u6cd5 \u5019\u9009\u4eba\u6570\u91cf\u3000\u3000 \u6574\u578b\u53c2\u6570 n n \u771f\u5b9e\u9648\u8ff0\u7684\u6570\u91cf \u6574\u578b\u53c2\u6570\u3000 correct correct \u6bcf\u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u7684\u771f\u5b9e\u6027 \u4e00\u7ec4\u4e0e\u5019\u9009\u4eba\u5bf9\u5e94\u7684\u8fd4\u56de\u5e03\u5c14\u578b\u7684\u51fd\u6570 \u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u8fd4\u56de\u6bcf\u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u771f\u5b9e\u6027\u7684\u51fd\u6570\uff0c\u51fd\u6570\u7684\u5185\u90e8\u903b\u8f91\u4f9d\u8d56\u4e8e\u9648\u8ff0\u672c\u8eab\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u9648\u8ff0\u540c\u610f\u53ef\u4ee5\u8868\u8ff0\u4e3a\u4f5c\u8005\u3000\u662f/\u4e0d\u662f\u3000\u201c\u67d0\u4e2a\u4eba\u201d\u7684\u5f62\u5f0f\u3002 \u53ef\u4ee5\u91cd\u8f7d () \u8fd0\u7b97\u7b26\u6765\u5b9e\u73b0\u3002 #include <iostream> using namespace std ; class Candidate { public : Candidate ( bool _equal , char _author ) : equal ( _equal ), author ( _author ) {} bool operator ()( char suspect ); private : char author ; bool equal ; }; bool Candidate :: operator ()( char suspect ) { return equal ? ( suspect == author ) : ( suspect != author ); } char solve ( int number , int correct , Candidate * candidates ) { for ( int i = 0 ; i < number ; i ++ ) { int count = 0 ; char suspect = 'A' + i ; for ( int j = 0 ; j < number ; j ++ ) count += candidates [ j ]( suspect ); cout << count << endl ; if ( count == correct ) return suspect ; } return '\\0' ; } int main () { Candidate candidates [] = { Candidate ( false , 'A' ), Candidate ( true , 'C' ), Candidate ( true , 'D' ), Candidate ( false , 'D' )}; char suspect = solve ( 4 , 3 , candidates ); if ( suspect != '\\0' ) { cout << \"The author is \" << suspect << endl ; } else { cout << \"Nooooooooooooooop!\" << endl ; } } \u57fa\u4e8eOOP\u7248\u672c\u7684\u5b9e\u73b0\uff0c\u95ee\u9898\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6269\u5c55\u5230 n n \u4e2a\u5019\u9009\u4eba\uff0c\u4e14\u6709 m m \u4e2a\u5019\u9009\u4eba\u7684\u9648\u8ff0\u771f\u5b9e\u7684\u60c5\u51b5\u3002","title":"OOP\u7248\u672c"},{"location":"design_pattern/object_and_interface/#_7","text":"","title":"\u5982\u4f55\u5b9a\u4e49\u63a5\u53e3"},{"location":"design_pattern/object_and_interface/#_8","text":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u6574\u6570 N N \uff0c\u8f93\u51fa\u65cb\u8f6c\u77e9\u9635\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a 1, 16, 15, 14, 13\\\\ 2, 17, 24, 23, 12\\\\ 3, 18, 25, 22, 11\\\\ 4, 19, 20, 21, 10\\\\ 5, 6, 7, 8, 9 1, 16, 15, 14, 13\\\\ 2, 17, 24, 23, 12\\\\ 3, 18, 25, 22, 11\\\\ 4, 19, 20, 21, 10\\\\ 5, 6, 7, 8, 9","title":"\u95ee\u9898\uff1a\u65cb\u8f6c\u77e9\u9635"},{"location":"design_pattern/object_and_interface/#_9","text":"\u8fd9\u4e2a\u7c7b\u5982\u4f55\u88ab\u4f7f\u7528\uff1f Matrix obj ( size ); obj . fill (); cout << obj ; \u6839\u636e\u4f7f\u7528\u65b9\u6cd5\u8bbe\u8ba1 Matrix \u7684\u63a5\u53e3 class matrix { public : Matrix ( int size ); void fill (); friend ostream & operator << ( ostream & out , const Matrix & m ); }; \u5b9e\u73b0\u7c7b\u7684\u63a5\u53e3 \u786e\u5b9a\u9700\u8981\u54ea\u4e9b\u6210\u5458\u53d8\u91cf class Matrix { public : Matrix ( int size ); ~ Matrix (); void fill (); friend ostream & operator << ( ostream & out , const Matrix & m ); private : int size_ ; int * data_ ; }; \u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u8f93\u51fa\u6d41\u64cd\u4f5c\u7b26 Matrix :: Matrix ( int size ) : size_ ( size ) { data_ = new int [ size * size ]; memset ( data_ , 0 , sizeof ( int ) * size_ * size_ ); } Matrix ::~ Matrix () { delete [] data_ ; } ostream & operator << ( ostream & out , const Matrix & m ) { for ( int r = 0 ; r < m . size_ ; r ++ ) { for ( int c = 0 ; c < m . size_ ; c ++ ) cout << * ( m . data_ + r * m . size_ + c ) << '\\t' ; cout << endl ; } } \u5b9e\u73b0\u586b\u5145\u51fd\u6570 \u589e\u52a0\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\u8ba1\u7b97\u5e76\u586b\u5145 class Matrix { public : ... private : ... int FindPosition (); }; void Matrix :: fill () { for ( int num = 1 ; num <= size_ * size_ ; num ++ ) { int pos = FindPosition (); data_ [ pos ] = num ; } } \u5269\u4e0b\u7684\u4efb\u52a1\u5c31\u662f\u5b9e\u73b0 FindPosition() \u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u77e9\u9635\u5f62\u5f0f\uff0c\u4e5f\u53ea\u9700\u6539\u53d8 FindPosition \u5373\u53ef\u3002","title":"\u8bbe\u8ba1\u601d\u8def\uff1a\u81ea\u9876\u5411\u4e0b"},{"location":"design_pattern/object_and_interface/#_10","text":"\u7a0b\u5e8f\u8bbe\u8ba1\u7684 \u5f00\u95ed\u539f\u5219 \uff0c\u7a0b\u5e8f\u5bf9\u53d8\u5316\u7684\u9700\u6c42\u5e94\u8be5\u662fopen\u7684\uff0c\u4f46\u5e94\u8be5\u5c3d\u91cf\u4e0d\u6539\u52a8\u539f\u6709\u4ee3\u7801 \u8fd9\u65f6\u53ef\u4ee5\u5c06 FindPostion \u5728 Matrix \u5b9a\u4e49\u4e3a\u7eaf\u865a\u51fd\u6570\u3002","title":"\u591a\u6001\u7684\u5e94\u7528"},{"location":"design_pattern/object_and_interface/#_11","text":"\u62bd\u8c61\u7c7b\uff08\u57fa\u7c7b\uff09\u5b9a\u4e49\u7b97\u6cd5\u4e0d\u53d8\u7684\u9aa8\u67b6\u3002 \u7b97\u6cd5\u7684\u9700\u8981\u6539\u53d8\u7684\u7ec6\u8282\u7531\u5b9e\u73b0\u7c7b\uff08\u5b50\u7c7b\uff09\u4ee5\u91cd\u5199\uff08override\uff09\u7684\u5b9e\u73b0\u3002 \u5728\u4f7f\u7528\u65f6\uff0c\u8c03\u7528\u62bd\u8c61\u7c7b\u7684\u7b97\u6cd5\u9aa8\u67b6\u65b9\u6cd5\uff0c\u518d\u7531\u8fd9\u4e2a\u65b9\u6cd5\u6839\u636e\u9700\u8981\u8c03\u7528\u7d2f\u7684\u7b97\u6cd5\u7ec6\u8282\u5b9e\u73b0\u3002","title":"\u6a21\u677f\u65b9\u6cd5"},{"location":"design_pattern/object_and_interface/#_12","text":"\u901a\u8fc7\u62bd\u8c61\u51fa\u201c\u62bd\u8c61\u6982\u5ff5\u201d\uff0c\u8bbe\u8ba1\u51fa\u63cf\u8ff0\u8fd9\u4e2a\u62bd\u8c61\u6982\u5ff5\u7684\u201c\u62bd\u8c61\u7c7b\u201d\uff0c\u6216\u79f0\u4e3a\u201c\u63a5\u53e3\u7c7b\u201d\uff0c\u8fd9\u4e2a\u7c7b\u6709\u4e00\u7cfb\u5217\uff08\u7eaf\uff09\u865a\u51fd\u6570\uff0c\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7c7b\u7684\u201c\u63a5\u53e3\u201d \u5bf9\u8fd9\u4e2a\u63a5\u53e3\u7c7b\u8fdb\u884c\u7ee7\u627f\u5e76\u5b9e\u73b0\u8fd9\u4e9b\uff08\u7eaf\uff09\u865a\u51fd\u6570\uff0c\u4ece\u800c\u5f62\u6210\u8fd9\u4e2a\u62bd\u8c61\u6982\u5ff5\u7684\u201c\u5b9e\u73b0\u7c7b\u201d \u2014\u2014 \u5b9e\u73b0\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u4ee5\u9002\u5e94\u53d8\u5316 \u5728\u4f7f\u7528\u8fd9\u4e2a\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528\u63a5\u53e3\u7c7b\u6765\u5f15\u7528\u8fd9\u4e2a\u6982\u5ff5\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u5b9e\u73b0\u7c7b\uff0c\u4ece\u800c\u907f\u514d\u5b9e\u73b0\u7c7b\u7684\u6539\u53d8\u9020\u6210\u6574\u4e2a\u7a0b\u5e8f\u7684\u5927\u89c4\u6a21\u4fee\u6539","title":"\u9488\u5bf9\u63a5\u53e3\u800c\u4e0d\u662f\u9488\u5bf9\u5b9e\u73b0"},{"location":"design_pattern/split_representation/","text":"\u7b97\u6cd5\u7eb5\u5411\u62c6\u5206 - \u5206\u79bb\u8868\u793a \u5c1d\u8bd5\u5c06\u7b97\u6cd5\u548c\u6570\u636e\u5206\u79bb\u3002 \u903b\u8f91\u3001\u6570\u636e\u5982\u4f55\u8868\u793a\u3001\u7b97\u6cd5\u7ec6\u8282\u4e1a\u52a1\u6d41\u7a0b\u7684\u7ec6\u8282\u76f8\u5173\u7684\u90e8\u5206 \u5206\u79bb\u3001\u89e3\u8026\u8fd9\u4e09\u8005 \u6cdb\u578b\u7f16\u7a0b\uff1a\u5148\u5b9e\u73b0\u7b97\u6cd5\u3001\u4f7f\u7528\u65f6\u518d\u8003\u8651\u6570\u636e\u7c7b\u578b \u6570\u636e\u7c7b\u578b\uff0c\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u662f\u4e00\u79cd\u8868\u793a\uff0c\u5bf9\u7b97\u6cd5\u662f\u4e00\u79cd\u675f\u7f1a \u8fed\u4ee3\u5668 \u4ece\u95ee\u9898\u5f00\u59cb \u7f16\u7a0b\u7edf\u8ba1\u8003\u8bd5\u53ca\u683c\u7387 int main ( int argc , char * argv []) { float scores [ STUDENT_COUNT ]; int passed = 0 ; // initialize scores here. for ( int i = 0 ; i != STUDENT_COUNT ; i ++ ) { if ( scores [ i ] >= 60 ) passed ++ ; } cout << \"passing rate = \" << ( float ) passed / STUDENT_COUNT << endl ; return EXIT_SUCCESS ; } \u6ce8\uff1a\u8fd9\u91cc\u7528 != \u800c\u4e0d\u7528 < \u7684\u539f\u56e0\u662f != \u7684\u6267\u884c\u66f4\u9ad8\u6548\u3002 \u8d23\u4efb\u5206\u89e3 \u628a\u201c\u5206\u6790\u201d\u5355\u72ec\u4f5c\u4e3a\u4e00\u4e2a\u529f\u80fd void Analyze ( float * scores , int student_count ) { int passed = 0 ; for ( int i = 0 ; i != student_count ; i ++ ) { if ( scores [ i ] >= 60 ) passed ++ ; } cout << \"passing rate = \" << ( float ) passed / student_count << endl ; } \u5982\u679c\u6210\u7ee9\u4f7f\u7528\u5355\u5411\u94fe\u8868\u5b58\u50a8 struct Student { float score ; Student * next ; }; //... Student * head ; \u5219\u5148\u524d\u7684 Analyze \u5931\u6548\u3002 \u91cd\u65b0\u5b9e\u73b0 Analyze \uff1a void Analyze ( Student * scores ) { int passed = 0 , count = 0 ; for ( Student * p = scores ; p != nullptr ; p = p -> next ) { if ( p -> score >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u201c\u904d\u5386\u201d\u7684\u9700\u6c42 \u4e0d\u53d8\u7684\u9700\u6c42\uff1a\u904d\u5386\u6240\u6709\u5b66\u751f\u7684\u6210\u7ee9 \u53d8\u5316\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u64cd\u4f5c\u4e0d\u5e0c\u671b\u88ab\u67d0\u79cd\u5b58\u50a8\u65b9\u5f0f\u7ed1\u5b9a \u5206\u79bb\u201c\u53d8\u201d\u4e0e\u201c\u4e0d\u53d8\u201d \u628a\u201c\u8bbf\u95ee\u201d\u8bbe\u8ba1\u6210\u4e00\u4e2a\u63a5\u53e3 \u9488\u5bf9\u4e0d\u540c\u7684\u201c\u5b58\u50a8\u201d\u5b8c\u6210\u8fd9\u4e2a\u63a5\u53e3\u7684\u4e0d\u540c\u5b9e\u73b0 \u8fed\u4ee3\u5668 \u628a\u201c\u8bbf\u95ee\u201d\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u63a5\u53e3 class Iterator { public : virtual ~ Iterator () {} virtual bool operator != ( const Iterator & other ) const = 0 ; virtual const Iterator & operator ++ () = 0 ; virtual const Iterator * operator ++ ( int ) = 0 ; virtual float & operator * () const = 0 ; virtual float & operator -> () const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; \u4f7f\u7528\u8fed\u4ee3\u5668 void Analyze ( Iterator * begin , Iterator * end ) { int passed = 0 , count = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u9700\u8981\u7ed9\u201c\u5b58\u50a8\u201d\u5bf9\u8c61\u4e00\u4e2a\u7ea6\u675f \u80fd\u591f\u8fd4\u56de\u4ee3\u8868\u201c\u5934\u201d\u548c\u201c\u5c3e\u201d\u7684\u8fed\u4ee3\u5668 \u4f7f\u7528\u201c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u201d\uff0c\u5373 [begin, end) [begin, end) - \u4ee5\u4fbf\u4e8e\u7528 != \u5224\u65ad\u7ed3\u675f class Collection { public : virtual ~ Collection () {} virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; int main ( int argc , char * argv []) { Collection * collection ; // initialize collection here... Analyze ( collection -> begin (), collection -> end ()); } \u8fed\u4ee3\u5668\u7684\u5b9e\u73b0 \u5b9e\u73b0\u57fa\u4e8e\u6570\u7ec4\u7684\u96c6\u5408 class ArrayCollection : public Collection { public : ArrayCollection () : size_ ( 10 ) { data_ = new float [ size_ ]; } ArrayCollection ( int size , float * data ) : size_ ( size ) { data_ = new float [ size_ ]; for ( int i = 0 ; i < size_ ; i ++ ) * ( data_ + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] data_ ; } int size () { return size_ ; } Iterator * begin () const ; Iterator * end () const ; private : friend class ArrayIterator ; float * data_ ; int size_ \uff1b }; \u5176\u4e2d\u83b7\u53d6\u9996\u3001\u5c3e Iterator \u7684\u6210\u5458\u51fd\u6570\uff1a Iterator * ArrayCollection :: begin () const { return new ArrayIterator ( data_ , 0 ); } Iterator * ArrayCollection :: end () const { return new ArrayIterator ( data_ , size_ ); } \u5b9e\u73b0\u57fa\u4e8e\u6570\u7ec4\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { public : ArrayIterator ( float * data , int index ) : data_ ( data ), index_ ( index ) {} ArrayIterator ( const ArrayIterator & other ) : data_ ( other . data_ ), index_ ( other . index_ ) {} ~ ArrayIterator () {} const Iterator & operator ++ (); const Iterator & operator ++ ( int ); float & operator * () const ; float * operator -> () const ; bool operator != ( const Iterator & other ) const ; private : float * data_ ; int index_ ; }; const Iterator & ArrayIterator :: operator ++ () { index_ ++ ; return * this ; } const Iterator & ArrayIterator :: operator ++ ( int ) { index_ ++ ; return ArrayIterator ( data_ , index_ - 1 ); } float & ArrayIterator :: operator * () const { return * ( data_ + index_ ); } float * ArrayIterator :: operator -> () const { return ( data_ + index_ ); } bool ArrayIterator :: operator != ( const Iterator & other ) const { return data_ != (( ArrayIterator * )( & other )) -> data_ || index_ != (( ArrayIterator * )( & other )) -> index_ ; } \u91cd\u5199 Analyze \u548c main void Analyze ( Iterator * begin , Iterator * end ) { int passed = 0 , count = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * collection = new ArrayCollection ( 10 , scores ); Analyze ( collection -> begin (), collection -> end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; } \u8fed\u4ee3\u5668\u6a21\u5f0f \u8bbe\u8ba1\u6a21\u5f0f \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20 \u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u2014\u2014\u4e0e\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u65e0\u5173\uff08\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\uff09 //... for ( Iterator p = begin ; p != end ; p ++ ) { // do something with object *p; } //... \u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u8fed\u4ee3\u5668\u6a21\u5f0f \u5982Java\u7b49\u8bed\u8a00\u4e0d\u63d0\u4f9b ++ \u7b49\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e0a\u8ff0\u8fed\u4ee3\u5668\u6a21\u5f0f\u63d0\u4f9b\u4e86\u5355\u5411\u8fed\u4ee3\uff1a //... Iterator it = Collection . iterator (); while ( it . HasNext ()) { Object object = it . next (); // do something with object; } //... \u8fed\u4ee3\u5668\u4e0e\u6a21\u677f \u56fa\u5b9a\u7684\u4e1c\u897f\uff1a \u4ea7\u751f\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5 \u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408\u7684\u63a5\u53e3 \u53d8\u5316\u7684\u4e1c\u897f\uff1a \u96c6\u5408\u7684\u5b58\u50a8\u65b9\u5f0f \u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408\u7684\u5177\u4f53\u5b9e\u73b0 \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86 \u904d\u5386\u64cd\u4f5c \u4e0e \u5b58\u50a8\u65b9\u6cd5 \u7684\u9694\u79bb\u3002\u4f7f\u5f97\u5b9e\u73b0\u7b97\u6cd5\u903b\u8f91\u65f6\u65e0\u9700\u5173\u5fc3\u6570\u636e\u8868\u793a\uff0c\u800c\u5b9e\u73b0\u6570\u636e\u5b58\u50a8\u7684\u65f6\u5019\u53c8\u65e0\u9700\u5173\u5fc3\u7b97\u6cd5\u7684\u903b\u8f91\u3002 \u7b97\u6cd5\u7684\u901a\u7528\u5316 \u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e9b\u5217\u901a\u7528\u7b97\u6cd5\uff1a max , min , sort , count , count_if , find , ... int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * c = new ArrayCollection ( 10 , scores ); cout << \"passing rate = \" << ( float ) count_if ( c -> begin (), c -> end (), passed ()) / c . size () << endl ; system ( \"PAUSE\" ); return EXIT_SUCCESS ; } \u6539\u8fdb\u76ee\u6807 \u95ee\u9898 1 \u5f53\u524d\u7684\u4f7f\u7528\u65b9\u5f0f void Analyze ( Iterator * begin , Iterator * end ) { for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) //... } } \u671f\u5f85\u7684\u4f7f\u7528\u65b9\u5f0f void Analyze ( const Iterator & begin , const Iterator & end ) { for ( Iterator p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) //... } } \u95ee\u9898 2 \u53ea\u652f\u6301 float \u7c7b\u578b\uff0c\u89c1\u5982\u4e0b * \u548c -> \u7684\u91cd\u8f7d class Iterator { public : virtual ~ Iterator () {} virtual bool operator != ( const Iterator & other ) const = 0 ; virtual const Iterator & operator ++ () = 0 ; virtual const Iterator * operator ++ ( int ) = 0 ; virtual float & operator * () const = 0 ; virtual float & operator -> () const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; \u5f15\u5165\u6a21\u677f \u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\uff0c\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c06\u7c7b\u578b\u4f5c\u4e3a\u53ef\u53d8\u90e8\u5206\uff0c\u8fd9\u4e9b\u90e8\u5206\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u505a\u51fa\u6307\u660e\u3002\u5982\u6b64\u4e00\u6765\uff0c\u53ef\u4ee5\u5148\u8003\u8651\u901a\u7528\u7684\u7b97\u6cd5\u548c\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u518d\u5728\u4f7f\u7528\u65f6\u4e88\u4ee5\u5b9e\u4f8b\u5316 \u4f7f\u7528 \u6a21\u677f \u6280\u672f\u5b9e\u73b0 \u6cdb\u578b \u3002 \u901a\u7528\u7b97\u6cd5 template < class iterator_ > void Analysis ( iterator_ begin , iterator_ end ) { int passed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u8fd9\u91cc iterator_ \u7c7b\u578b\u7684\u53d8\u91cf\u9700\u8981\u5b9e\u73b0 = , != , ++ \u8fd0\u7b97\u7b26\u3002 template < class T > class ArrayCollection { public : ArrayCollection () : size_ ( 10 ) { data_ = new T [ size_ ]; } ArrayCollection ( int size ) : size ( size_ ) { data_ = new T [ size_ ]; } ArrayCollection ( int size , T * data ) : size_ ( size ) { data_ = new T [ size_ ]; for ( int i = 0 ; i < size_ ; i ++ ) * ( data_ + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] data_ ; } T * begin (){ return data_ ; } T * end () { return data_ + size_ ; } private : T * data_ ; int size_ ; }; \u94fe\u8868\u8282\u70b9\u3001\u94fe\u8868\u8fed\u4ee3\u5668\u3001\u94fe\u8868\u5bb9\u5668 template < class T > struct LinkiedListNode { T data_ ; LinkedListNode * next ; LinkedListNode () : next ( nullptr ) {} LinkedListNode ( T data ) : data_ ( data ), next ( nullptr ) {} }; template < class T > struct LinkedListIterator { LinkedListNode < T >* pointer ; LinkedListIterator ( LinkiedListNode < T >* p ) : pointer ( p ) {} LinkedListIterator ( const LinkedListIterator < T >& it ) : pointer ( it . pointer ) {} LinkedListIterator < T >& operator ++ () { pointer = pointer -> next ; return * this ; } const LinkedListIterator < T > operator ++ ( int ) { LinkedListIterator < T > temp = * this ; pointer = pointer -> next ; return temp ; } T & operator * () const { return pointer -> data_ ; } T * operator -> () const { return & ( pointer -> data_ ); } bool operator != ( const LinkedListIterator < T >& other ) { return pointer != other . pointer ; } bool operator == ( const LinkedListIterator < T >& other ) { return pointer == other . pointer ; } }; template < class T > class LinkedListCollection { public : LinkedListCollection () : head_ ( nullptr ) {} LinkedListCollection ( int size , T * datq ) { //... } ~ LinkedListCollection () { //... } LinkedListIterator < T > begin () { return LinkedListIterator < T > ( head_ ); } LinkedListIterator < T > end () { return LinkedListIterator < T > ( nullptr ); } private : LinkedListNode < T >* head ; }; \u4f7f\u7528\u5982\u4e0b\uff1a int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; ArrayCollection < float > collection2 ( 10 , scores ); LinkedListCollection < float > collection1 ( 10 , scores ); Analyze ( scores , scores + 10 ); Analyze ( collection1 . begin (), collection1 . end ()); Analyze ( collection2 . begin (), collection2 . end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; } \u8fd9\u91cc\u6307\u9488\u7531\u4e8e\u652f\u6301 = , != , ++ \u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8fed\u4ee3\u5668\u4f7f\u7528\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6307\u9488\u662f\u4e00\u79cd\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u4e5f\u662f\u4e00\u79cd\u6307\u9488\u3002 \u7b97\u6cd5\u4e0e\u6570\u636e\u89e3\u8026 \u5bb9\u5668\uff1a\u5b58\u50a8\u6570\u636e\uff0c\u6570\u636e\u7684\u8868\u793a \u7b97\u6cd5\uff1a\u5904\u7406\u6570\u636e\uff0c\u62bd\u8c61\u7684\u7b97\u6cd5\u5b9e\u73b0 \u8fed\u4ee3\u5668\uff1a\u6807\u51c6\u7684\u6570\u636e\u904d\u5386\u63a5\u53e3\uff0c\u9694\u79bb\u7b97\u6cd5\u4e0e\u5bb9\u5668\uff0c\u662f\u7b97\u6cd5\u4e0e\u6570\u636e\u7684\u8868\u793a\u65e0\u5173 \u5b9e\u73b0\u901a\u7528\u7684\u7b97\u6cd5\uff0c\u5c06\u7b97\u6cd5\u4e0e\u6570\u636e\u8868\u793a\u89e3\u8026\u3002 \u8003\u8bd5\u79d1\u76ee\u6570\u53d8\u62103 \u5982\u679c\u4e0a\u8ff0\u95ee\u9898\u8003\u8bd5\u79d1\u76ee\u53d8\u62103\u79d1\uff0c\u5219 float \u578b\u53d8\u91cf\u4e0d\u80fd\u8868\u793a\u5206\u6570\uff0c\u5b9a\u4e49 Score \u7c7b\u578b struct Score { float value [ 3 ]; Score () {} Score ( float f1 , float f2 , float f3 ) { value [ 0 ] = f1 ; value [ 1 ] = f2 ; value [ 2 ] = f3 ; } Score & operator = ( const Score & s ) { value [ 0 ] = s . value [ 0 ]; value [ 1 ] = s . value [ 1 ]; value [ 2 ] = s . value [ 2 ]; return * this ; } bool operator >= ( float pass ) { return value [ 0 ] >= pass && value [ 1 ] >= pass & value [ 2 ] >= pass ; } }; ostream & operator << ( ostream & out , const Score & s ) { cout << \"{\" << s . value [ 0 ] << \", \" << s . value [ 1 ] << \", \" << s . value [ 2 ] << \"}\" ; return out ; } \u76f8\u5e94\u5730\u4e3b\u51fd\u6570\u53d8\u4e3a int main ( int argc , char * argv []) { Score sarray [ 3 ]; sarray [ 0 ] = Score ( 60 , 60 , 60 ); sarray [ 1 ] = Score ( 70 , 70 , 70 ); sarray [ 2 ] = Score ( 50 , 80 , 80 ); ArrayCollection < Score > collection3 ( 3 , sarray ); LinkedListCollection < Score > collection4 ( 3 , sarray ); Analyze ( sarray , sarray + 3 ); Analyze ( collection3 . begin (), collection3 . end ()); Analyze ( collection4 . begin (), collection4 . end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; } \u5982\u4f55\u5b9e\u73b0\u89e3\u8026 \u5bf9\u4e8e\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c \u503c \u64cd\u4f5c \u62bd\u8c61\u63a5\u53e3 \u503c\u57df \u53ef\u7528\u7684\u64cd\u4f5c \u5177\u4f53\u5b9e\u73b0 \u5982\u4f55\u5b58\u50a8 \u5982\u4f55\u5b9e\u73b0\u64cd\u4f5c \u5bf9\u4e8e \u53ef\u7528\u7684\u64cd\u4f5c \u90e8\u5206\uff0c\u5bf9\u5982 = , != , ++ , * \u7684\u652f\u6301\u662f\u7b97\u6cd5\u6240\u5173\u5fc3\u7684\u3002\u7b97\u6cd5\u5b9e\u9645\u4e0a\u53ea\u4e0e \u53ef\u7528\u7684\u64cd\u4f5c \u76f8\u5173\uff0c\u4e0e\u5177\u4f53\u6570\u636e\u7c7b\u578b\u65e0\u5173\u3002 \u7b97\u6cd5\u3001\u8fd0\u7b97\u7b26\u3001\u8fd0\u7b97\u7b26\u91cd\u8f7d \u7b97\u6cd5\u4ec5\u4e0e\u201c\u53ef\u7528\u7684\u64cd\u4f5c\u201d\u76f8\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u629b\u5f00\u7c7b\u578b\u8003\u8651\u7b97\u6cd5\uff0c\u5b9e\u73b0\u62bd\u8c61\u8fd0\u7b97\uff0c\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7c7b\u578b\uff08\u5b58\u50a8\uff09\u4e4b\u95f4\u5b9e\u73b0\u89e3\u8026\u3002 \u5728C++\u4e2d\uff0c\u201c\u53ef\u7528\u7684\u64cd\u4f5c\u201d\u65f6\u4f7f\u7528\u8fd0\u7b97\u7b26\u6765\u63cf\u8ff0\u7684\uff08\u5982 * , ++ , != , >= \uff09\uff0c\u4ed6\u4f5c\u7528\u5728\u6307\u5b9a\u6570\u91cf\u7684\u64cd\u4f5c\u6570\u4e0a\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\u67d0\u4e2a\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u5728\u67d0\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u53ea\u8981\u5b9e\u73b0\u76f8\u5173\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u4f9d\u8d56\u4e8e\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d\u7684\u672c\u6765\u76ee\u7684\uff1a \u8fd0\u7b97\u7b26\u91cd\u8f7d\u5c31\u662f\u5728\u65b0\u7684\u6570\u636e\u7c7b\u578b\u4e0a\u8fd8\u539f\u8fd0\u7b97\u7b26\u7684\u672c\u8d28 \u3002 \u6570\u636e\u7c7b\u578b\u4e0e\u64cd\u4f5c \u53ef\u7528\u7684\u64cd\u4f5c\u662f\u6570\u636e\u7c7b\u578b\u7684\u62bd\u8c61\u63a5\u53e3\u3002 \u6570\u636e\u7c7b\u578b\u4e5f\u53ef\u4ee5\u7528 \u53ef\u7528\u64cd\u4f5c\u7684\u96c6\u5408 \u6765\u754c\u5b9a\uff0c\u5177\u6709\u76f8\u540c\u201c\u53ef\u7528\u64cd\u4f5c\u96c6\u5408\u201d\u5c31\u662f\u76f8\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u5982\u679c\u628a\u201c\u64cd\u4f5c\u201d\u66f4\u52a0\u6cdb\u534e\uff0c\u5c06\u5176\u5b9a\u4e49\u5230\u4e00\u4e2a\u62bd\u8c61\u5b9e\u4f53\u4e0a\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u201c\u6570\u636e\u7c7b\u578b\u201d\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\u3002 \u62bd\u8c61\u7ed3\u6784\u4e0e\u7c7b\u6a21\u677f \u9664\u4e86\u201c\u62bd\u8c61\u7b97\u6cd5\u201d\u4e4b\u5916\uff0c\u8fd8\u6709\u201c\u62bd\u8c61\u7ed3\u6784\u201d Stack , LinkedList , Vector \u8fd9\u4e9b\u62bd\u8c61\u7ed3\u6784\uff0c\u4e0e\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\u65e0\u5173\uff0c\u81f3\u4e8e\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u8bbf\u95ee\u65b9\u5f0f\u76f8\u5173\uff0c\u53ef\u4ee5\u501f\u52a9\u7c7b\u6a21\u677f\u5b9e\u73b0\u3002 \u5b9e\u73b0\u4e00\u4e2a\u94fe\u8868\u6a21\u677f \u4f8b\u5982\u4e0b\u65b9\u94fe\u8868 template < class T > struct LinkedListNode { T data_ ; LinkedListNode * next_ ; LinkedListNode () : next_ ( nullptr ) {} LinkedListNode ( T data ) : data_ ( data ), next_ ( nullptr ) {} LinkedListNode ( T data , LinkedListNode * next ) : data_ ( data ), next_ ( next ) {} }; template < class T > class LinkedListCollection { public : LinkedListCollection () : head_ ( nullptr ) {} ~ LinkedListCollection () { clear (); } bool empty () { return head_ == nullptr ; } void AddFirst ( const T & data ) { head_ = new LinkedListNode < T > )( data , head_ ); } bool RemoveFirst () { if ( head_ != nullptr ) { LinkedListNode < T >* p = head_ ; head_ = head_ -> next_ ; delete p ; return true ; } else { return false ; } } T * GetFirst () { return head_ != nullptr ? & ( head_ -> data_ ) : nullptr ; } bool RemoveLast () { if ( head_ != nullptr ) { if ( head_ -> next_ != nullptr ) { LinkedListNode < T >* p ; for ( p = head_ ; p -> next_ -> next_ != nullptr ; p = p -> next_ ) ; delete p -> next_ ; p -> next_ = nullptr ; return true ; } else { delete head_ ; head_ = nullptr ; return true ; } } else { return false ; } } clear () { while ( RemoveFirst ()) ; } LinkedListIterator < T > begin () { return LinkedListIterator < T > ( head_ ); } LinkedListIterator < T > end () { return LinkedListIterator < T > ( nullptr ); } private : LinkedListNode < T >* head_ ; }; \u5173\u4e8e \u5185\u8054\u51fd\u6570 \uff1a C++\u4e2d inline \u5173\u952e\u5b57\u4fee\u9970\u51fd\u6570\u5b9a\u4e49\uff08\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u88ab\u9891\u7e41\u4f7f\u7528\uff0c\u5bf9\u6027\u80fd\u8981\u6c42\u654f\u611f\uff0c\u8c03\u7528\u65f6\u4f7f\u7528\u5185\u8054\u5c55\u5f00\uff0c\u907f\u514d\u5165\u6808\u51fa\u6808\u7684\u64cd\u4f5c\uff09 inline int max(int a, int b) { return a > b ? a : b; } \u4f5c\u7528\uff1a\u51fd\u6570\u5185\u8054\u5c55\u5f00\uff0c\u907f\u514d\u51fd\u6570\u8c03\u7528\u5f00\u9500\uff0c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 \u5728\u7c7b\u5b9a\u4e49\u4f53\u5185\u5b9a\u4e49\uff08\u5b9e\u73b0\uff09\u7684\u51fd\u6570\u7f3a\u7701\u4e3a\u5185\u8054\u51fd\u6570\u3002 \u5230\u6b64\u4e3a\u6b62 \u6211\u4eec\u4e3a\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u5b9e\u73b0\u94fe\u8868\u7684\u65b9\u5f0f\u3002 \u7528\u94fe\u8868\u6a21\u677f\u7ec4\u7ec7\u5206\u6570 \u901a\u8fc7\u6a21\u677f\u5b9e\u4f8b\u5316\u4f7f\u7528Linked List\uff08\u62bd\u8c61\u7ed3\u6784\uff09 int main ( int argc , char * argv []) { //... LinkedListCollection < Score > collection4 ; for ( int i = 0 ; i < 3 ; i ++ ) collection4 . AddFirst ( sarray [ i ]); Analyze ( collection4 . begin (), collection4 . end ()); //... return EXIT_SUCCESS ; } \u5c0f\u7ed3 \u56fa\u5b9a\u7684\u4e1c\u897f\uff1a \u7b97\u6cd5/\u62bd\u8c61\u7ed3\u6784\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u201c\u6570\u636e\u201d\u7684\u8bbf\u95ee\u63a5\u53e3\uff08\u8fed\u4ee3\u5668\uff09 \u201c\u6570\u636e\u201d\u7684\u53ef\u7528\u64cd\u4f5c\uff08\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 \u53d8\u5316\u7684\u4e1c\u897f\uff1a \u201c\u6570\u636e\u201d\u7684\u7ec4\u7ec7\u5f62\u5f0f \u201c\u6570\u636e\u201d\u7684\u7c7b\u578b\uff08\u503c\u57df\u3001\u5b58\u50a8\u3001\u64cd\u4f5c\u5b9e\u73b0\uff09 \u7531\u6b64\u5b9e\u73b0\u201c\u7b97\u6cd5/\u62bd\u8c61\u7ed3\u6784\u201d\u4e0e\u201c\u6570\u636e\u8868\u793a\u201d\u4e4b\u95f4\u7684\u5206\u79bb \u6cdb\u578b\u7f16\u7a0b \uff1a\u5148\u5b9e\u73b0\u7b97\u6cd5\uff0c\u518d\u5145\u5b9e\u6570\u636e\u8868\u793a\uff08\u7c7b\u578b\uff09 \u51fd\u6570\u5bf9\u8c61\u4e0e\u7b97\u6cd5\u5206\u89e3 \u5f53\u201c\u53ca\u683c\u201d\u5224\u5b9a\u89c4\u5219\u53d1\u751f\u53d8\u5316 \u5982\u679c\u67d0\u4e9b\u79d1\u76ee\u7684\u53ca\u683c\u7ebf\u4e0d\u662f60\u5206 \u73b0\u6709\u7684 Analyze \u51fd\u6570 template < class iterator_ > void Analyze ( iterator_ begin , iterator_ end ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u5c06\u5224\u65ad\u53ca\u683c\u51fd\u6570 IsPass \u7684\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 Analyze template < class iterator_ > void Analyze ( iterator_ begin , iterator_ end , bool ( * IsPass )( const iterator_ & )) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( IsPass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u4f7f\u7528\u201c\u5224\u65ad\u53ca\u683c\u201d\u51fd\u6570\u6307\u9488 template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 70 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } \u6ce8\uff1a\u8fd9\u91cc\u7684` IsPass `\u6709\u7f3a\u9677\uff1a\u53ea\u9002\u7528\u4e8e` Score `\u7c7b\u578b int main ( int argc , char * argv []) { //... Analyze ( sarray , sarray + 3 , IsPass < Score *> ); Analyze ( collection3 . begin (), collection3 . end (), IsPass < Score *> ); Analyze ( collection4 . begin (), collection4 . end (), IsPass < LinkedListIterator < Score >> ); //... } \u8fdb\u4e00\u6b65\u89e3\u8026 \u8fd9\u4e24\u4e2a\u51fd\u6570\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u662f\u201c\u79d1\u4e00\u201d\u7684\u53ca\u683c\u5206\u6570 template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 70 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 60 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } \u5982\u4f55\u62bd\u79bb\u51fa\u76f8\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u5c06\u201c\u53ca\u683c\u7ebf\u201d\u8bb0\u5f55\u4e0b\u6765 \u4f7f\u7528 Score \u53d8\u91cf const Score pass ( 70 , 60 , 60 ); template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= pass . value [ 0 ] && p -> value [ 1 ] >= pass . value [ 1 ] && p -> value [ 2 ] >= pass . value [ 2 ]; } \u4f7f\u7528\u6587\u4ef6 template < class iterator_ > bool IsPass ( const iterator_ & p ) { float pass1 , pass2 , pass3 ; ifstream is ( \"pass-score.txt\" ); is >> pass1 >> pass2 >> pass3 ; return p -> value [ 0 ] >= pass1 && p -> value [ 1 ] >= pass2 && p -> value [ 2 ] >= pass3 ; } \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 pass-score.txt \u7684\u5185\u5bb9\u6539\u53d8\u53ca\u683c\u5206\u6570\u7ebf\u7ec4\u5408\u3002 \u8fd9\u91cc \u5355\u4e00\u5b9e\u4f8b \u7684\u95ee\u9898\u4f9d\u7136\u5b58\u5728\uff0c\u95ee\u9898\u5728\u4e8e\u51fd\u6570\u662f\u56fa\u5b9a\u7684\u3002 \u51fd\u6570\u5bf9\u8c61 \u5b9a\u4e49 IsPass \u51fd\u6570\u5bf9\u8c61\u7c7b\u6a21\u677f template < class iterator_ , class T > class IsPass { public : IsPass ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iterator_ & p ) { return * p >= pass_ ; } private : T pass_ ; }; \u76f8\u5e94\u6539\u53d8\u7b97\u6cd5\u5b9a\u4e49 template < class iterator_ , class T > void Analyze ( iterator_ begin , iterator_ end , IsPass < iterator_ , T > is_pass ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( is_pass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61 int main ( int argc , char * argv []) { //... sarray [ 0 ] = Score ( 60 , 60 , 60 ); sarray [ 1 ] = Score ( 70 , 70 , 70 ); sarray [ 2 ] = Score ( 50 , 80 , 80 ); ArrayCollection < Score > collection3 ( 3 , sarray ); LinkedListCollection < Score > collection4 ; //... Analyze ( sarray , sarray + 3 , IsPass < Score * , Score > ( Score ( 70 , 60 , 60 ))); Analyze ( collection3 . begin (), collection4 . end (), IsPass < Score * , Score > ( Score ( 50 , 60 , 60 ))); Analyze ( collection4 . begin (), collection4 . end (), IsPass < LinkedListIterator < Score > , Score > ( Score ( 60 , 60 , 60 ))); } \u5224\u65ad\u53ca\u683c\u7684\u903b\u8f91\u6539\u53d8 \u65b0\u9700\u6c42\uff1a IsPass \u5982\u679c\u4e5f\u8981\u591a\u79cd\u5b9e\u73b0\uff0c\u6ca1\u8bfe\u90fd\u53ca\u683c\u548c\u603b\u5206\u53ca\u683c \u6b64\u65f6\u53ef\u4ee5\u628a IsPass \u51fd\u6570\u5bf9\u8c61\u4e0d\u4f5c\u4e3a Analyze \u7684 \u53c2\u6570 \u800c\u5c06\u5176\u7c7b\u578b\u4f5c\u4e3a Analyze \u7684 \u6a21\u677f\u53c2\u6570 \u4f20\u5165 template < class iterator_ , class IsPass_ > void Analyze ( iterator_ begin , iterator_ end , IsPass_ is_pass ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( is_pass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u8fd9\u6837\u5c31\u53ef\u4ee5\u662f\u5438\u7eb3\u4e0d\u540c\u7684 IsPass_ template < class iterator_ , class T > class IsPass_ForEach { public : IsPass_ForEach ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iteartor_ & p ) { return * p >= pass_ ; } private : T pass_ ; }; template < class iterator_ , class T > class IsPass_Total { public : IsPass_ForEach ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iteartor_ & p ) { return p -> GetTotal () >= pass . GetTotal (); } private : T pass_ ; }; \u5c0f\u7ed3 \u5bf9\u4e8e Analyze \u8fd9\u4e2a\u7b97\u6cd5 \u63cf\u8ff0 \u64cd\u4f5c \u53c2\u6570 \u9488\u904d\u5386\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 \u904d\u5386 iterator_ \u5224\u65ad\u662f\u5426\u53ca\u683c \u5224\u65ad IsPass_ \u7d2f\u52a0\u201c\u53ca\u683c\u201d\u6570\u91cf \u7d2f\u52a0 Analyze()\u672c\u8eab \u6709\u4e09\u4e2a\u65e0\u5173\uff08\u6b63\u4ea4\uff09\u7684\u53ef\u53d8\u90e8\u5206 \u57fa\u4e8e\u6a21\u677f\u7684\u7b56\u7565\u6a21\u5f0f \u7b56\u7565\u6a21\u5f0f\u7684\u6a21\u677f\u5b9e\u73b0 \u7528\u4e24\u4e2a\u7c7b\u53c2\u6570\u7ec4\u5408\u5f62\u6210\u4e00\u4e2a\u786e\u5b9a\u7684Analyze\u7b97\u6cd5\u5b9e\u4f8b\u3002 \u7b56\u7565\u6a21\u578b\u7684\u6a21\u677f\u5b9e\u73b0\uff1a \u8fd9\u91cc\u518d\u6b21\u4f53\u73b0\u4e86 \u7b56\u7565 \u6a21\u5f0f\u3002 \u518d\u770b\u8d1f\u8f7d\u76d1\u89c6\u5668 \u4f7f\u7528 \u6a21\u677f\u7b56\u7565 \u5b9e\u73b0\u8d1f\u8f7d\u76d1\u89c6\u5668 template < class load_ , class memory_ , class latency_ , class display_ > class Monitor : public load_ , public memory_ , public latency_ , public display_ { public : Monitor () {} void GetLoad () { load = load_ :: GetCPULoad (); } void GetTotalMemory () { total_memory = memory_ :: GetTotal (); } void GetUsedMemory () { used_memory = memory_ :: GetUsed (); } void GetNetworkLatency () { latency = latency_ :: GetLatency (); } void Show () { display_ :: Show ( load , total_memory , used_memory , latency ); } private : float load , latency ; long total_memory , used_memory ; }; \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ec4\u5408\u4ee3\u66ff\u7ee7\u627f\u3002 \u76f8\u5e94\u4e3b\u7a0b\u5e8f int main ( int argc , char * argv []) { Monitor < Load , memory , Latency , Display > monitor ; while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLatency (); monitor . Show (); sleep ( 1000 ); } } \u5b9a\u4e49\u7b56\u7565\u7c7b class Load { public : float GetCPULoqd (); }; class Memory { public : long GetTotal (); long GetUsed (); }; class Latency { public : float GetLatency (); }; \u663e\u793a\u7b56\u7565\u7c7b class Display { public : void Show ( float load , long total_memory , long used_memory , float latency ); }; STL Standard Template Library - \u6807\u51c6\u6a21\u677f\u5e93 \u4e00\u7ec4\u6700\u5e38\u7528\u7684\uff23++\u529f\u80fd\u7684\u6a21\u677f\u5b9e\u73b0 \u7b97\u6cd5 - min , max , for_each , find_if , copy , sort , stable_sort \u7b49 \u51fd\u6570\u5bf9\u8c61\u53ca\u5176\u64cd\u4f5c\uff1a\u7b97\u6cd5\u7684\u53ef\u53d8\u90e8\u5206 - greater , less , equal_to , logical_and , logical_or , no1 , not2 , bind1st , bind2nd , ptr_fun \u7b49 \u5bb9\u5668\u53ca\u5176\u8fed\u4ee3\u5668\uff1a\u7b97\u6cd5\u6240\u4f5c\u7528\u7684\u4e00\u7ec4\u6570\u636e\u53ca\u5bf9\u5176\u8fdb\u884c\u904d\u5386\u7684\u624b\u6bb5 - vector , dqueue , list , set , map , stack , queue \u53ca\u5176\u8fed\u4ee3\u5668, istream_oterator , ostream_iterator \u7b49 \u5176\u4ed6\uff1a\u5982 string \u7c7b","title":"\u7b97\u6cd5\u62c6\u5206 - \u5206\u79bb\u8868\u793a"},{"location":"design_pattern/split_representation/#-","text":"\u5c1d\u8bd5\u5c06\u7b97\u6cd5\u548c\u6570\u636e\u5206\u79bb\u3002 \u903b\u8f91\u3001\u6570\u636e\u5982\u4f55\u8868\u793a\u3001\u7b97\u6cd5\u7ec6\u8282\u4e1a\u52a1\u6d41\u7a0b\u7684\u7ec6\u8282\u76f8\u5173\u7684\u90e8\u5206 \u5206\u79bb\u3001\u89e3\u8026\u8fd9\u4e09\u8005 \u6cdb\u578b\u7f16\u7a0b\uff1a\u5148\u5b9e\u73b0\u7b97\u6cd5\u3001\u4f7f\u7528\u65f6\u518d\u8003\u8651\u6570\u636e\u7c7b\u578b \u6570\u636e\u7c7b\u578b\uff0c\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u662f\u4e00\u79cd\u8868\u793a\uff0c\u5bf9\u7b97\u6cd5\u662f\u4e00\u79cd\u675f\u7f1a","title":"\u7b97\u6cd5\u7eb5\u5411\u62c6\u5206 - \u5206\u79bb\u8868\u793a"},{"location":"design_pattern/split_representation/#_1","text":"","title":"\u8fed\u4ee3\u5668"},{"location":"design_pattern/split_representation/#_2","text":"\u7f16\u7a0b\u7edf\u8ba1\u8003\u8bd5\u53ca\u683c\u7387 int main ( int argc , char * argv []) { float scores [ STUDENT_COUNT ]; int passed = 0 ; // initialize scores here. for ( int i = 0 ; i != STUDENT_COUNT ; i ++ ) { if ( scores [ i ] >= 60 ) passed ++ ; } cout << \"passing rate = \" << ( float ) passed / STUDENT_COUNT << endl ; return EXIT_SUCCESS ; } \u6ce8\uff1a\u8fd9\u91cc\u7528 != \u800c\u4e0d\u7528 < \u7684\u539f\u56e0\u662f != \u7684\u6267\u884c\u66f4\u9ad8\u6548\u3002","title":"\u4ece\u95ee\u9898\u5f00\u59cb"},{"location":"design_pattern/split_representation/#_3","text":"\u628a\u201c\u5206\u6790\u201d\u5355\u72ec\u4f5c\u4e3a\u4e00\u4e2a\u529f\u80fd void Analyze ( float * scores , int student_count ) { int passed = 0 ; for ( int i = 0 ; i != student_count ; i ++ ) { if ( scores [ i ] >= 60 ) passed ++ ; } cout << \"passing rate = \" << ( float ) passed / student_count << endl ; } \u5982\u679c\u6210\u7ee9\u4f7f\u7528\u5355\u5411\u94fe\u8868\u5b58\u50a8 struct Student { float score ; Student * next ; }; //... Student * head ; \u5219\u5148\u524d\u7684 Analyze \u5931\u6548\u3002 \u91cd\u65b0\u5b9e\u73b0 Analyze \uff1a void Analyze ( Student * scores ) { int passed = 0 , count = 0 ; for ( Student * p = scores ; p != nullptr ; p = p -> next ) { if ( p -> score >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; }","title":"\u8d23\u4efb\u5206\u89e3"},{"location":"design_pattern/split_representation/#_4","text":"\u4e0d\u53d8\u7684\u9700\u6c42\uff1a\u904d\u5386\u6240\u6709\u5b66\u751f\u7684\u6210\u7ee9 \u53d8\u5316\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u64cd\u4f5c\u4e0d\u5e0c\u671b\u88ab\u67d0\u79cd\u5b58\u50a8\u65b9\u5f0f\u7ed1\u5b9a \u5206\u79bb\u201c\u53d8\u201d\u4e0e\u201c\u4e0d\u53d8\u201d \u628a\u201c\u8bbf\u95ee\u201d\u8bbe\u8ba1\u6210\u4e00\u4e2a\u63a5\u53e3 \u9488\u5bf9\u4e0d\u540c\u7684\u201c\u5b58\u50a8\u201d\u5b8c\u6210\u8fd9\u4e2a\u63a5\u53e3\u7684\u4e0d\u540c\u5b9e\u73b0","title":"\u201c\u904d\u5386\u201d\u7684\u9700\u6c42"},{"location":"design_pattern/split_representation/#_5","text":"\u628a\u201c\u8bbf\u95ee\u201d\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u63a5\u53e3 class Iterator { public : virtual ~ Iterator () {} virtual bool operator != ( const Iterator & other ) const = 0 ; virtual const Iterator & operator ++ () = 0 ; virtual const Iterator * operator ++ ( int ) = 0 ; virtual float & operator * () const = 0 ; virtual float & operator -> () const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } }; \u4f7f\u7528\u8fed\u4ee3\u5668 void Analyze ( Iterator * begin , Iterator * end ) { int passed = 0 , count = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u9700\u8981\u7ed9\u201c\u5b58\u50a8\u201d\u5bf9\u8c61\u4e00\u4e2a\u7ea6\u675f \u80fd\u591f\u8fd4\u56de\u4ee3\u8868\u201c\u5934\u201d\u548c\u201c\u5c3e\u201d\u7684\u8fed\u4ee3\u5668 \u4f7f\u7528\u201c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u201d\uff0c\u5373 [begin, end) [begin, end) - \u4ee5\u4fbf\u4e8e\u7528 != \u5224\u65ad\u7ed3\u675f class Collection { public : virtual ~ Collection () {} virtual Iterator * begin () const = 0 ; virtual Iterator * end () const = 0 ; virtual int size () = 0 ; }; int main ( int argc , char * argv []) { Collection * collection ; // initialize collection here... Analyze ( collection -> begin (), collection -> end ()); }","title":"\u8fed\u4ee3\u5668"},{"location":"design_pattern/split_representation/#_6","text":"\u5b9e\u73b0\u57fa\u4e8e\u6570\u7ec4\u7684\u96c6\u5408 class ArrayCollection : public Collection { public : ArrayCollection () : size_ ( 10 ) { data_ = new float [ size_ ]; } ArrayCollection ( int size , float * data ) : size_ ( size ) { data_ = new float [ size_ ]; for ( int i = 0 ; i < size_ ; i ++ ) * ( data_ + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] data_ ; } int size () { return size_ ; } Iterator * begin () const ; Iterator * end () const ; private : friend class ArrayIterator ; float * data_ ; int size_ \uff1b }; \u5176\u4e2d\u83b7\u53d6\u9996\u3001\u5c3e Iterator \u7684\u6210\u5458\u51fd\u6570\uff1a Iterator * ArrayCollection :: begin () const { return new ArrayIterator ( data_ , 0 ); } Iterator * ArrayCollection :: end () const { return new ArrayIterator ( data_ , size_ ); } \u5b9e\u73b0\u57fa\u4e8e\u6570\u7ec4\u7684\u8fed\u4ee3\u5668 class ArrayIterator : public Iterator { public : ArrayIterator ( float * data , int index ) : data_ ( data ), index_ ( index ) {} ArrayIterator ( const ArrayIterator & other ) : data_ ( other . data_ ), index_ ( other . index_ ) {} ~ ArrayIterator () {} const Iterator & operator ++ (); const Iterator & operator ++ ( int ); float & operator * () const ; float * operator -> () const ; bool operator != ( const Iterator & other ) const ; private : float * data_ ; int index_ ; }; const Iterator & ArrayIterator :: operator ++ () { index_ ++ ; return * this ; } const Iterator & ArrayIterator :: operator ++ ( int ) { index_ ++ ; return ArrayIterator ( data_ , index_ - 1 ); } float & ArrayIterator :: operator * () const { return * ( data_ + index_ ); } float * ArrayIterator :: operator -> () const { return ( data_ + index_ ); } bool ArrayIterator :: operator != ( const Iterator & other ) const { return data_ != (( ArrayIterator * )( & other )) -> data_ || index_ != (( ArrayIterator * )( & other )) -> index_ ; } \u91cd\u5199 Analyze \u548c main void Analyze ( Iterator * begin , Iterator * end ) { int passed = 0 , count = 0 ; for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * collection = new ArrayCollection ( 10 , scores ); Analyze ( collection -> begin (), collection -> end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; }","title":"\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0"},{"location":"design_pattern/split_representation/#_7","text":"\u8bbe\u8ba1\u6a21\u5f0f \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u987a\u5e8f\u8bbf\u95ee\u4e00\u4e2a\u805a\u5408\u5bf9\u8c61\u4e2d\u7684\u5404\u4e2a\u5143\u7d20 \u4e0d\u66b4\u9732\u8be5\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u2014\u2014\u4e0e\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u65e0\u5173\uff08\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\uff09 //... for ( Iterator p = begin ; p != end ; p ++ ) { // do something with object *p; } //...","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"design_pattern/split_representation/#_8","text":"\u5982Java\u7b49\u8bed\u8a00\u4e0d\u63d0\u4f9b ++ \u7b49\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e0a\u8ff0\u8fed\u4ee3\u5668\u6a21\u5f0f\u63d0\u4f9b\u4e86\u5355\u5411\u8fed\u4ee3\uff1a //... Iterator it = Collection . iterator (); while ( it . HasNext ()) { Object object = it . next (); // do something with object; } //...","title":"\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u8fed\u4ee3\u5668\u6a21\u5f0f"},{"location":"design_pattern/split_representation/#_9","text":"\u56fa\u5b9a\u7684\u4e1c\u897f\uff1a \u4ea7\u751f\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5 \u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408\u7684\u63a5\u53e3 \u53d8\u5316\u7684\u4e1c\u897f\uff1a \u96c6\u5408\u7684\u5b58\u50a8\u65b9\u5f0f \u8fed\u4ee3\u5668\u904d\u5386\u96c6\u5408\u7684\u5177\u4f53\u5b9e\u73b0 \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86 \u904d\u5386\u64cd\u4f5c \u4e0e \u5b58\u50a8\u65b9\u6cd5 \u7684\u9694\u79bb\u3002\u4f7f\u5f97\u5b9e\u73b0\u7b97\u6cd5\u903b\u8f91\u65f6\u65e0\u9700\u5173\u5fc3\u6570\u636e\u8868\u793a\uff0c\u800c\u5b9e\u73b0\u6570\u636e\u5b58\u50a8\u7684\u65f6\u5019\u53c8\u65e0\u9700\u5173\u5fc3\u7b97\u6cd5\u7684\u903b\u8f91\u3002","title":"\u8fed\u4ee3\u5668\u4e0e\u6a21\u677f"},{"location":"design_pattern/split_representation/#_10","text":"\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e9b\u5217\u901a\u7528\u7b97\u6cd5\uff1a max , min , sort , count , count_if , find , ... int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; Collection * c = new ArrayCollection ( 10 , scores ); cout << \"passing rate = \" << ( float ) count_if ( c -> begin (), c -> end (), passed ()) / c . size () << endl ; system ( \"PAUSE\" ); return EXIT_SUCCESS ; }","title":"\u7b97\u6cd5\u7684\u901a\u7528\u5316"},{"location":"design_pattern/split_representation/#_11","text":"","title":"\u6539\u8fdb\u76ee\u6807"},{"location":"design_pattern/split_representation/#1","text":"\u5f53\u524d\u7684\u4f7f\u7528\u65b9\u5f0f void Analyze ( Iterator * begin , Iterator * end ) { for ( Iterator * p = begin ; * p != * end ; ( * p ) ++ ) { if ( ** p >= 60 ) //... } } \u671f\u5f85\u7684\u4f7f\u7528\u65b9\u5f0f void Analyze ( const Iterator & begin , const Iterator & end ) { for ( Iterator p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) //... } }","title":"\u95ee\u9898 1"},{"location":"design_pattern/split_representation/#2","text":"\u53ea\u652f\u6301 float \u7c7b\u578b\uff0c\u89c1\u5982\u4e0b * \u548c -> \u7684\u91cd\u8f7d class Iterator { public : virtual ~ Iterator () {} virtual bool operator != ( const Iterator & other ) const = 0 ; virtual const Iterator & operator ++ () = 0 ; virtual const Iterator * operator ++ ( int ) = 0 ; virtual float & operator * () const = 0 ; virtual float & operator -> () const = 0 ; bool operator == ( const Iterator & other ) const { return ! ( * this != other ); } };","title":"\u95ee\u9898 2"},{"location":"design_pattern/split_representation/#_12","text":"\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\uff0c\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c06\u7c7b\u578b\u4f5c\u4e3a\u53ef\u53d8\u90e8\u5206\uff0c\u8fd9\u4e9b\u90e8\u5206\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u505a\u51fa\u6307\u660e\u3002\u5982\u6b64\u4e00\u6765\uff0c\u53ef\u4ee5\u5148\u8003\u8651\u901a\u7528\u7684\u7b97\u6cd5\u548c\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u518d\u5728\u4f7f\u7528\u65f6\u4e88\u4ee5\u5b9e\u4f8b\u5316 \u4f7f\u7528 \u6a21\u677f \u6280\u672f\u5b9e\u73b0 \u6cdb\u578b \u3002","title":"\u5f15\u5165\u6a21\u677f"},{"location":"design_pattern/split_representation/#_13","text":"template < class iterator_ > void Analysis ( iterator_ begin , iterator_ end ) { int passed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u8fd9\u91cc iterator_ \u7c7b\u578b\u7684\u53d8\u91cf\u9700\u8981\u5b9e\u73b0 = , != , ++ \u8fd0\u7b97\u7b26\u3002 template < class T > class ArrayCollection { public : ArrayCollection () : size_ ( 10 ) { data_ = new T [ size_ ]; } ArrayCollection ( int size ) : size ( size_ ) { data_ = new T [ size_ ]; } ArrayCollection ( int size , T * data ) : size_ ( size ) { data_ = new T [ size_ ]; for ( int i = 0 ; i < size_ ; i ++ ) * ( data_ + i ) = * ( data + i ); } ~ ArrayCollection () { delete [] data_ ; } T * begin (){ return data_ ; } T * end () { return data_ + size_ ; } private : T * data_ ; int size_ ; };","title":"\u901a\u7528\u7b97\u6cd5"},{"location":"design_pattern/split_representation/#_14","text":"template < class T > struct LinkiedListNode { T data_ ; LinkedListNode * next ; LinkedListNode () : next ( nullptr ) {} LinkedListNode ( T data ) : data_ ( data ), next ( nullptr ) {} }; template < class T > struct LinkedListIterator { LinkedListNode < T >* pointer ; LinkedListIterator ( LinkiedListNode < T >* p ) : pointer ( p ) {} LinkedListIterator ( const LinkedListIterator < T >& it ) : pointer ( it . pointer ) {} LinkedListIterator < T >& operator ++ () { pointer = pointer -> next ; return * this ; } const LinkedListIterator < T > operator ++ ( int ) { LinkedListIterator < T > temp = * this ; pointer = pointer -> next ; return temp ; } T & operator * () const { return pointer -> data_ ; } T * operator -> () const { return & ( pointer -> data_ ); } bool operator != ( const LinkedListIterator < T >& other ) { return pointer != other . pointer ; } bool operator == ( const LinkedListIterator < T >& other ) { return pointer == other . pointer ; } }; template < class T > class LinkedListCollection { public : LinkedListCollection () : head_ ( nullptr ) {} LinkedListCollection ( int size , T * datq ) { //... } ~ LinkedListCollection () { //... } LinkedListIterator < T > begin () { return LinkedListIterator < T > ( head_ ); } LinkedListIterator < T > end () { return LinkedListIterator < T > ( nullptr ); } private : LinkedListNode < T >* head ; }; \u4f7f\u7528\u5982\u4e0b\uff1a int main () { float scores [] = { 90 , 20 , 40 , 40 , 30 , 60 , 70 , 30 , 90 , 100 }; ArrayCollection < float > collection2 ( 10 , scores ); LinkedListCollection < float > collection1 ( 10 , scores ); Analyze ( scores , scores + 10 ); Analyze ( collection1 . begin (), collection1 . end ()); Analyze ( collection2 . begin (), collection2 . end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; } \u8fd9\u91cc\u6307\u9488\u7531\u4e8e\u652f\u6301 = , != , ++ \u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8fed\u4ee3\u5668\u4f7f\u7528\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6307\u9488\u662f\u4e00\u79cd\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u4e5f\u662f\u4e00\u79cd\u6307\u9488\u3002","title":"\u94fe\u8868\u8282\u70b9\u3001\u94fe\u8868\u8fed\u4ee3\u5668\u3001\u94fe\u8868\u5bb9\u5668"},{"location":"design_pattern/split_representation/#_15","text":"\u5bb9\u5668\uff1a\u5b58\u50a8\u6570\u636e\uff0c\u6570\u636e\u7684\u8868\u793a \u7b97\u6cd5\uff1a\u5904\u7406\u6570\u636e\uff0c\u62bd\u8c61\u7684\u7b97\u6cd5\u5b9e\u73b0 \u8fed\u4ee3\u5668\uff1a\u6807\u51c6\u7684\u6570\u636e\u904d\u5386\u63a5\u53e3\uff0c\u9694\u79bb\u7b97\u6cd5\u4e0e\u5bb9\u5668\uff0c\u662f\u7b97\u6cd5\u4e0e\u6570\u636e\u7684\u8868\u793a\u65e0\u5173 \u5b9e\u73b0\u901a\u7528\u7684\u7b97\u6cd5\uff0c\u5c06\u7b97\u6cd5\u4e0e\u6570\u636e\u8868\u793a\u89e3\u8026\u3002","title":"\u7b97\u6cd5\u4e0e\u6570\u636e\u89e3\u8026"},{"location":"design_pattern/split_representation/#3","text":"\u5982\u679c\u4e0a\u8ff0\u95ee\u9898\u8003\u8bd5\u79d1\u76ee\u53d8\u62103\u79d1\uff0c\u5219 float \u578b\u53d8\u91cf\u4e0d\u80fd\u8868\u793a\u5206\u6570\uff0c\u5b9a\u4e49 Score \u7c7b\u578b struct Score { float value [ 3 ]; Score () {} Score ( float f1 , float f2 , float f3 ) { value [ 0 ] = f1 ; value [ 1 ] = f2 ; value [ 2 ] = f3 ; } Score & operator = ( const Score & s ) { value [ 0 ] = s . value [ 0 ]; value [ 1 ] = s . value [ 1 ]; value [ 2 ] = s . value [ 2 ]; return * this ; } bool operator >= ( float pass ) { return value [ 0 ] >= pass && value [ 1 ] >= pass & value [ 2 ] >= pass ; } }; ostream & operator << ( ostream & out , const Score & s ) { cout << \"{\" << s . value [ 0 ] << \", \" << s . value [ 1 ] << \", \" << s . value [ 2 ] << \"}\" ; return out ; } \u76f8\u5e94\u5730\u4e3b\u51fd\u6570\u53d8\u4e3a int main ( int argc , char * argv []) { Score sarray [ 3 ]; sarray [ 0 ] = Score ( 60 , 60 , 60 ); sarray [ 1 ] = Score ( 70 , 70 , 70 ); sarray [ 2 ] = Score ( 50 , 80 , 80 ); ArrayCollection < Score > collection3 ( 3 , sarray ); LinkedListCollection < Score > collection4 ( 3 , sarray ); Analyze ( sarray , sarray + 3 ); Analyze ( collection3 . begin (), collection3 . end ()); Analyze ( collection4 . begin (), collection4 . end ()); system ( \"PAUSE\" ); return EXIT_SUCCESS ; }","title":"\u8003\u8bd5\u79d1\u76ee\u6570\u53d8\u62103"},{"location":"design_pattern/split_representation/#_16","text":"\u5bf9\u4e8e\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c \u503c \u64cd\u4f5c \u62bd\u8c61\u63a5\u53e3 \u503c\u57df \u53ef\u7528\u7684\u64cd\u4f5c \u5177\u4f53\u5b9e\u73b0 \u5982\u4f55\u5b58\u50a8 \u5982\u4f55\u5b9e\u73b0\u64cd\u4f5c \u5bf9\u4e8e \u53ef\u7528\u7684\u64cd\u4f5c \u90e8\u5206\uff0c\u5bf9\u5982 = , != , ++ , * \u7684\u652f\u6301\u662f\u7b97\u6cd5\u6240\u5173\u5fc3\u7684\u3002\u7b97\u6cd5\u5b9e\u9645\u4e0a\u53ea\u4e0e \u53ef\u7528\u7684\u64cd\u4f5c \u76f8\u5173\uff0c\u4e0e\u5177\u4f53\u6570\u636e\u7c7b\u578b\u65e0\u5173\u3002","title":"\u5982\u4f55\u5b9e\u73b0\u89e3\u8026"},{"location":"design_pattern/split_representation/#_17","text":"\u7b97\u6cd5\u4ec5\u4e0e\u201c\u53ef\u7528\u7684\u64cd\u4f5c\u201d\u76f8\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u629b\u5f00\u7c7b\u578b\u8003\u8651\u7b97\u6cd5\uff0c\u5b9e\u73b0\u62bd\u8c61\u8fd0\u7b97\uff0c\u5728\u7b97\u6cd5\u548c\u6570\u636e\u7c7b\u578b\uff08\u5b58\u50a8\uff09\u4e4b\u95f4\u5b9e\u73b0\u89e3\u8026\u3002 \u5728C++\u4e2d\uff0c\u201c\u53ef\u7528\u7684\u64cd\u4f5c\u201d\u65f6\u4f7f\u7528\u8fd0\u7b97\u7b26\u6765\u63cf\u8ff0\u7684\uff08\u5982 * , ++ , != , >= \uff09\uff0c\u4ed6\u4f5c\u7528\u5728\u6307\u5b9a\u6570\u91cf\u7684\u64cd\u4f5c\u6570\u4e0a\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\u67d0\u4e2a\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u5728\u67d0\u4e2a\u7b97\u6cd5\u4e2d\uff0c\u53ea\u8981\u5b9e\u73b0\u76f8\u5173\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u4f9d\u8d56\u4e8e\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d\u7684\u672c\u6765\u76ee\u7684\uff1a \u8fd0\u7b97\u7b26\u91cd\u8f7d\u5c31\u662f\u5728\u65b0\u7684\u6570\u636e\u7c7b\u578b\u4e0a\u8fd8\u539f\u8fd0\u7b97\u7b26\u7684\u672c\u8d28 \u3002","title":"\u7b97\u6cd5\u3001\u8fd0\u7b97\u7b26\u3001\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"design_pattern/split_representation/#_18","text":"\u53ef\u7528\u7684\u64cd\u4f5c\u662f\u6570\u636e\u7c7b\u578b\u7684\u62bd\u8c61\u63a5\u53e3\u3002 \u6570\u636e\u7c7b\u578b\u4e5f\u53ef\u4ee5\u7528 \u53ef\u7528\u64cd\u4f5c\u7684\u96c6\u5408 \u6765\u754c\u5b9a\uff0c\u5177\u6709\u76f8\u540c\u201c\u53ef\u7528\u64cd\u4f5c\u96c6\u5408\u201d\u5c31\u662f\u76f8\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u5982\u679c\u628a\u201c\u64cd\u4f5c\u201d\u66f4\u52a0\u6cdb\u534e\uff0c\u5c06\u5176\u5b9a\u4e49\u5230\u4e00\u4e2a\u62bd\u8c61\u5b9e\u4f53\u4e0a\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u201c\u6570\u636e\u7c7b\u578b\u201d\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\u3002","title":"\u6570\u636e\u7c7b\u578b\u4e0e\u64cd\u4f5c"},{"location":"design_pattern/split_representation/#_19","text":"\u9664\u4e86\u201c\u62bd\u8c61\u7b97\u6cd5\u201d\u4e4b\u5916\uff0c\u8fd8\u6709\u201c\u62bd\u8c61\u7ed3\u6784\u201d Stack , LinkedList , Vector \u8fd9\u4e9b\u62bd\u8c61\u7ed3\u6784\uff0c\u4e0e\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\u65e0\u5173\uff0c\u81f3\u4e8e\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u8bbf\u95ee\u65b9\u5f0f\u76f8\u5173\uff0c\u53ef\u4ee5\u501f\u52a9\u7c7b\u6a21\u677f\u5b9e\u73b0\u3002","title":"\u62bd\u8c61\u7ed3\u6784\u4e0e\u7c7b\u6a21\u677f"},{"location":"design_pattern/split_representation/#_20","text":"\u4f8b\u5982\u4e0b\u65b9\u94fe\u8868 template < class T > struct LinkedListNode { T data_ ; LinkedListNode * next_ ; LinkedListNode () : next_ ( nullptr ) {} LinkedListNode ( T data ) : data_ ( data ), next_ ( nullptr ) {} LinkedListNode ( T data , LinkedListNode * next ) : data_ ( data ), next_ ( next ) {} }; template < class T > class LinkedListCollection { public : LinkedListCollection () : head_ ( nullptr ) {} ~ LinkedListCollection () { clear (); } bool empty () { return head_ == nullptr ; } void AddFirst ( const T & data ) { head_ = new LinkedListNode < T > )( data , head_ ); } bool RemoveFirst () { if ( head_ != nullptr ) { LinkedListNode < T >* p = head_ ; head_ = head_ -> next_ ; delete p ; return true ; } else { return false ; } } T * GetFirst () { return head_ != nullptr ? & ( head_ -> data_ ) : nullptr ; } bool RemoveLast () { if ( head_ != nullptr ) { if ( head_ -> next_ != nullptr ) { LinkedListNode < T >* p ; for ( p = head_ ; p -> next_ -> next_ != nullptr ; p = p -> next_ ) ; delete p -> next_ ; p -> next_ = nullptr ; return true ; } else { delete head_ ; head_ = nullptr ; return true ; } } else { return false ; } } clear () { while ( RemoveFirst ()) ; } LinkedListIterator < T > begin () { return LinkedListIterator < T > ( head_ ); } LinkedListIterator < T > end () { return LinkedListIterator < T > ( nullptr ); } private : LinkedListNode < T >* head_ ; }; \u5173\u4e8e \u5185\u8054\u51fd\u6570 \uff1a C++\u4e2d inline \u5173\u952e\u5b57\u4fee\u9970\u51fd\u6570\u5b9a\u4e49\uff08\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u88ab\u9891\u7e41\u4f7f\u7528\uff0c\u5bf9\u6027\u80fd\u8981\u6c42\u654f\u611f\uff0c\u8c03\u7528\u65f6\u4f7f\u7528\u5185\u8054\u5c55\u5f00\uff0c\u907f\u514d\u5165\u6808\u51fa\u6808\u7684\u64cd\u4f5c\uff09 inline int max(int a, int b) { return a > b ? a : b; } \u4f5c\u7528\uff1a\u51fd\u6570\u5185\u8054\u5c55\u5f00\uff0c\u907f\u514d\u51fd\u6570\u8c03\u7528\u5f00\u9500\uff0c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 \u5728\u7c7b\u5b9a\u4e49\u4f53\u5185\u5b9a\u4e49\uff08\u5b9e\u73b0\uff09\u7684\u51fd\u6570\u7f3a\u7701\u4e3a\u5185\u8054\u51fd\u6570\u3002 \u5230\u6b64\u4e3a\u6b62 \u6211\u4eec\u4e3a\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u5b9e\u73b0\u94fe\u8868\u7684\u65b9\u5f0f\u3002","title":"\u5b9e\u73b0\u4e00\u4e2a\u94fe\u8868\u6a21\u677f"},{"location":"design_pattern/split_representation/#_21","text":"\u901a\u8fc7\u6a21\u677f\u5b9e\u4f8b\u5316\u4f7f\u7528Linked List\uff08\u62bd\u8c61\u7ed3\u6784\uff09 int main ( int argc , char * argv []) { //... LinkedListCollection < Score > collection4 ; for ( int i = 0 ; i < 3 ; i ++ ) collection4 . AddFirst ( sarray [ i ]); Analyze ( collection4 . begin (), collection4 . end ()); //... return EXIT_SUCCESS ; }","title":"\u7528\u94fe\u8868\u6a21\u677f\u7ec4\u7ec7\u5206\u6570"},{"location":"design_pattern/split_representation/#_22","text":"\u56fa\u5b9a\u7684\u4e1c\u897f\uff1a \u7b97\u6cd5/\u62bd\u8c61\u7ed3\u6784\u7684\u63a5\u53e3\u4e0e\u5b9e\u73b0 \u201c\u6570\u636e\u201d\u7684\u8bbf\u95ee\u63a5\u53e3\uff08\u8fed\u4ee3\u5668\uff09 \u201c\u6570\u636e\u201d\u7684\u53ef\u7528\u64cd\u4f5c\uff08\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 \u53d8\u5316\u7684\u4e1c\u897f\uff1a \u201c\u6570\u636e\u201d\u7684\u7ec4\u7ec7\u5f62\u5f0f \u201c\u6570\u636e\u201d\u7684\u7c7b\u578b\uff08\u503c\u57df\u3001\u5b58\u50a8\u3001\u64cd\u4f5c\u5b9e\u73b0\uff09 \u7531\u6b64\u5b9e\u73b0\u201c\u7b97\u6cd5/\u62bd\u8c61\u7ed3\u6784\u201d\u4e0e\u201c\u6570\u636e\u8868\u793a\u201d\u4e4b\u95f4\u7684\u5206\u79bb \u6cdb\u578b\u7f16\u7a0b \uff1a\u5148\u5b9e\u73b0\u7b97\u6cd5\uff0c\u518d\u5145\u5b9e\u6570\u636e\u8868\u793a\uff08\u7c7b\u578b\uff09","title":"\u5c0f\u7ed3"},{"location":"design_pattern/split_representation/#_23","text":"","title":"\u51fd\u6570\u5bf9\u8c61\u4e0e\u7b97\u6cd5\u5206\u89e3"},{"location":"design_pattern/split_representation/#_24","text":"\u5982\u679c\u67d0\u4e9b\u79d1\u76ee\u7684\u53ca\u683c\u7ebf\u4e0d\u662f60\u5206 \u73b0\u6709\u7684 Analyze \u51fd\u6570 template < class iterator_ > void Analyze ( iterator_ begin , iterator_ end ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( * p >= 60 ) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u5c06\u5224\u65ad\u53ca\u683c\u51fd\u6570 IsPass \u7684\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 Analyze template < class iterator_ > void Analyze ( iterator_ begin , iterator_ end , bool ( * IsPass )( const iterator_ & )) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( IsPass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u4f7f\u7528\u201c\u5224\u65ad\u53ca\u683c\u201d\u51fd\u6570\u6307\u9488 template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 70 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } \u6ce8\uff1a\u8fd9\u91cc\u7684` IsPass `\u6709\u7f3a\u9677\uff1a\u53ea\u9002\u7528\u4e8e` Score `\u7c7b\u578b int main ( int argc , char * argv []) { //... Analyze ( sarray , sarray + 3 , IsPass < Score *> ); Analyze ( collection3 . begin (), collection3 . end (), IsPass < Score *> ); Analyze ( collection4 . begin (), collection4 . end (), IsPass < LinkedListIterator < Score >> ); //... }","title":"\u5f53\u201c\u53ca\u683c\u201d\u5224\u5b9a\u89c4\u5219\u53d1\u751f\u53d8\u5316"},{"location":"design_pattern/split_representation/#_25","text":"\u8fd9\u4e24\u4e2a\u51fd\u6570\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u662f\u201c\u79d1\u4e00\u201d\u7684\u53ca\u683c\u5206\u6570 template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 70 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= 60 && p -> value [ 1 ] >= 60 && p -> value [ 2 ] >= 60 ; } \u5982\u4f55\u62bd\u79bb\u51fa\u76f8\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u5c06\u201c\u53ca\u683c\u7ebf\u201d\u8bb0\u5f55\u4e0b\u6765 \u4f7f\u7528 Score \u53d8\u91cf const Score pass ( 70 , 60 , 60 ); template < class iterator_ > bool IsPass ( const iterator_ & p ) { return p -> value [ 0 ] >= pass . value [ 0 ] && p -> value [ 1 ] >= pass . value [ 1 ] && p -> value [ 2 ] >= pass . value [ 2 ]; } \u4f7f\u7528\u6587\u4ef6 template < class iterator_ > bool IsPass ( const iterator_ & p ) { float pass1 , pass2 , pass3 ; ifstream is ( \"pass-score.txt\" ); is >> pass1 >> pass2 >> pass3 ; return p -> value [ 0 ] >= pass1 && p -> value [ 1 ] >= pass2 && p -> value [ 2 ] >= pass3 ; } \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 pass-score.txt \u7684\u5185\u5bb9\u6539\u53d8\u53ca\u683c\u5206\u6570\u7ebf\u7ec4\u5408\u3002 \u8fd9\u91cc \u5355\u4e00\u5b9e\u4f8b \u7684\u95ee\u9898\u4f9d\u7136\u5b58\u5728\uff0c\u95ee\u9898\u5728\u4e8e\u51fd\u6570\u662f\u56fa\u5b9a\u7684\u3002","title":"\u8fdb\u4e00\u6b65\u89e3\u8026"},{"location":"design_pattern/split_representation/#_26","text":"\u5b9a\u4e49 IsPass \u51fd\u6570\u5bf9\u8c61\u7c7b\u6a21\u677f template < class iterator_ , class T > class IsPass { public : IsPass ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iterator_ & p ) { return * p >= pass_ ; } private : T pass_ ; }; \u76f8\u5e94\u6539\u53d8\u7b97\u6cd5\u5b9a\u4e49 template < class iterator_ , class T > void Analyze ( iterator_ begin , iterator_ end , IsPass < iterator_ , T > is_pass ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( is_pass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u4f7f\u7528\u51fd\u6570\u5bf9\u8c61 int main ( int argc , char * argv []) { //... sarray [ 0 ] = Score ( 60 , 60 , 60 ); sarray [ 1 ] = Score ( 70 , 70 , 70 ); sarray [ 2 ] = Score ( 50 , 80 , 80 ); ArrayCollection < Score > collection3 ( 3 , sarray ); LinkedListCollection < Score > collection4 ; //... Analyze ( sarray , sarray + 3 , IsPass < Score * , Score > ( Score ( 70 , 60 , 60 ))); Analyze ( collection3 . begin (), collection4 . end (), IsPass < Score * , Score > ( Score ( 50 , 60 , 60 ))); Analyze ( collection4 . begin (), collection4 . end (), IsPass < LinkedListIterator < Score > , Score > ( Score ( 60 , 60 , 60 ))); }","title":"\u51fd\u6570\u5bf9\u8c61"},{"location":"design_pattern/split_representation/#_27","text":"\u65b0\u9700\u6c42\uff1a IsPass \u5982\u679c\u4e5f\u8981\u591a\u79cd\u5b9e\u73b0\uff0c\u6ca1\u8bfe\u90fd\u53ca\u683c\u548c\u603b\u5206\u53ca\u683c \u6b64\u65f6\u53ef\u4ee5\u628a IsPass \u51fd\u6570\u5bf9\u8c61\u4e0d\u4f5c\u4e3a Analyze \u7684 \u53c2\u6570 \u800c\u5c06\u5176\u7c7b\u578b\u4f5c\u4e3a Analyze \u7684 \u6a21\u677f\u53c2\u6570 \u4f20\u5165 template < class iterator_ , class IsPass_ > void Analyze ( iterator_ begin , iterator_ end , IsPass_ is_pass ) { int passsed = 0 , count = 0 ; for ( iterator_ p = begin ; p != end ; p ++ ) { if ( is_pass ( p )) passed ++ ; count ++ ; } cout << \"passing rate = \" << ( float ) passed / count << endl ; } \u8fd9\u6837\u5c31\u53ef\u4ee5\u662f\u5438\u7eb3\u4e0d\u540c\u7684 IsPass_ template < class iterator_ , class T > class IsPass_ForEach { public : IsPass_ForEach ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iteartor_ & p ) { return * p >= pass_ ; } private : T pass_ ; }; template < class iterator_ , class T > class IsPass_Total { public : IsPass_ForEach ( const T & pass ) : pass_ ( pass ) {} bool operator ()( const iteartor_ & p ) { return p -> GetTotal () >= pass . GetTotal (); } private : T pass_ ; };","title":"\u5224\u65ad\u53ca\u683c\u7684\u903b\u8f91\u6539\u53d8"},{"location":"design_pattern/split_representation/#_28","text":"\u5bf9\u4e8e Analyze \u8fd9\u4e2a\u7b97\u6cd5 \u63cf\u8ff0 \u64cd\u4f5c \u53c2\u6570 \u9488\u904d\u5386\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20 \u904d\u5386 iterator_ \u5224\u65ad\u662f\u5426\u53ca\u683c \u5224\u65ad IsPass_ \u7d2f\u52a0\u201c\u53ca\u683c\u201d\u6570\u91cf \u7d2f\u52a0 Analyze()\u672c\u8eab \u6709\u4e09\u4e2a\u65e0\u5173\uff08\u6b63\u4ea4\uff09\u7684\u53ef\u53d8\u90e8\u5206","title":"\u5c0f\u7ed3"},{"location":"design_pattern/split_representation/#_29","text":"","title":"\u57fa\u4e8e\u6a21\u677f\u7684\u7b56\u7565\u6a21\u5f0f"},{"location":"design_pattern/split_representation/#_30","text":"\u7528\u4e24\u4e2a\u7c7b\u53c2\u6570\u7ec4\u5408\u5f62\u6210\u4e00\u4e2a\u786e\u5b9a\u7684Analyze\u7b97\u6cd5\u5b9e\u4f8b\u3002 \u7b56\u7565\u6a21\u578b\u7684\u6a21\u677f\u5b9e\u73b0\uff1a \u8fd9\u91cc\u518d\u6b21\u4f53\u73b0\u4e86 \u7b56\u7565 \u6a21\u5f0f\u3002","title":"\u7b56\u7565\u6a21\u5f0f\u7684\u6a21\u677f\u5b9e\u73b0"},{"location":"design_pattern/split_representation/#_31","text":"\u4f7f\u7528 \u6a21\u677f\u7b56\u7565 \u5b9e\u73b0\u8d1f\u8f7d\u76d1\u89c6\u5668 template < class load_ , class memory_ , class latency_ , class display_ > class Monitor : public load_ , public memory_ , public latency_ , public display_ { public : Monitor () {} void GetLoad () { load = load_ :: GetCPULoad (); } void GetTotalMemory () { total_memory = memory_ :: GetTotal (); } void GetUsedMemory () { used_memory = memory_ :: GetUsed (); } void GetNetworkLatency () { latency = latency_ :: GetLatency (); } void Show () { display_ :: Show ( load , total_memory , used_memory , latency ); } private : float load , latency ; long total_memory , used_memory ; }; \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ec4\u5408\u4ee3\u66ff\u7ee7\u627f\u3002 \u76f8\u5e94\u4e3b\u7a0b\u5e8f int main ( int argc , char * argv []) { Monitor < Load , memory , Latency , Display > monitor ; while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLatency (); monitor . Show (); sleep ( 1000 ); } } \u5b9a\u4e49\u7b56\u7565\u7c7b class Load { public : float GetCPULoqd (); }; class Memory { public : long GetTotal (); long GetUsed (); }; class Latency { public : float GetLatency (); }; \u663e\u793a\u7b56\u7565\u7c7b class Display { public : void Show ( float load , long total_memory , long used_memory , float latency ); };","title":"\u518d\u770b\u8d1f\u8f7d\u76d1\u89c6\u5668"},{"location":"design_pattern/split_representation/#stl","text":"Standard Template Library - \u6807\u51c6\u6a21\u677f\u5e93 \u4e00\u7ec4\u6700\u5e38\u7528\u7684\uff23++\u529f\u80fd\u7684\u6a21\u677f\u5b9e\u73b0 \u7b97\u6cd5 - min , max , for_each , find_if , copy , sort , stable_sort \u7b49 \u51fd\u6570\u5bf9\u8c61\u53ca\u5176\u64cd\u4f5c\uff1a\u7b97\u6cd5\u7684\u53ef\u53d8\u90e8\u5206 - greater , less , equal_to , logical_and , logical_or , no1 , not2 , bind1st , bind2nd , ptr_fun \u7b49 \u5bb9\u5668\u53ca\u5176\u8fed\u4ee3\u5668\uff1a\u7b97\u6cd5\u6240\u4f5c\u7528\u7684\u4e00\u7ec4\u6570\u636e\u53ca\u5bf9\u5176\u8fdb\u884c\u904d\u5386\u7684\u624b\u6bb5 - vector , dqueue , list , set , map , stack , queue \u53ca\u5176\u8fed\u4ee3\u5668, istream_oterator , ostream_iterator \u7b49 \u5176\u4ed6\uff1a\u5982 string \u7c7b","title":"STL"},{"location":"design_pattern/split_steps/","text":"\u7b97\u6cd5\u6a2a\u5411\u62c6\u5206 - \u5206\u79bb\u6b65\u9aa4 \u9762\u5411\u5bf9\u8c61\u7684\u63a5\u53e3\u8bbe\u8ba1\u8981\u65f6\u523b\u9075\u5faa\u529f\u80fd\u7684 \u5355\u4e00\u6027 \u539f\u5219\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u8d1f\u8f7d\u76d1\u89c6\u5668 \u8d1f\u8f7d\u76d1\u89c6\u5668 \u76d1\u89c6\u8ba1\u7b97\u8282\u70b9\u7684\u6577\u5728\u72b6\u6001\uff08\u5982CPU\u5360\u7528\u7387\u3001\u5b58\u50a8\u5668\u5360\u7528\u7387\u3001\u5230\u67d0\u4e2a\u7279\u5b9a\u8282\u70b9\u7684\u7f51\u7edc\u5ef6\u8fdf\uff09\u3002 \u4ee5CPU\u5360\u7528\u7387\u7684\u76d1\u89c6\u4e3a\u4f8b\uff0c\u4e0d\u540c\u6761\u4ef6\u4e0b\uff08\u4f8b\u5982\u4e0d\u540c\u79cd\u7c7b\u4e0d\u540c\u7248\u672c\u7684OS\uff09\u83b7\u5f97CPU\u5360\u7528\u7387\u7684\u65b9\u6cd5\u4e0d\u540c\u3002 \u600e\u6837\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u5bf9\u8fd9\u4e9b\u4e0d\u540c\u6761\u4ef6\u7684\u9002\u5e94\u5462\uff1f \u81ea\u9876\u5411\u4e0b \u4e3b\u7a0b\u5e8f\uff0cMonitor\u7684\u4f7f\u7528\u65b9\u6cd5 int main ( int argc , char * argv []) { WindowsDisplay display ; Monitor monitor ( & display ); while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLantency (); monitor . show (); sleep ( 1000 ); } } switch case - \u5bf9\u4e8e\u4e0d\u540c\u7684\u6761\u4ef6\u4e0b\u5b9e\u73b0 Monitor::GetLoad \u51fd\u6570 enum MonitorType { Win32 , Win64 , Ganglia }; MonitorType type = Ganglia ; float Monitor :: GetLoad () { switch ( type ) { case Win32 : // Get system load via Win32 APIs return load ; case Win64 : // Get system load via Win64 APIs return load ; case Ganglia : // Get system load via Ganglia interface return load ; } } \u5f0a\u7aef\uff1a\u6bcf\u589e\u52a0\u4e00\u79cd\u65b0\u7684\u7cfb\u7edf\u73af\u5883\uff0c\u9700\u8981\u5bf9 Monitor::GetLoad \u51fd\u6570\u505a\u4fee\u6539\u3002 \u6a21\u677f\u65b9\u6cd5 class Monitor { public : virtual void GetLoad () = 0 ; virtual void GetTotalMemory () = 0 ; virtual void GetUsedMemory () = 0 ; virtual void GetNetworkLatency () = 0 ; Monitor ( Display * display ); virtual ~ Monitor (); void Show (); protected : float load , latency ; long total_memory , used_memory ; Display * m_display ; }; void Monitor :: Show () { m_display -> Show ( load , total_memory , used_memory , latency ); } \u8fd9\u79cd\u5b9e\u73b0\u7684\u95ee\u9898 \u5982\u679c\u51e0\u4e2a\u51fd\u6570\u63a5\u53e3\u7684\u5b9e\u73b0\u76f8\u4e92\u72ec\u7acb\uff0c\u5206\u522b\u6709 N, M, K N, M, K \u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u90a3\u4e48\uff0c\u5b9e\u73b0\u5b50\u7c7b\u7684\u4e2a\u6570\u5c06\u662f N \\times M \\times K N \\times M \\times K \u79cd\u3002 \u4f8b\u5982\u5982\u679c\u5b9e\u73b0 GetLoad() \u7684\u65b9\u5f0f\u6709 4 4 \u79cd\uff0c\u5b9e\u73b0 GetTotalMemory() \u7684\u65b9\u5f0f\u6709 3 3 \u79cd\uff0c\u90a3\u4e48\u5b50\u7c7b\u7684\u6570\u91cf\u53ef\u4ee5\u6709 12 12 \u79cd\u3002\u5f53\u4ee3\u7801\u9700\u8981\u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u5bf9\u91cd\u590d\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u8d39\u65f6\u8d39\u529b\u3002 \u63a5\u53e3\u5206\u79bb\u4e0e\u5355\u4e00\u8d23\u4efb\u539f\u5219 \u4e24\u79cd\u4e0d\u540c\u5c42\u6b21\u7684\u53d8\u5316 \u5bf9\u4e8e\u4e0a\u8ff0\u5b9e\u73b0\uff0c\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u5c42\u9762\u7684\u53d8\u5316\uff0c\u5e94\u8be5\u6709\u6240\u533a\u5206 \u5728\u5b9e\u73b0\u5c42\u9762\u4e0a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u529f\u80fd\uff0c\u5b58\u5728\u591a\u79cd\u5b9e\u73b0\u65b9\u6cd5 \u76f8\u5bf9\u4e8e\u57fa\u7c7b\u662f\u53ef\u53d8\u7684\uff0c\u6bcf\u79cd\u53d8\u5316\u5bf9\u5e94\u4e00\u4e2a\u5b50\u7c7b \u8fd9\u79cd\u53d8\u5316\u8868\u73b0\u5728\u7f16\u8bd1\u671f\uff0c\u662f\u4e00\u79cd\u76f8\u5bf9\u9759\u6001\u7684\u53ef\u53d8 \u5728\u7ec4\u7ec7\u5c42\u9762\u4e0a\uff1a\u5927\u201c\u7c7b\u201d\u7684\u529f\u80fd\u7531\u4e00\u7cfb\u5217\u5b50\u529f\u80fd\u6784\u6210 \u5b50\u529f\u80fd\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u5e94\u5f53\u5c06\u8fd9\u4e9b\u5b50\u529f\u80fd\u62c6\u5206\u5230\u4e0d\u540c\u7684\u201c\u5c0f\u201d\u7c7b \u7ec4\u5408\u662f\u81ea\u7531\u7684\u3001\u52a8\u6001\u7684\u3001\u53ef\u53d8\u7684\u3001\u901a\u8fc7\u5b9e\u73b0\u5b50\u529f\u80fd\u7684\u201c\u5c0f\u201d\u7c7b\u5bf9\u8c61\u7684\u7ec4\u5408\u6765\u5b8c\u6210 \u8fd9\u79cd\u53d8\u5316\u8868\u73b0\u5728\u8fd0\u884c\u671f\uff0c\u662f\u4e00\u79cd\u76f8\u5bf9\u52a8\u6001\u7684\u53ef\u53d8 \u9694\u79bb\u4e0d\u540c\u5c42\u9762\u7684\u201c\u53d8\u201d \u9759\u6001\u7684\u53ef\u53d8\u7528 \u7ee7\u627f \u52a8\u6001\u7684\u53ef\u53d8\u7528 \u7ec4\u5408 \u5355\u4e00\u8d23\u4efb \u5355\u4e00\u8d23\u4efb\u539f\u5219 \u7c7b\u529f\u80fd\u5e94\u8be5\u662f \u5185\u805a \u7684\uff0c\u4e00\u4e2a\u7c7b\u53ea\u627f\u62c5\u4e00\u9879\u529f\u80fd \u8868\u73b0\u4e3a\uff1a\u4fee\u6539/\u6d3e\u751f\u4e00\u4e2a\u7c7b\u53ea\u5e94\u8be5\u6709\u4e00\u4e2a\u7406\u7531\uff0c\u53ea\u80fd\u7531\u5355\u4e2a\u53d8\u5316\u56e0\u7d20\u5f15\u8d77 \u5c06\u591a\u4e2a\u4e0d\u540c\u529f\u80fd\u4ea4\u7531\u540c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\uff0c\u8fdd\u53cd\u4e86\u5355\u4e00\u8d23\u4efb\u539f\u5219 \u5f53\u4e00\u4e2a\u529f\u80fd\u9700\u8981\u53d8\u5316\u65f6\uff0c\u4e0d\u5f97\u4e0d\u4fee\u6539\u6216\u8005\u6d3e\u751f\u65b0\u7684\u5b9e\u73b0\u7c7b \u5206\u79bb\u4e24\u79cd\u5c42\u6b21 \u5265\u79bb\u51fa\u65b0\u7684\u63a5\u53e3 \u6bcf\u4e2a\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u7684\u5b9e\u73b0\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u63a5\u53e3\uff08\u79f0\u4e3a \u7b56\u7565 \uff09 \u4e0e\u63a5\u53e3\u4e0d\u540c\u7684\u5b9e\u73b0\u7ec4\u6210\u4e00\u4e2a \u7b56\u7565\u7c7b\u7684\u4f53\u7cfb \u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f \u7528\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u63a5\u53e3\u4e4b\u95f4\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u4e4b\u95f4\u7684\u7ec4\u5408 \u5982\u6b64\u4e00\u6765\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u76f8\u4e92\u72ec\u7acb\u7684\u51fd\u6570\u63a5\u53e3\u5206\u522b\u6709 N, M, K N, M, K \u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u9700\u8981\u5b9e\u73b0\u7684\u7c7b\u7684\u6570\u91cf\u4ece N \\times M \\times K N \\times M \\times K \u53d8\u4e3a N + M + K N + M + K \u4e2a\u201c\u5c0f\u201d\u7c7b\u548c 1 1 \u4e2a\u5927\u7c7b\u3002 \u91cd\u65b0\u770b\u8d1f\u8d23\u76d1\u89c6\u5176\u7684\u8bbe\u8ba1 \u5265\u79bb\u65b0\u7684\u63a5\u53e3 \u7531\u4e09\u4e2a\u201c\u7b56\u7565\u201d\u63a5\u53e3\u5206\u522b\u5b9a\u4e49\u4e0d\u540c\u7684\u529f\u80fd \u6bcf\u4e2a\u7b56\u7565\u63a5\u53e3\u6709\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u5b9e\u73b0 \u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f Monitor \u7c7b\u4e2d\u5821\u6751\u4e00\u7ec4\u201c\u7b56\u7565\u201d\u63a5\u53e3\u7c7b\u7684\u5b9e\u4f8b \u8fd9\u4e9b\u5b9e\u4f8b\u53ef\u4ee5\u81ea\u7531\u7ec4\u5408\u548c\u52a8\u6001\u66ff\u6362 \u5b9e\u73b0 LoadStrategy \u201c\u5c0f\u7c7b\u201d class LoadStrategy { public : virtual float GetLoad () = 0 ; }; class LoadStrategyImpl1 : public LoadStrategy { public : float GetLoad () { // Get load here... return load ; } }; class LoadStrategyImpl2 : public LoadStrategy { public : float GetLoad () { // Get load here... return load ; } }; \u5b9e\u73b0 Monitor \u7c7b class Monitor { public : Monitor ( LoadStrategy * load_strategy , MemoryStrategy * memory_strategy , LatencyStrategy * latency_strategy , Display * display ); void GetLoad (); void GetTotalMemory (); void GetUsedMemory (); void GetNetworkLatency (); void Show (); private : LoadStraegy * load_strategy_ ; MemoryStrategy * memory_strategy_ ; LatencyStrategy * latency_strategy_ ; float load , latency ; long total_memory , used_memory ; Display * display_ ; }; Monitor :: Monitor ( LoadStrategy * load_strategy , MemoryStrategy * memory_strategy , LatencyStrategy * latency_strategy , Display * display ) : load_strategy_ ( load_strategy ), memory_strategy_ ( memory_strategy ), latency_strategy_ ( latency_strategy ), display_ ( display ), load ( 0.0 ), latency ( 0.0 ), total_memory ( 0 ), used_memory ( 0 ) {} void Monitor :: Show () { display -> Show ( load , total_memory , used_memory , latency ); } \u4e3b\u51fd\u6570\u5b9e\u73b0 int main ( int argc , char * argv []) { GangliaLoadStrategy load_strategy ; WinMemoryStrategy memory_strategy ; PingLatencyStrategy latency_strategy ; WindowDisplay display ; Monitor monitor ( & load_strategy , & memory_strategy , & latency_strategy , & display ); while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLatency (); monitor . Show (); sleep ( 1000 ); } } \u8fd9\u6837\u7684\u5b9e\u73b0\u8fd8\u5177\u5907\u8fd0\u884c\u671f\u7684 \u7075\u6d3b\u6027 \uff0c\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684\u7b56\u7565\u7c7b\u66ff\u6362\u539f\u59cb\u7684\u7b56\u7565\u7c7b\u3002 class Monitor { public : // ,,, void SetLoadStrategy ( LoadStrategy * load_strategy ); void SetMemoryStrategy ( MemoryStrategy * memory_strategy ); void SetLatencyStrategy ( LoadStrategy * latency_strategy ); }; int main ( int argc , char * argv []) { //... LoadStrategyImpl2 new_load_strategy ; monitor . SetLoadStrategy ( & new_load_strategy ); monitor . GetLoad (); //... } \u59d4\u6258\u4e0e\u63a5\u53e3\u7684\u8fdb\u4e00\u6b65\u5206\u89e3 \u63a5\u7740\u8d1f\u8f7d\u76d1\u89c6\u5668\u7684\u8bbe\u8ba1\uff0c\u63a5\u4e0b\u6765\u5b9e\u73b0\u7ed3\u679c\u663e\u793a\u90e8\u5206 \u56de\u987e\u4e4b\u524d\u8bbe\u8ba1\u4e2d\u7559\u4e0b\u7684 Monitor::Show() \u63a5\u53e3 class Monitor { public : //... void Show (); protected : float load , latency ; long total_memory , used_memory ; Display * display_ ; }; void Monitor :: Show () { display_ -> Show ( load , total_memory , used_memory , latency ); } \u8fd9\u91cc Monitor::Show \u8c03\u7528\u7684\u662f Display display_ \u8fd9\u4e2a\u6210\u5458\u7684 Show \u65b9\u6cd5\uff0c\u800c Display::Show \u53c8\u6839\u636e\u73af\u5883\u8c03\u7528\u76f8\u5e94\u5b50\u7c7b\u7684 Show \u65b9\u6cd5\u3002 Monitor \u6709\u4e00\u4e2a\u201c\u663e\u793a\u201d\u7684\u4efb\u52a1\uff0c\u4f46\u5b83\u672c\u8eab\u6ca1\u6709\u5b9e\u73b0\u800c\u662f\u4ea4\u7ed9 Display display_ \u8fd9\u4e2a\u6210\u5458\u5b9e\u73b0\u3002\u8fd9\u662f\u4e00\u79cd \u59d4\u6258 \u6a21\u5f0f Delegation, Wrapper, Helper \u4e00\u822c\u90fd\u6307\u7684\u662f \u59d4\u6258 \u6a21\u5f0f \u6df1\u5165 Display \u201c\u663e\u793a\u201d\u5206\u6210\u4e24\u7c7b\uff1aConsole\u548cGUI\uff0cGUI\u66f4\u52a0\u7f8e\u89c2\u3001\u5e38\u7528\u3002 GUI\u6709\u591a\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\uff08Windows, X-Win, QT, ...\uff09\uff0c\u6765\u5b9e\u73b0\u591a\u4e2a\u4e0d\u540c\u7684 GUIDisplay \u540c\u65f6\uff0c\u6211\u4eec\u53c8\u5e0c\u671b\u663e\u793a\u662f\u591a\u6837\u5316\u7684\uff0c\u5982\u4e0d\u540c\u7684\u989c\u8272\u3001\u5f62\u72b6\uff1b\u67f1\u72b6\u56fe\u3001\u6298\u7ebf\u56fe\u3001\u997c\u56fe \u95ee\u9898 \u5bf9\u4e8e GUIDisplay \u7684\u5404\u4e2a\u5b50\u7c7b\uff0c\u5927\u91cf\u91cd\u590d\u4ee3\u7801\uff08\u4ee3\u7801\u5197\u4f59\uff0c\u7ef4\u62a4\u96be\u5ea6\u52a0\u5927\uff09 \u5206\u6790\uff1a\u53d8\u4e0e\u4e0d\u53d8 \u4e0d\u53d8 \u53d8 \u4efb\u4f55\u7ed8\u56fe\u57fa\u7840\u90fd\u662f\u753b\u70b9\uff0c\u753b\u6cd5\u4e00\u6837 \u4e0d\u540cGUI\uff0c\u5b9e\u73b0\u753b\u70b9\u7684API\u63a5\u53e3\u4e0d\u540c \u628a\u53d8\u4e0e\u4e0d\u53d8\u5206\u79bb\uff0c\u62bd\u8c61\u51fa\u65b0\u7684\u63a5\u53e3 \u5206\u79bb\u65b0\u7684\u63a5\u53e3 \u5c06 GUIDisplay \u4e2d\u7684\u51fd\u6570\u5206\u6210\u4e09\u7c7b \u5176\u4e2d \u7b2c\u4e00\u7c7b\u662f\u5176\u5bf9\u5916\u66b4\u9732\u7684\u63a5\u53e3 \u7b2c\u4e8c\u7c7b\u662f\u9700\u8981\u8c03\u7528\u7279\u5b9a\u5e73\u53f0API\u7684\u51fd\u6570 \u7b2c\u4e09\u7c7b\u51fd\u6570\u57fa\u4e8e\u7b2c\u4e8c\u7c7b\u51fd\u6570\u5b9e\u73b0 \u4e8e\u662f\u53ef\u4ee5\u8bb2\u4e09\u7c7b\u51fd\u6570\u5206\u79bb\u5f00\u6765\uff0c\u5728\u4e0d\u540c\u5c42\u9762\u4f53\u73b0\u5176\u53ef\u53d8\u6027\u3002 \u5206\u79bb\u4e0d\u540c\u5c42\u9762\u7684\u53ef\u53d8\u6027 \u201c\u663e\u793a\u201d\u90e8\u5206\u5305\u542b\u4e24\u4e2a\u5c42\u9762\u7684\u53d8\u5316\uff1a \u8c03\u7528\u4e0d\u540c\u5e73\u53f0API\u5b9e\u73b0\u76f8\u540c\u7684\u57fa\u7840\u529f\u80fd \u7ed3\u679c\u91c7\u7528\u547d\u4ee4\u884c\u663e\u793a\u8fd8\u662fGUI\u663e\u793a Bridge\u6a21\u5f0f - \u628a\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u662f\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002 \u5b9e\u73b0 class Display { public : virtual void Show ( float load , long total_memory , long used_memory , float latency ) = 0 ; virtual ~ Display () {} }; class ConsoleDisplay : public Display { public : void Show ( float load , long total_memory , long used_memory , float latency ) { cout << \"load = \" << load << endl ; cout << \"total_memory = \" << total_memory << endl ; cout << \"used_memory = \" << used_memory << endl ; cout << \"latency = \" << latency << endl ; } }; \u65b0\u7684\u63a5\u53e3 class GUIDisplay : public Display { public : virtual void Show ( float load , long total_memory , long used_memory , float latency ) = 0 ; GUIDisplay ( GUIDisplayImpl * impl ) : impl_ ( impl ) {} ~ GUIDisplay (); GUIDisplay ( const GUIDisplay & d ); GUIDisplay & operator = ( const GUIDisplay & d ); protected : void DrawLine ( int x1 , int y1 , int x2 , int y2 ); void DrawRect ( int x1 , int y1 , int x2 , int y2 ); //... private : void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); GUIDisplayImpl * impl_ ; }; \u5c06 GUIDisplay \u7c7b\u7684 DrawPoint \u548c DrawText \u59d4\u6258 \u7ed9 GUIDisplayImpl \u7c7b\uff08\u5c06\u57fa\u7840\u7c7b\u4e2d\u4e0e\u73af\u5883\u76f8\u5173\u7684\u529f\u80fd\u4ea4\u7ed9\u548c\u73af\u5883\u76f8\u5173\u7684\u7c7b\u53bb\u5b9e\u73b0\uff09\u3002 GUIDisplayImpl \u7684\u5b9e\u73b0\uff1a class GUIDisplayImpl { public : GUIDisplayImpl () : use ( 1 ) {} // \u6ce8\u610f\u8fd9\u91cc\u5f15\u7528\u8ba1\u6570\u7684\u4f7f\u7528 virtual void DrawPoint ( int x , int y ) = 0 ; virtual void DrawText ( int x , int y , string text ) = 0 ; private : int use ; friend class GUIDisplay ; }; void GUIDisplay :: DrawPoint ( int x , int y ) { impl_ -> DrawPoint ( x , y ); } void GUIDisplay :: DrawText ( int x , int y , string text ) { impl_ -> DrawText ( x , y , text ); } \u6ce8\u610f\u8fd9\u91cc\u5c06 GUIDisplay \u58f0\u660e\u6210 GUIDisplayImpl \u7684\u53cb\u5143\u662f \u5f15\u7528\u8ba1\u6570 \u7684\u9700\u8981\u3002 \u5b9e\u73b0\u65b0\u7684\u63a5\u53e3 WindowsDisplayImpl class WindowsDisplayImpl : public GUIDisplayImpl { public : WindowsDisplayImpl () { /* init it here. */ } ~ WindowsDisplayImpl (); void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); }; void WindowsDisplayImpl :: DrawPoint ( int x , int y ) { SetPixel ( hdc , x , y , forColor ); } void WindowsDisplayImpl :: DrawText ( int x , int y , string text ) { TextOut ( hdc , x , y , text . c_str (), text . size ()); } XWinDisplayImpl class XWinDisplayImpl : public GUIDisplayImpl { public : XWinDisplayImpl () { /* init it here. */ } ~ XWinDisplayImpl () {} void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); }; void XWinDisplayImpl :: DrawPoint ( int x , int y ) { XDrawPoint ( display , win , gc , x , y ); } void XWinDisplayImpl :: DrawText ( int x , int y , string text ) { XDrawString ( display , win , gc , x , y , text , text . size ()); } \u4e0d\u53d8\u7684\u90e8\u5206 \u5bf9\u4e8e\u90a3\u4e9b\u57fa\u4e8e DrawPoint \u548c DrawText \u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u5728 GUIDisplay \u4e2d\u76f4\u63a5\u5b9e\u73b0\u5373\u53ef\u3002 void GUIDisplay :: DrawLine ( int x1 , int y1 , int x2 , int y2 ) { for ( int x = x1 ; x < x2 ; x ++ ) { int y = x1 + ( x - x1 ) * ( y2 - y1 ) / ( x2 - x1 ); DrawPoint ( x , y ); } } void GUIDisplay :: DrawRect ( int x1 , int y1 , int x2 , int y2 ) { DrawLine ( x1 , y1 , x2 , y2 ); DrawLine ( x2 , y1 , x2 , y2 ); DrawLine ( x2 , y2 , x1 , y2 ); DrawLine ( x1 , y2 , x1 , y1 ); } \u53e6\u4e00\u4e2a\u5c42\u9762\u7684\u53ef\u53d8\u90e8\u5206 \u5bf9\u4e8e Show \u51fd\u6570\uff0c\u5176\u591a\u6837\u6027\u4f53\u73b0\u5728\u663e\u793a\u6570\u636e\u7684\u65b9\u5f0f\uff08\u6298\u7ebf\u56fe\u6216\u67f1\u72b6\u56fe\u6216\u4e8c\u8005\u7684\u7ec4\u5408\uff09 \u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7559\u7ed9 GUIDisplay \u5b9a\u4e49\u865a\u51fd\u6570\u7684\u5b9e\u73b0 \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0 GUIDisplay \u2014\u2014 \u753b\u4e00\u4e2a\u65b9\u6846\u663e\u793aCPU\u8d1f\u8f7d\uff1a class Layout1 : public GUIDisplay { public : Layout1 ( GUIDisplayImpl * impl ) : GUIDisplay ( impl ) {} void Show ( float load , long total_memory , long used_memory , float latency ); }; void Layout1 :: Show ( float load , long tota_memory , long used_memory , float latency ) { DrawRect ( 10 , 10 , 300 , 20 ); DrawText ( 10 , 10 , float2str ( load )); //...... } \u5b9e\u73b0\u4e0d\u540c\u7684 Layout \u2014\u2014 \u753b\u4e00\u4e2a\u65b9\u6846\uff0c\u5176\u4e2d\u753b\u4e00\u4e2a\u6a2a\u5411\u67f1\u72b6\u56fe\uff1a class Layout2 : public GUIDisplay { public : Layout2 ( GUIDisplayImpl * impl ) : GUIDisplay ( impl ) {} void Show ( float load , long total_momery , long used_momery , float latency ); }; void Layout2 :: Show ( float load , long total_memory , long used_memory , float latency ) { DrawRect ( 10 , 10 , 30 , 300 ); int miny = load * 290 / 100 + 10 ; for ( int y = 300 ; y > miny ; y -= 3 ) DrawLine ( 10 , y , 30 , y ); //... } \u603b\u7ed3\uff1a \u4f7f\u7528\u4e0d\u540c\u7684 Layout \u6307\u9488\u53ef\u4ee5\u663e\u793a\u4e0d\u540c\u7684\u6c47\u62a5\u98ce\u683c\uff1b \u5f53\u9700\u8981\u6539\u53d8\u73af\u5883\u7684\u65f6\u5019\uff0c\u53ea\u9700\u6539\u53d8 GUIDisplayImpl \u2014\u2014 Bridge\u6a21\u5f0f \uff0c\u5373\u53ef\u9002\u5e94\u4e0d\u7528\u7684\u7cfb\u7edf\u73af\u5883\u3002","title":"\u7b97\u6cd5\u62c6\u5206 - \u5206\u79bb\u6b65\u9aa4"},{"location":"design_pattern/split_steps/#-","text":"\u9762\u5411\u5bf9\u8c61\u7684\u63a5\u53e3\u8bbe\u8ba1\u8981\u65f6\u523b\u9075\u5faa\u529f\u80fd\u7684 \u5355\u4e00\u6027 \u539f\u5219\u3002","title":"\u7b97\u6cd5\u6a2a\u5411\u62c6\u5206 - \u5206\u79bb\u6b65\u9aa4"},{"location":"design_pattern/split_steps/#_1","text":"","title":"\u8bbe\u8ba1\u4e00\u4e2a\u8d1f\u8f7d\u76d1\u89c6\u5668"},{"location":"design_pattern/split_steps/#_2","text":"\u76d1\u89c6\u8ba1\u7b97\u8282\u70b9\u7684\u6577\u5728\u72b6\u6001\uff08\u5982CPU\u5360\u7528\u7387\u3001\u5b58\u50a8\u5668\u5360\u7528\u7387\u3001\u5230\u67d0\u4e2a\u7279\u5b9a\u8282\u70b9\u7684\u7f51\u7edc\u5ef6\u8fdf\uff09\u3002 \u4ee5CPU\u5360\u7528\u7387\u7684\u76d1\u89c6\u4e3a\u4f8b\uff0c\u4e0d\u540c\u6761\u4ef6\u4e0b\uff08\u4f8b\u5982\u4e0d\u540c\u79cd\u7c7b\u4e0d\u540c\u7248\u672c\u7684OS\uff09\u83b7\u5f97CPU\u5360\u7528\u7387\u7684\u65b9\u6cd5\u4e0d\u540c\u3002 \u600e\u6837\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u5bf9\u8fd9\u4e9b\u4e0d\u540c\u6761\u4ef6\u7684\u9002\u5e94\u5462\uff1f","title":"\u8d1f\u8f7d\u76d1\u89c6\u5668"},{"location":"design_pattern/split_steps/#_3","text":"\u4e3b\u7a0b\u5e8f\uff0cMonitor\u7684\u4f7f\u7528\u65b9\u6cd5 int main ( int argc , char * argv []) { WindowsDisplay display ; Monitor monitor ( & display ); while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLantency (); monitor . show (); sleep ( 1000 ); } } switch case - \u5bf9\u4e8e\u4e0d\u540c\u7684\u6761\u4ef6\u4e0b\u5b9e\u73b0 Monitor::GetLoad \u51fd\u6570 enum MonitorType { Win32 , Win64 , Ganglia }; MonitorType type = Ganglia ; float Monitor :: GetLoad () { switch ( type ) { case Win32 : // Get system load via Win32 APIs return load ; case Win64 : // Get system load via Win64 APIs return load ; case Ganglia : // Get system load via Ganglia interface return load ; } } \u5f0a\u7aef\uff1a\u6bcf\u589e\u52a0\u4e00\u79cd\u65b0\u7684\u7cfb\u7edf\u73af\u5883\uff0c\u9700\u8981\u5bf9 Monitor::GetLoad \u51fd\u6570\u505a\u4fee\u6539\u3002 \u6a21\u677f\u65b9\u6cd5 class Monitor { public : virtual void GetLoad () = 0 ; virtual void GetTotalMemory () = 0 ; virtual void GetUsedMemory () = 0 ; virtual void GetNetworkLatency () = 0 ; Monitor ( Display * display ); virtual ~ Monitor (); void Show (); protected : float load , latency ; long total_memory , used_memory ; Display * m_display ; }; void Monitor :: Show () { m_display -> Show ( load , total_memory , used_memory , latency ); }","title":"\u81ea\u9876\u5411\u4e0b"},{"location":"design_pattern/split_steps/#_4","text":"\u5982\u679c\u51e0\u4e2a\u51fd\u6570\u63a5\u53e3\u7684\u5b9e\u73b0\u76f8\u4e92\u72ec\u7acb\uff0c\u5206\u522b\u6709 N, M, K N, M, K \u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u90a3\u4e48\uff0c\u5b9e\u73b0\u5b50\u7c7b\u7684\u4e2a\u6570\u5c06\u662f N \\times M \\times K N \\times M \\times K \u79cd\u3002 \u4f8b\u5982\u5982\u679c\u5b9e\u73b0 GetLoad() \u7684\u65b9\u5f0f\u6709 4 4 \u79cd\uff0c\u5b9e\u73b0 GetTotalMemory() \u7684\u65b9\u5f0f\u6709 3 3 \u79cd\uff0c\u90a3\u4e48\u5b50\u7c7b\u7684\u6570\u91cf\u53ef\u4ee5\u6709 12 12 \u79cd\u3002\u5f53\u4ee3\u7801\u9700\u8981\u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u5bf9\u91cd\u590d\u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u8d39\u65f6\u8d39\u529b\u3002","title":"\u8fd9\u79cd\u5b9e\u73b0\u7684\u95ee\u9898"},{"location":"design_pattern/split_steps/#_5","text":"","title":"\u63a5\u53e3\u5206\u79bb\u4e0e\u5355\u4e00\u8d23\u4efb\u539f\u5219"},{"location":"design_pattern/split_steps/#_6","text":"\u5bf9\u4e8e\u4e0a\u8ff0\u5b9e\u73b0\uff0c\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u5c42\u9762\u7684\u53d8\u5316\uff0c\u5e94\u8be5\u6709\u6240\u533a\u5206 \u5728\u5b9e\u73b0\u5c42\u9762\u4e0a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u529f\u80fd\uff0c\u5b58\u5728\u591a\u79cd\u5b9e\u73b0\u65b9\u6cd5 \u76f8\u5bf9\u4e8e\u57fa\u7c7b\u662f\u53ef\u53d8\u7684\uff0c\u6bcf\u79cd\u53d8\u5316\u5bf9\u5e94\u4e00\u4e2a\u5b50\u7c7b \u8fd9\u79cd\u53d8\u5316\u8868\u73b0\u5728\u7f16\u8bd1\u671f\uff0c\u662f\u4e00\u79cd\u76f8\u5bf9\u9759\u6001\u7684\u53ef\u53d8 \u5728\u7ec4\u7ec7\u5c42\u9762\u4e0a\uff1a\u5927\u201c\u7c7b\u201d\u7684\u529f\u80fd\u7531\u4e00\u7cfb\u5217\u5b50\u529f\u80fd\u6784\u6210 \u5b50\u529f\u80fd\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u5e94\u5f53\u5c06\u8fd9\u4e9b\u5b50\u529f\u80fd\u62c6\u5206\u5230\u4e0d\u540c\u7684\u201c\u5c0f\u201d\u7c7b \u7ec4\u5408\u662f\u81ea\u7531\u7684\u3001\u52a8\u6001\u7684\u3001\u53ef\u53d8\u7684\u3001\u901a\u8fc7\u5b9e\u73b0\u5b50\u529f\u80fd\u7684\u201c\u5c0f\u201d\u7c7b\u5bf9\u8c61\u7684\u7ec4\u5408\u6765\u5b8c\u6210 \u8fd9\u79cd\u53d8\u5316\u8868\u73b0\u5728\u8fd0\u884c\u671f\uff0c\u662f\u4e00\u79cd\u76f8\u5bf9\u52a8\u6001\u7684\u53ef\u53d8 \u9694\u79bb\u4e0d\u540c\u5c42\u9762\u7684\u201c\u53d8\u201d \u9759\u6001\u7684\u53ef\u53d8\u7528 \u7ee7\u627f \u52a8\u6001\u7684\u53ef\u53d8\u7528 \u7ec4\u5408","title":"\u4e24\u79cd\u4e0d\u540c\u5c42\u6b21\u7684\u53d8\u5316"},{"location":"design_pattern/split_steps/#_7","text":"\u5355\u4e00\u8d23\u4efb\u539f\u5219 \u7c7b\u529f\u80fd\u5e94\u8be5\u662f \u5185\u805a \u7684\uff0c\u4e00\u4e2a\u7c7b\u53ea\u627f\u62c5\u4e00\u9879\u529f\u80fd \u8868\u73b0\u4e3a\uff1a\u4fee\u6539/\u6d3e\u751f\u4e00\u4e2a\u7c7b\u53ea\u5e94\u8be5\u6709\u4e00\u4e2a\u7406\u7531\uff0c\u53ea\u80fd\u7531\u5355\u4e2a\u53d8\u5316\u56e0\u7d20\u5f15\u8d77 \u5c06\u591a\u4e2a\u4e0d\u540c\u529f\u80fd\u4ea4\u7531\u540c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\uff0c\u8fdd\u53cd\u4e86\u5355\u4e00\u8d23\u4efb\u539f\u5219 \u5f53\u4e00\u4e2a\u529f\u80fd\u9700\u8981\u53d8\u5316\u65f6\uff0c\u4e0d\u5f97\u4e0d\u4fee\u6539\u6216\u8005\u6d3e\u751f\u65b0\u7684\u5b9e\u73b0\u7c7b","title":"\u5355\u4e00\u8d23\u4efb"},{"location":"design_pattern/split_steps/#_8","text":"\u5265\u79bb\u51fa\u65b0\u7684\u63a5\u53e3 \u6bcf\u4e2a\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u7684\u5b9e\u73b0\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u63a5\u53e3\uff08\u79f0\u4e3a \u7b56\u7565 \uff09 \u4e0e\u63a5\u53e3\u4e0d\u540c\u7684\u5b9e\u73b0\u7ec4\u6210\u4e00\u4e2a \u7b56\u7565\u7c7b\u7684\u4f53\u7cfb \u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f \u7528\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u63a5\u53e3\u4e4b\u95f4\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\u529f\u80fd\uff08\u7b97\u6cd5\uff09\u4e4b\u95f4\u7684\u7ec4\u5408 \u5982\u6b64\u4e00\u6765\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u76f8\u4e92\u72ec\u7acb\u7684\u51fd\u6570\u63a5\u53e3\u5206\u522b\u6709 N, M, K N, M, K \u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u9700\u8981\u5b9e\u73b0\u7684\u7c7b\u7684\u6570\u91cf\u4ece N \\times M \\times K N \\times M \\times K \u53d8\u4e3a N + M + K N + M + K \u4e2a\u201c\u5c0f\u201d\u7c7b\u548c 1 1 \u4e2a\u5927\u7c7b\u3002","title":"\u5206\u79bb\u4e24\u79cd\u5c42\u6b21"},{"location":"design_pattern/split_steps/#_9","text":"\u5265\u79bb\u65b0\u7684\u63a5\u53e3 \u7531\u4e09\u4e2a\u201c\u7b56\u7565\u201d\u63a5\u53e3\u5206\u522b\u5b9a\u4e49\u4e0d\u540c\u7684\u529f\u80fd \u6bcf\u4e2a\u7b56\u7565\u63a5\u53e3\u6709\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u5b9e\u73b0 \u7528\u7ec4\u5408\u66ff\u4ee3\u7ee7\u627f Monitor \u7c7b\u4e2d\u5821\u6751\u4e00\u7ec4\u201c\u7b56\u7565\u201d\u63a5\u53e3\u7c7b\u7684\u5b9e\u4f8b \u8fd9\u4e9b\u5b9e\u4f8b\u53ef\u4ee5\u81ea\u7531\u7ec4\u5408\u548c\u52a8\u6001\u66ff\u6362 \u5b9e\u73b0 LoadStrategy \u201c\u5c0f\u7c7b\u201d class LoadStrategy { public : virtual float GetLoad () = 0 ; }; class LoadStrategyImpl1 : public LoadStrategy { public : float GetLoad () { // Get load here... return load ; } }; class LoadStrategyImpl2 : public LoadStrategy { public : float GetLoad () { // Get load here... return load ; } }; \u5b9e\u73b0 Monitor \u7c7b class Monitor { public : Monitor ( LoadStrategy * load_strategy , MemoryStrategy * memory_strategy , LatencyStrategy * latency_strategy , Display * display ); void GetLoad (); void GetTotalMemory (); void GetUsedMemory (); void GetNetworkLatency (); void Show (); private : LoadStraegy * load_strategy_ ; MemoryStrategy * memory_strategy_ ; LatencyStrategy * latency_strategy_ ; float load , latency ; long total_memory , used_memory ; Display * display_ ; }; Monitor :: Monitor ( LoadStrategy * load_strategy , MemoryStrategy * memory_strategy , LatencyStrategy * latency_strategy , Display * display ) : load_strategy_ ( load_strategy ), memory_strategy_ ( memory_strategy ), latency_strategy_ ( latency_strategy ), display_ ( display ), load ( 0.0 ), latency ( 0.0 ), total_memory ( 0 ), used_memory ( 0 ) {} void Monitor :: Show () { display -> Show ( load , total_memory , used_memory , latency ); } \u4e3b\u51fd\u6570\u5b9e\u73b0 int main ( int argc , char * argv []) { GangliaLoadStrategy load_strategy ; WinMemoryStrategy memory_strategy ; PingLatencyStrategy latency_strategy ; WindowDisplay display ; Monitor monitor ( & load_strategy , & memory_strategy , & latency_strategy , & display ); while ( running ()) { monitor . GetLoad (); monitor . GetTotalMemory (); monitor . GetUsedMemory (); monitor . GetNetworkLatency (); monitor . Show (); sleep ( 1000 ); } } \u8fd9\u6837\u7684\u5b9e\u73b0\u8fd8\u5177\u5907\u8fd0\u884c\u671f\u7684 \u7075\u6d3b\u6027 \uff0c\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684\u7b56\u7565\u7c7b\u66ff\u6362\u539f\u59cb\u7684\u7b56\u7565\u7c7b\u3002 class Monitor { public : // ,,, void SetLoadStrategy ( LoadStrategy * load_strategy ); void SetMemoryStrategy ( MemoryStrategy * memory_strategy ); void SetLatencyStrategy ( LoadStrategy * latency_strategy ); }; int main ( int argc , char * argv []) { //... LoadStrategyImpl2 new_load_strategy ; monitor . SetLoadStrategy ( & new_load_strategy ); monitor . GetLoad (); //... }","title":"\u91cd\u65b0\u770b\u8d1f\u8d23\u76d1\u89c6\u5176\u7684\u8bbe\u8ba1"},{"location":"design_pattern/split_steps/#_10","text":"\u63a5\u7740\u8d1f\u8f7d\u76d1\u89c6\u5668\u7684\u8bbe\u8ba1\uff0c\u63a5\u4e0b\u6765\u5b9e\u73b0\u7ed3\u679c\u663e\u793a\u90e8\u5206 \u56de\u987e\u4e4b\u524d\u8bbe\u8ba1\u4e2d\u7559\u4e0b\u7684 Monitor::Show() \u63a5\u53e3 class Monitor { public : //... void Show (); protected : float load , latency ; long total_memory , used_memory ; Display * display_ ; }; void Monitor :: Show () { display_ -> Show ( load , total_memory , used_memory , latency ); } \u8fd9\u91cc Monitor::Show \u8c03\u7528\u7684\u662f Display display_ \u8fd9\u4e2a\u6210\u5458\u7684 Show \u65b9\u6cd5\uff0c\u800c Display::Show \u53c8\u6839\u636e\u73af\u5883\u8c03\u7528\u76f8\u5e94\u5b50\u7c7b\u7684 Show \u65b9\u6cd5\u3002 Monitor \u6709\u4e00\u4e2a\u201c\u663e\u793a\u201d\u7684\u4efb\u52a1\uff0c\u4f46\u5b83\u672c\u8eab\u6ca1\u6709\u5b9e\u73b0\u800c\u662f\u4ea4\u7ed9 Display display_ \u8fd9\u4e2a\u6210\u5458\u5b9e\u73b0\u3002\u8fd9\u662f\u4e00\u79cd \u59d4\u6258 \u6a21\u5f0f Delegation, Wrapper, Helper \u4e00\u822c\u90fd\u6307\u7684\u662f \u59d4\u6258 \u6a21\u5f0f","title":"\u59d4\u6258\u4e0e\u63a5\u53e3\u7684\u8fdb\u4e00\u6b65\u5206\u89e3"},{"location":"design_pattern/split_steps/#display","text":"\u201c\u663e\u793a\u201d\u5206\u6210\u4e24\u7c7b\uff1aConsole\u548cGUI\uff0cGUI\u66f4\u52a0\u7f8e\u89c2\u3001\u5e38\u7528\u3002 GUI\u6709\u591a\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\uff08Windows, X-Win, QT, ...\uff09\uff0c\u6765\u5b9e\u73b0\u591a\u4e2a\u4e0d\u540c\u7684 GUIDisplay \u540c\u65f6\uff0c\u6211\u4eec\u53c8\u5e0c\u671b\u663e\u793a\u662f\u591a\u6837\u5316\u7684\uff0c\u5982\u4e0d\u540c\u7684\u989c\u8272\u3001\u5f62\u72b6\uff1b\u67f1\u72b6\u56fe\u3001\u6298\u7ebf\u56fe\u3001\u997c\u56fe","title":"\u6df1\u5165Display"},{"location":"design_pattern/split_steps/#_11","text":"\u5bf9\u4e8e GUIDisplay \u7684\u5404\u4e2a\u5b50\u7c7b\uff0c\u5927\u91cf\u91cd\u590d\u4ee3\u7801\uff08\u4ee3\u7801\u5197\u4f59\uff0c\u7ef4\u62a4\u96be\u5ea6\u52a0\u5927\uff09 \u5206\u6790\uff1a\u53d8\u4e0e\u4e0d\u53d8 \u4e0d\u53d8 \u53d8 \u4efb\u4f55\u7ed8\u56fe\u57fa\u7840\u90fd\u662f\u753b\u70b9\uff0c\u753b\u6cd5\u4e00\u6837 \u4e0d\u540cGUI\uff0c\u5b9e\u73b0\u753b\u70b9\u7684API\u63a5\u53e3\u4e0d\u540c \u628a\u53d8\u4e0e\u4e0d\u53d8\u5206\u79bb\uff0c\u62bd\u8c61\u51fa\u65b0\u7684\u63a5\u53e3","title":"\u95ee\u9898"},{"location":"design_pattern/split_steps/#_12","text":"\u5c06 GUIDisplay \u4e2d\u7684\u51fd\u6570\u5206\u6210\u4e09\u7c7b \u5176\u4e2d \u7b2c\u4e00\u7c7b\u662f\u5176\u5bf9\u5916\u66b4\u9732\u7684\u63a5\u53e3 \u7b2c\u4e8c\u7c7b\u662f\u9700\u8981\u8c03\u7528\u7279\u5b9a\u5e73\u53f0API\u7684\u51fd\u6570 \u7b2c\u4e09\u7c7b\u51fd\u6570\u57fa\u4e8e\u7b2c\u4e8c\u7c7b\u51fd\u6570\u5b9e\u73b0 \u4e8e\u662f\u53ef\u4ee5\u8bb2\u4e09\u7c7b\u51fd\u6570\u5206\u79bb\u5f00\u6765\uff0c\u5728\u4e0d\u540c\u5c42\u9762\u4f53\u73b0\u5176\u53ef\u53d8\u6027\u3002","title":"\u5206\u79bb\u65b0\u7684\u63a5\u53e3"},{"location":"design_pattern/split_steps/#_13","text":"\u201c\u663e\u793a\u201d\u90e8\u5206\u5305\u542b\u4e24\u4e2a\u5c42\u9762\u7684\u53d8\u5316\uff1a \u8c03\u7528\u4e0d\u540c\u5e73\u53f0API\u5b9e\u73b0\u76f8\u540c\u7684\u57fa\u7840\u529f\u80fd \u7ed3\u679c\u91c7\u7528\u547d\u4ee4\u884c\u663e\u793a\u8fd8\u662fGUI\u663e\u793a Bridge\u6a21\u5f0f - \u628a\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u662f\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002 \u5b9e\u73b0 class Display { public : virtual void Show ( float load , long total_memory , long used_memory , float latency ) = 0 ; virtual ~ Display () {} }; class ConsoleDisplay : public Display { public : void Show ( float load , long total_memory , long used_memory , float latency ) { cout << \"load = \" << load << endl ; cout << \"total_memory = \" << total_memory << endl ; cout << \"used_memory = \" << used_memory << endl ; cout << \"latency = \" << latency << endl ; } }; \u65b0\u7684\u63a5\u53e3 class GUIDisplay : public Display { public : virtual void Show ( float load , long total_memory , long used_memory , float latency ) = 0 ; GUIDisplay ( GUIDisplayImpl * impl ) : impl_ ( impl ) {} ~ GUIDisplay (); GUIDisplay ( const GUIDisplay & d ); GUIDisplay & operator = ( const GUIDisplay & d ); protected : void DrawLine ( int x1 , int y1 , int x2 , int y2 ); void DrawRect ( int x1 , int y1 , int x2 , int y2 ); //... private : void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); GUIDisplayImpl * impl_ ; }; \u5c06 GUIDisplay \u7c7b\u7684 DrawPoint \u548c DrawText \u59d4\u6258 \u7ed9 GUIDisplayImpl \u7c7b\uff08\u5c06\u57fa\u7840\u7c7b\u4e2d\u4e0e\u73af\u5883\u76f8\u5173\u7684\u529f\u80fd\u4ea4\u7ed9\u548c\u73af\u5883\u76f8\u5173\u7684\u7c7b\u53bb\u5b9e\u73b0\uff09\u3002 GUIDisplayImpl \u7684\u5b9e\u73b0\uff1a class GUIDisplayImpl { public : GUIDisplayImpl () : use ( 1 ) {} // \u6ce8\u610f\u8fd9\u91cc\u5f15\u7528\u8ba1\u6570\u7684\u4f7f\u7528 virtual void DrawPoint ( int x , int y ) = 0 ; virtual void DrawText ( int x , int y , string text ) = 0 ; private : int use ; friend class GUIDisplay ; }; void GUIDisplay :: DrawPoint ( int x , int y ) { impl_ -> DrawPoint ( x , y ); } void GUIDisplay :: DrawText ( int x , int y , string text ) { impl_ -> DrawText ( x , y , text ); } \u6ce8\u610f\u8fd9\u91cc\u5c06 GUIDisplay \u58f0\u660e\u6210 GUIDisplayImpl \u7684\u53cb\u5143\u662f \u5f15\u7528\u8ba1\u6570 \u7684\u9700\u8981\u3002 \u5b9e\u73b0\u65b0\u7684\u63a5\u53e3 WindowsDisplayImpl class WindowsDisplayImpl : public GUIDisplayImpl { public : WindowsDisplayImpl () { /* init it here. */ } ~ WindowsDisplayImpl (); void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); }; void WindowsDisplayImpl :: DrawPoint ( int x , int y ) { SetPixel ( hdc , x , y , forColor ); } void WindowsDisplayImpl :: DrawText ( int x , int y , string text ) { TextOut ( hdc , x , y , text . c_str (), text . size ()); } XWinDisplayImpl class XWinDisplayImpl : public GUIDisplayImpl { public : XWinDisplayImpl () { /* init it here. */ } ~ XWinDisplayImpl () {} void DrawPoint ( int x , int y ); void DrawText ( int x , int y , string text ); }; void XWinDisplayImpl :: DrawPoint ( int x , int y ) { XDrawPoint ( display , win , gc , x , y ); } void XWinDisplayImpl :: DrawText ( int x , int y , string text ) { XDrawString ( display , win , gc , x , y , text , text . size ()); }","title":"\u5206\u79bb\u4e0d\u540c\u5c42\u9762\u7684\u53ef\u53d8\u6027"},{"location":"design_pattern/split_steps/#_14","text":"\u5bf9\u4e8e\u90a3\u4e9b\u57fa\u4e8e DrawPoint \u548c DrawText \u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u5728 GUIDisplay \u4e2d\u76f4\u63a5\u5b9e\u73b0\u5373\u53ef\u3002 void GUIDisplay :: DrawLine ( int x1 , int y1 , int x2 , int y2 ) { for ( int x = x1 ; x < x2 ; x ++ ) { int y = x1 + ( x - x1 ) * ( y2 - y1 ) / ( x2 - x1 ); DrawPoint ( x , y ); } } void GUIDisplay :: DrawRect ( int x1 , int y1 , int x2 , int y2 ) { DrawLine ( x1 , y1 , x2 , y2 ); DrawLine ( x2 , y1 , x2 , y2 ); DrawLine ( x2 , y2 , x1 , y2 ); DrawLine ( x1 , y2 , x1 , y1 ); }","title":"\u4e0d\u53d8\u7684\u90e8\u5206"},{"location":"design_pattern/split_steps/#_15","text":"\u5bf9\u4e8e Show \u51fd\u6570\uff0c\u5176\u591a\u6837\u6027\u4f53\u73b0\u5728\u663e\u793a\u6570\u636e\u7684\u65b9\u5f0f\uff08\u6298\u7ebf\u56fe\u6216\u67f1\u72b6\u56fe\u6216\u4e8c\u8005\u7684\u7ec4\u5408\uff09 \u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7559\u7ed9 GUIDisplay \u5b9a\u4e49\u865a\u51fd\u6570\u7684\u5b9e\u73b0 \u4f7f\u7528\u7ee7\u627f\u5b9e\u73b0 GUIDisplay \u2014\u2014 \u753b\u4e00\u4e2a\u65b9\u6846\u663e\u793aCPU\u8d1f\u8f7d\uff1a class Layout1 : public GUIDisplay { public : Layout1 ( GUIDisplayImpl * impl ) : GUIDisplay ( impl ) {} void Show ( float load , long total_memory , long used_memory , float latency ); }; void Layout1 :: Show ( float load , long tota_memory , long used_memory , float latency ) { DrawRect ( 10 , 10 , 300 , 20 ); DrawText ( 10 , 10 , float2str ( load )); //...... } \u5b9e\u73b0\u4e0d\u540c\u7684 Layout \u2014\u2014 \u753b\u4e00\u4e2a\u65b9\u6846\uff0c\u5176\u4e2d\u753b\u4e00\u4e2a\u6a2a\u5411\u67f1\u72b6\u56fe\uff1a class Layout2 : public GUIDisplay { public : Layout2 ( GUIDisplayImpl * impl ) : GUIDisplay ( impl ) {} void Show ( float load , long total_momery , long used_momery , float latency ); }; void Layout2 :: Show ( float load , long total_memory , long used_memory , float latency ) { DrawRect ( 10 , 10 , 30 , 300 ); int miny = load * 290 / 100 + 10 ; for ( int y = 300 ; y > miny ; y -= 3 ) DrawLine ( 10 , y , 30 , y ); //... } \u603b\u7ed3\uff1a \u4f7f\u7528\u4e0d\u540c\u7684 Layout \u6307\u9488\u53ef\u4ee5\u663e\u793a\u4e0d\u540c\u7684\u6c47\u62a5\u98ce\u683c\uff1b \u5f53\u9700\u8981\u6539\u53d8\u73af\u5883\u7684\u65f6\u5019\uff0c\u53ea\u9700\u6539\u53d8 GUIDisplayImpl \u2014\u2014 Bridge\u6a21\u5f0f \uff0c\u5373\u53ef\u9002\u5e94\u4e0d\u7528\u7684\u7cfb\u7edf\u73af\u5883\u3002","title":"\u53e6\u4e00\u4e2a\u5c42\u9762\u7684\u53ef\u53d8\u90e8\u5206"},{"location":"economics/macro_economics/","text":"\u5b8f\u89c2\u7ecf\u6d4e\u5b66","title":"\u5b8f\u89c2\u7ecf\u6d4e\u5b66"},{"location":"economics/macro_economics/#_1","text":"","title":"\u5b8f\u89c2\u7ecf\u6d4e\u5b66"},{"location":"economics/micro_economics/","text":"\u5fae\u89c2\u7ecf\u6d4e\u5b66 \u7ecf\u6d4e\u5b66\u5341\u5927\u539f\u7406 \u4eba\u4eec\u5982\u4f55\u505a\u51fa\u51b3\u7b56 \u4eba\u4eec\u9762\u4e34\u6743\u8861\u53d6\u820d\u3002 \u67d0\u79cd\u4e1c\u897f\u7684\u6210\u672c\u662f\u4e3a\u4e86\u5f97\u5230\u4ed6\u6240\u653e\u5f03\u7684\u4e1c\u897f \u7406\u6027\u4eba\u8003\u8651\u8fb9\u9645\u91cf \u4eba\u4eec\u4f1a\u5bf9\u6fc0\u52b1\u505a\u51fa\u53cd\u5e94 \u4eba\u4eec\u5982\u4f55\u76f8\u4e92\u5f71\u54cd \u8d38\u6613\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u4eba\u7684\u72b6\u51b5\u90fd\u53d8\u5f97\u66f4\u597d \u5e02\u573a\u901a\u5e38\u662f\u7ec4\u7ec7\u7ecf\u6d4e\u4e92\u52a8\u7684\u4e00\u79cd\u597d\u65b9\u6cd5 \u653f\u5e9c\u6709\u65f6\u53ef\u4ee5\u6539\u5584\u5e02\u573a\u7ed3\u679c \u6574\u4f53\u7ecf\u6d4e\u5982\u4f55\u8fd0\u884c \u4e00\u56fd\u7684\u751f\u6d3b\u6c34\u5e73\u53d6\u51b3\u4e8e\u5b83\u751f\u4ea7\u7269\u54c1\u548c\u670d\u52a1\u7684\u80fd\u529b \u5f53\u653f\u5e9c\u53d1\u578b\u4e86\u8fc7\u591a\u8d27\u5e01\u65f6\uff0c\u7269\u4ef7\u4e0a\u5347 \u793e\u4f1a\u9762\u4e34\u901a\u8d27\u81a8\u80c0\u548c\u5931\u4e1a\u4e4b\u95f4\u7684\u77ed\u671f\u6743\u8861\u53d6\u820d \u7ecf\u6d4e\u5b66\u5bb6\u7684\u601d\u8003\u65b9\u5f0f \u4f5c\u4e3a\u79d1\u5b66\u5bb6 \u7ecf\u6d4e\u5b66\u5bb6\u4f7f\u7528\u201c\u89c2\u5bdf\u3001\u7406\u8bba\u548c\u8fdb\u4e00\u6b65\u89c2\u5bdf\u201d\u7684\u65b9\u6cd5\u7814\u7a76\u95ee\u9898 \u7ecf\u6d4e\u5b66\u4f7f\u7528\u7b80\u5316\u6a21\u578b\u6765\u63cf\u8ff0\u95ee\u9898\uff0c\u4e3e\u4f8b\u6765\u8bf4 \u7b2c\u4e00\u4e2a\u6a21\u578b\uff1a\u5faa\u73af\u6d41\u91cf\u56fe \u7b2c\u4e8c\u4e2a\u6a21\u578b\uff1a\u751f\u4ea7\u53ef\u80fd\u6027\u8fb9\u754c \u4f5c\u4e3a\u653f\u7b56\u987e\u95ee \u5b9e\u8bc1\u5206\u6790 \u63cf\u8ff0\u4e16\u754c\u662f\u4ec0\u4e48\u6837\u5b50 \u89c4\u8303\u5206\u6790 \u63cf\u8ff0\u4e16\u754c\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50 \u4f5c\u4e3a\u987e\u95ee\u7684\u7ecf\u6d4e\u5b66\u5bb6\u7ecf\u5e38\u4f1a\u7ed9\u51fa\u622a\u7136\u4e0d\u540c\u7684\u653f\u7b56\u5efa\u8bae\uff0c\u800c\u653f\u7b56\u5236\u5b9a\u8005\u4e5f\u7ecf\u5e38\u4e0d\u4e88\u91c7\u7eb3\u3002 \u79d1\u5b66\u5224\u65ad\u548c\u4e2a\u4eba\u4ef7\u503c\u89c2\u90fd\u4f1a\u5f71\u54cd\u7ecf\u6d4e\u5b66\u5bb6\u7ed9\u51fa\u7684\u89c2\u70b9\u548c\u610f\u89c1\u3002 \u76f8\u4e92\u4f9d\u5b58\u6027\u548c\u8d38\u6613\u7684\u597d\u5904","title":"\u5fae\u89c2\u7ecf\u6d4e\u5b66"},{"location":"economics/micro_economics/#_1","text":"","title":"\u5fae\u89c2\u7ecf\u6d4e\u5b66"},{"location":"economics/micro_economics/#_2","text":"","title":"\u7ecf\u6d4e\u5b66\u5341\u5927\u539f\u7406"},{"location":"economics/micro_economics/#_3","text":"\u4eba\u4eec\u9762\u4e34\u6743\u8861\u53d6\u820d\u3002 \u67d0\u79cd\u4e1c\u897f\u7684\u6210\u672c\u662f\u4e3a\u4e86\u5f97\u5230\u4ed6\u6240\u653e\u5f03\u7684\u4e1c\u897f \u7406\u6027\u4eba\u8003\u8651\u8fb9\u9645\u91cf \u4eba\u4eec\u4f1a\u5bf9\u6fc0\u52b1\u505a\u51fa\u53cd\u5e94","title":"\u4eba\u4eec\u5982\u4f55\u505a\u51fa\u51b3\u7b56"},{"location":"economics/micro_economics/#_4","text":"\u8d38\u6613\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u4eba\u7684\u72b6\u51b5\u90fd\u53d8\u5f97\u66f4\u597d \u5e02\u573a\u901a\u5e38\u662f\u7ec4\u7ec7\u7ecf\u6d4e\u4e92\u52a8\u7684\u4e00\u79cd\u597d\u65b9\u6cd5 \u653f\u5e9c\u6709\u65f6\u53ef\u4ee5\u6539\u5584\u5e02\u573a\u7ed3\u679c","title":"\u4eba\u4eec\u5982\u4f55\u76f8\u4e92\u5f71\u54cd"},{"location":"economics/micro_economics/#_5","text":"\u4e00\u56fd\u7684\u751f\u6d3b\u6c34\u5e73\u53d6\u51b3\u4e8e\u5b83\u751f\u4ea7\u7269\u54c1\u548c\u670d\u52a1\u7684\u80fd\u529b \u5f53\u653f\u5e9c\u53d1\u578b\u4e86\u8fc7\u591a\u8d27\u5e01\u65f6\uff0c\u7269\u4ef7\u4e0a\u5347 \u793e\u4f1a\u9762\u4e34\u901a\u8d27\u81a8\u80c0\u548c\u5931\u4e1a\u4e4b\u95f4\u7684\u77ed\u671f\u6743\u8861\u53d6\u820d","title":"\u6574\u4f53\u7ecf\u6d4e\u5982\u4f55\u8fd0\u884c"},{"location":"economics/micro_economics/#_6","text":"","title":"\u7ecf\u6d4e\u5b66\u5bb6\u7684\u601d\u8003\u65b9\u5f0f"},{"location":"economics/micro_economics/#_7","text":"\u7ecf\u6d4e\u5b66\u5bb6\u4f7f\u7528\u201c\u89c2\u5bdf\u3001\u7406\u8bba\u548c\u8fdb\u4e00\u6b65\u89c2\u5bdf\u201d\u7684\u65b9\u6cd5\u7814\u7a76\u95ee\u9898 \u7ecf\u6d4e\u5b66\u4f7f\u7528\u7b80\u5316\u6a21\u578b\u6765\u63cf\u8ff0\u95ee\u9898\uff0c\u4e3e\u4f8b\u6765\u8bf4 \u7b2c\u4e00\u4e2a\u6a21\u578b\uff1a\u5faa\u73af\u6d41\u91cf\u56fe \u7b2c\u4e8c\u4e2a\u6a21\u578b\uff1a\u751f\u4ea7\u53ef\u80fd\u6027\u8fb9\u754c","title":"\u4f5c\u4e3a\u79d1\u5b66\u5bb6"},{"location":"economics/micro_economics/#_8","text":"\u5b9e\u8bc1\u5206\u6790 \u63cf\u8ff0\u4e16\u754c\u662f\u4ec0\u4e48\u6837\u5b50 \u89c4\u8303\u5206\u6790 \u63cf\u8ff0\u4e16\u754c\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50 \u4f5c\u4e3a\u987e\u95ee\u7684\u7ecf\u6d4e\u5b66\u5bb6\u7ecf\u5e38\u4f1a\u7ed9\u51fa\u622a\u7136\u4e0d\u540c\u7684\u653f\u7b56\u5efa\u8bae\uff0c\u800c\u653f\u7b56\u5236\u5b9a\u8005\u4e5f\u7ecf\u5e38\u4e0d\u4e88\u91c7\u7eb3\u3002 \u79d1\u5b66\u5224\u65ad\u548c\u4e2a\u4eba\u4ef7\u503c\u89c2\u90fd\u4f1a\u5f71\u54cd\u7ecf\u6d4e\u5b66\u5bb6\u7ed9\u51fa\u7684\u89c2\u70b9\u548c\u610f\u89c1\u3002","title":"\u4f5c\u4e3a\u653f\u7b56\u987e\u95ee"},{"location":"economics/micro_economics/#_9","text":"","title":"\u76f8\u4e92\u4f9d\u5b58\u6027\u548c\u8d38\u6613\u7684\u597d\u5904"},{"location":"industry/fiscal/amazon/2019_annual_report/","text":"\u4e9a\u9a6c\u900a2019\u5e74\u62a5 \u5728\u7ebf\u6587\u6863 - \u4e9a\u9a6c\u900a2019\u5e74\u62a5","title":"\u4e9a\u9a6c\u900a"},{"location":"industry/fiscal/amazon/2019_annual_report/#2019","text":"\u5728\u7ebf\u6587\u6863 - \u4e9a\u9a6c\u900a2019\u5e74\u62a5","title":"\u4e9a\u9a6c\u900a2019\u5e74\u62a5"},{"location":"industry/fiscal/apple/2019_annual_report/","text":"\u82f9\u679c2019\u5e74\u62a5 \u5728\u7ebf\u6587\u6863 - \u82f9\u679c2019\u5e74\u62a5","title":"\u82f9\u679c"},{"location":"industry/fiscal/apple/2019_annual_report/#2019","text":"\u5728\u7ebf\u6587\u6863 - \u82f9\u679c2019\u5e74\u62a5","title":"\u82f9\u679c2019\u5e74\u62a5"},{"location":"industry/fiscal/google/2019_annual_report/","text":"\u8c37\u6b4c2019\u5e74\u62a5 \u5728\u7ebf\u6587\u6863 - \u8c37\u6b4c2019\u5e74\u62a5","title":"\u8c37\u6b4c"},{"location":"industry/fiscal/google/2019_annual_report/#2019","text":"\u5728\u7ebf\u6587\u6863 - \u8c37\u6b4c2019\u5e74\u62a5","title":"\u8c37\u6b4c2019\u5e74\u62a5"},{"location":"industry/fiscal/microsoft/2019_annual_report/","text":"\u5fae\u8f6f2019\u5e74\u62a5 \u5728\u7ebf\u6587\u6863 - \u5fae\u8f6f2019\u5e74\u62a5","title":"\u5fae\u8f6f"},{"location":"industry/fiscal/microsoft/2019_annual_report/#2019","text":"\u5728\u7ebf\u6587\u6863 - \u5fae\u8f6f2019\u5e74\u62a5","title":"\u5fae\u8f6f2019\u5e74\u62a5"},{"location":"industry/fiscal/tencent/2019_annual_report/","text":"\u817e\u8baf2019\u5e74\u62a5 \u5728\u7ebf\u6587\u6863 - \u817e\u8baf2019\u5e74\u62a5","title":"\u817e\u8baf"},{"location":"industry/fiscal/tencent/2019_annual_report/#2019","text":"\u5728\u7ebf\u6587\u6863 - \u817e\u8baf2019\u5e74\u62a5","title":"\u817e\u8baf2019\u5e74\u62a5"},{"location":"industry/reading/on_china/","text":"\u8bba\u4e2d\u56fd","title":"\u8bba\u4e2d\u56fd"},{"location":"industry/reading/on_china/#_1","text":"","title":"\u8bba\u4e2d\u56fd"},{"location":"industry/reading/reading_list/","text":"\u4e66\u5355 \u4ea8\u5229.\u57fa\u8f9b\u683c\uff0c\u300a\u8bba\u4e2d\u56fd\u300b \u585e\u7f2a\u5c14.\u4ea8\u5ef7\u987f\uff0c\u300a\u6587\u660e\u7684\u51b2\u7a81\u300b \u5c24\u74e6\u5c14.\u8d6b\u62c9\u5229\uff0c\u300a\u4eca\u65e5\u7b80\u53f2\u300b \u5e15\u62c9\u683c\u00b7\u5eb7\u7eb3\uff0c\u300a\u8d85\u7ea7\u7248\u56fe\u300b \u5e03\u83b1\u6069\u00b7\u963f\u745f\uff0c\u300a\u590d\u6742\u7ecf\u6d4e\u5b66\u300b \u4e54\u8212\u4e9a.\u5e93\u73c0.\u96f7\u9ed8\uff0c\u300a\u7b2c\u4e03\u611f\u300b","title":"\u4e66\u5355"},{"location":"industry/reading/reading_list/#_1","text":"\u4ea8\u5229.\u57fa\u8f9b\u683c\uff0c\u300a\u8bba\u4e2d\u56fd\u300b \u585e\u7f2a\u5c14.\u4ea8\u5ef7\u987f\uff0c\u300a\u6587\u660e\u7684\u51b2\u7a81\u300b \u5c24\u74e6\u5c14.\u8d6b\u62c9\u5229\uff0c\u300a\u4eca\u65e5\u7b80\u53f2\u300b \u5e15\u62c9\u683c\u00b7\u5eb7\u7eb3\uff0c\u300a\u8d85\u7ea7\u7248\u56fe\u300b \u5e03\u83b1\u6069\u00b7\u963f\u745f\uff0c\u300a\u590d\u6742\u7ecf\u6d4e\u5b66\u300b \u4e54\u8212\u4e9a.\u5e93\u73c0.\u96f7\u9ed8\uff0c\u300a\u7b2c\u4e03\u611f\u300b","title":"\u4e66\u5355"},{"location":"languages/cpp/basic/","text":"C++\u57fa\u7840 \u53d8\u91cf\u5b9a\u4e49 auto \u53d8\u91cf \u7531\u7f16\u8bd1\u5668\u6839\u636e\u4e0a\u4e0b\u6587\u81ea\u52a8\u786e\u5b9a\u53d8\u91cf\u7c7b\u578b\uff0c\u5982\uff1a auto i = 3 ; auto f = 4.0f ; \u6307\u9488\u53d8\u91cf\u7684\u52a8\u6001\u751f\u6210\u548c\u5220\u9664 \u6307\u9488\u53d8\u91cf\u6240\u6307\u5185\u5b58\u53ef\u4ee5\u901a\u8fc7 new/delete \u8fd0\u7b97\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u548c\u5220\u9664\uff0c\u5982\uff1a int * ptr = new int ; int * array = new int [ 10 ]; delete ptr ; delete [] array ; \u5de6\u503c\u5f15\u7528 \u5177\u540d\u53d8\u91cf\u7684\u522b\u540d\uff1a\u7c7b\u578b\u540d& \u5f15\u7528\u540d \u53d8\u91cf\u540d int v0 ; int & v1 = v0 ; \u8fd9\u91cc v1 \u662f v0 \u7684\u5f15\u7528\uff0c\u4ed6\u4eec\u5728\u5185\u5b58\u4e2d\u662f\u540c\u4e00\u5355\u5143\u7684\u4e24\u4e2a\u4e0d\u540c\u540d\u5b57 \u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u8fdb\u884c\u521d\u59cb\u5316\uff08\u8d4b\u521d\u503c\uff09\u3002 \u88ab\u5f15\u7528\u53d8\u91cf\u540d\u53ef\u4ee5\u662f\u7ed3\u6784\u53d8\u91cf\u6210\u5458\uff0c\u5982 s.m \u3002 \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u8868\u793a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0e\u5b9e\u9645\u53c2\u6570\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6539\u53d8\u5f62\u53c2\u5c06\u6539\u53d8\u5b9e\u53c2\u3002 \u5982\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570\u5c06\u4ea4\u6362\u5b9e\u53c2\u503c\uff1a void swap ( int & a , int & b ) { int tmp = b ; b = a ; a = tmp ; } \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u4e0d\u80fd\u662f\u51fd\u6570\u7684\u4e34\u65f6\u53d8\u91cf\u3002 \u53f3\u503c\u5f15\u7528\uff08C++11 \u5f15\u5165\uff09 \u53f3\u503c \uff1a\u4e0d\u80fd\u53d6\u5730\u5740\u7684\u3001\u6ca1\u6709\u540d\u5b57\u7684\u5c31\u662f\u53f3\u503c \u533f\u540d\u53d8\u91cf\uff08\u4e34\u65f6\u53d8\u91cf\uff09\u7684\u522b\u540d\uff1a\u7c7b\u578b\u540d&& \u5f15\u7528\u540d \u8868\u8fbe\u5f0f\uff0c\u5982 int && sum = 3 + 4 ; float && res = ReturnRvalue ( f1 , f2 ); \u53f3\u503c\u5f15\u7528\u7684\u5178\u578b\u5e94\u7528\u662f\u5728\u51fd\u6570\u53c2\u6570\u4e2d\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u4e34\u65f6\u53d8\u91cf\u7684\u62f7\u8d1d\u5f00\u9500\uff0c\u4f8b\u5982\uff1a void AcceptRvalueRef ( T && s ) {...} \u53d8\u91cf\u521d\u59cb\u5316\u3001\u7c7b\u578b\u63a8\u5bfc\u3001\u57fa\u4e8e\u8303\u56f4\u7684\u5faa\u73af \u521d\u59cb\u5316\u5217\u8868 \u7528 {}``\u5305\u62ec\u8d77\u6765\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528\u6765\u5bf9\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982 int a [] = { 1 , 3 , 5 }; int a [] { 1 , 3 , 5 }; \u521d\u59cb\u5316\u5217\u8868\u53ef\u4ee5\u518d {} \u4e4b\u524d\u4f7f\u7528 =`\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528\u3002 \u53d8\u91cf\u7684\u521d\u59cb\u5316\u65b9\u5f0f int a = 3 + 5 ; int a = { 3 + 5 }; int a ( 3 + 5 ); // \u8c03\u7528int\u7684\u6784\u9020\u51fd\u6570 int a { 3 + 5 }; int * i = new int ( 10 ); double * d = new double { 1.2f }; // \u521d\u59cb\u5316\u5217\u8868 \u7c7b\u578b\u63a8\u5bfc \u4f7f\u7528 decltype \u53ef\u4ee5\u5bf9\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\u7ed3\u679c\u7684\u7c7b\u578b\u8fdb\u884c\u63a8\u5bfc\uff0c\u5982 struct { char * name ; } anon_u ; struct { int d ; decltype ( anon_u ) id ; } anon_s [ 100 ]; // \u533f\u540d\u7684struct\u6570\u7ec4 int main () { decltype ( anon_s ) as ; cin >> as [ 0 ]. id . name ; } \u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\u8bed\u53e5 \u5728\u5faa\u73af\u5934\u7684\u5706\u62ec\u53f7\u4e2d\uff0c\u7531\u5192\u53f7 : \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u9002\u7528\u4e8e\u8fed\u4ee3\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u5219\u8868\u793a\u88ab\u8fed\u4ee3\u7684\u8303\u56f4\uff0c\u5982\uff1a int arr [ 3 ] = { 1 , 3 , 5 }; for ( int e : arr ) //... \u51fd\u6570 \u51fd\u6570\u91cd\u8f7d \u540c\u4e00\u540d\u79f0\u7684\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u4e0d\u540c\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u88ab\u79f0\u4e3a\u201c\u51fd\u6570\u91cd\u8f7d\u201d\uff0c\u5982\uff1a void print ( char * msg ) { cout << \"message: \" << msg << endl ; } void print ( int score ) { cout << \"score: \" << score << endl ; } \u51fd\u6570\u91cd\u8f7d\u8981\u6c42\u51fd\u6570\u5f62\u53c2\u4e0d\u540c\uff0c\u4e0d\u80fd\u51fa\u73b0\u4ec5\u4ec5\u8fd4\u56de\u503c\u4e0d\u540c\u7684\u60c5\u51b5\u3002\u7f16\u8bd1\u5668\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u53c2\u786e\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u3002 \u591a\u4e2a\u540c\u540d\u51fd\u6570\u5b9e\u73b0\u4e4b\u95f4\uff0c\u5fc5\u987b\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u6709\u533a\u522b\u3002\u8fd4\u56de\u503c\u3001\u53c2\u6570\u540d\u79f0\u7b49\u4e0d\u80fd\u4f5c\u4e3a\u533a\u5206\u6807\u8bc6\u3002 \u51fd\u6570\u53c2\u6570\u7684\u7f3a\u7701\u503c \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u5728\u5b9a\u4e49\u65f6\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff08\u7f3a\u7701\u503c\uff09\uff0c\u8fd9\u6837\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u82e5\u4e0d\u63d0\u4f9b\u76f8\u5e94\u7684\u5b9e\u53c2\uff0c\u5219\u7f16\u8bd1\u5668\u81ea\u52a8\u5c06\u76f8\u5e94\u5f62\u53c2\u8bbe\u7f6e\u6210\u7f3a\u7701\u503c\uff0c\u5982\uff1a void print ( char * msg = \"hello\" ) { cout << msg << '#' ; } int main () { print ( \"Beijing...\" ); print (); return 0 ; } \u8f93\u51fa\uff1a Beijing...#hello# \u5e26\u7f3a\u7701\u503c\u7684\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u653e\u5728\u6ca1\u6709\u7f3a\u7701\u503c\u7684\u51fd\u6570\u53c2\u6570\u540e\u9762\u3002 \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570 \u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e\uff0c\u5982\uff1a \u666e\u901a\u51fd\u6570\u58f0\u660e\u5f62\u5f0f\uff1a int func ( char * ptr , int val ); \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e\u5f62\u5f0f\uff1a auto func ( char * ptr , int val ) -> int ; \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u5728\u539f\u672c\u51fd\u6570\u8fd4\u56de\u503c\u7684\u4f4d\u7f6e\u4f7f\u7528 auto \u5173\u952e\u5b57\u3002 \u52a8\u673a \uff1a\u6709\u65f6\u51fd\u6570\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u786e\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u800c\u9700\u8981\u901a\u8fc7 decl \u83b7\u53d6\u53c2\u6570\u7684\u7c7b\u578b\u6765\u786e\u5b9a\u3002 \u5e94\u7528 \uff1a \u5728C++\u6a21\u677f\u7684\u5b9a\u4e49\u4e2d\uff0c\u6709\u65f6\u8fd4\u56de\u7c7b\u578b\u9700\u8981\u6839\u636e\u53c2\u6570\u7c7b\u578b\u7c7b\u786e\u5b9a\uff0c\u4f1a\u7528\u5230\u8fd9\u4e2a\u7279\u6027\u3002 \u7c7b \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u2014\u2014\u7c7b\uff1a \u4e00\u79cd\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5305\u542b\u51fd\u6570\u4e0e\u6570\u636e\u7684\u7279\u6b8a\u201c\u7ed3\u6784\u4f53\u201d\uff0c\u6269\u5145C++\u8bed\u8a00\u7684\u7c7b\u578b\u4f53\u7cfb\u3002 \u7c7b\u4e2d\u5305\u542b\u7684\u51fd\u6570\uff0c\u79f0\u4e3a \u6210\u5458\u51fd\u6570 \uff1b\u5305\u542b\u7684\u6570\u636e\uff0c\u79f0\u4e3a \u6570\u636e\u6210\u5458 \u3002 \u7c7b\u4e2d\u51fd\u6570\u53ca\u53ef\u4ee5\u5728\u7c7b\u4e2d\u7ed9\u51fa\u5b9a\u4e49\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u5916\u7ed9\u51fa\u5b9a\u4e49\u3002 \u7c7b\u7684\u6210\u5458\uff08\u51fd\u6570\u3001\u6570\u636e\uff09\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5206\u6210\u7ec4\uff0c\u4e0d\u540c\u7ec4\u8bbe\u7f6e\u4e0d\u540c\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u6743\u9650\u79cd\u7c7b\uff1a public , private , protected \u3002 \u7c7b\u5b9a\u4e49\u540e\uff0c\u6838\u51fd\u6570\u5185\u5efa\u7684\u7c7b\u578b\u4e00\u6837\uff0c\u7528\u7c7b\u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u901a\u5e38\u88ab\u79f0\u4e3a \u5bf9\u8c61 \u3002 \u901a\u8fc7\u201c\u5bf9\u8c61\u540d.\u6210\u5458\u540d\u201d\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458\uff0c\u6216\u8c03\u7528\u5bf9\u8c61\u7684\u6570\u636e\u51fd\u6570\uff0c\u4f46\u4ec5\u9650\u4e8e\u8bbf\u95ee public \u6743\u9650\u7684\u6210\u5458\u3002 \u5728\u7c7b\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u524d\u8981\u52a0\u4e0a\u7c7b\u540d\u9650\u5b9a\uff0c\u683c\u5f0f\u4e3a\uff1a \u7c7b\u540d::\u51fd\u6570\u540d \uff0c\u5176\u4e2d :: \u79f0\u4e3a \u57df\u8fd0\u7b97\u7b26 \u3002 \u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u7c7b class // matrix.h #ifndef MATRIX_H #define MATRIX_H class Matrix { int data [ 6 ][ 6 ]; public : void fill ( char dir ); }; #endif \u5728\u5b9e\u73b0\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7c7b class // matrix.cpp #include \"matrix.h\" void Matrix :: fill ( char dir ) { //... } \u901a\u5e38\uff0c\u7c7b\u7684\u58f0\u660e\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5b9e\u73b0\u5219\u653e\u5728\u5b9e\u73b0\u6587\u4ef6\u4e2d\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\u548c\u4ee3\u7801\u590d\u7528\uff0c\u4e00\u822c\u662f\u5c06\u4e0d\u540c\u7684\u7c7b\u5206\u522b\u4fdd\u5b58\u4e3a\u4e0d\u540c\u7684\u5934\u6587\u4ef6\u548c\u5b9e\u73b0\u6587\u4ef6\u3002 \u6210\u5458\u51fd\u6570\u7684\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f \u53ef\u4ee5\u5728\u7c7b\u7684\u5b9a\u4e49\u5185\u90e8\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528 :: \u8fd0\u7b97\u7b26\u5728\u5916\u90e8\u5b9e\u73b0\u3002 class Matrix { public : void fill ( char dir ) { //... } }; void Matrix :: fill ( char dir ) { //... }; this \u6307\u9488 \u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u53c2\u6570\u4e2d\uff0c\u9690\u542b\u7740\u4e00\u4e2a\u53ea\u60f3\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\u53d8\u91cf\u2014\u2014 this \u3002 \u8fd9\u4e5f\u662f \u6210\u5458\u51fd\u6570 \u4e0e \u666e\u901a\u51fd\u6570 \u7684\u91cd\u8981\u533a\u522b \u8bbf\u95ee\u6743\u9650 C++\u89c4\u5b9a\u7c7b\u7684\u6210\u5458\u7f3a\u7701\u4e3a private \u6743\u9650\u3002 \u5bf9\u8c61\u4f7f\u7528 . \u64cd\u4f5c\u7b26\u8bbf\u95ee\u5bf9\u8c61\u7684 public \u6210\u5458\u3002 \u5bf9\u8c61\u6307\u9488\u4f7f\u7528 -> \u64cd\u4f5c\u7b26\u8bbf\u95ee\u6240\u6307\u5bf9\u8c61\u7684\u516c\u6709\u6210\u5458\u3002 \u53cb\u5143 \u6709\u65f6\u9700\u8981\u5141\u8bb8\u67d0\u4e9b\u51fd\u6570\u8bbf\u95ee\u5bf9\u8c61\u7684\u79c1\u6709\u6210\u5458\uff0c\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u8be5 \u51fd\u6570 \u4e3a \u7c7b \u7684\u201c\u53cb\u5143\u201d\u6765\u5b9e\u73b0\u3002 class Test { int id ; public : friend void print ( Test obj ); //... }; void print ( Test obj ) { cout << obj . id << endl ; } Test \u7c7b\u4e2d\u58f0\u660e\u4e86 Test \u7c7b\u7684\u53cb\u5143\u51fd\u6570 print \uff0c\u8be5\u51fd\u6570\u5728\u5b9e\u73b0\u65f6\u53ef\u4ee5\u8bbf\u95ee Test \u7c7b\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u8c61\u7684\u79c1\u6709\u6210\u5458\u3002 \u5de5\u7a0b\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u5c06UT\u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u751f\u547d\u6210\u88ab\u6d4b\u8bd5\u7c7b\u7684\u53cb\u5143\uff0c\u4ee5\u4fbf\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u8bbf\u95ee\u88ab\u6d4b\u8bd5\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002 \u6784\u9020\u51fd\u6570\u3001\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 \u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\uff1a #include <iostream> using namespace std ; class Test { public : Test () { cout << \"Test()\" << endl ; } Test ( const Test & src ) { cout << \"Test(const Test&)\" << endl ; } ~ Test () { cout << \"~Test()\" << endl ; } }; void func1 ( Test obj ) { cout << \"func1()...\" << endl ; } Test func2 () { cout << \"func2()...\" << endl ; return Test (); } int main () { cout << \"main()...\" << endl ; Test t ; func1 ( t ); t = func2 (); return 0 ; } \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u4f1a\u5728\u51fd\u6570\u7531\u5b9e\u53c2\u83b7\u5f97\u5f62\u53c2\u65f6\u8c03\u7528\u3002 \u8f93\u51fa main()... Test() Test(const Test&) func1()... ~Test() func2()... Test() ~Test() ~Test() \u8d4b\u503c\u8fd0\u7b97\u7b26 = \u91cd\u8f7d \u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { public : Test ( int _id ) : id ( _id ) { cout << \"obj_\" << id << \"created \\n \" ; } Test & operator = ( const Test & right ) { if ( this == & right ) cout << \"same obj! \\n \" ; else { cout << \"obj_\" << id << \" = obj_\" << right . id << endl ; } return * this ; } private : int id ; }; int main () { Test a ( 1 ), b ( 2 ); cout << \"a = a: \" ; a = a ; cout << \"a = b: \" ; a = b ; return 0 ; } } \u8f93\u51fa obj_1created obj_2created a = a: same obj! a = b: obj_1 = obj_2 \u6d41\u8fd0\u7b97\u7b26 <</>> \u91cd\u8f7d \u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { int id ; public : Test ( int _id ) : id ( _id ) { cout << \"obj_\" << id << \"created \\n \" ; } friend istream & operator >> ( istream & in , Test & dst ); friend ostream & operator << ( ostream & out , const Test & src ); }; istream & operator >> ( istream & in , Test & dst ) { in >> dst . id ; return in ; } ostream & operator << ( ostream & out , const Test & src ) { cout << src . id << endl ; return out ; } int main () { Test obj ( 1 ); cout << obj ; cin >> obj ; cout << obj ; return 0 ; } \u5c06 \u6d41\u8fd0\u7b97\u7b26 \u58f0\u660e\u6210 Test Test \u7c7b\u7684\u53cb\u5143\uff0c\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u8bbf\u95ee\u5176\u79c1\u6709\u53d8\u91cf\u3002 \u8fd4\u56de\u6d41\u5bf9\u8c61\u662f\u4e3a\u4e86\u652f\u6301\u6d41\u8fd0\u7b97\u7b26\u7684\u94fe\u5f0f\u64cd\u4f5c\u3002 \u8f93\u51fa\uff08\u4e2d\u95f4\u8f93\u5165\u6d41\u5185\u5bb9\u4e3a 2 2 \uff09 obj_1created 1 2 2 \u51fd\u6570\u8fd0\u7b97\u7b26 () \u91cd\u8f7d \u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { public : int operator ()( int a , int b ) { cout << \"operator() called. \" << a << ' ' << b << endl ; return a + b ; } }; int main () { Test sum ; int s = sum ( 3 , 4 ); cout << \"a + b = \" << s << endl ; return 0 ; } sum\u5bf9\u8c61\u770b\u4e0a\u53bb\u50cf\u4e00\u4e2a\u51fd\u6570\uff0c\u6545\u4e5f\u79f0\u201c\u51fd\u6570\u5bf9\u8c61\u201d\u3002 \u8f93\u51fa operator() called. 3 4 a + b = 7 \u4e0b\u6807\u8fd0\u7b97\u7b26 [] \u548c ++/-- \u81ea\u589e\u51cf\u8fd0\u7b97\u7b26 \u4e0b\u6807\u8fd0\u7b97\u7b26 \u4e0b\u9762\u7684\u4ee3\u7801\u4f53\u73b0\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u201c\u5305\u88c5\u201d\u7684\u601d\u60f3\uff0c\u8ba9\u539f\u672c\u53ea\u652f\u6301\u6570\u5b57\u7684 [] \u8fd0\u7b97\u7b26\u5bf9\u5916\u652f\u6301\u5b57\u7b26\u4e32\u7c7b\u578b\u7d22\u5f15\u3002 #include <iostream> #include <string.h> using namespace std ; char week_name [ 7 ][ 4 ] = { \"mon\" , \"tu\" , \"wed\" , \"thu\" , \"fri\" , \"sat\" , \"sun\" }; class WeekTemp { public : int & operator []( const char * name ) { for ( int i = 0 ; i < 7 ; i ++ ) { if ( strcmp ( week_name [ i ], name ) == 0 ) return temp [ i ]; } } private : int temp [ 7 ]; }; int main () { WeekTemp beijing ; beijing [ \"mon\" ] = - 3 ; beijing [ \"tu\" ] = - 1 ; cout << \"Monday Temperture: \" << beijing [ \"mon\" ] << endl ; return 0 ; } \u8f93\u51fa Monday Temperture: -3 \u524d\u7f00 ++/-- \u4e0e\u540e\u7f00 ++/-- \u524d\u7f00\u8fd0\u7b97\u7b26\u91cd\u8f7d\u58f0\u660e ReturnType operator ++ (); ReturnType operator -- (); \u540e\u7f00\u8fd0\u7b97\u7b26\u91cd\u8f7d\u58f0\u660e ReturnType operator ++ ( int dummy ); ReturnType operator -- ( int dummy ); \u901a\u8fc7\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u54d1\u5143\u53c2\u6570 dummy \u6765\u533a\u5206\u524d\u7f00\u548c\u540e\u7f00\u7684\u540c\u540d\u91cd\u8f7d\u3002 \u54d1\u5143\uff1a\u51fd\u6570\u4f53\u8bed\u53e5\u4e2d\u6ca1\u6709\u4f7f\u7528\u8be5\u53c2\u6570\u3002 \u9759\u6001\u6210\u5458\u548c\u5e38\u91cf\u6210\u5458 \u9759\u6001\u6210\u5458 static \u4fee\u9970\u7684\u6570\u636e\u6210\u5458\u96b6\u5c5e\u4e8e\u7c7b\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\uff08\u5373\u6240\u6709\u5bf9\u8c61\u4e2d\u7684\u8fd9\u4e2a\u6570\u636e\u57df\u5904\u4e8e\u540c\u4e00\u5185\u5b58\u4f4d\u7f6e\uff09 \u9759\u6001\u6570\u636e\u6210\u5458\u8981\u5728 \u5b9e\u73b0\u6587\u4ef6 \u4e2d\u8d4b\u521d\u503c\uff0c\u683c\u5f0f\u4e3a\uff1a Type ClassName::static_var = Value; \u5bf9\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4e0d\u63d0\u4f9b\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5b83\u4eec\u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u7c7b\u7684\u9759\u6001\u6210\u5458\u65e2\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u6765\u8bbf\u95ee\u3002 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a\uff1a #include <iostream> using namespace std ; class Test { public : Test () { count ++ ; } ~ Test () { count -- ; } static int how_many () { return count ; } private : static int count ; }; int Test :: count = 0 ; void print ( Test t ) { cout << \"in print(), Test#: \" << t . how_many () << endl ; } int main () { Test t1 ; cout << \"Test#: \" << Test :: how_many () << endl ; Test t2 = t1 ; cout << \"Test#: \" << Test :: how_many () << endl ; print ( t2 ); cout << \"Test#: \" << t1 . how_many () << \", \" << t2 . how_many () << endl ; return 0 ; } \u8f93\u51fa Test#: 1 Test#: 1 in print(), Test#: 1 Test#: 0, 0 \u6ce8\u610f\u5230 t2 = t1; \u6b64\u5904\u8c03\u7528\u7684\u662f = \u8fd0\u7b97\u7b26\uff0c\u800c print(t2); \u8c03\u7528\u7684\u662f \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \uff0c\u4f46\u5728 Test \u91cc\u9762\u5747\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u4f46 print(t2); \u8fd4\u56de\u65f6\u8c03\u7528\u4e86 \u6790\u6784\u51fd\u6570 \uff0c\u6545\u6700\u540e\u4e00\u884c\u9759\u6001\u6210\u5458 count \u53d8\u6210\u4e860\u3002 \u5e38\u91cf\u6210\u5458 const \u4fee\u9970\u7684\u6570\u636e\u6210\u5458\uff0c\u79f0\u4e3a\u7c7b\u7684\u5e38\u91cf\u6570\u636e\u6210\u5458\uff0c\u5728\u5bf9\u8c61\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u91cc\u4e0d\u53ef\u6539\u53d8\u3002 \u5e38\u91cf\u6570\u636e\u6210\u5458\u53ea\u80fd\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u88ab\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u5728\u51fd\u6570\u4f53\u4e2d\u901a\u8fc7\u8d4b\u503c\u8bbe\u7f6e\u3002 const \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u5219\u8be5\u6210\u5458\u51fd\u6570\u5728\u5b9e\u73b0\u65f6\u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u6570\u636e\u6210\u5458 \u2014\u2014\u2014\u2014 \u5373\u9759\u6001\u51fd\u6570\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u72b6\u6001\u3002 \u82e5\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e3a\u5e38\u91cf\uff0c\u5219\u5b83\u53ea\u80fd\u8c03\u7528\u4ee5 const \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u5176\u4ed6\u666e\u901a\u6210\u5458\u51fd\u6570\u5219\u4e0d\u5141\u8bb8\u8c03\u7528\u3002 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a #include <iostream> using namespace std ; class Test { public : Test ( int id ) : ID ( id ) {} int MyID () const { return ID ; } int Who () { return ID ; } private : const int ID ; }; int main () { Test obj1 ( 12231031 ); cout << \"ID_1 = \" << obj1 . MyID () << endl ; cout << \"ID_2 = \" << obj1 . Who () << endl ; const Test obj2 ( 1602401 ); cout << \"id_1: \" << obj2 . MyID () << endl ; return 0 ; } \u8f93\u51fa ID_1 = 12231031 ID_2 = 12231031 id_1: 1602401 \u5bf9\u8c61\u7ec4\u5408 \u53ef\u4ee5\u5728\u7c7b\u4e2d\u4f7f\u7528\u5176\u4ed6\u7c7b\u6765\u5b9a\u4e49\u6570\u636e\u6210\u5458\uff0c\u901a\u5e38\u79f0\u4e4b\u4e3a\u201c\u5b50\u5bf9\u8c61\u201d\u3002\u8fd9\u79cd\u5305\u542b\u5173\u7cfb\u79f0\u4e3a \u7ec4\u5408 \uff0c\u7ec4\u5408\u5173\u7cfb\u53ef\u4ee5\u5d4c\u5957\u3002 \u5b50\u5bf9\u8c61\u6784\u9020\u65f6\u82e5\u9700\u8981\u53c2\u6570\uff0c\u5219\u5e94\u5728\u5f53\u524d\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u5217\u8868 \u4e2d\u8fdb\u884c\u3002\u82e5\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u6784\u9020\u5b50\u5bf9\u8c61\u5219\u4e0d\u7528\u505a\u4efb\u4f55\u5904\u7406\u3002 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784\u6b21\u5e8f\uff1a\u7a7f\u8131\u539f\u7406 \u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u5148\u5bf9\u5916\u5c42\u5bf9\u8c61\u6790\u6784\uff0c\u518d\u5bf9\u5185\u5c42\u5bf9\u8c61\u6790\u6784 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a #include <iostream> using namespace std ; class C1 { public : C1 ( int id ) : ID ( id ) { cout << \"C1(int)\" << endl ; } ~ C1 () { cout << \"~C1()\" << endl ; } private : int ID ; }; class C2 { public : C2 () { cout << \"C2()\" << endl ; } ~ C2 () { cout << \"~C2()\" << endl ; } }; class C3 { public : C3 () : num ( 0 ), sub_obj1 ( 123 ) { cout << \"C3()\" << endl ; } C3 ( int n ) : num ( n ), sub_obj1 ( 123 ) { cout << \"C3(int)\" << endl ; } C3 ( int n , int k ) : num ( n ), sub_obj1 ( k ) { cout << \"C3(int, int)\" << endl ; } ~ C3 () { cout << \"~C3()\" << endl ; } private : int num ; C1 sub_obj1 ; C2 sub_obj2 ; }; int main () { C3 a , b ( 1 ), c ( 2 ), d ( 3 , 4 ); return 0 ; } C1 \u3001 C2 \u662f C3 \u7684\u5b50\u5bf9\u8c61\uff0c\u5176\u4e2d C2 \u63d0\u4f9b\u4e86\u7f3a\u7701\u6784\u9020\u51fd\u6570\uff0c\u6545\u5728 C3 \u4e2d\u4e0d\u7528\u663e\u5f0f\u521d\u59cb\u5316\uff1b\u4f46 C1 \u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u6545\u5fc5\u987b\u5728 C3 \u7684 \u521d\u59cb\u5316\u5217\u8868 \u91cc\u9762\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u8f93\u51fa C1(int) C2() C3() C1(int) C2() C3(int) C1(int) C2() C3(int) C1(int) C2() C3(int, int) ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() \u4ece\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\u6784\u9020\u94fe\u4ece\u5185\u5230\u5916\uff0c\u800c\u6790\u6784\u94fe\u4ece\u5916\u5411\u5185\u3002 \u79fb\u52a8\u6784\u9020\u51fd\u6570 (C++ 11\u5f15\u5165) \u8bed\u6cd5\uff1a ClassName(ClassName&&); \u76ee\u7684 \u7528\u6765\u5077\u201c\u4e34\u65f6\u53d8\u91cf\u201d\u4e2d\u7684\u8d44\u6e90\uff08\u5982\u5185\u5b58\uff09\u3002 \u4e34\u65f6\u53d8\u91cf\u88ab\u7f16\u8bd1\u5668\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u5f62\u5f0f\uff0c\u4f7f\u7528\u201c\u62f7\u8d1d\u6784\u9020\u201d\u51fd\u6570\u65e0\u6cd5\u5c06\u8d44\u6e90\u201c\u5077\u201d\u51fa\u6765\uff08\u6539\u52a8\u4e86\u5143\u5bf9\u8c61\uff0c\u8fdd\u53cd\u5e38\u91cf\u7684\u9650\u5236\uff09\u3002 \u57fa\u4e8e \u53f3\u503c\u5f15\u7528 \u5b9a\u4e49\u7684 \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u652f\u6301\u63a5\u53d7\u4e34\u65f6\u53d8\u91cf\uff0c\u80fd\u201c\u5077\u201d\u51fa\u4e34\u65f6\u53d8\u91cf\u4e2d\u7684\u8d44\u6e90\u3002 #include <iostream> using namespace std ; class Test { public : int * buf ; Test () { buf = new int ( 3 ); cout << \"Test(): this->buf @ \" << hex << buf << endl ; } ~ Test () { cout << \"~Test(): this->buf @ \" << hex << buf << endl ; if ( buf ) delete buf ; } Test ( Test & t ) : buf ( new int ( * t . buf )) { cout << \"Test(const Test&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; } Test ( Test && t ) : buf ( t . buf ) { cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; } }; Test GetTemp () { Test tmp ; cout << \"GetTemp(): tmp.buf @ \" << hex << tmp . buf << endl ; return tmp ; } void fun ( Test t ) { cout << \"fun(Test t): t.buf @ \" << hex << t . buf << endl ; } int main () { Test a = GetTemp (); cout << \"main() : a.buf @ \" << hex << a . buf << endl ; fun ( a ); return 0 ; } \u8f93\u51fa Test(): this->buf @ 0x558bd1e13e70 GetTemp(): tmp.buf @ 0x558bd1e13e70 main() : a.buf @ 0x558bd1e13e70 Test(const Test&) called. this->buf @ 0x558bd1e142a0 fun(Test t): t.buf @ 0x558bd1e142a0 ~Test(): this->buf @ 0x558bd1e142a0 ~Test(): this->buf @ 0 \u5728\u5982\u4e0a\u7ed3\u679c\u4e2d\u6ca1\u6709\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u6b32\u6267\u884c\u8be5\u51fd\u6570\uff0c\u9700\u8981\u589e\u52a0\u7f16\u8bd1\u9009\u9879\uff0c\u7981\u6b62\u7f16\u8bd1\u5668\u8fdb\u884c\u8fd4\u56de\u503c\u4f18\u5316 g++ main.cpp --std = c++11 -fno-elide-constructors -o main \u8f93\u51fa Test(): this->buf @ 0x560b6f4dce70 GetTemp(): tmp.buf @ 0x560b6f4dce70 Test(Test&&) called. this->buf @ 0x560b6f4dce70 ~Test(): this->buf @ 0 Test(Test&&) called. this->buf @ 0x560b6f4dce70 ~Test(): this->buf @ 0 main() : a.buf @ 0x560b6f4dce70 Test(const Test&) called. this->buf @ 0x560b6f4dd2a0 fun(Test t): t.buf @ 0x560b6f4dd2a0 ~Test(): this->buf @ 0x560b6f4dd2a0 ~Test(): this->buf @ 0 \u53ef\u89c1\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u8c03\u7528\u7684\u662f\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u5c06 Test \u7c7b\u4e2d\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u53bb\u6389\uff0c\u540c\u6837\u7981\u7528\u7f16\u8bd1\u4f18\u5316\uff0c\u5219\u7f16\u8bd1\u62a5\u9519\uff1a main.cpp: In function \u2018int main()\u2019: main.cpp:38:21: error: cannot bind non-const lvalue reference of type \u2018Test&\u2019 to an rvalue of type \u2018Test\u2019 Test a = GetTemp(); ~~~~~~~^~ main.cpp:18:5: note: initializing argument 1 of \u2018Test::Test(Test&)\u2019 Test(Test& t) : buf(new int(*t.buf)) { ^~~~ default\u4fee\u9970\u7b26 (C++ 11\u5f15\u5165) \u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\u6210\u5458\u51fd\u6570 \u5982\u679c\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\u7528\u6237\u90fd\u6ca1\u6709\u4e3a\u7c7b\u5b9e\u73b0\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4e3a\u7c7b\u751f\u6210\u5b83\u4eec\u7684\u7f3a\u7701\u5b9e\u73b0 \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 - \u7a7a\u51fd\u6570\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a \u6790\u6784\u51fd\u6570 - \u7a7a\u51fd\u6570\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a \u62f7\u8d1d\u6784\u9020\u51fd\u6570 - \u6309bit\u4f4d\u8d4b\u503c\u5bf9\u8c61\u6240\u5360\u5185\u5b58\u5185\u5bb9 \u79fb\u52a8\u6784\u9020\u51fd\u6570 - \u4e0e\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e00\u6837 \u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d - \u4e0e\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e00\u6837 \u5982\u679c\u7528\u6237\u5b9a\u4e49\u4e86\u4e0a\u8ff0\u67d0\u4e2a\u6210\u5458\u51fd\u6570\uff0c\u5219\u7f16\u8bd1\u5668\u4e0d\u518d\u81ea\u52a8\u63d0\u4f9b\u76f8\u5e94\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 =default \u663e\u5f0f\u7f3a\u7701 \u5728\u9ed8\u8ba4\u51fd\u6570\u5b9a\u4e49\u6216\u58f0\u660e\u52a0\u4e0a =default \uff0c\u53ef\u663e\u5f0f\u7684\u53ea\u662f\u7f16\u8bd1\u5668\u751f\u6210\u8be5\u51fd\u6570\u7684\u9ed8\u8ba4\u7248\u672c\u3002 class T { public : T () = default ; T ( int i ) : data ( i ) {} private : int data ; }; \u7ee7\u627f \u5728\u5df2\u6709\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u7ee7\u627f\u201d\u6765\u5b9a\u4e49\u65b0\u7684\u7c7b\uff0c\u5b9e\u73b0\u5bf9\u5df2\u6709\u4ee3\u7801\u7684\u590d\u7528\u3002 \u5e38\u89c1\u7684\u7ee7\u627f\u65b9\u5f0f\uff1a public , private class Derived: [private] Base {...}; \u7f3a\u7701\u7ee7\u627f\u65b9\u5f0f\u662f private \u7ee7\u627f\u3002 class Derived: public Base {...}; \u57fa\u7c7b/\u7236\u7c7b - base class - \u88ab\u7ee7\u627f\u7684\u5df2\u6709\u7c7b \u6d3e\u751f\u7c7b/\u5b50\u7c7b/\u6269\u5c55\u7c7b - derived class - \u901a\u8fc7\u7ee7\u627f\u5f97\u5230\u7684\u65b0\u7c7b \u5b50\u7c7b\u5bf9\u8c61\u7684\u6784\u9020\u4e0e\u6790\u6784\u8fc7\u7a0b \u57fa\u7c7b\u4e2d\u7684\u6570\u636e\u6210\u5458\u901a\u8fc7\u7ee7\u627f\u6210\u4e3a\u5b50\u7c7b\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u9700\u8981\u5728\u6784\u9020\u5b50\u7c7b\u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528\u79ef\u7d2f\u7684\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u3002 \u82e5\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u5bf9\u57fa\u7c7b\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u8c03\u7528 \u82e5\u91c7\u7528\u663e\u5f0f\u8c03\u7528\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c \u5148\u6267\u884c\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u7ee7\u627f\u6765\u7684\u6570\u636e\uff0c\u518d\u6267\u884c\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002 \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u5148\u6267\u884c\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528\u7684\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002 \u7ee7\u627f\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570 \u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b #include <iostream> using namespace std ; class Base { public : Base ( int _data ) : data ( _data ) { cout << \"Base::Base(\" << _data << \") \\n \" ; } private : int data ; }; class Derive : public Base { public : using Base :: Base ; void print () { cout << \"data = \" << data << endl ; } private : int data { 2020 }; }; int main () { Derive obj ( 356 ); obj . print (); return 0 ; } Derive \u4e2d\u4f7f\u7528 using Base::Base; \u5c06 Base \u4e2d\u7684\u6240\u6709\u6784\u9020\u51fd\u6570\u90fd\u7ee7\u627f\u4e86\u8fc7\u6765\u3002\u6545\u53ef\u4ee5\u8c03\u7528\u5e26\u4e00\u4e2a int \u578b\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 Base::Base(356) data = 2020 \u867d\u7136\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u7684\u9ed8\u8ba4\u503c\u4e0d\u4f1a\u88ab\u5b50\u7c7b\u7ee7\u627f\uff0c\u4f46\u7531\u9ed8\u8ba4\u53c2\u6570\u5bfc\u81f4\u7684\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7248\u672c\u90fd\u4f1a\u88ab\u5b50\u7c7b\u7ee7\u627f\u3002 \u5982\u679c\u57fa\u7c7b\u7684\u67d0\u4e2a\u6784\u9020\u51fd\u6570\u88ab\u58f0\u660e\u6210\u79c1\u6709\u6210\u5458\u51fd\u6570\uff0c\u5219\u4e0d\u80fd\u5728\u5b50\u7c7b\u4e2d\u58f0\u660e\u7ee7\u627f\u8be5\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u5b50\u7c7b\u4f7f\u7528\u4e86\u7ee7\u627f\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u518d\u4e3a\u5b50\u7c7b\u751f\u6210\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 \u51fd\u6570\u91cd\u5199 (override) \u5b50\u7c7b\u4e2d\u7684\u57fa\u7c7b\u6210\u5458 \u5b50\u7c7b\u5bf9\u8c61\u5305\u542b\u4ece\u57fa\u7c7b\u7ee7\u627f\u6765\u7684\u6570\u636e\u6210\u5458\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u201c\u57fa\u7c7b\u5b50\u5bf9\u8c61\u201d\u3002 \u57fa\u7c7b\u4e2d\u7684\u79c1\u6709\u6210\u5458\uff0c\u4e0d\u5141\u8bb8\u5728\u5b50\u7c7b\u6210\u5458\u51fd\u6570\u4e2d\u88ab\u8bbf\u95ee\uff0c\u4e5f\u4e0d\u5141\u8bb8\u5b50\u7c7b\u7684\u5bf9\u8c61\u8bbf\u95ee\u5b83\u4eec\u3002 \u771f\u6b63\u4f53\u73b0\u201c\u57fa\u7c7b\u79c1\u6709\u201d\uff0c\u5bf9\u5b50\u7c7b\u4e5f\u4e0d\u5f00\u653e\u5176\u6743\u9650 \u57fa\u7c7b\u4e2d\u7684\u516c\u6709\u6210\u5458\uff1a \u82e5\u4f7f\u7528 public \u7ee7\u627f\u65b9\u5f0f\uff0c\u5219\u6210\u4e3a\u5b50\u7c7b\u7684\u516c\u6709\u6210\u5458\uff0c\u65e2\u53ef\u4ee5\u5728\u5b50\u7c7b\u6210\u5458\u4e2d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u88ab\u5b50\u7c7b\u7684\u5bf9\u8c61\u8bbf\u95ee\uff1b \u82e5\u4f7f\u7528 private \u7ee7\u627f\u65b9\u5f0f\uff0c\u5219\u53ea\u80fd\u4f9b\u5b50\u7c7b\u6210\u5458\u51fd\u6570\u7684\u8bbf\u95ee\uff0c\u4e0d\u80fd\u88ab\u5b50\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801 #include <iostream> using namespace std ; class B { public : void f () { cout << \"in B::f()...\" << endl ; } }; class D1 : public B {}; class D2 : private B { public : void g () { cout << \"in D2::g(), calling f()...\" << endl ; f (); } }; int main () { cout << \"in main()...\" << endl ; D1 obj1 ; cout << \"calling obj1.f()...\" << endl ; obj1 . f (); D2 obj2 ; cout << \"calling obj2.g()...\" << endl ; obj2 . g (); return 0 ; } \u8f93\u51fa in main()... calling obj1.f()... in B::f()... calling obj2.g()... in D2::g(), calling f()... in B::f()... \u5982\u679c\u79c1\u6709\u7ee7\u627f\u7684\u5b50\u7c7b D2 \u8c03\u7528\u7236\u7c7b\u7684\u5171\u6709\u51fd\u6570\uff0c\u5219\u4f1a\u62a5\u9519\uff1a error: \u2018B\u2019 is not an accessible base of \u2018D2 \u8fd9\u91cc\u57fa\u7c7b\u63a5\u53e3\u4e0d\u8bb8\u5b50\u7c7b\u5bf9\u8c61\u8c03\u7528\u3002 \u5b50\u7c7b\u91cd\u5199\u57fa\u7c7b\u7684\u6210\u5458\u51fd\u6570 \u57fa\u7c7b\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\uff0c\u5728\u5b50\u7c7b\u4e2d\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\uff0c\u8fd9\u88ab\u79f0\u4e3a\u201c\u51fd\u6570\u91cd\u5199\u201d\uff08override\uff09 \u91cd\u5199\u53d1\u751f\u65f6\uff0c\u57fa\u7c7b\u4e2d\u8be5\u6210\u5458\u51fd\u6570\u7684\u5176\u4ed6\u91cd\u8f7d\u51fd\u6570\u90fd\u5c06\u88ab\u5c4f\u853d\u6389\uff0c\u4e0d\u80fd\u63d0\u4f9b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u4f7f\u7528\u3002 \u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7 using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u5b50\u7c7b\u4e2d\u201c=\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801 #include <iostream> using namespace std ; class T {}; class B { public : void f () { cout << \"B::f() \\n \" ; } void f ( int i ) { cout << \"B::f(\" << i << \") \\n \" ; } void f ( double d ) { cout << \"B::f(\" << d << \") \\n \" ; } void f ( T ) { cout << \"B::f(T) \\n \" ; } }; class D1 : public B { public : void f ( int i ) { cout << \"D1::f(\" << i << \") \\n \" ; } }; int main () { D1 d ; d . f ( 10 ); d . f ( 4.9 ); // d.f(); // d.f(T()) }; \u6ce8\u610f d.f(4.9); \u8fd9\u4e00\u53e5\u7f16\u8bd1\u4f1a\u51fa\u8b66\u544a\uff0c\u7f16\u8bd1\u5668\u6267\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4f7f\u7528\u6574\u578b\u53c2\u6570\u7684\u51fd\u6570\u7248\u672c\u3002 \u800c\u88ab\u6ce8\u91ca\u7684\u4e24\u4e2a\u8bed\u53e5\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff0c\u56e0\u4e3a\u91cd\u5199\u5bfc\u81f4\u5176\u4ed6\u91cd\u8f7d\u51fd\u6570\u88ab\u5c4f\u853d\u6389 \u8f93\u51fa D1::f(10) D1::f(4) \u4f7f\u7528 using \u6062\u590d\u57fa\u7c7b\u51fd\u6570 #include <iostream> using namespace std ; class T {}; class B { public : void f () { cout << \"B::f() \\n \" ; } void f ( int i ) { cout << \"B::f(\" << i << \") \\n \" ; } void f ( double d ) { cout << \"B::f(\" << d << \") \\n \" ; } void f ( T ) { cout << \"B::f(T) \\n \" ; } }; class D1 : public B { public : using B :: f ; void f ( int i ) { cout << \"D1::f(\" << i << \") \\n \" ; } }; int main () { D1 d ; d . f ( 10 ); d . f ( 4.9 ); d . f (); d . f ( T ()); return 0 ; }; \u8f93\u51fa D1::f(10) B::f(4.9) B::f() B::f(T) \u865a\u51fd\u6570 \u5411\u4e0a\u6620\u5c04\u548c\u5411\u4e0b\u6620\u5c04 \u5b50\u7c7b\u5bf9\u8c61\u8f6c\u6362\u6210\u57fa\u7c7b\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5411\u4e0a\u6620\u5c04\u3002\u800c\u57fa\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b50\u7c7b\u5bf9\u8c61\uff0c\u6210\u4e3a\u5411\u4e0b\u6620\u5c04\u3002 \u5411\u4e0a\u6620\u5c04\u53ef\u4ee5\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\uff0c\u662f\u4e00\u79cd\u9690\u5f0f\u7684\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u3002 \u6240\u6709\u63a5\u53d7\u57fa\u7c7b\u5bf9\u8c61\u7684\u5730\u65b9\uff08\u5982\u51fd\u6570\u53c2\u6570\uff09\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b50\u7c7b\u5bf9\u8c61\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5b50\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u57fa\u7c7b\u5bf9\u8c61\u4ee5\u4fbf\u4f7f\u7528\u3002 \u5728\u5982\u4e0b\u4ee3\u7801\u4e2d\uff0c\u5b50\u7c7b\u91cd\u5199\u4e86\u57fa\u7c7b\u7684 print \u51fd\u6570\uff0c\u5c06\u5b50\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u4ee5\u57fa\u7c7b\u4f5c\u4e3a\u5f62\u53c2\u7684\u51fd\u6570\uff0c\u5b50\u7c7b\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a\u57fa\u7c7b\uff0c\u6545\u51fd\u6570\u5185\u8c03\u7528\u7684\u662f\u57fa\u7c7b\u7684 print \u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base::print()\" << endl ; } }; class Derive : public Base { public : void print () { cout << \"Derive::print()\" << endl ; } }; void fun ( Base obj ) { obj . print (); } int main () { Derive d ; d . print (); fun ( d ); return 0 ; } \u8f93\u51fa Derive::print() Base::print() \u865a\u51fd\u6570 \u5bf9\u4e8e\u88ab\u5b50\u7c7b\u91cd\u5199\u7684\u6210\u5458\u51fd\u6570\uff0c\u82e5\u5b83\u5728\u57fa\u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff08\u5982\u4e0b\u6240\u793a\uff09\uff0c\u5219\u901a\u8fc7\u79ef\u7d2f\u6307\u9488\u6216\u5f15\u7528\u8c03\u7528\u8be5\u51fd\u6570\u6210\u5458\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u6240\u6307\uff08\u6216\u5f15\u7528\uff09\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u662f\u8c03\u7528\u79ef\u7d2f\u4e2d\u7684\u51fd\u6570\uff0c\u8fd8\u662f\u8c03\u7528\u5b50\u7c7b\u91cd\u5199\u7684\u51fd\u6570\u3002 class Base { public : virtual \u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2 ); ... }; \u82e5\u67d0\u6210\u5458\u51fd\u6570\u5728\u57fa\u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u5f53\u5b50\u7c7b\u91cd\u5199\u5b83\u65f6\uff0c\u65e0\u8bba\u662f\u5426\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8be5\u6210\u5458\u51fd\u6570\u4ecd\u7136\u662f\u865a\u51fd\u6570\u3002 \u5c06\u4e0a\u4e00\u8282\u7684\u4f8b\u5b50\u4e2d\u57fa\u7c7b\u7684 print \u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u51fd\u6570 fun \u7684\u5f62\u53c2\u6539\u4e3a\u57fa\u7c7b\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u5219\u8c03\u7528\u7684\u5c31\u662f\u865a\u51fd\u6570\u5728\u5b50\u7c7b\u4e2d\u7684\u5b9e\u73b0\u3002 #include <iostream> using namespace std ; class Base { public : virtual void print () { cout << \"Base::print()\" << endl ; } }; class Derive : public Base { public : void print () { cout << \"Derive::print()\" << endl ; } }; void fun ( Base & obj ) { obj . print (); } int main () { Derive d ; d . print (); fun ( d ); return 0 ; } \u8f93\u51fa Derive::print() Derive::print() \u865a\u6790\u6784\u51fd\u6570 \u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u603b\u662f\u8981\u88ab\u58f0\u660e\u6210 virtual \u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u5b50\u7c7b\u5b9a\u4e49\u7684\u6790\u6784\u51fd\u6570\u603b\u80fd\u88ab\u6267\u884c\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\uff1a\u4efb\u4f55\u7c7b\u7684\u6790\u6784\u51fd\u6570\u90fd\u5e94\u8be5\u88ab\u58f0\u660e\u6210 virtual \u7684\uff0c\u56e0\u4e3a\u8c01\u53c8\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u7c7b\u4e0d\u4f1a\u88ab\u5176\u4ed6\u7684\u7c7b\u7ee7\u627f\u5462\uff1f #include <iostream> using namespace std ; class B { public : virtual void show () { cout << \"B.show() \\n \" ; } virtual ~ B () { cout << \"~B() \\n \" ; } }; class D : public B { public : void show () { cout << \"D.show() \\n \" ; } ~ D () { cout << \"~D() \\n \" ; } }; void test ( B * ptr ) { ptr -> show (); } int main () { B * ptr = new D ; test ( ptr ); delete ptr ; return 0 ; } \u8f93\u51fa D.show() ~D() ~B() \u4ece\u8f93\u51fa\u53ef\u89c1\u6790\u6784\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f\u662f \u5148\u8c03\u7528\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570 \u3002 \u5982\u679c\u5220\u9664\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u524d\u7684 virtual \u5173\u952e\u5b57\uff0c\u5219\u8f93\u51fa\u4e3a D.show() ~B() \u6b64\u65f6\u5982\u679c\u5b50\u7c7b\u4e2d\u72ec\u6709\u7684\u6570\u636e\u6210\u5458\uff0c\u5219\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u91ca\u653e\uff0c\u8fdb\u800c\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u3002 \u7981\u6b62\u91cd\u5199\u7684\u865a\u51fd\u6570 final (c++ 11\u5f15\u5165) \u4f7f\u7528 final \u7ba1\u554a\u67b6\u5b50\u4fee\u9970\u7684\u865a\u51fd\u6570\uff0c\u5b50\u7c7b\u4e0d\u53ef\u5bf9\u5b83\u8fdb\u884c\u91cd\u5199 \u2014\u2014 \u6539\u53d8\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u5728\u6d3e\u751f\u8fc7\u7a0b\u4e2d\uff0c final \u53ef\u4ee5\u518d\u7ee7\u627f\u5173\u7cfb\u94fe\u7684 \u4e2d\u9014 \u8fdb\u884c\u8bbe\u5b9a\uff0c\u7981\u6b62\u540e\u7eed\u5b50\u7c7b\u5bf9\u6307\u5b9a\u865a\u51fd\u6570\u91cd\u5199\u3002 \u4e0b\u5c5e\u4ee3\u7801\u4e2d\uff0c class C \u7684\u5b9e\u73b0\u662f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u7684\u3002 class A { public : virtual void fun () = 0 ; }; class B : public A { public : void fun () final ; }; class C : public B { public : void fun (); }; class A \u4e2d\u7684 virtual void fun() = 0; \u5c06 fun() \u5b9a\u4e49\u4e3a\u4e00\u4e2a \u7eaf\u865a\u51fd\u6570 \u3002 A \u7531\u6b64\u6210\u4e3a\u4e00\u4e2a \u62bd\u8c61\u7c7b \u3002 C++\u4e2d\u62bd\u8c61\u7c7b\u4e0d\u80fd\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u4e00\u822c\u7528\u4e8e \u5b9a\u4e49\u63a5\u53e3 \u3002 \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u65b9\u6cd5\u4e00 - \u5728\u6e90\u7c7b\u4e2d\u5b9a\u4e49\u201c\u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u201d #include <iostream> using namespace std ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } }; class Src { public : Src () { cout << \"Src::operator Dst() called\" << endl ; } operator Dst () const { cout << \"Src::operator Dst() called\" << endl ; return Dst (); } }; \u65b9\u6cd5\u4e8c - \u5728\u76ee\u6807\u7c7b\u4e2d\u5b9a\u4e49\u201c\u6e90\u7c7b\u5bf9\u8c61\u505a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u201d #include <iostream> using namespace std ; class Src ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } Dst ( const Src & s ) { cout << \"Dst::Dst(const Src&)\" << endl ; } }; class Src { public : Src () { cout << \"Src::Src()\" << endl ; } }; \u6ce8\uff1a class Src; \u8fd9\u4e00\u884c\u662f\u4e00\u4e2a\u524d\u7f6e\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728 Dst \u7684\u5b9a\u4e49\u4e2d\u8981\u7528\u5230 Src \u7c7b\u3002 \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u4e3e\u4f8b \u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff08\u9690\u5f0f\u8f6c\u6362\uff09 void Func ( Dst d ) {} int main () { Src s ; Dst d1 ( s ); // \u8fd9\u662f\u76f4\u63a5\u6784\u9020\uff0c\u4e0d\u662f\u7c7b\u578b\u8f6c\u6362 Dst d2 = s ; // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u662f\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Func ( s ); // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 return 0 \uff1b } \u6ce8\u610f\uff1a\u4e24\u79cd\u81ea\u5b9a\u4e49\u7c7b\u578b\u8f6c\u6362\u7684\u65b9\u6cd5\u4e0d\u80fd\u540c\u65f6\u4f7f\u7528\uff0c\u53ea\u6709\u5728\u4e0a\u8ff0\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u4f7f\u7528\u4e14\u4f7f\u7528\u4e00\u4e2a\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002 \u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 \u65b9\u6cd5\u4e00 - explicit \u5173\u952e\u5b57 #include <iostream> using namespace std ; class Src ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } explicit // <1> \u4e0d\u51c6\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 Dst ( const Src & s ) { cout << \"Dst::Dst(const Src&)\" << endl ; } }; class Src { public : Src () { cout << \"Src::Src()\" << endl ; } explicit // <2> \u4e0d\u51c6\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 operator Dst () const { cout << \"Src::operator Dst() called\" << endl ; return Dst (); } }; <1> - \u8be5\u51fd\u6570\u53ea\u7528\u4e8e\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff08\u4e0d\u80fd\u81ea\u52a8\u8c03\u7528\uff09 <2> - \u8be5\u51fd\u6570\u53ea\u7528\u4e8e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff08\u4e0d\u80fd\u81ea\u52a8\u8c03\u7528\uff09 \u4e3a\u6b64\uff0c\u5982\u60f3\u8ba9\u4e0b\u65b9\u4ee3\u7801\u901a\u8fc7\uff0c\u4e0a\u65b9\u4ee3\u7801\u4e2d\u4e24\u5904 explicit \u5fc5\u987b\u4fdd\u7559\u4e14\u4ec5\u4fdd\u7559\u4e00\u5904\u3002 void Func ( Dst d ) {} int main () { Src s ; Dst d1 ( s ); Dst d2 = s ; Func ( s ); return 0 ; } \u65b9\u6cd5\u4e8c - =delete \u9650\u5b9a (C++ 11 \u5f15\u5165) \u4f7f\u7528 =delete \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e0d\u5141\u8bb8\u88ab\u8c03\u7528\u3002 #include <iostream> using namespace std ; class T { public : T ( int ) {} T ( char ) = delete ; // \u53ef\u6d88\u9664\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5e26\u6765\u7684\u9690\u60a3\uff0c\u5982\u6ca1\u6709` = delete`\u4fee\u9970\u7b26\uff0c\u5219\u4e3b\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u90fd\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002 }; void Fun ( T t ) {} int main () { Fun ( 1 ); // Fun('X'); \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\uff0c\u7f16\u8bd1\u4e0d\u901a\u8fc7 T ci ( 1 ); // T cc('X'); \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\uff0c\u7f16\u8bd1\u4e0d\u901a\u8fc7 return 0 ; } =delete \u4fee\u9970\u4e00\u4e2a\u51fd\u6570 \u548c \u4e0d\u5199\u8fd9\u4e2a\u51fd\u6570 \u7684\u533a\u522b: \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08\u663e\u5f0f\u8f6c\u6362\uff09 dynamic_cast<Dst_type>(Src_var) - \u7528\u4e8e\u5728\u7c7b\u7684\u96c6\u6210\u4f53\u7cfb\u4e2d\u505a\u8f6c\u6362 Src_var \u5fc5\u987b\u662f\u5f15\u7528\u6216\u6307\u9488\u7c7b\u578b\uff0c Dst_Type \u7c7b\u4e2d\u542b\u6709\u865a\u51fd\u6570\uff0c\u5426\u5219\u4f1a\u6709\u7f16\u8bd1\u9519\u8bef \u82e5\u76ee\u6807\u7c7b\u4e0e\u539f\u7c7b\u4e4b\u95f4\u6ca1\u6709\u53ca\u9648\u9aa8\u5e72\u897f\uff0c\u8f6c\u6362\u5931\u8d25\uff0c\u8fd4\u56de\u7a7a\u6307\u9488\uff08\u6ce8\uff1a\u5931\u8d25\u4e0d\u5bfc\u81f4\u8fd0\u884c\u5d29\u6e83\uff09 static_cast<Dst_Type>(Src_var) \u57fa\u7c7b\u5bf9\u8c61\u4e0d\u80fd\u8f6c\u6362\u6210\u5b50\u7c7b\u5bf9\u8c61\uff0c\u4f46\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8f6c\u6362\u6210\u5b50\u7c7b\u6307\u9488 \u5b50\u7c7b\u5bf9\u8c61\uff08\u6307\u9488\uff09\u53ef\u4ee5\u8f6c\u6362\u6210\u57fa\u7c7b\u5bf9\u8c61\uff08\u6307\u9488\uff09 \u6ca1\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u7c7b\u4e4b\u95f4\uff0c\u5fc5\u987b\u5177\u6709\u8f6c\u6362\u9014\u5f84\u624d\u80fd\u8fdb\u884c\u8f6c\u6362\uff08\u81ea\u5b9a\u4e49\u6216\u8005\u8bed\u8a00\u8bed\u6cd5\u539f\u751f\u652f\u6301\uff09 \u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b #include <iostream> using namespace std ; class B { public : virtual void f () {} }; class D : public B {}; class E {}; int main () { D d1 ; B b1 ; // d1 = static_cast<D>(b1); /// Error: \u4ece\u57fa\u7c7b\u65e0\u6cd5\u8f6c\u6362\u56de\u5b50\u7c7b b1 = static_cast < B > ( d1 ); /// OK: \u53ef\u4ee5\u4ece\u5b50\u7c7b\u8f6c\u6362\u5230\u57fa\u7c7b // b1 - dynamic_cast<B>(d1); /// ERROR: \u88ab\u8f6c\u6362\u7684\u5fc5\u987b\u662f\u5f15\u7528\u6216\u6307\u9488 B * pb1 = new B (); D * pd1 = static_cast < D *> ( pb1 ); if ( pd1 ) { cout << \"static_cast, B* --> D*: OK\" << endl ; } pd1 = dynamic_cast < D *> ( pb1 ); if ( pd1 ) { cout << \"dynamic_cast, B* --> D*: OK\" << endl ; } D * pd2 = new D (); B * pb2 = static_cast < B *> ( pd2 ); if ( pb2 ) { cout << \"static_cast, D* --> B*: OK\" << endl ; } pb2 = dynamic_cast < B *> ( pd2 ); if ( pb2 ) { cout << \"dynamic_cast, D* --> B*: OK\" << endl ; } E * pe = dynamic_cast < E *> ( pb1 ); if ( ! pe ) { cout << \"dynamic_cast, B* --> E*: FAILED\" << endl ; } // pe = static_cast<E*>(pb1); /// ERROR: \u6ca1\u6709\u7ee7\u627f\u5173\u7cfb\u4e0d\u80fd\u8f6c\u6362 // E e = static_cast<E>(b1); /// ERROR\uff1a\u6ca1\u6709\u63d0\u4f9b\u8f6c\u6362\u9014\u5f84 return 0 ; } \u8f93\u51fa static_cast, B* --> D*: OK static_cast, D* --> B*: OK dynamic_cast, D* --> B*: OK dynamic_cast, B* --> E*: FAILED \u51fd\u6570\u6a21\u677f \u6709\u4e9b\u7b97\u6cd5\u5b9e\u73b0\u4e0e\u7c7b\u578b\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u201c\u53c2\u6570\u201d\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u201c\u51fd\u6570\u6a21\u677f\u201d\u3002 \u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u7684\u65b9\u6cd5 template < typename T > \u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) \uff1b \u4f8b\u5982\uff0c\u4efb\u610f\u4e24\u4e2a\u53d8\u91cf\u76f8\u52a0\u7684\u201c\u51fd\u6570\u6a21\u677f\u201d template < typename T > T sum ( T a , T b ) { return a + b ; } \u51fd\u6570\u6a21\u677f\u5728\u8c03\u7528\u65f6\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u80fd\u81ea\u52a8\u63a8\u5bfc\u51fa\u5b9e\u9645\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\uff0c\u5f62\u5f0f\u4e0a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u4e0e\u666e\u901a\u51fd\u6570\u6ca1\u6709\u533a\u522b\uff0c\u5982 int main () { int a = 3 , b = 4 ; cout << sum ( a , b ); float c = 1.3 , d = 1.9 ; cout << sum ( c , d ); } \u51fd\u6570\u6a21\u677f\u53c2\u6570\u4e5f\u53ef\u4ee5\u8d4b\u9ed8\u8ba4\u503c\uff08\u7f3a\u7701\u503c\uff09\uff0c\u5982 #include <iostream> using namespace std ; template < typename T0 = float , typename T1 , typename T2 = float , typename T3 , typename T4 > T0 func ( T1 v1 , T2 v2 = 0 , T3 v3 , T4 v4 ) {...} func ( 1 , 2 , 3 , 4 ); func ( 'a' , 'b' , \"cde\" , 5 ); \u7c7b\u6a21\u677f \u5728\u5b9a\u4e49\u7c7b\u65f6\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e9b\u7c7b\u578b\u4fe1\u606f\u62bd\u53d6\u51fa\u6765\uff0c\u7528\u6a21\u677f\u53c2\u6570\u6765\u66ff\u6362\uff0c\u4ece\u800c\u4f7f\u7c7b\u66f4\u5177\u6709\u901a\u7528\u6027\u3002\u8fd9\u79cd\u7c7b\u88ab\u79f0\u4e3a\u201c\u7c7b\u6a21\u677f\u201d\u3002 template < typename T > class A { public : void print () { cout << data << endl ; } private : T data ; }; \u7c7b\u6a21\u677f \u2192 \u7c7b \u2192 \u5bf9\u8c61 \u7c7b\u6a21\u677f\u7684\u201c\u6a21\u677f\u53c2\u6570\u201d \u7c7b\u578b\u53c2\u6570\uff1a\u4f7f\u7528 typename \u6216 class \u6807\u8bb0 \u975e\u7c7b\u578b\u53c2\u6570\uff1a\u6574\u6570\uff0c\u679a\u4e3e\uff0c\u6307\u9488\uff08\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\uff09\uff0c\u5f15\u7528\uff08\u5f15\u7528\u5bf9\u8c61\u6216\u5f15\u7528\u51fd\u6570\uff09\u3002\u5176\u4e2d\u6574\u6570\u7c7b\u578b\u662f\u6bd4\u8f83\u5e38\u7528\u7684\uff0c\u5982 template < typename T , unsigned size > class Array { T elems [ size ]; ... }; Array < char , 10 > array ; \u6a21\u677f\u53c2\u6570\u662f\u53e6\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a template < typename T , template < typename TT0 , typename TT1 > class A > struct Foo { A < T , T > bar ; }; \u6210\u5458\u51fd\u6570\u6a21\u677f \u666e\u901a\u7c7b\u4e2d\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u6a21\u677f class NormalClass { public : int value ; template < typename T > void set ( T const & v ) { value = int ( v ); } template < typename T > T get (); }; template < typename T > T NormalClass :: get () { return valuel ; } \u7c7b\u6a21\u677f\u4e2d\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u6a21\u677f template < typename T0 > class A { public : T0 value ; template < typename T1 > void set ( T1 const & v ) { value = T0 ( v ); } template < typename T1 > T1 get (); }; template < typename T0 > template < typename T1 > T1 A :: get () { return T1 ( value ); } \u5bf9\u4e8e\u7c7b\u6a21\u677f\u5916\u9762\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u6a21\u677f\uff0c\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef % g++ main.cpp -std=c++11 -o main main.cpp:16:4: error: \u2018template<class T0> class A\u2019 used without template parameters T1 A::get() { ^ main.cpp:16:4: error: too many template-parameter-lists \u6a21\u677f\u7279\u5316 \u6a21\u677f\u53c2\u6570\u7684\u5177\u4f53\u5316/\u7279\u6b8a\u5316 \u6709\u65f6\uff0c\u6709\u4e9b\u7c7b\u578b\u5e76\u4e0d\u9002\u7528\uff0c\u5219\u9700\u8981\u5bf9\u6a21\u677f\u8fdb\u884c\u7279\u6b8a\u5316\u5904\u7406\uff0c\u8fd9\u79f0\u4e3a\u201c\u6a21\u677f\u7279\u5316\u201d\u3002 \u5bf9\u4e8e\u51fd\u6570\u6a21\u677f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5219\u7279\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b\u6240\u6709\u53c2\u6570\u7684\u7279\u4f8b\u7c7b\u578b\uff0c \u4e0d\u80fd\u90e8\u5206\u7279\u5316 \u3002 \u5982 char* Sum(char* char*); \u5728\u51fd\u6570\u540d\u540e\u7528<>\u62ec\u53f7\u6269\u8d77\u5177\u4f53\u7c7b\u578b template <> char * Sum < char *> ( char * a , char * b ) {...} \u7531\u7f16\u8bd1\u5668\u63a8\u5bfc\u51fa\u5177\u4f53\u7c7b\u578b\uff0c\u51fd\u6570\u540d\u4e3a\u666e\u901a\u5f62\u5f0f template <> char * Sum ( char * a , char * b ) {...} \u6a21\u677f\u7684\u90e8\u5206\u7279\u5316\uff08\u504f\u7279\u5316\uff09 \u5bf9\u4e8e\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u90e8\u5206\u7279\u5316\uff0c\u5373\u90e8\u5206\u9650\u5236\u6a21\u677f\u7684\u901a\u7528\u6027\uff0c\u5982\uff1a // \u901a\u7528\u6a21\u677f\u7c7b template < class T1 , class T2 > class A {...}; // \u90e8\u5206\u7279\u5316\u7684\u6a21\u677f\u7c7b\uff1a\u7b2c\u4e8c\u4e2a\u7c7b\u578b\u53c2\u6570\u6307\u5b9a\u4e3a int template < class T1 > class A < T1m int > {...}; \u82e5\u6307\u5b9a\u6240\u6709\u7c7b\u578b\uff0c\u5219<>\u5185\u5c06\u4e3a\u7a7a tempalte <> class A < int , int > {...}; \u51fd\u6570\u6a21\u677f\u7279\u5316\u793a\u4f8b #include <bits/stdc++.h> using namespace std ; template < typename T > T Sum ( T a , T b ) { return a + b ; } template <> char * Sum ( char * a , char * b ) { char * p = new char [ strlen ( a ), strlen ( b ) + 1 ]; strcpy ( p , a ); strcpy ( p + strlen ( a ), b ); return p ; } int main () { cout << Sum ( 3 , 4 ) << ' ' << Sum ( 5.1 , 13.8 ) << endl ; char str1 [] = \"Hello, \" , str2 [] = \"world\" ; cout << Sum ( str1 , str2 ) << endl ; return 0 ; } \u8f93\u51fa 7 18.9 Hello, world \u7c7b\u6a21\u677f\u7279\u5316\u793a\u4f8b #include <bits/stdc++.h> using namespace std ; template < typename T > class Sum { public : Sum ( T op1 , T op2 ) : a ( op1 ), b ( op2 ) {} T DoIT () { return a + b ; } private : T a , b ; }; template <> class Sum < char *> { public : Sum ( char * s1 , char * s2 ) : str1 ( s1 ), str2 ( s2 ) {} char * DoIT () { char * tmp = new char [ strlen ( str1 ) + strlen ( str2 ) + 1 ]; strcpy ( tmp , str1 ); strcat ( tmp + strlen ( str1 ), str2 ); return tmp ; } private : char * str1 , * str2 ; }; int main () { Sum < int > obj1 ( 3 , 4 ); cout << obj1 . DoIT () << endl ; char s1 [] = \"Hello\" , s2 [] = \"THU\" ; Sum < char *> obj2 ( s1 , s2 ); cout << obj2 . DoIT () << endl ; return 0 ; } \u8f93\u51fa\uff1a 7 HelloTHU","title":"\u57fa\u7840\u68b3\u7406"},{"location":"languages/cpp/basic/#c","text":"","title":"C++\u57fa\u7840"},{"location":"languages/cpp/basic/#_1","text":"","title":"\u53d8\u91cf\u5b9a\u4e49"},{"location":"languages/cpp/basic/#auto","text":"\u7531\u7f16\u8bd1\u5668\u6839\u636e\u4e0a\u4e0b\u6587\u81ea\u52a8\u786e\u5b9a\u53d8\u91cf\u7c7b\u578b\uff0c\u5982\uff1a auto i = 3 ; auto f = 4.0f ;","title":"auto\u53d8\u91cf"},{"location":"languages/cpp/basic/#_2","text":"\u6307\u9488\u53d8\u91cf\u6240\u6307\u5185\u5b58\u53ef\u4ee5\u901a\u8fc7 new/delete \u8fd0\u7b97\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u548c\u5220\u9664\uff0c\u5982\uff1a int * ptr = new int ; int * array = new int [ 10 ]; delete ptr ; delete [] array ;","title":"\u6307\u9488\u53d8\u91cf\u7684\u52a8\u6001\u751f\u6210\u548c\u5220\u9664"},{"location":"languages/cpp/basic/#_3","text":"\u5177\u540d\u53d8\u91cf\u7684\u522b\u540d\uff1a\u7c7b\u578b\u540d& \u5f15\u7528\u540d \u53d8\u91cf\u540d int v0 ; int & v1 = v0 ; \u8fd9\u91cc v1 \u662f v0 \u7684\u5f15\u7528\uff0c\u4ed6\u4eec\u5728\u5185\u5b58\u4e2d\u662f\u540c\u4e00\u5355\u5143\u7684\u4e24\u4e2a\u4e0d\u540c\u540d\u5b57 \u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u8fdb\u884c\u521d\u59cb\u5316\uff08\u8d4b\u521d\u503c\uff09\u3002 \u88ab\u5f15\u7528\u53d8\u91cf\u540d\u53ef\u4ee5\u662f\u7ed3\u6784\u53d8\u91cf\u6210\u5458\uff0c\u5982 s.m \u3002 \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u8868\u793a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0e\u5b9e\u9645\u53c2\u6570\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6539\u53d8\u5f62\u53c2\u5c06\u6539\u53d8\u5b9e\u53c2\u3002 \u5982\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570\u5c06\u4ea4\u6362\u5b9e\u53c2\u503c\uff1a void swap ( int & a , int & b ) { int tmp = b ; b = a ; a = tmp ; } \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u4e0d\u80fd\u662f\u51fd\u6570\u7684\u4e34\u65f6\u53d8\u91cf\u3002","title":"\u5de6\u503c\u5f15\u7528"},{"location":"languages/cpp/basic/#c11","text":"\u53f3\u503c \uff1a\u4e0d\u80fd\u53d6\u5730\u5740\u7684\u3001\u6ca1\u6709\u540d\u5b57\u7684\u5c31\u662f\u53f3\u503c \u533f\u540d\u53d8\u91cf\uff08\u4e34\u65f6\u53d8\u91cf\uff09\u7684\u522b\u540d\uff1a\u7c7b\u578b\u540d&& \u5f15\u7528\u540d \u8868\u8fbe\u5f0f\uff0c\u5982 int && sum = 3 + 4 ; float && res = ReturnRvalue ( f1 , f2 ); \u53f3\u503c\u5f15\u7528\u7684\u5178\u578b\u5e94\u7528\u662f\u5728\u51fd\u6570\u53c2\u6570\u4e2d\uff0c\u76ee\u7684\u662f\u51cf\u5c11\u4e34\u65f6\u53d8\u91cf\u7684\u62f7\u8d1d\u5f00\u9500\uff0c\u4f8b\u5982\uff1a void AcceptRvalueRef ( T && s ) {...}","title":"\u53f3\u503c\u5f15\u7528\uff08C++11 \u5f15\u5165\uff09"},{"location":"languages/cpp/basic/#_4","text":"","title":"\u53d8\u91cf\u521d\u59cb\u5316\u3001\u7c7b\u578b\u63a8\u5bfc\u3001\u57fa\u4e8e\u8303\u56f4\u7684\u5faa\u73af"},{"location":"languages/cpp/basic/#_5","text":"\u7528 {}``\u5305\u62ec\u8d77\u6765\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u7528\u6765\u5bf9\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982 int a [] = { 1 , 3 , 5 }; int a [] { 1 , 3 , 5 }; \u521d\u59cb\u5316\u5217\u8868\u53ef\u4ee5\u518d {} \u4e4b\u524d\u4f7f\u7528 =`\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528\u3002 \u53d8\u91cf\u7684\u521d\u59cb\u5316\u65b9\u5f0f int a = 3 + 5 ; int a = { 3 + 5 }; int a ( 3 + 5 ); // \u8c03\u7528int\u7684\u6784\u9020\u51fd\u6570 int a { 3 + 5 }; int * i = new int ( 10 ); double * d = new double { 1.2f }; // \u521d\u59cb\u5316\u5217\u8868","title":"\u521d\u59cb\u5316\u5217\u8868"},{"location":"languages/cpp/basic/#_6","text":"\u4f7f\u7528 decltype \u53ef\u4ee5\u5bf9\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\u7ed3\u679c\u7684\u7c7b\u578b\u8fdb\u884c\u63a8\u5bfc\uff0c\u5982 struct { char * name ; } anon_u ; struct { int d ; decltype ( anon_u ) id ; } anon_s [ 100 ]; // \u533f\u540d\u7684struct\u6570\u7ec4 int main () { decltype ( anon_s ) as ; cin >> as [ 0 ]. id . name ; }","title":"\u7c7b\u578b\u63a8\u5bfc"},{"location":"languages/cpp/basic/#for","text":"\u5728\u5faa\u73af\u5934\u7684\u5706\u62ec\u53f7\u4e2d\uff0c\u7531\u5192\u53f7 : \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u9002\u7528\u4e8e\u8fed\u4ee3\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u5219\u8868\u793a\u88ab\u8fed\u4ee3\u7684\u8303\u56f4\uff0c\u5982\uff1a int arr [ 3 ] = { 1 , 3 , 5 }; for ( int e : arr ) //...","title":"\u57fa\u4e8e\u8303\u56f4\u7684for\u5faa\u73af\u8bed\u53e5"},{"location":"languages/cpp/basic/#_7","text":"","title":"\u51fd\u6570"},{"location":"languages/cpp/basic/#_8","text":"\u540c\u4e00\u540d\u79f0\u7684\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u4e0d\u540c\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u88ab\u79f0\u4e3a\u201c\u51fd\u6570\u91cd\u8f7d\u201d\uff0c\u5982\uff1a void print ( char * msg ) { cout << \"message: \" << msg << endl ; } void print ( int score ) { cout << \"score: \" << score << endl ; } \u51fd\u6570\u91cd\u8f7d\u8981\u6c42\u51fd\u6570\u5f62\u53c2\u4e0d\u540c\uff0c\u4e0d\u80fd\u51fa\u73b0\u4ec5\u4ec5\u8fd4\u56de\u503c\u4e0d\u540c\u7684\u60c5\u51b5\u3002\u7f16\u8bd1\u5668\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u7684\u5b9e\u53c2\u786e\u5b9a\u54ea\u4e00\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u3002 \u591a\u4e2a\u540c\u540d\u51fd\u6570\u5b9e\u73b0\u4e4b\u95f4\uff0c\u5fc5\u987b\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u6709\u533a\u522b\u3002\u8fd4\u56de\u503c\u3001\u53c2\u6570\u540d\u79f0\u7b49\u4e0d\u80fd\u4f5c\u4e3a\u533a\u5206\u6807\u8bc6\u3002","title":"\u51fd\u6570\u91cd\u8f7d"},{"location":"languages/cpp/basic/#_9","text":"\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u5728\u5b9a\u4e49\u65f6\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff08\u7f3a\u7701\u503c\uff09\uff0c\u8fd9\u6837\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u82e5\u4e0d\u63d0\u4f9b\u76f8\u5e94\u7684\u5b9e\u53c2\uff0c\u5219\u7f16\u8bd1\u5668\u81ea\u52a8\u5c06\u76f8\u5e94\u5f62\u53c2\u8bbe\u7f6e\u6210\u7f3a\u7701\u503c\uff0c\u5982\uff1a void print ( char * msg = \"hello\" ) { cout << msg << '#' ; } int main () { print ( \"Beijing...\" ); print (); return 0 ; } \u8f93\u51fa\uff1a Beijing...#hello# \u5e26\u7f3a\u7701\u503c\u7684\u51fd\u6570\u53c2\u6570\u5fc5\u987b\u653e\u5728\u6ca1\u6709\u7f3a\u7701\u503c\u7684\u51fd\u6570\u53c2\u6570\u540e\u9762\u3002","title":"\u51fd\u6570\u53c2\u6570\u7684\u7f3a\u7701\u503c"},{"location":"languages/cpp/basic/#_10","text":"\u53ef\u4ee5\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u4fe1\u606f\u653e\u5230\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u540e\u9762\u8fdb\u884c\u58f0\u660e\uff0c\u5982\uff1a \u666e\u901a\u51fd\u6570\u58f0\u660e\u5f62\u5f0f\uff1a int func ( char * ptr , int val ); \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e\u5f62\u5f0f\uff1a auto func ( char * ptr , int val ) -> int ; \u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u5728\u539f\u672c\u51fd\u6570\u8fd4\u56de\u503c\u7684\u4f4d\u7f6e\u4f7f\u7528 auto \u5173\u952e\u5b57\u3002 \u52a8\u673a \uff1a\u6709\u65f6\u51fd\u6570\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u786e\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u800c\u9700\u8981\u901a\u8fc7 decl \u83b7\u53d6\u53c2\u6570\u7684\u7c7b\u578b\u6765\u786e\u5b9a\u3002 \u5e94\u7528 \uff1a \u5728C++\u6a21\u677f\u7684\u5b9a\u4e49\u4e2d\uff0c\u6709\u65f6\u8fd4\u56de\u7c7b\u578b\u9700\u8981\u6839\u636e\u53c2\u6570\u7c7b\u578b\u7c7b\u786e\u5b9a\uff0c\u4f1a\u7528\u5230\u8fd9\u4e2a\u7279\u6027\u3002","title":"\u8ffd\u8e2a\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570"},{"location":"languages/cpp/basic/#_11","text":"","title":"\u7c7b"},{"location":"languages/cpp/basic/#_12","text":"\u4e00\u79cd\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5305\u542b\u51fd\u6570\u4e0e\u6570\u636e\u7684\u7279\u6b8a\u201c\u7ed3\u6784\u4f53\u201d\uff0c\u6269\u5145C++\u8bed\u8a00\u7684\u7c7b\u578b\u4f53\u7cfb\u3002 \u7c7b\u4e2d\u5305\u542b\u7684\u51fd\u6570\uff0c\u79f0\u4e3a \u6210\u5458\u51fd\u6570 \uff1b\u5305\u542b\u7684\u6570\u636e\uff0c\u79f0\u4e3a \u6570\u636e\u6210\u5458 \u3002 \u7c7b\u4e2d\u51fd\u6570\u53ca\u53ef\u4ee5\u5728\u7c7b\u4e2d\u7ed9\u51fa\u5b9a\u4e49\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u5916\u7ed9\u51fa\u5b9a\u4e49\u3002 \u7c7b\u7684\u6210\u5458\uff08\u51fd\u6570\u3001\u6570\u636e\uff09\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5206\u6210\u7ec4\uff0c\u4e0d\u540c\u7ec4\u8bbe\u7f6e\u4e0d\u540c\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u6743\u9650\u79cd\u7c7b\uff1a public , private , protected \u3002 \u7c7b\u5b9a\u4e49\u540e\uff0c\u6838\u51fd\u6570\u5185\u5efa\u7684\u7c7b\u578b\u4e00\u6837\uff0c\u7528\u7c7b\u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u901a\u5e38\u88ab\u79f0\u4e3a \u5bf9\u8c61 \u3002 \u901a\u8fc7\u201c\u5bf9\u8c61\u540d.\u6210\u5458\u540d\u201d\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458\uff0c\u6216\u8c03\u7528\u5bf9\u8c61\u7684\u6570\u636e\u51fd\u6570\uff0c\u4f46\u4ec5\u9650\u4e8e\u8bbf\u95ee public \u6743\u9650\u7684\u6210\u5458\u3002 \u5728\u7c7b\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u540d\u524d\u8981\u52a0\u4e0a\u7c7b\u540d\u9650\u5b9a\uff0c\u683c\u5f0f\u4e3a\uff1a \u7c7b\u540d::\u51fd\u6570\u540d \uff0c\u5176\u4e2d :: \u79f0\u4e3a \u57df\u8fd0\u7b97\u7b26 \u3002 \u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u7c7b class // matrix.h #ifndef MATRIX_H #define MATRIX_H class Matrix { int data [ 6 ][ 6 ]; public : void fill ( char dir ); }; #endif \u5728\u5b9e\u73b0\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7c7b class // matrix.cpp #include \"matrix.h\" void Matrix :: fill ( char dir ) { //... } \u901a\u5e38\uff0c\u7c7b\u7684\u58f0\u660e\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5b9e\u73b0\u5219\u653e\u5728\u5b9e\u73b0\u6587\u4ef6\u4e2d\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\u548c\u4ee3\u7801\u590d\u7528\uff0c\u4e00\u822c\u662f\u5c06\u4e0d\u540c\u7684\u7c7b\u5206\u522b\u4fdd\u5b58\u4e3a\u4e0d\u540c\u7684\u5934\u6587\u4ef6\u548c\u5b9e\u73b0\u6587\u4ef6\u3002","title":"\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u2014\u2014\u7c7b\uff1a"},{"location":"languages/cpp/basic/#_13","text":"\u53ef\u4ee5\u5728\u7c7b\u7684\u5b9a\u4e49\u5185\u90e8\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528 :: \u8fd0\u7b97\u7b26\u5728\u5916\u90e8\u5b9e\u73b0\u3002 class Matrix { public : void fill ( char dir ) { //... } }; void Matrix :: fill ( char dir ) { //... };","title":"\u6210\u5458\u51fd\u6570\u7684\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f"},{"location":"languages/cpp/basic/#this","text":"\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u53c2\u6570\u4e2d\uff0c\u9690\u542b\u7740\u4e00\u4e2a\u53ea\u60f3\u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488\u53d8\u91cf\u2014\u2014 this \u3002 \u8fd9\u4e5f\u662f \u6210\u5458\u51fd\u6570 \u4e0e \u666e\u901a\u51fd\u6570 \u7684\u91cd\u8981\u533a\u522b","title":"this\u6307\u9488"},{"location":"languages/cpp/basic/#_14","text":"C++\u89c4\u5b9a\u7c7b\u7684\u6210\u5458\u7f3a\u7701\u4e3a private \u6743\u9650\u3002 \u5bf9\u8c61\u4f7f\u7528 . \u64cd\u4f5c\u7b26\u8bbf\u95ee\u5bf9\u8c61\u7684 public \u6210\u5458\u3002 \u5bf9\u8c61\u6307\u9488\u4f7f\u7528 -> \u64cd\u4f5c\u7b26\u8bbf\u95ee\u6240\u6307\u5bf9\u8c61\u7684\u516c\u6709\u6210\u5458\u3002","title":"\u8bbf\u95ee\u6743\u9650"},{"location":"languages/cpp/basic/#_15","text":"\u6709\u65f6\u9700\u8981\u5141\u8bb8\u67d0\u4e9b\u51fd\u6570\u8bbf\u95ee\u5bf9\u8c61\u7684\u79c1\u6709\u6210\u5458\uff0c\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u8be5 \u51fd\u6570 \u4e3a \u7c7b \u7684\u201c\u53cb\u5143\u201d\u6765\u5b9e\u73b0\u3002 class Test { int id ; public : friend void print ( Test obj ); //... }; void print ( Test obj ) { cout << obj . id << endl ; } Test \u7c7b\u4e2d\u58f0\u660e\u4e86 Test \u7c7b\u7684\u53cb\u5143\u51fd\u6570 print \uff0c\u8be5\u51fd\u6570\u5728\u5b9e\u73b0\u65f6\u53ef\u4ee5\u8bbf\u95ee Test \u7c7b\u5b9a\u4e49\u7684\u51fd\u6570\u5bf9\u8c61\u7684\u79c1\u6709\u6210\u5458\u3002 \u5de5\u7a0b\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u5c06UT\u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u751f\u547d\u6210\u88ab\u6d4b\u8bd5\u7c7b\u7684\u53cb\u5143\uff0c\u4ee5\u4fbf\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u8bbf\u95ee\u88ab\u6d4b\u8bd5\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002","title":"\u53cb\u5143"},{"location":"languages/cpp/basic/#_16","text":"\u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\uff1a #include <iostream> using namespace std ; class Test { public : Test () { cout << \"Test()\" << endl ; } Test ( const Test & src ) { cout << \"Test(const Test&)\" << endl ; } ~ Test () { cout << \"~Test()\" << endl ; } }; void func1 ( Test obj ) { cout << \"func1()...\" << endl ; } Test func2 () { cout << \"func2()...\" << endl ; return Test (); } int main () { cout << \"main()...\" << endl ; Test t ; func1 ( t ); t = func2 (); return 0 ; } \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u4f1a\u5728\u51fd\u6570\u7531\u5b9e\u53c2\u83b7\u5f97\u5f62\u53c2\u65f6\u8c03\u7528\u3002 \u8f93\u51fa main()... Test() Test(const Test&) func1()... ~Test() func2()... Test() ~Test() ~Test()","title":"\u6784\u9020\u51fd\u6570\u3001\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570"},{"location":"languages/cpp/basic/#_17","text":"\u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { public : Test ( int _id ) : id ( _id ) { cout << \"obj_\" << id << \"created \\n \" ; } Test & operator = ( const Test & right ) { if ( this == & right ) cout << \"same obj! \\n \" ; else { cout << \"obj_\" << id << \" = obj_\" << right . id << endl ; } return * this ; } private : int id ; }; int main () { Test a ( 1 ), b ( 2 ); cout << \"a = a: \" ; a = a ; cout << \"a = b: \" ; a = b ; return 0 ; } } \u8f93\u51fa obj_1created obj_2created a = a: same obj! a = b: obj_1 = obj_2","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26 = \u91cd\u8f7d"},{"location":"languages/cpp/basic/#_18","text":"\u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { int id ; public : Test ( int _id ) : id ( _id ) { cout << \"obj_\" << id << \"created \\n \" ; } friend istream & operator >> ( istream & in , Test & dst ); friend ostream & operator << ( ostream & out , const Test & src ); }; istream & operator >> ( istream & in , Test & dst ) { in >> dst . id ; return in ; } ostream & operator << ( ostream & out , const Test & src ) { cout << src . id << endl ; return out ; } int main () { Test obj ( 1 ); cout << obj ; cin >> obj ; cout << obj ; return 0 ; } \u5c06 \u6d41\u8fd0\u7b97\u7b26 \u58f0\u660e\u6210 Test Test \u7c7b\u7684\u53cb\u5143\uff0c\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u8bbf\u95ee\u5176\u79c1\u6709\u53d8\u91cf\u3002 \u8fd4\u56de\u6d41\u5bf9\u8c61\u662f\u4e3a\u4e86\u652f\u6301\u6d41\u8fd0\u7b97\u7b26\u7684\u94fe\u5f0f\u64cd\u4f5c\u3002 \u8f93\u51fa\uff08\u4e2d\u95f4\u8f93\u5165\u6d41\u5185\u5bb9\u4e3a 2 2 \uff09 obj_1created 1 2 2","title":"\u6d41\u8fd0\u7b97\u7b26 &lt;&lt;/&gt;&gt; \u91cd\u8f7d"},{"location":"languages/cpp/basic/#_19","text":"\u89e3\u91ca\u5982\u4e0b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c #include <iostream> using namespace std ; class Test { public : int operator ()( int a , int b ) { cout << \"operator() called. \" << a << ' ' << b << endl ; return a + b ; } }; int main () { Test sum ; int s = sum ( 3 , 4 ); cout << \"a + b = \" << s << endl ; return 0 ; } sum\u5bf9\u8c61\u770b\u4e0a\u53bb\u50cf\u4e00\u4e2a\u51fd\u6570\uff0c\u6545\u4e5f\u79f0\u201c\u51fd\u6570\u5bf9\u8c61\u201d\u3002 \u8f93\u51fa operator() called. 3 4 a + b = 7","title":"\u51fd\u6570\u8fd0\u7b97\u7b26 () \u91cd\u8f7d"},{"location":"languages/cpp/basic/#-","text":"","title":"\u4e0b\u6807\u8fd0\u7b97\u7b26 [] \u548c ++/-- \u81ea\u589e\u51cf\u8fd0\u7b97\u7b26"},{"location":"languages/cpp/basic/#_20","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u4f53\u73b0\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u201c\u5305\u88c5\u201d\u7684\u601d\u60f3\uff0c\u8ba9\u539f\u672c\u53ea\u652f\u6301\u6570\u5b57\u7684 [] \u8fd0\u7b97\u7b26\u5bf9\u5916\u652f\u6301\u5b57\u7b26\u4e32\u7c7b\u578b\u7d22\u5f15\u3002 #include <iostream> #include <string.h> using namespace std ; char week_name [ 7 ][ 4 ] = { \"mon\" , \"tu\" , \"wed\" , \"thu\" , \"fri\" , \"sat\" , \"sun\" }; class WeekTemp { public : int & operator []( const char * name ) { for ( int i = 0 ; i < 7 ; i ++ ) { if ( strcmp ( week_name [ i ], name ) == 0 ) return temp [ i ]; } } private : int temp [ 7 ]; }; int main () { WeekTemp beijing ; beijing [ \"mon\" ] = - 3 ; beijing [ \"tu\" ] = - 1 ; cout << \"Monday Temperture: \" << beijing [ \"mon\" ] << endl ; return 0 ; } \u8f93\u51fa Monday Temperture: -3","title":"\u4e0b\u6807\u8fd0\u7b97\u7b26"},{"location":"languages/cpp/basic/#-_1","text":"\u524d\u7f00\u8fd0\u7b97\u7b26\u91cd\u8f7d\u58f0\u660e ReturnType operator ++ (); ReturnType operator -- (); \u540e\u7f00\u8fd0\u7b97\u7b26\u91cd\u8f7d\u58f0\u660e ReturnType operator ++ ( int dummy ); ReturnType operator -- ( int dummy ); \u901a\u8fc7\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u54d1\u5143\u53c2\u6570 dummy \u6765\u533a\u5206\u524d\u7f00\u548c\u540e\u7f00\u7684\u540c\u540d\u91cd\u8f7d\u3002 \u54d1\u5143\uff1a\u51fd\u6570\u4f53\u8bed\u53e5\u4e2d\u6ca1\u6709\u4f7f\u7528\u8be5\u53c2\u6570\u3002","title":"\u524d\u7f00++/--\u4e0e\u540e\u7f00++/--"},{"location":"languages/cpp/basic/#_21","text":"","title":"\u9759\u6001\u6210\u5458\u548c\u5e38\u91cf\u6210\u5458"},{"location":"languages/cpp/basic/#_22","text":"static \u4fee\u9970\u7684\u6570\u636e\u6210\u5458\u96b6\u5c5e\u4e8e\u7c7b\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u88ab\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\uff08\u5373\u6240\u6709\u5bf9\u8c61\u4e2d\u7684\u8fd9\u4e2a\u6570\u636e\u57df\u5904\u4e8e\u540c\u4e00\u5185\u5b58\u4f4d\u7f6e\uff09 \u9759\u6001\u6570\u636e\u6210\u5458\u8981\u5728 \u5b9e\u73b0\u6587\u4ef6 \u4e2d\u8d4b\u521d\u503c\uff0c\u683c\u5f0f\u4e3a\uff1a Type ClassName::static_var = Value; \u5bf9\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4e0d\u63d0\u4f9b\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5b83\u4eec\u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u7c7b\u7684\u9759\u6001\u6210\u5458\u65e2\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u6765\u8bbf\u95ee\u3002 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a\uff1a #include <iostream> using namespace std ; class Test { public : Test () { count ++ ; } ~ Test () { count -- ; } static int how_many () { return count ; } private : static int count ; }; int Test :: count = 0 ; void print ( Test t ) { cout << \"in print(), Test#: \" << t . how_many () << endl ; } int main () { Test t1 ; cout << \"Test#: \" << Test :: how_many () << endl ; Test t2 = t1 ; cout << \"Test#: \" << Test :: how_many () << endl ; print ( t2 ); cout << \"Test#: \" << t1 . how_many () << \", \" << t2 . how_many () << endl ; return 0 ; } \u8f93\u51fa Test#: 1 Test#: 1 in print(), Test#: 1 Test#: 0, 0 \u6ce8\u610f\u5230 t2 = t1; \u6b64\u5904\u8c03\u7528\u7684\u662f = \u8fd0\u7b97\u7b26\uff0c\u800c print(t2); \u8c03\u7528\u7684\u662f \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \uff0c\u4f46\u5728 Test \u91cc\u9762\u5747\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u4f46 print(t2); \u8fd4\u56de\u65f6\u8c03\u7528\u4e86 \u6790\u6784\u51fd\u6570 \uff0c\u6545\u6700\u540e\u4e00\u884c\u9759\u6001\u6210\u5458 count \u53d8\u6210\u4e860\u3002","title":"\u9759\u6001\u6210\u5458"},{"location":"languages/cpp/basic/#_23","text":"const \u4fee\u9970\u7684\u6570\u636e\u6210\u5458\uff0c\u79f0\u4e3a\u7c7b\u7684\u5e38\u91cf\u6570\u636e\u6210\u5458\uff0c\u5728\u5bf9\u8c61\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u91cc\u4e0d\u53ef\u6539\u53d8\u3002 \u5e38\u91cf\u6570\u636e\u6210\u5458\u53ea\u80fd\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u88ab\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u5728\u51fd\u6570\u4f53\u4e2d\u901a\u8fc7\u8d4b\u503c\u8bbe\u7f6e\u3002 const \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u5219\u8be5\u6210\u5458\u51fd\u6570\u5728\u5b9e\u73b0\u65f6\u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u6570\u636e\u6210\u5458 \u2014\u2014\u2014\u2014 \u5373\u9759\u6001\u51fd\u6570\u4e0d\u80fd\u6539\u53d8\u5bf9\u8c61\u72b6\u6001\u3002 \u82e5\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e3a\u5e38\u91cf\uff0c\u5219\u5b83\u53ea\u80fd\u8c03\u7528\u4ee5 const \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u5176\u4ed6\u666e\u901a\u6210\u5458\u51fd\u6570\u5219\u4e0d\u5141\u8bb8\u8c03\u7528\u3002 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a #include <iostream> using namespace std ; class Test { public : Test ( int id ) : ID ( id ) {} int MyID () const { return ID ; } int Who () { return ID ; } private : const int ID ; }; int main () { Test obj1 ( 12231031 ); cout << \"ID_1 = \" << obj1 . MyID () << endl ; cout << \"ID_2 = \" << obj1 . Who () << endl ; const Test obj2 ( 1602401 ); cout << \"id_1: \" << obj2 . MyID () << endl ; return 0 ; } \u8f93\u51fa ID_1 = 12231031 ID_2 = 12231031 id_1: 1602401","title":"\u5e38\u91cf\u6210\u5458"},{"location":"languages/cpp/basic/#_24","text":"\u53ef\u4ee5\u5728\u7c7b\u4e2d\u4f7f\u7528\u5176\u4ed6\u7c7b\u6765\u5b9a\u4e49\u6570\u636e\u6210\u5458\uff0c\u901a\u5e38\u79f0\u4e4b\u4e3a\u201c\u5b50\u5bf9\u8c61\u201d\u3002\u8fd9\u79cd\u5305\u542b\u5173\u7cfb\u79f0\u4e3a \u7ec4\u5408 \uff0c\u7ec4\u5408\u5173\u7cfb\u53ef\u4ee5\u5d4c\u5957\u3002 \u5b50\u5bf9\u8c61\u6784\u9020\u65f6\u82e5\u9700\u8981\u53c2\u6570\uff0c\u5219\u5e94\u5728\u5f53\u524d\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684 \u521d\u59cb\u5316\u5217\u8868 \u4e2d\u8fdb\u884c\u3002\u82e5\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u6784\u9020\u5b50\u5bf9\u8c61\u5219\u4e0d\u7528\u505a\u4efb\u4f55\u5904\u7406\u3002 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784\u6b21\u5e8f\uff1a\u7a7f\u8131\u539f\u7406 \u5148\u5b8c\u6210\u5b50\u5bf9\u8c61\u6784\u9020\uff0c\u518d\u5b8c\u6210\u5f53\u524d\u5bf9\u8c61\u6784\u9020 \u5148\u5bf9\u5916\u5c42\u5bf9\u8c61\u6790\u6784\uff0c\u518d\u5bf9\u5185\u5c42\u5bf9\u8c61\u6790\u6784 \u89e3\u91ca\u5982\u4e0b\u4ee3\u7801\u884c\u4e3a #include <iostream> using namespace std ; class C1 { public : C1 ( int id ) : ID ( id ) { cout << \"C1(int)\" << endl ; } ~ C1 () { cout << \"~C1()\" << endl ; } private : int ID ; }; class C2 { public : C2 () { cout << \"C2()\" << endl ; } ~ C2 () { cout << \"~C2()\" << endl ; } }; class C3 { public : C3 () : num ( 0 ), sub_obj1 ( 123 ) { cout << \"C3()\" << endl ; } C3 ( int n ) : num ( n ), sub_obj1 ( 123 ) { cout << \"C3(int)\" << endl ; } C3 ( int n , int k ) : num ( n ), sub_obj1 ( k ) { cout << \"C3(int, int)\" << endl ; } ~ C3 () { cout << \"~C3()\" << endl ; } private : int num ; C1 sub_obj1 ; C2 sub_obj2 ; }; int main () { C3 a , b ( 1 ), c ( 2 ), d ( 3 , 4 ); return 0 ; } C1 \u3001 C2 \u662f C3 \u7684\u5b50\u5bf9\u8c61\uff0c\u5176\u4e2d C2 \u63d0\u4f9b\u4e86\u7f3a\u7701\u6784\u9020\u51fd\u6570\uff0c\u6545\u5728 C3 \u4e2d\u4e0d\u7528\u663e\u5f0f\u521d\u59cb\u5316\uff1b\u4f46 C1 \u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u6545\u5fc5\u987b\u5728 C3 \u7684 \u521d\u59cb\u5316\u5217\u8868 \u91cc\u9762\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u8f93\u51fa C1(int) C2() C3() C1(int) C2() C3(int) C1(int) C2() C3(int) C1(int) C2() C3(int, int) ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() ~C3() ~C2() ~C1() \u4ece\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\u6784\u9020\u94fe\u4ece\u5185\u5230\u5916\uff0c\u800c\u6790\u6784\u94fe\u4ece\u5916\u5411\u5185\u3002","title":"\u5bf9\u8c61\u7ec4\u5408"},{"location":"languages/cpp/basic/#c-11","text":"\u8bed\u6cd5\uff1a ClassName(ClassName&&); \u76ee\u7684 \u7528\u6765\u5077\u201c\u4e34\u65f6\u53d8\u91cf\u201d\u4e2d\u7684\u8d44\u6e90\uff08\u5982\u5185\u5b58\uff09\u3002 \u4e34\u65f6\u53d8\u91cf\u88ab\u7f16\u8bd1\u5668\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u5f62\u5f0f\uff0c\u4f7f\u7528\u201c\u62f7\u8d1d\u6784\u9020\u201d\u51fd\u6570\u65e0\u6cd5\u5c06\u8d44\u6e90\u201c\u5077\u201d\u51fa\u6765\uff08\u6539\u52a8\u4e86\u5143\u5bf9\u8c61\uff0c\u8fdd\u53cd\u5e38\u91cf\u7684\u9650\u5236\uff09\u3002 \u57fa\u4e8e \u53f3\u503c\u5f15\u7528 \u5b9a\u4e49\u7684 \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u652f\u6301\u63a5\u53d7\u4e34\u65f6\u53d8\u91cf\uff0c\u80fd\u201c\u5077\u201d\u51fa\u4e34\u65f6\u53d8\u91cf\u4e2d\u7684\u8d44\u6e90\u3002 #include <iostream> using namespace std ; class Test { public : int * buf ; Test () { buf = new int ( 3 ); cout << \"Test(): this->buf @ \" << hex << buf << endl ; } ~ Test () { cout << \"~Test(): this->buf @ \" << hex << buf << endl ; if ( buf ) delete buf ; } Test ( Test & t ) : buf ( new int ( * t . buf )) { cout << \"Test(const Test&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; } Test ( Test && t ) : buf ( t . buf ) { cout << \"Test(Test&&) called. this->buf @ \" << hex << buf << endl ; t . buf = nullptr ; } }; Test GetTemp () { Test tmp ; cout << \"GetTemp(): tmp.buf @ \" << hex << tmp . buf << endl ; return tmp ; } void fun ( Test t ) { cout << \"fun(Test t): t.buf @ \" << hex << t . buf << endl ; } int main () { Test a = GetTemp (); cout << \"main() : a.buf @ \" << hex << a . buf << endl ; fun ( a ); return 0 ; } \u8f93\u51fa Test(): this->buf @ 0x558bd1e13e70 GetTemp(): tmp.buf @ 0x558bd1e13e70 main() : a.buf @ 0x558bd1e13e70 Test(const Test&) called. this->buf @ 0x558bd1e142a0 fun(Test t): t.buf @ 0x558bd1e142a0 ~Test(): this->buf @ 0x558bd1e142a0 ~Test(): this->buf @ 0 \u5728\u5982\u4e0a\u7ed3\u679c\u4e2d\u6ca1\u6709\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u6b32\u6267\u884c\u8be5\u51fd\u6570\uff0c\u9700\u8981\u589e\u52a0\u7f16\u8bd1\u9009\u9879\uff0c\u7981\u6b62\u7f16\u8bd1\u5668\u8fdb\u884c\u8fd4\u56de\u503c\u4f18\u5316 g++ main.cpp --std = c++11 -fno-elide-constructors -o main \u8f93\u51fa Test(): this->buf @ 0x560b6f4dce70 GetTemp(): tmp.buf @ 0x560b6f4dce70 Test(Test&&) called. this->buf @ 0x560b6f4dce70 ~Test(): this->buf @ 0 Test(Test&&) called. this->buf @ 0x560b6f4dce70 ~Test(): this->buf @ 0 main() : a.buf @ 0x560b6f4dce70 Test(const Test&) called. this->buf @ 0x560b6f4dd2a0 fun(Test t): t.buf @ 0x560b6f4dd2a0 ~Test(): this->buf @ 0x560b6f4dd2a0 ~Test(): this->buf @ 0 \u53ef\u89c1\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u8c03\u7528\u7684\u662f\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u5c06 Test \u7c7b\u4e2d\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u53bb\u6389\uff0c\u540c\u6837\u7981\u7528\u7f16\u8bd1\u4f18\u5316\uff0c\u5219\u7f16\u8bd1\u62a5\u9519\uff1a main.cpp: In function \u2018int main()\u2019: main.cpp:38:21: error: cannot bind non-const lvalue reference of type \u2018Test&\u2019 to an rvalue of type \u2018Test\u2019 Test a = GetTemp(); ~~~~~~~^~ main.cpp:18:5: note: initializing argument 1 of \u2018Test::Test(Test&)\u2019 Test(Test& t) : buf(new int(*t.buf)) { ^~~~","title":"\u79fb\u52a8\u6784\u9020\u51fd\u6570 (C++ 11\u5f15\u5165)"},{"location":"languages/cpp/basic/#default-c-11","text":"","title":"default\u4fee\u9970\u7b26 (C++ 11\u5f15\u5165)"},{"location":"languages/cpp/basic/#_25","text":"\u5982\u679c\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\u7528\u6237\u90fd\u6ca1\u6709\u4e3a\u7c7b\u5b9e\u73b0\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4e3a\u7c7b\u751f\u6210\u5b83\u4eec\u7684\u7f3a\u7701\u5b9e\u73b0 \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 - \u7a7a\u51fd\u6570\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a \u6790\u6784\u51fd\u6570 - \u7a7a\u51fd\u6570\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a \u62f7\u8d1d\u6784\u9020\u51fd\u6570 - \u6309bit\u4f4d\u8d4b\u503c\u5bf9\u8c61\u6240\u5360\u5185\u5b58\u5185\u5bb9 \u79fb\u52a8\u6784\u9020\u51fd\u6570 - \u4e0e\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e00\u6837 \u8d4b\u503c\u8fd0\u7b97\u7b26\u91cd\u8f7d - \u4e0e\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e00\u6837 \u5982\u679c\u7528\u6237\u5b9a\u4e49\u4e86\u4e0a\u8ff0\u67d0\u4e2a\u6210\u5458\u51fd\u6570\uff0c\u5219\u7f16\u8bd1\u5668\u4e0d\u518d\u81ea\u52a8\u63d0\u4f9b\u76f8\u5e94\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002","title":"\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\u6210\u5458\u51fd\u6570"},{"location":"languages/cpp/basic/#default","text":"\u5728\u9ed8\u8ba4\u51fd\u6570\u5b9a\u4e49\u6216\u58f0\u660e\u52a0\u4e0a =default \uff0c\u53ef\u663e\u5f0f\u7684\u53ea\u662f\u7f16\u8bd1\u5668\u751f\u6210\u8be5\u51fd\u6570\u7684\u9ed8\u8ba4\u7248\u672c\u3002 class T { public : T () = default ; T ( int i ) : data ( i ) {} private : int data ; };","title":"=default\u663e\u5f0f\u7f3a\u7701"},{"location":"languages/cpp/basic/#_26","text":"\u5728\u5df2\u6709\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u201c\u7ee7\u627f\u201d\u6765\u5b9a\u4e49\u65b0\u7684\u7c7b\uff0c\u5b9e\u73b0\u5bf9\u5df2\u6709\u4ee3\u7801\u7684\u590d\u7528\u3002 \u5e38\u89c1\u7684\u7ee7\u627f\u65b9\u5f0f\uff1a public , private class Derived: [private] Base {...}; \u7f3a\u7701\u7ee7\u627f\u65b9\u5f0f\u662f private \u7ee7\u627f\u3002 class Derived: public Base {...}; \u57fa\u7c7b/\u7236\u7c7b - base class - \u88ab\u7ee7\u627f\u7684\u5df2\u6709\u7c7b \u6d3e\u751f\u7c7b/\u5b50\u7c7b/\u6269\u5c55\u7c7b - derived class - \u901a\u8fc7\u7ee7\u627f\u5f97\u5230\u7684\u65b0\u7c7b","title":"\u7ee7\u627f"},{"location":"languages/cpp/basic/#_27","text":"\u57fa\u7c7b\u4e2d\u7684\u6570\u636e\u6210\u5458\u901a\u8fc7\u7ee7\u627f\u6210\u4e3a\u5b50\u7c7b\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u9700\u8981\u5728\u6784\u9020\u5b50\u7c7b\u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528\u79ef\u7d2f\u7684\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u3002 \u82e5\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u5bf9\u57fa\u7c7b\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u8c03\u7528 \u82e5\u91c7\u7528\u663e\u5f0f\u8c03\u7528\uff0c\u5219\u53ea\u80fd\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c \u5148\u6267\u884c\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316\u7ee7\u627f\u6765\u7684\u6570\u636e\uff0c\u518d\u6267\u884c\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002 \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u5148\u6267\u884c\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528\u7684\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002","title":"\u5b50\u7c7b\u5bf9\u8c61\u7684\u6784\u9020\u4e0e\u6790\u6784\u8fc7\u7a0b"},{"location":"languages/cpp/basic/#_28","text":"\u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b #include <iostream> using namespace std ; class Base { public : Base ( int _data ) : data ( _data ) { cout << \"Base::Base(\" << _data << \") \\n \" ; } private : int data ; }; class Derive : public Base { public : using Base :: Base ; void print () { cout << \"data = \" << data << endl ; } private : int data { 2020 }; }; int main () { Derive obj ( 356 ); obj . print (); return 0 ; } Derive \u4e2d\u4f7f\u7528 using Base::Base; \u5c06 Base \u4e2d\u7684\u6240\u6709\u6784\u9020\u51fd\u6570\u90fd\u7ee7\u627f\u4e86\u8fc7\u6765\u3002\u6545\u53ef\u4ee5\u8c03\u7528\u5e26\u4e00\u4e2a int \u578b\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 Base::Base(356) data = 2020 \u867d\u7136\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u7684\u9ed8\u8ba4\u503c\u4e0d\u4f1a\u88ab\u5b50\u7c7b\u7ee7\u627f\uff0c\u4f46\u7531\u9ed8\u8ba4\u53c2\u6570\u5bfc\u81f4\u7684\u591a\u4e2a\u6784\u9020\u51fd\u6570\u7248\u672c\u90fd\u4f1a\u88ab\u5b50\u7c7b\u7ee7\u627f\u3002 \u5982\u679c\u57fa\u7c7b\u7684\u67d0\u4e2a\u6784\u9020\u51fd\u6570\u88ab\u58f0\u660e\u6210\u79c1\u6709\u6210\u5458\u51fd\u6570\uff0c\u5219\u4e0d\u80fd\u5728\u5b50\u7c7b\u4e2d\u58f0\u660e\u7ee7\u627f\u8be5\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u5b50\u7c7b\u4f7f\u7528\u4e86\u7ee7\u627f\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u518d\u4e3a\u5b50\u7c7b\u751f\u6210\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002","title":"\u7ee7\u627f\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570"},{"location":"languages/cpp/basic/#override","text":"","title":"\u51fd\u6570\u91cd\u5199 (override)"},{"location":"languages/cpp/basic/#_29","text":"\u5b50\u7c7b\u5bf9\u8c61\u5305\u542b\u4ece\u57fa\u7c7b\u7ee7\u627f\u6765\u7684\u6570\u636e\u6210\u5458\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u201c\u57fa\u7c7b\u5b50\u5bf9\u8c61\u201d\u3002 \u57fa\u7c7b\u4e2d\u7684\u79c1\u6709\u6210\u5458\uff0c\u4e0d\u5141\u8bb8\u5728\u5b50\u7c7b\u6210\u5458\u51fd\u6570\u4e2d\u88ab\u8bbf\u95ee\uff0c\u4e5f\u4e0d\u5141\u8bb8\u5b50\u7c7b\u7684\u5bf9\u8c61\u8bbf\u95ee\u5b83\u4eec\u3002 \u771f\u6b63\u4f53\u73b0\u201c\u57fa\u7c7b\u79c1\u6709\u201d\uff0c\u5bf9\u5b50\u7c7b\u4e5f\u4e0d\u5f00\u653e\u5176\u6743\u9650 \u57fa\u7c7b\u4e2d\u7684\u516c\u6709\u6210\u5458\uff1a \u82e5\u4f7f\u7528 public \u7ee7\u627f\u65b9\u5f0f\uff0c\u5219\u6210\u4e3a\u5b50\u7c7b\u7684\u516c\u6709\u6210\u5458\uff0c\u65e2\u53ef\u4ee5\u5728\u5b50\u7c7b\u6210\u5458\u4e2d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u88ab\u5b50\u7c7b\u7684\u5bf9\u8c61\u8bbf\u95ee\uff1b \u82e5\u4f7f\u7528 private \u7ee7\u627f\u65b9\u5f0f\uff0c\u5219\u53ea\u80fd\u4f9b\u5b50\u7c7b\u6210\u5458\u51fd\u6570\u7684\u8bbf\u95ee\uff0c\u4e0d\u80fd\u88ab\u5b50\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801 #include <iostream> using namespace std ; class B { public : void f () { cout << \"in B::f()...\" << endl ; } }; class D1 : public B {}; class D2 : private B { public : void g () { cout << \"in D2::g(), calling f()...\" << endl ; f (); } }; int main () { cout << \"in main()...\" << endl ; D1 obj1 ; cout << \"calling obj1.f()...\" << endl ; obj1 . f (); D2 obj2 ; cout << \"calling obj2.g()...\" << endl ; obj2 . g (); return 0 ; } \u8f93\u51fa in main()... calling obj1.f()... in B::f()... calling obj2.g()... in D2::g(), calling f()... in B::f()... \u5982\u679c\u79c1\u6709\u7ee7\u627f\u7684\u5b50\u7c7b D2 \u8c03\u7528\u7236\u7c7b\u7684\u5171\u6709\u51fd\u6570\uff0c\u5219\u4f1a\u62a5\u9519\uff1a error: \u2018B\u2019 is not an accessible base of \u2018D2 \u8fd9\u91cc\u57fa\u7c7b\u63a5\u53e3\u4e0d\u8bb8\u5b50\u7c7b\u5bf9\u8c61\u8c03\u7528\u3002","title":"\u5b50\u7c7b\u4e2d\u7684\u57fa\u7c7b\u6210\u5458"},{"location":"languages/cpp/basic/#_30","text":"\u57fa\u7c7b\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\uff0c\u5728\u5b50\u7c7b\u4e2d\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\uff0c\u8fd9\u88ab\u79f0\u4e3a\u201c\u51fd\u6570\u91cd\u5199\u201d\uff08override\uff09 \u91cd\u5199\u53d1\u751f\u65f6\uff0c\u57fa\u7c7b\u4e2d\u8be5\u6210\u5458\u51fd\u6570\u7684\u5176\u4ed6\u91cd\u8f7d\u51fd\u6570\u90fd\u5c06\u88ab\u5c4f\u853d\u6389\uff0c\u4e0d\u80fd\u63d0\u4f9b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u4f7f\u7528\u3002 \u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u901a\u8fc7 using \u7c7b\u540d::\u6210\u5458\u51fd\u6570\u540d; \u5728\u5b50\u7c7b\u4e2d\u201c=\u6062\u590d\u201d\u6307\u5b9a\u7684\u57fa\u7c7b\u6210\u5458\u51fd\u6570\uff08\u53bb\u6389\u5c4f\u853d\uff09\uff0c\u4f7f\u4e4b\u91cd\u65b0\u53ef\u7528\u3002 \u8003\u8651\u5982\u4e0b\u4ee3\u7801 #include <iostream> using namespace std ; class T {}; class B { public : void f () { cout << \"B::f() \\n \" ; } void f ( int i ) { cout << \"B::f(\" << i << \") \\n \" ; } void f ( double d ) { cout << \"B::f(\" << d << \") \\n \" ; } void f ( T ) { cout << \"B::f(T) \\n \" ; } }; class D1 : public B { public : void f ( int i ) { cout << \"D1::f(\" << i << \") \\n \" ; } }; int main () { D1 d ; d . f ( 10 ); d . f ( 4.9 ); // d.f(); // d.f(T()) }; \u6ce8\u610f d.f(4.9); \u8fd9\u4e00\u53e5\u7f16\u8bd1\u4f1a\u51fa\u8b66\u544a\uff0c\u7f16\u8bd1\u5668\u6267\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4f7f\u7528\u6574\u578b\u53c2\u6570\u7684\u51fd\u6570\u7248\u672c\u3002 \u800c\u88ab\u6ce8\u91ca\u7684\u4e24\u4e2a\u8bed\u53e5\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff0c\u56e0\u4e3a\u91cd\u5199\u5bfc\u81f4\u5176\u4ed6\u91cd\u8f7d\u51fd\u6570\u88ab\u5c4f\u853d\u6389 \u8f93\u51fa D1::f(10) D1::f(4) \u4f7f\u7528 using \u6062\u590d\u57fa\u7c7b\u51fd\u6570 #include <iostream> using namespace std ; class T {}; class B { public : void f () { cout << \"B::f() \\n \" ; } void f ( int i ) { cout << \"B::f(\" << i << \") \\n \" ; } void f ( double d ) { cout << \"B::f(\" << d << \") \\n \" ; } void f ( T ) { cout << \"B::f(T) \\n \" ; } }; class D1 : public B { public : using B :: f ; void f ( int i ) { cout << \"D1::f(\" << i << \") \\n \" ; } }; int main () { D1 d ; d . f ( 10 ); d . f ( 4.9 ); d . f (); d . f ( T ()); return 0 ; }; \u8f93\u51fa D1::f(10) B::f(4.9) B::f() B::f(T)","title":"\u5b50\u7c7b\u91cd\u5199\u57fa\u7c7b\u7684\u6210\u5458\u51fd\u6570"},{"location":"languages/cpp/basic/#_31","text":"","title":"\u865a\u51fd\u6570"},{"location":"languages/cpp/basic/#_32","text":"\u5b50\u7c7b\u5bf9\u8c61\u8f6c\u6362\u6210\u57fa\u7c7b\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5411\u4e0a\u6620\u5c04\u3002\u800c\u57fa\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b50\u7c7b\u5bf9\u8c61\uff0c\u6210\u4e3a\u5411\u4e0b\u6620\u5c04\u3002 \u5411\u4e0a\u6620\u5c04\u53ef\u4ee5\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\uff0c\u662f\u4e00\u79cd\u9690\u5f0f\u7684\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u3002 \u6240\u6709\u63a5\u53d7\u57fa\u7c7b\u5bf9\u8c61\u7684\u5730\u65b9\uff08\u5982\u51fd\u6570\u53c2\u6570\uff09\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b50\u7c7b\u5bf9\u8c61\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5b50\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u57fa\u7c7b\u5bf9\u8c61\u4ee5\u4fbf\u4f7f\u7528\u3002 \u5728\u5982\u4e0b\u4ee3\u7801\u4e2d\uff0c\u5b50\u7c7b\u91cd\u5199\u4e86\u57fa\u7c7b\u7684 print \u51fd\u6570\uff0c\u5c06\u5b50\u7c7b\u5bf9\u8c61\u4f20\u7ed9\u4ee5\u57fa\u7c7b\u4f5c\u4e3a\u5f62\u53c2\u7684\u51fd\u6570\uff0c\u5b50\u7c7b\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a\u57fa\u7c7b\uff0c\u6545\u51fd\u6570\u5185\u8c03\u7528\u7684\u662f\u57fa\u7c7b\u7684 print \u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : void print () { cout << \"Base::print()\" << endl ; } }; class Derive : public Base { public : void print () { cout << \"Derive::print()\" << endl ; } }; void fun ( Base obj ) { obj . print (); } int main () { Derive d ; d . print (); fun ( d ); return 0 ; } \u8f93\u51fa Derive::print() Base::print()","title":"\u5411\u4e0a\u6620\u5c04\u548c\u5411\u4e0b\u6620\u5c04"},{"location":"languages/cpp/basic/#_33","text":"\u5bf9\u4e8e\u88ab\u5b50\u7c7b\u91cd\u5199\u7684\u6210\u5458\u51fd\u6570\uff0c\u82e5\u5b83\u5728\u57fa\u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff08\u5982\u4e0b\u6240\u793a\uff09\uff0c\u5219\u901a\u8fc7\u79ef\u7d2f\u6307\u9488\u6216\u5f15\u7528\u8c03\u7528\u8be5\u51fd\u6570\u6210\u5458\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u6240\u6307\uff08\u6216\u5f15\u7528\uff09\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u662f\u8c03\u7528\u79ef\u7d2f\u4e2d\u7684\u51fd\u6570\uff0c\u8fd8\u662f\u8c03\u7528\u5b50\u7c7b\u91cd\u5199\u7684\u51fd\u6570\u3002 class Base { public : virtual \u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2 ); ... }; \u82e5\u67d0\u6210\u5458\u51fd\u6570\u5728\u57fa\u7c7b\u4e2d\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u5f53\u5b50\u7c7b\u91cd\u5199\u5b83\u65f6\uff0c\u65e0\u8bba\u662f\u5426\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8be5\u6210\u5458\u51fd\u6570\u4ecd\u7136\u662f\u865a\u51fd\u6570\u3002 \u5c06\u4e0a\u4e00\u8282\u7684\u4f8b\u5b50\u4e2d\u57fa\u7c7b\u7684 print \u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u51fd\u6570 fun \u7684\u5f62\u53c2\u6539\u4e3a\u57fa\u7c7b\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u5219\u8c03\u7528\u7684\u5c31\u662f\u865a\u51fd\u6570\u5728\u5b50\u7c7b\u4e2d\u7684\u5b9e\u73b0\u3002 #include <iostream> using namespace std ; class Base { public : virtual void print () { cout << \"Base::print()\" << endl ; } }; class Derive : public Base { public : void print () { cout << \"Derive::print()\" << endl ; } }; void fun ( Base & obj ) { obj . print (); } int main () { Derive d ; d . print (); fun ( d ); return 0 ; } \u8f93\u51fa Derive::print() Derive::print()","title":"\u865a\u51fd\u6570"},{"location":"languages/cpp/basic/#_34","text":"\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u603b\u662f\u8981\u88ab\u58f0\u660e\u6210 virtual \u7684\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u5b50\u7c7b\u5b9a\u4e49\u7684\u6790\u6784\u51fd\u6570\u603b\u80fd\u88ab\u6267\u884c\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\uff1a\u4efb\u4f55\u7c7b\u7684\u6790\u6784\u51fd\u6570\u90fd\u5e94\u8be5\u88ab\u58f0\u660e\u6210 virtual \u7684\uff0c\u56e0\u4e3a\u8c01\u53c8\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u7c7b\u4e0d\u4f1a\u88ab\u5176\u4ed6\u7684\u7c7b\u7ee7\u627f\u5462\uff1f #include <iostream> using namespace std ; class B { public : virtual void show () { cout << \"B.show() \\n \" ; } virtual ~ B () { cout << \"~B() \\n \" ; } }; class D : public B { public : void show () { cout << \"D.show() \\n \" ; } ~ D () { cout << \"~D() \\n \" ; } }; void test ( B * ptr ) { ptr -> show (); } int main () { B * ptr = new D ; test ( ptr ); delete ptr ; return 0 ; } \u8f93\u51fa D.show() ~D() ~B() \u4ece\u8f93\u51fa\u53ef\u89c1\u6790\u6784\u51fd\u6570\u7684\u8c03\u7528\u987a\u5e8f\u662f \u5148\u8c03\u7528\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570 \u3002 \u5982\u679c\u5220\u9664\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u524d\u7684 virtual \u5173\u952e\u5b57\uff0c\u5219\u8f93\u51fa\u4e3a D.show() ~B() \u6b64\u65f6\u5982\u679c\u5b50\u7c7b\u4e2d\u72ec\u6709\u7684\u6570\u636e\u6210\u5458\uff0c\u5219\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u91ca\u653e\uff0c\u8fdb\u800c\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u3002","title":"\u865a\u6790\u6784\u51fd\u6570"},{"location":"languages/cpp/basic/#final-c-11","text":"\u4f7f\u7528 final \u7ba1\u554a\u67b6\u5b50\u4fee\u9970\u7684\u865a\u51fd\u6570\uff0c\u5b50\u7c7b\u4e0d\u53ef\u5bf9\u5b83\u8fdb\u884c\u91cd\u5199 \u2014\u2014 \u6539\u53d8\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u5728\u6d3e\u751f\u8fc7\u7a0b\u4e2d\uff0c final \u53ef\u4ee5\u518d\u7ee7\u627f\u5173\u7cfb\u94fe\u7684 \u4e2d\u9014 \u8fdb\u884c\u8bbe\u5b9a\uff0c\u7981\u6b62\u540e\u7eed\u5b50\u7c7b\u5bf9\u6307\u5b9a\u865a\u51fd\u6570\u91cd\u5199\u3002 \u4e0b\u5c5e\u4ee3\u7801\u4e2d\uff0c class C \u7684\u5b9e\u73b0\u662f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u7684\u3002 class A { public : virtual void fun () = 0 ; }; class B : public A { public : void fun () final ; }; class C : public B { public : void fun (); }; class A \u4e2d\u7684 virtual void fun() = 0; \u5c06 fun() \u5b9a\u4e49\u4e3a\u4e00\u4e2a \u7eaf\u865a\u51fd\u6570 \u3002 A \u7531\u6b64\u6210\u4e3a\u4e00\u4e2a \u62bd\u8c61\u7c7b \u3002 C++\u4e2d\u62bd\u8c61\u7c7b\u4e0d\u80fd\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u4e00\u822c\u7528\u4e8e \u5b9a\u4e49\u63a5\u53e3 \u3002","title":"\u7981\u6b62\u91cd\u5199\u7684\u865a\u51fd\u6570final (c++ 11\u5f15\u5165)"},{"location":"languages/cpp/basic/#_35","text":"","title":"\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"languages/cpp/basic/#-_2","text":"#include <iostream> using namespace std ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } }; class Src { public : Src () { cout << \"Src::operator Dst() called\" << endl ; } operator Dst () const { cout << \"Src::operator Dst() called\" << endl ; return Dst (); } };","title":"\u65b9\u6cd5\u4e00 - \u5728\u6e90\u7c7b\u4e2d\u5b9a\u4e49\u201c\u76ee\u6807\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26\u201d"},{"location":"languages/cpp/basic/#-_3","text":"#include <iostream> using namespace std ; class Src ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } Dst ( const Src & s ) { cout << \"Dst::Dst(const Src&)\" << endl ; } }; class Src { public : Src () { cout << \"Src::Src()\" << endl ; } }; \u6ce8\uff1a class Src; \u8fd9\u4e00\u884c\u662f\u4e00\u4e2a\u524d\u7f6e\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u56e0\u4e3a\u5728 Dst \u7684\u5b9a\u4e49\u4e2d\u8981\u7528\u5230 Src \u7c7b\u3002","title":"\u65b9\u6cd5\u4e8c - \u5728\u76ee\u6807\u7c7b\u4e2d\u5b9a\u4e49\u201c\u6e90\u7c7b\u5bf9\u8c61\u505a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u201d"},{"location":"languages/cpp/basic/#_36","text":"\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff08\u9690\u5f0f\u8f6c\u6362\uff09 void Func ( Dst d ) {} int main () { Src s ; Dst d1 ( s ); // \u8fd9\u662f\u76f4\u63a5\u6784\u9020\uff0c\u4e0d\u662f\u7c7b\u578b\u8f6c\u6362 Dst d2 = s ; // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u662f\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Func ( s ); // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 return 0 \uff1b } \u6ce8\u610f\uff1a\u4e24\u79cd\u81ea\u5b9a\u4e49\u7c7b\u578b\u8f6c\u6362\u7684\u65b9\u6cd5\u4e0d\u80fd\u540c\u65f6\u4f7f\u7528\uff0c\u53ea\u6709\u5728\u4e0a\u8ff0\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u4f7f\u7528\u4e14\u4f7f\u7528\u4e00\u4e2a\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002","title":"\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u4e3e\u4f8b"},{"location":"languages/cpp/basic/#_37","text":"","title":"\u7981\u6b62\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362"},{"location":"languages/cpp/basic/#-explicit","text":"#include <iostream> using namespace std ; class Src ; class Dst { public : Dst () { cout << \"Dst::Dst()\" << endl ; } explicit // <1> \u4e0d\u51c6\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 Dst ( const Src & s ) { cout << \"Dst::Dst(const Src&)\" << endl ; } }; class Src { public : Src () { cout << \"Src::Src()\" << endl ; } explicit // <2> \u4e0d\u51c6\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 operator Dst () const { cout << \"Src::operator Dst() called\" << endl ; return Dst (); } }; <1> - \u8be5\u51fd\u6570\u53ea\u7528\u4e8e\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff08\u4e0d\u80fd\u81ea\u52a8\u8c03\u7528\uff09 <2> - \u8be5\u51fd\u6570\u53ea\u7528\u4e8e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u7528\u4e8e\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff08\u4e0d\u80fd\u81ea\u52a8\u8c03\u7528\uff09 \u4e3a\u6b64\uff0c\u5982\u60f3\u8ba9\u4e0b\u65b9\u4ee3\u7801\u901a\u8fc7\uff0c\u4e0a\u65b9\u4ee3\u7801\u4e2d\u4e24\u5904 explicit \u5fc5\u987b\u4fdd\u7559\u4e14\u4ec5\u4fdd\u7559\u4e00\u5904\u3002 void Func ( Dst d ) {} int main () { Src s ; Dst d1 ( s ); Dst d2 = s ; Func ( s ); return 0 ; }","title":"\u65b9\u6cd5\u4e00 - explicit\u5173\u952e\u5b57"},{"location":"languages/cpp/basic/#-delete-c-11","text":"\u4f7f\u7528 =delete \u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e0d\u5141\u8bb8\u88ab\u8c03\u7528\u3002 #include <iostream> using namespace std ; class T { public : T ( int ) {} T ( char ) = delete ; // \u53ef\u6d88\u9664\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5e26\u6765\u7684\u9690\u60a3\uff0c\u5982\u6ca1\u6709` = delete`\u4fee\u9970\u7b26\uff0c\u5219\u4e3b\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u90fd\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002 }; void Fun ( T t ) {} int main () { Fun ( 1 ); // Fun('X'); \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\uff0c\u7f16\u8bd1\u4e0d\u901a\u8fc7 T ci ( 1 ); // T cc('X'); \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\uff0c\u7f16\u8bd1\u4e0d\u901a\u8fc7 return 0 ; } =delete \u4fee\u9970\u4e00\u4e2a\u51fd\u6570 \u548c \u4e0d\u5199\u8fd9\u4e2a\u51fd\u6570 \u7684\u533a\u522b:","title":"\u65b9\u6cd5\u4e8c - =delete\u9650\u5b9a (C++ 11 \u5f15\u5165)"},{"location":"languages/cpp/basic/#_38","text":"dynamic_cast<Dst_type>(Src_var) - \u7528\u4e8e\u5728\u7c7b\u7684\u96c6\u6210\u4f53\u7cfb\u4e2d\u505a\u8f6c\u6362 Src_var \u5fc5\u987b\u662f\u5f15\u7528\u6216\u6307\u9488\u7c7b\u578b\uff0c Dst_Type \u7c7b\u4e2d\u542b\u6709\u865a\u51fd\u6570\uff0c\u5426\u5219\u4f1a\u6709\u7f16\u8bd1\u9519\u8bef \u82e5\u76ee\u6807\u7c7b\u4e0e\u539f\u7c7b\u4e4b\u95f4\u6ca1\u6709\u53ca\u9648\u9aa8\u5e72\u897f\uff0c\u8f6c\u6362\u5931\u8d25\uff0c\u8fd4\u56de\u7a7a\u6307\u9488\uff08\u6ce8\uff1a\u5931\u8d25\u4e0d\u5bfc\u81f4\u8fd0\u884c\u5d29\u6e83\uff09 static_cast<Dst_Type>(Src_var) \u57fa\u7c7b\u5bf9\u8c61\u4e0d\u80fd\u8f6c\u6362\u6210\u5b50\u7c7b\u5bf9\u8c61\uff0c\u4f46\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8f6c\u6362\u6210\u5b50\u7c7b\u6307\u9488 \u5b50\u7c7b\u5bf9\u8c61\uff08\u6307\u9488\uff09\u53ef\u4ee5\u8f6c\u6362\u6210\u57fa\u7c7b\u5bf9\u8c61\uff08\u6307\u9488\uff09 \u6ca1\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u7c7b\u4e4b\u95f4\uff0c\u5fc5\u987b\u5177\u6709\u8f6c\u6362\u9014\u5f84\u624d\u80fd\u8fdb\u884c\u8f6c\u6362\uff08\u81ea\u5b9a\u4e49\u6216\u8005\u8bed\u8a00\u8bed\u6cd5\u539f\u751f\u652f\u6301\uff09 \u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b #include <iostream> using namespace std ; class B { public : virtual void f () {} }; class D : public B {}; class E {}; int main () { D d1 ; B b1 ; // d1 = static_cast<D>(b1); /// Error: \u4ece\u57fa\u7c7b\u65e0\u6cd5\u8f6c\u6362\u56de\u5b50\u7c7b b1 = static_cast < B > ( d1 ); /// OK: \u53ef\u4ee5\u4ece\u5b50\u7c7b\u8f6c\u6362\u5230\u57fa\u7c7b // b1 - dynamic_cast<B>(d1); /// ERROR: \u88ab\u8f6c\u6362\u7684\u5fc5\u987b\u662f\u5f15\u7528\u6216\u6307\u9488 B * pb1 = new B (); D * pd1 = static_cast < D *> ( pb1 ); if ( pd1 ) { cout << \"static_cast, B* --> D*: OK\" << endl ; } pd1 = dynamic_cast < D *> ( pb1 ); if ( pd1 ) { cout << \"dynamic_cast, B* --> D*: OK\" << endl ; } D * pd2 = new D (); B * pb2 = static_cast < B *> ( pd2 ); if ( pb2 ) { cout << \"static_cast, D* --> B*: OK\" << endl ; } pb2 = dynamic_cast < B *> ( pd2 ); if ( pb2 ) { cout << \"dynamic_cast, D* --> B*: OK\" << endl ; } E * pe = dynamic_cast < E *> ( pb1 ); if ( ! pe ) { cout << \"dynamic_cast, B* --> E*: FAILED\" << endl ; } // pe = static_cast<E*>(pb1); /// ERROR: \u6ca1\u6709\u7ee7\u627f\u5173\u7cfb\u4e0d\u80fd\u8f6c\u6362 // E e = static_cast<E>(b1); /// ERROR\uff1a\u6ca1\u6709\u63d0\u4f9b\u8f6c\u6362\u9014\u5f84 return 0 ; } \u8f93\u51fa static_cast, B* --> D*: OK static_cast, D* --> B*: OK dynamic_cast, D* --> B*: OK dynamic_cast, B* --> E*: FAILED","title":"\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08\u663e\u5f0f\u8f6c\u6362\uff09"},{"location":"languages/cpp/basic/#_39","text":"\u6709\u4e9b\u7b97\u6cd5\u5b9e\u73b0\u4e0e\u7c7b\u578b\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u201c\u53c2\u6570\u201d\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u201c\u51fd\u6570\u6a21\u677f\u201d\u3002 \u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u7684\u65b9\u6cd5 template < typename T > \u8fd4\u56de\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) \uff1b \u4f8b\u5982\uff0c\u4efb\u610f\u4e24\u4e2a\u53d8\u91cf\u76f8\u52a0\u7684\u201c\u51fd\u6570\u6a21\u677f\u201d template < typename T > T sum ( T a , T b ) { return a + b ; } \u51fd\u6570\u6a21\u677f\u5728\u8c03\u7528\u65f6\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u80fd\u81ea\u52a8\u63a8\u5bfc\u51fa\u5b9e\u9645\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\uff0c\u5f62\u5f0f\u4e0a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u4e0e\u666e\u901a\u51fd\u6570\u6ca1\u6709\u533a\u522b\uff0c\u5982 int main () { int a = 3 , b = 4 ; cout << sum ( a , b ); float c = 1.3 , d = 1.9 ; cout << sum ( c , d ); } \u51fd\u6570\u6a21\u677f\u53c2\u6570\u4e5f\u53ef\u4ee5\u8d4b\u9ed8\u8ba4\u503c\uff08\u7f3a\u7701\u503c\uff09\uff0c\u5982 #include <iostream> using namespace std ; template < typename T0 = float , typename T1 , typename T2 = float , typename T3 , typename T4 > T0 func ( T1 v1 , T2 v2 = 0 , T3 v3 , T4 v4 ) {...} func ( 1 , 2 , 3 , 4 ); func ( 'a' , 'b' , \"cde\" , 5 );","title":"\u51fd\u6570\u6a21\u677f"},{"location":"languages/cpp/basic/#_40","text":"\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e9b\u7c7b\u578b\u4fe1\u606f\u62bd\u53d6\u51fa\u6765\uff0c\u7528\u6a21\u677f\u53c2\u6570\u6765\u66ff\u6362\uff0c\u4ece\u800c\u4f7f\u7c7b\u66f4\u5177\u6709\u901a\u7528\u6027\u3002\u8fd9\u79cd\u7c7b\u88ab\u79f0\u4e3a\u201c\u7c7b\u6a21\u677f\u201d\u3002 template < typename T > class A { public : void print () { cout << data << endl ; } private : T data ; }; \u7c7b\u6a21\u677f \u2192 \u7c7b \u2192 \u5bf9\u8c61 \u7c7b\u6a21\u677f\u7684\u201c\u6a21\u677f\u53c2\u6570\u201d \u7c7b\u578b\u53c2\u6570\uff1a\u4f7f\u7528 typename \u6216 class \u6807\u8bb0 \u975e\u7c7b\u578b\u53c2\u6570\uff1a\u6574\u6570\uff0c\u679a\u4e3e\uff0c\u6307\u9488\uff08\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\uff09\uff0c\u5f15\u7528\uff08\u5f15\u7528\u5bf9\u8c61\u6216\u5f15\u7528\u51fd\u6570\uff09\u3002\u5176\u4e2d\u6574\u6570\u7c7b\u578b\u662f\u6bd4\u8f83\u5e38\u7528\u7684\uff0c\u5982 template < typename T , unsigned size > class Array { T elems [ size ]; ... }; Array < char , 10 > array ; \u6a21\u677f\u53c2\u6570\u662f\u53e6\u4e00\u4e2a\u7c7b\u6a21\u677f\uff0c\u5982\u4e0b\u6240\u793a\uff1a template < typename T , template < typename TT0 , typename TT1 > class A > struct Foo { A < T , T > bar ; };","title":"\u7c7b\u6a21\u677f"},{"location":"languages/cpp/basic/#_41","text":"\u666e\u901a\u7c7b\u4e2d\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u6a21\u677f class NormalClass { public : int value ; template < typename T > void set ( T const & v ) { value = int ( v ); } template < typename T > T get (); }; template < typename T > T NormalClass :: get () { return valuel ; } \u7c7b\u6a21\u677f\u4e2d\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u6a21\u677f template < typename T0 > class A { public : T0 value ; template < typename T1 > void set ( T1 const & v ) { value = T0 ( v ); } template < typename T1 > T1 get (); }; template < typename T0 > template < typename T1 > T1 A :: get () { return T1 ( value ); } \u5bf9\u4e8e\u7c7b\u6a21\u677f\u5916\u9762\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u6a21\u677f\uff0c\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef % g++ main.cpp -std=c++11 -o main main.cpp:16:4: error: \u2018template<class T0> class A\u2019 used without template parameters T1 A::get() { ^ main.cpp:16:4: error: too many template-parameter-lists","title":"\u6210\u5458\u51fd\u6570\u6a21\u677f"},{"location":"languages/cpp/basic/#_42","text":"\u6a21\u677f\u53c2\u6570\u7684\u5177\u4f53\u5316/\u7279\u6b8a\u5316 \u6709\u65f6\uff0c\u6709\u4e9b\u7c7b\u578b\u5e76\u4e0d\u9002\u7528\uff0c\u5219\u9700\u8981\u5bf9\u6a21\u677f\u8fdb\u884c\u7279\u6b8a\u5316\u5904\u7406\uff0c\u8fd9\u79f0\u4e3a\u201c\u6a21\u677f\u7279\u5316\u201d\u3002 \u5bf9\u4e8e\u51fd\u6570\u6a21\u677f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5219\u7279\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b\u6240\u6709\u53c2\u6570\u7684\u7279\u4f8b\u7c7b\u578b\uff0c \u4e0d\u80fd\u90e8\u5206\u7279\u5316 \u3002 \u5982 char* Sum(char* char*); \u5728\u51fd\u6570\u540d\u540e\u7528<>\u62ec\u53f7\u6269\u8d77\u5177\u4f53\u7c7b\u578b template <> char * Sum < char *> ( char * a , char * b ) {...} \u7531\u7f16\u8bd1\u5668\u63a8\u5bfc\u51fa\u5177\u4f53\u7c7b\u578b\uff0c\u51fd\u6570\u540d\u4e3a\u666e\u901a\u5f62\u5f0f template <> char * Sum ( char * a , char * b ) {...}","title":"\u6a21\u677f\u7279\u5316"},{"location":"languages/cpp/basic/#_43","text":"\u5bf9\u4e8e\u7c7b\u6a21\u677f\uff0c\u5141\u8bb8\u90e8\u5206\u7279\u5316\uff0c\u5373\u90e8\u5206\u9650\u5236\u6a21\u677f\u7684\u901a\u7528\u6027\uff0c\u5982\uff1a // \u901a\u7528\u6a21\u677f\u7c7b template < class T1 , class T2 > class A {...}; // \u90e8\u5206\u7279\u5316\u7684\u6a21\u677f\u7c7b\uff1a\u7b2c\u4e8c\u4e2a\u7c7b\u578b\u53c2\u6570\u6307\u5b9a\u4e3a int template < class T1 > class A < T1m int > {...}; \u82e5\u6307\u5b9a\u6240\u6709\u7c7b\u578b\uff0c\u5219<>\u5185\u5c06\u4e3a\u7a7a tempalte <> class A < int , int > {...}; \u51fd\u6570\u6a21\u677f\u7279\u5316\u793a\u4f8b #include <bits/stdc++.h> using namespace std ; template < typename T > T Sum ( T a , T b ) { return a + b ; } template <> char * Sum ( char * a , char * b ) { char * p = new char [ strlen ( a ), strlen ( b ) + 1 ]; strcpy ( p , a ); strcpy ( p + strlen ( a ), b ); return p ; } int main () { cout << Sum ( 3 , 4 ) << ' ' << Sum ( 5.1 , 13.8 ) << endl ; char str1 [] = \"Hello, \" , str2 [] = \"world\" ; cout << Sum ( str1 , str2 ) << endl ; return 0 ; } \u8f93\u51fa 7 18.9 Hello, world \u7c7b\u6a21\u677f\u7279\u5316\u793a\u4f8b #include <bits/stdc++.h> using namespace std ; template < typename T > class Sum { public : Sum ( T op1 , T op2 ) : a ( op1 ), b ( op2 ) {} T DoIT () { return a + b ; } private : T a , b ; }; template <> class Sum < char *> { public : Sum ( char * s1 , char * s2 ) : str1 ( s1 ), str2 ( s2 ) {} char * DoIT () { char * tmp = new char [ strlen ( str1 ) + strlen ( str2 ) + 1 ]; strcpy ( tmp , str1 ); strcat ( tmp + strlen ( str1 ), str2 ); return tmp ; } private : char * str1 , * str2 ; }; int main () { Sum < int > obj1 ( 3 , 4 ); cout << obj1 . DoIT () << endl ; char s1 [] = \"Hello\" , s2 [] = \"THU\" ; Sum < char *> obj2 ( s1 , s2 ); cout << obj2 . DoIT () << endl ; return 0 ; } \u8f93\u51fa\uff1a 7 HelloTHU","title":"\u6a21\u677f\u7684\u90e8\u5206\u7279\u5316\uff08\u504f\u7279\u5316\uff09"},{"location":"languages/cpp/concurrency/","text":"\u5e76\u53d1\u7f16\u7a0b \u7ebf\u7a0b\u6c60 github\u4e0a\u7684\u5f00\u6e90\u7ebf\u7a0b\u6c60 progschj/ThreadPool mtrebi/thread-pool \u7ebf\u7a0b\u6570\u91cf\u56fa\u5b9a\u7684\u7ebf\u7a0b\u6c60 \u7ebf\u7a0b\u6c60\u53ef\u4ee5\u62e5\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5de5\u4f5c\u7ebf\u7a0b\uff08\u901a\u5e38\u5de5\u4f5c\u7ebf\u7a0b\u6570\u91cf\u4e0e std::thread::hardware_concurrency() \u76f8\u540c\uff09\u3002 mtrebi/thread-pool \u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0 #include <bits/stdc++.h> // Thread safe implementation of a Queue using an std::queue template < typename T > class SafeQueue { public : SafeQueue () {} SafeQueue ( SafeQueue & other ) { // TODO: } ~ SafeQueue () {} bool Empty () { std :: unique_lock < std :: mutex > lock ( mutex_ ); return queue_ . empty (); } int Size () { std :: unique_lock < std :: mutex > lock ( mutex_ ); return queue_ . size (); } void Enqueue ( T & t ) { std :: unique_lock < std :: mutex > lock ( mutex_ ); queue_ . push ( t ); } bool Dequeue ( T & t ) { std :: unique_lock < std :: mutex > lock ( mutex_ ); if ( queue_ . empty ()) { return false ; } t = std :: move ( queue_ . front ()); queue_ . pop (); return true ; } private : std :: queue < T > queue_ ; std :: mutex mutex_ ; }; class ThreadPool { public : ThreadPool ( const int threads_num ) : threads_ ( std :: vector < std :: thread > ( threads_num )), shutdown_flag_ ( false ) {} ThreadPool ( const ThreadPool & ) = delete ; ThreadPool ( ThreadPool && ) = delete ; ThreadPool & operator = ( const ThreadPool & ) = delete ; ThreadPool & operator = ( ThreadPool && ) = delete ; // Inits thread pool void Init () { for ( int i = 0 ; i < threads_ . size (); ++ i ) { threads_ [ i ] = std :: thread ( ThreadWorker ( this , i )); } } // Waits until threads finish their current task and shutdowns the pool void Shutdown () { shutdown_flag_ = true ; conditional_lock_ . notify_all (); for ( int i = 0 ; i < threads_ . size (); ++ i ) { if ( threads_ [ i ]. joinable ()) { threads_ [ i ]. join (); } } } // Submit a function to be executed asynchronously by the pool template < typename F , typename ... Args > auto Submit ( F && f , Args && ... args ) -> std :: future < decltype ( f ( args ...)) > { // Create a function with bounded parameters ready to execute std :: function < decltype ( f ( args ...))() > func = std :: bind ( std :: forward < F > ( f ), std :: forward < Args > ( args )...); // Encapsulate it into a shared ptr in order to be able to copy construct / // assign auto task_ptr = std :: make_shared < std :: packaged_task < decltype ( f ( args ...))() >> ( func ); // Wrap packaged task into void function std :: function < void () > wrapper_func = [ task_ptr ]() { ( * task_ptr )(); }; // Enqueue generic wrapper function task_queue_ . Enqueue ( wrapper_func ); // Wake up one thread if its waiting conditional_lock_ . notify_one (); // Return future from promise return task_ptr -> get_future (); } private : class ThreadWorker { public : ThreadWorker ( ThreadPool * pool , const int id ) : host_pool_ ( pool ), m_id ( id ) {} void operator ()() { std :: function < void () > func ; bool dequeued ; while ( ! host_pool_ -> shutdown_flag_ ) { { std :: unique_lock < std :: mutex > lock ( host_pool_ -> conditional_mutex_ ); if ( host_pool_ -> task_queue_ . Empty ()) { host_pool_ -> conditional_lock_ . wait ( lock ); } dequeued = host_pool_ -> task_queue_ . Dequeue ( func ); } if ( dequeued ) { func (); } } } private : int m_id ; ThreadPool * host_pool_ ; }; bool shutdown_flag_ ; SafeQueue < std :: function < void () >> task_queue_ ; std :: vector < std :: thread > threads_ ; std :: mutex conditional_mutex_ ; std :: condition_variable conditional_lock_ ; }; std :: random_device rd ; std :: mt19937 mt ( rd ()); std :: uniform_int_distribution < int > dist ( - 1000 , 1000 ); auto rnd = std :: bind ( dist , mt ); void simulate_hard_computation () { std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 2000 + rnd ())); } // Simple function that adds multiplies two numbers and prints the result void multiply ( const int a , const int b ) { simulate_hard_computation (); const int res = a * b ; std :: cout << a << \" * \" << b << \" = \" << res << std :: endl ; } // Same as before but now we have an output parameter void multiply_output ( int & out , const int a , const int b ) { simulate_hard_computation (); out = a * b ; std :: cout << a << \" * \" << b << \" = \" << out << std :: endl ; } // Same as before but now we have an output parameter int multiply_return ( const int a , const int b ) { simulate_hard_computation (); const int res = a * b ; std :: cout << a << \" * \" << b << \" = \" << res << std :: endl ; return res ; } void example () { // Create pool with 3 threads ThreadPool pool ( 3 ); // Initialize pool pool . Init (); // Submit (partial) multiplication table for ( int i = 1 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 10 ; ++ j ) { pool . Submit ( multiply , i , j ); } } // Submit function with output parameter passed by ref int output_ref ; auto future1 = pool . Submit ( multiply_output , std :: ref ( output_ref ), 5 , 6 ); // Wait for multiplication output to finish future1 . get (); std :: cout << \"Last operation result is equals to \" << output_ref << std :: endl ; // Submit function with return parameter auto future2 = pool . Submit ( multiply_return , 5 , 3 ); // Wait for multiplication output to finish int res = future2 . get (); std :: cout << \"Last operation result is equals to \" << res << std :: endl ; pool . Shutdown (); } int main () { example (); } \u6ce8\u610f\u6b64\u5904\u7f16\u8bd1\u9700\u8981\u52a0\u4e0a -pthread \u7f16\u8bd1\u9009\u9879\u3002 \u6d4b\u8bd5\u7ed3\u679c 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 1 * 6 = 6 1 * 4 = 4 1 * 5 = 5 1 * 7 = 7 1 * 8 = 8 2 * 1 = 2 1 * 9 = 9 2 * 3 = 6 2 * 2 = 4 2 * 5 = 10 2 * 4 = 8 2 * 6 = 12 2 * 7 = 14 2 * 9 = 18 2 * 8 = 16 5 * 6 = 30 Last operation result is equals to 30 5 * 3 = 15 Last operation result is equals to 15","title":"\u5e76\u53d1\u7f16\u7a0b"},{"location":"languages/cpp/concurrency/#_1","text":"","title":"\u5e76\u53d1\u7f16\u7a0b"},{"location":"languages/cpp/concurrency/#_2","text":"github\u4e0a\u7684\u5f00\u6e90\u7ebf\u7a0b\u6c60 progschj/ThreadPool mtrebi/thread-pool","title":"\u7ebf\u7a0b\u6c60"},{"location":"languages/cpp/concurrency/#_3","text":"\u7ebf\u7a0b\u6c60\u53ef\u4ee5\u62e5\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5de5\u4f5c\u7ebf\u7a0b\uff08\u901a\u5e38\u5de5\u4f5c\u7ebf\u7a0b\u6570\u91cf\u4e0e std::thread::hardware_concurrency() \u76f8\u540c\uff09\u3002 mtrebi/thread-pool \u7684\u7ebf\u7a0b\u6c60\u5b9e\u73b0 #include <bits/stdc++.h> // Thread safe implementation of a Queue using an std::queue template < typename T > class SafeQueue { public : SafeQueue () {} SafeQueue ( SafeQueue & other ) { // TODO: } ~ SafeQueue () {} bool Empty () { std :: unique_lock < std :: mutex > lock ( mutex_ ); return queue_ . empty (); } int Size () { std :: unique_lock < std :: mutex > lock ( mutex_ ); return queue_ . size (); } void Enqueue ( T & t ) { std :: unique_lock < std :: mutex > lock ( mutex_ ); queue_ . push ( t ); } bool Dequeue ( T & t ) { std :: unique_lock < std :: mutex > lock ( mutex_ ); if ( queue_ . empty ()) { return false ; } t = std :: move ( queue_ . front ()); queue_ . pop (); return true ; } private : std :: queue < T > queue_ ; std :: mutex mutex_ ; }; class ThreadPool { public : ThreadPool ( const int threads_num ) : threads_ ( std :: vector < std :: thread > ( threads_num )), shutdown_flag_ ( false ) {} ThreadPool ( const ThreadPool & ) = delete ; ThreadPool ( ThreadPool && ) = delete ; ThreadPool & operator = ( const ThreadPool & ) = delete ; ThreadPool & operator = ( ThreadPool && ) = delete ; // Inits thread pool void Init () { for ( int i = 0 ; i < threads_ . size (); ++ i ) { threads_ [ i ] = std :: thread ( ThreadWorker ( this , i )); } } // Waits until threads finish their current task and shutdowns the pool void Shutdown () { shutdown_flag_ = true ; conditional_lock_ . notify_all (); for ( int i = 0 ; i < threads_ . size (); ++ i ) { if ( threads_ [ i ]. joinable ()) { threads_ [ i ]. join (); } } } // Submit a function to be executed asynchronously by the pool template < typename F , typename ... Args > auto Submit ( F && f , Args && ... args ) -> std :: future < decltype ( f ( args ...)) > { // Create a function with bounded parameters ready to execute std :: function < decltype ( f ( args ...))() > func = std :: bind ( std :: forward < F > ( f ), std :: forward < Args > ( args )...); // Encapsulate it into a shared ptr in order to be able to copy construct / // assign auto task_ptr = std :: make_shared < std :: packaged_task < decltype ( f ( args ...))() >> ( func ); // Wrap packaged task into void function std :: function < void () > wrapper_func = [ task_ptr ]() { ( * task_ptr )(); }; // Enqueue generic wrapper function task_queue_ . Enqueue ( wrapper_func ); // Wake up one thread if its waiting conditional_lock_ . notify_one (); // Return future from promise return task_ptr -> get_future (); } private : class ThreadWorker { public : ThreadWorker ( ThreadPool * pool , const int id ) : host_pool_ ( pool ), m_id ( id ) {} void operator ()() { std :: function < void () > func ; bool dequeued ; while ( ! host_pool_ -> shutdown_flag_ ) { { std :: unique_lock < std :: mutex > lock ( host_pool_ -> conditional_mutex_ ); if ( host_pool_ -> task_queue_ . Empty ()) { host_pool_ -> conditional_lock_ . wait ( lock ); } dequeued = host_pool_ -> task_queue_ . Dequeue ( func ); } if ( dequeued ) { func (); } } } private : int m_id ; ThreadPool * host_pool_ ; }; bool shutdown_flag_ ; SafeQueue < std :: function < void () >> task_queue_ ; std :: vector < std :: thread > threads_ ; std :: mutex conditional_mutex_ ; std :: condition_variable conditional_lock_ ; }; std :: random_device rd ; std :: mt19937 mt ( rd ()); std :: uniform_int_distribution < int > dist ( - 1000 , 1000 ); auto rnd = std :: bind ( dist , mt ); void simulate_hard_computation () { std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 2000 + rnd ())); } // Simple function that adds multiplies two numbers and prints the result void multiply ( const int a , const int b ) { simulate_hard_computation (); const int res = a * b ; std :: cout << a << \" * \" << b << \" = \" << res << std :: endl ; } // Same as before but now we have an output parameter void multiply_output ( int & out , const int a , const int b ) { simulate_hard_computation (); out = a * b ; std :: cout << a << \" * \" << b << \" = \" << out << std :: endl ; } // Same as before but now we have an output parameter int multiply_return ( const int a , const int b ) { simulate_hard_computation (); const int res = a * b ; std :: cout << a << \" * \" << b << \" = \" << res << std :: endl ; return res ; } void example () { // Create pool with 3 threads ThreadPool pool ( 3 ); // Initialize pool pool . Init (); // Submit (partial) multiplication table for ( int i = 1 ; i < 3 ; ++ i ) { for ( int j = 1 ; j < 10 ; ++ j ) { pool . Submit ( multiply , i , j ); } } // Submit function with output parameter passed by ref int output_ref ; auto future1 = pool . Submit ( multiply_output , std :: ref ( output_ref ), 5 , 6 ); // Wait for multiplication output to finish future1 . get (); std :: cout << \"Last operation result is equals to \" << output_ref << std :: endl ; // Submit function with return parameter auto future2 = pool . Submit ( multiply_return , 5 , 3 ); // Wait for multiplication output to finish int res = future2 . get (); std :: cout << \"Last operation result is equals to \" << res << std :: endl ; pool . Shutdown (); } int main () { example (); } \u6ce8\u610f\u6b64\u5904\u7f16\u8bd1\u9700\u8981\u52a0\u4e0a -pthread \u7f16\u8bd1\u9009\u9879\u3002 \u6d4b\u8bd5\u7ed3\u679c 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 1 * 6 = 6 1 * 4 = 4 1 * 5 = 5 1 * 7 = 7 1 * 8 = 8 2 * 1 = 2 1 * 9 = 9 2 * 3 = 6 2 * 2 = 4 2 * 5 = 10 2 * 4 = 8 2 * 6 = 12 2 * 7 = 14 2 * 9 = 18 2 * 8 = 16 5 * 6 = 30 Last operation result is equals to 30 5 * 3 = 15 Last operation result is equals to 15","title":"\u7ebf\u7a0b\u6570\u91cf\u56fa\u5b9a\u7684\u7ebf\u7a0b\u6c60"},{"location":"languages/cpp/effective_cpp/","text":"Effective C++","title":"Effective C++"},{"location":"languages/cpp/effective_cpp/#effective-c","text":"","title":"Effective C++"},{"location":"languages/java/","text":"\u6982\u8ff0 \u4e3a\u4ec0\u4e48\u5b66\u4e60 Java TOBIE\u7f16\u7a0b\u8bed\u8a00\u6392\u884c\u699c \u8fd1\u4e8c\u5341\u5e74\u5386\u53f2\u4e2d\u7a33\u5c45Top2\uff08\u53e6\u4e00\u4e2a\u662fC\u8bed\u8a00\uff09\uff0c\u4e14\u6709\u8d85\u8fc7\u4e00\u534a\u7684\u65f6\u95f4\u6392\u540d\u7b2c\u4e00\uff0c\u8fd9\u53cd\u6620\u51faJava\u5728\u5de5\u4e1a\u754c\u6709\u6301\u7eed\u7684\u751f\u547d\u529b\u548c\u5f71\u54cd\u529b\uff0c\u65e9\u5e74\u4f7f\u7528Java\u505a\u67b6\u6784\u7684\u516c\u53f8\u6700\u7ec8\u8d70\u5f97\u66f4\u5feb\u66f4\u8fdc\u3002","title":"\u6982\u8ff0"},{"location":"languages/java/#_1","text":"","title":"\u6982\u8ff0"},{"location":"languages/java/#java","text":"TOBIE\u7f16\u7a0b\u8bed\u8a00\u6392\u884c\u699c \u8fd1\u4e8c\u5341\u5e74\u5386\u53f2\u4e2d\u7a33\u5c45Top2\uff08\u53e6\u4e00\u4e2a\u662fC\u8bed\u8a00\uff09\uff0c\u4e14\u6709\u8d85\u8fc7\u4e00\u534a\u7684\u65f6\u95f4\u6392\u540d\u7b2c\u4e00\uff0c\u8fd9\u53cd\u6620\u51faJava\u5728\u5de5\u4e1a\u754c\u6709\u6301\u7eed\u7684\u751f\u547d\u529b\u548c\u5f71\u54cd\u529b\uff0c\u65e9\u5e74\u4f7f\u7528Java\u505a\u67b6\u6784\u7684\u516c\u53f8\u6700\u7ec8\u8d70\u5f97\u66f4\u5feb\u66f4\u8fdc\u3002","title":"\u4e3a\u4ec0\u4e48\u5b66\u4e60 Java"},{"location":"languages/java/basic/class_package_interface/","text":"\u7c7b\u3001\u5305\u548c\u63a5\u53e3 \u7c7b\u3001\u5b57\u6bb5\u3001\u65b9\u6cd5 \u7c7b \u662f Java \u7a0b\u5e8f\u4e2d\u6700\u8fd1\u672c\u7684\u8981\u7d20\uff0c\u662f\u4e00\u7c7b\u5bf9\u8c61\u7684\u539f\u578b\uff0c\u5b83 \u5c01\u88c5 \u4e86\u4e00\u7c7b\u5bf9\u8c61\u7684\u72b6\u6001\u548c\u65b9\u6cd5\u3002 \u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u76f8\u5f53\u4e8e\u8bb2 \u53d8\u91cf\u548c\u51fd\u6570 \u5c01\u88c5\u5230\u4e00\u4e2a \u7c7b \u5f53\u4e2d\u3002 class Person { String name ; int age ; void sayHello () { System . out . println ( \"Hello! My name is \" + name ); } } \u5b57\u6bb5\uff08field\uff09 \u662f\u7c7b\u7684\u5c5e\u6027\uff0c\u662f\u7528 \u53d8\u91cf \u6765\u8868\u793a\u7684\u3002 \u5b57\u6bb5\u4e5f\u79f0\u4e3a \u57df\u3001\u57df\u53d8\u91cf\u3001\u5c5e\u6027\u3001\u6210\u5458\u53d8\u91cf \u7b49\u3002 \u65b9\u6cd5\uff08method\uff09 \u662f\u7c7b\u7684\u529f\u80fd\u548c\u64cd\u4f5c\uff0c\u7528 \u51fd\u6570 \u6765\u8868\u793a\u3002 \u6784\u9020\u65b9\u6cd5\uff08constructor\uff09 \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\uff0c\u7528\u6765\u521d\u59cb\u5316\u8be5\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002\u6784\u9020\u65b9\u6cd5\u4e0e\u7c7b\u540c\u540d\uff0c\u800c\u4e14\u4e0d\u5199\u8fd4\u56de\u7c7b\u578b\uff1a Person ( String _name , int _age ) { name = _name ; age = _age ; } \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7c7b\u6709\u4e00\u81f3\u591a\u4e2a\u6784\u9020\u65b9\u6cd5\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u6784\u9020\u65b9\u6cd5\uff0c\u7cfb\u7edf\u81ea\u52a8\u4ea7\u751f\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u79f0\u4e3a\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\uff08default constructor\uff09\u3002\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\u4e0d\u5e26\u53c2\u6570\uff0c\u800c\u4e14\u65b9\u6cd5\u4f53\u4e3a\u7a7a\u3002 \u8bbf\u95ee\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9700\u8981\u7528 . \u8fd0\u7b97\u7b26\uff1a Person p = new Person (); System . out . println ( p . name ); p . sayHello (); \u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u7684\u597d\u5904\u662f\uff1a \u5c01\u88c5\u6027 \u548c \u5b89\u5168\u6027 \uff08\u901a\u8fc7\u5f15\u7528\u8bbf\u95ee\u4fdd\u8bc1\u4e0d\u4f1a\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\uff09\u3002 \u65b9\u6cd5\u91cd\u8f7d\uff08override\uff09 \uff1a\u591a\u4e2a\u65b9\u6cd5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff0c \u7f16\u8bd1\u671f \u80fd\u8bc6\u522b\u51fa\u6765\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684 \u7b7e\u540d\uff08signature\uff09 \u4e0d\u540c\uff0c\u5373\u5177\u6709\u4e0d\u540c\u7684\u53c2\u6570\u5217\u8868\u3002 \u901a\u8fc7\u65b9\u6cd5\u91cd\u8f7d\u53ef\u4ee5\u5b9e\u73b0 \u591a\u6001\uff08polymorphism\uff09 \u3002 this \u7684\u4f7f\u7528\uff1a \u5728\u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528 this \u6765\u8bbf\u95ee\u5b57\u6bb5\u53ca\u65b9\u6cd5\u3002\u6b64\u65f6 this \u8868\u793a\u5f53\u524d\u5b9e\u4f8b\u672c\u8eab\u3002 this \u7ecf\u5e38\u7528\u4e8e\u89e3\u51b3\u5c40\u90e8\u53d8\u91cf\u4e0e\u7c7b\u53d8\u91cf\u540c\u540d\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a Person ( int age , String name ) { this . age = age ; this . name = name ; } \u5728\u6784\u9020\u65b9\u6cd5\u4e2d\uff0c\u7528 this \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u5982\uff1a Person () { this ( 0 , \"\" ); //... } \u6ce8\uff1a\u5728\u6784\u9020\u65b9\u6cd5\u4e2d\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u5219\u8fd9\u6761\u8c03\u7528\u8bed\u53e5 \u5fc5\u987b\u653e\u5728\u7b2c\u4e00\u53e5 \u3002 \u7c7b\u7684\u7ee7\u627f \u7ee7\u627f\uff08inheritance\uff09 \u662f\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u6700\u4e3a \u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00 \u3002 Java \u4e2d\u5173\u4e8e\u7ee7\u627f\u6709\uff1a \u5b50\u7c7b\uff08subclass\uff09 \u548c \u7236\u7c7b/\u8d85\u7c7b\uff08superclass\uff09 \u7684\u6982\u5ff5\u3002 Java \u53ea\u652f\u6301\u5355\u7ee7\u627f\uff0c\u5373 \u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u76f4\u63a5\u7684\u7236\u7c7b \u3002 \u5b50\u7c7b\u5728\u7ee7\u627f\u7236\u7c7b\u7684\u72b6\u6001\u548c\u884c\u4e3a\u7684\u540c\u65f6\uff0c\u53ef\u4ee5 \u4fee\u6539 \u7236\u7c7b\u7684\u72b6\u6001\u6216\u91cd\u8f7d\u7236\u7c7b\u7684\u884c\u4e3a\uff0c\u4e5f\u53ef\u4ee5 \u589e\u52a0 \u65b0\u7684\u72b6\u6001\u548c\u884c\u4e3a\u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a \u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u62bd\u8c61\u7a0b\u5ea6 \u5b9e\u73b0\u4ee3\u7801\u91cd\u7528\uff0c\u63d0\u5347\u5f00\u53d1\u6548\u7387\u597d\u53ef\u7ef4\u62a4\u6027 Java \u4e2d\u7ee7\u627f\u662f\u901a\u8fc7 extends \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u7684\uff1a class Student extends Person { //... } \u7f3a\u7701 extends \u8868\u793a\u4ece java.lang.Object \u7c7b\u7ee7\u627f\u3002 \u6240\u6709\u7684\u7c7b\u90fd\u662f\u901a\u8fc7\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f java.lang.Object \u5f97\u5230\u7684\u3002 \u7528 UML \u56fe\u8868\u793a\u7ee7\u627f\u5173\u7cfb\uff1a class Student extends Person { String school ; int score ; boolean isGood () { return score > 80 ; } //... } JDK1.5 \u4e4b\u540e\u53ef\u4ee5\u7528 @override \u6ce8\u8bb0 \u6765\u8868\u793a\u51fd\u6570\u7684 \u8986\u76d6\uff08override\uff09 \uff0c\u800c\u4e0d\u7528\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a void sayHello () { System . out . println ( \"Hello! My name is \" + name + \" from \" + school ); } \u4e00\u4e2a\u7c7b\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u79f0\u4e3a\u65b9\u6cd5\u7684 \u91cd\u8f7d\uff08overload\uff09 \u3002\u5f53\u91cd\u8f7d\u7236\u7c7b\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\uff1a void sayHello ( Student another ) { System . out . println ( \"Hi!\" ); if ( school . equals ( another . school )) { System . out . println ( \"Schoolmate!\" ); } } \u53ef\u4ee5\u4f7f\u7528 super \u6765\u8bbf\u95ee\u7236\u7c7b\u7684\u57df\u548c\u65b9\u6cd5\u3002 \u6ce8\u610f\u65e0\u8bba\u662f this \u8fd8\u662f super \u90fd\u662f\u5f53\u524d\u5bf9\u8c61\u5b9e\u4f8b\u7684\u6307\u9488\uff0c\u5e76\u4e0d\u4f1a\u56e0\u4e3a super \u7684\u4f7f\u7528\u4f7f\u5f97\u5185\u5b58\u4e2d\u591a\u51fa\u4e00\u4e2a\u7236\u7c7b\u7684\u5bf9\u8c61\u3002 super \u7684\u5b58\u5728\u4f7f\u5f97\u5b50\u7c7b\u5728 \u8986\u76d6 \u7236\u7c7b\u65b9\u6cd5\u7684\u540c\u65f6\uff0c\u53c8 \u53ef\u4ee5\u4f7f\u7528 \u539f\u6765\u5b9a\u4e49\u5728\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002 \u7236\u7c7b\u5bf9\u8c61\u4e0e\u5b50\u7c7b\u5bf9\u8c61\u7684\u8f6c\u6362\uff1a \u5b50\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5176\u7236\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61 \u7236\u7c7b\u5bf9\u8c61\u4e0d\u80fd\u88ab\u5f53\u505a\u5176\u67d0\u4e00\u4e2a\u5b50\u7c7b\u7684\u5bf9\u8c61\uff08\u5982\u679c\u7528\u5b50\u7c7b\u6307\u9488\u6307\u5411\u7236\u7c7b\u5b9e\u4f8b\uff0c\u7f16\u8bd1\u80fd\u901a\u8fc7\uff0c\u4f46\u8fd0\u884c\u4f1a\u629b\u5f02\u5e38\uff09 \u7236\u7c7b\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\u65f6\u53ef\u4ee5\u4f20\u4e00\u4e2a\u5b50\u7c7b\u5b9e\u53c2 \u5982\u679c\u4e00\u4e2a\u7236\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\u6307\u5411\u7684\u5b9e\u9645\u662f\u4e00\u4e2a\u5b50\u7c7b\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7236\u7c7b\u7684\u60f3\u7684\u5f15\u7528\u53ef\u4ee5\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08casting\uff09\u6210\u5b50\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\uff1a Person p = new Student ( \"Desmond\" , 12 ); Student s = ( Student ) p ; \u5305\u7684\u4f7f\u7528 package \u5305\u53ca\u5b50\u5305\u7684\u5b9a\u4e49\uff0c\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u547d\u540d\u7a7a\u95f4\uff0c\u4e3a\u4e86\u89e3\u51b3\u547d\u540d\u51b2\u7a81\u3002 package pkg1.pkg2.pkg3 \u5b83\u4e0e\u7c7b\u7684\u7ee7\u627f\u6ca1\u6709\u5173\u7cfb\u3002\u5b9e\u9645\u4e0a\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u53ef\u4ee5\u4f4d\u4e8e\u4e0d\u540c\u7684\u5305\u4e2d\u3002 \u5305\u6709\u4e24\u4e2a\u5c42\u9762\u7684\u542b\u4e49\uff1a \u4e00\u4e2a\u662f \u547d\u540d\u7a7a\u95f4 \u3001\u5b58\u50a8\u8def\u5f84 \u4e00\u4e2a\u662f \u53ef\u8bbf\u95ee\u6027 \uff0c\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5404\u4e2a\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ef\u4ee5\u76f8\u4e92\u8bbf\u95ee \u5305\u5c42\u6b21\u7684\u6839\u76ee\u5f55\u662f\u7531\u73af\u5883\u53d8\u91cf CLASSPATH \u6765\u786e\u5b9a\u7684\u3002 \u5bf9\u4e8e\u6ca1\u6709 package \u8bed\u53e5\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a\u9ed8\u8ba4\u5305\uff0c\u9ed8\u8ba4\u5728\u6839\u76ee\u5f55\u4e0b\u3002 JDK \u4e2d\u63d0\u4f9b\u4e86\u5f88\u591a\u5305\uff0c\u5982\uff1a java.applet , java.awt , java.awt.image , java.awt,peer , java.io , java.lang , java.net , java.util , java.swing \u7b49\u3002 import \u4e3a\u4e86\u80fd\u4f7f\u7528 Java \u4e2d\u5df2\u7ecf\u63d0\u4f9b\u7684\u7c7b\uff0c\u9700\u8981\u7528 import \u8bed\u53e5\u6765\u5bfc\u5165\u6240\u9700\u8981\u7684\u7c7b\uff1a import pkg1.pkg2.pkg3.Class Java \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5bfc\u5165 java.lang.* \u8bbf\u95ee\u63a7\u5236\u7b26 - public, private, protected Java \u4e2d\u6709\u4e24\u79cd\u4fee\u9970\u7b26\uff08modifier\uff09\uff1a \u8bbf\u95ee\u4fee\u9970\u7b26\uff08\u5982 public/private\uff09 \u548c \u5176\u4ed6\u4fee\u9970\u7b26\uff08\u5982 abstract\uff09 \u3002\u4fee\u9970\u7b26\u53ef\u4ee5\u4fee\u9970\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u4fee\u9970\u7c7b\u7684\u6210\u5458\u3002 \u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26 \u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26 \u7c7b\u7684\u8bbf\u95ee\u63a7\u5236\u7b26 \u88ab public \u4fee\u9970\u7684\u7c7b\u53ef\u4ee5\u88ab \u5176\u4ed6\u7c7b \u6240\u8bbf\u95ee\uff0c\u800c\u9ed8\u8ba4\u7684\u8bbf\u95ee\u63a7\u5236\u6743\u9650\u662f \u540c\u5305 \u8bbf\u95ee\u3002 setter \u548c getter \u5c06\u5b57\u6bb5\u7528 private \u4fee\u9970\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5c06\u4fe1\u606f\u8fdb\u884c \u5c01\u88c5\u548c\u9690\u85cf \u3002 \u8fd9\u79cd\u65b9\u6cd5\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u5c5e\u6027\u7528 private \u66f4\u597d\u5730\u5c01\u88c5\u548c\u9690\u85cf\uff0c\u5916\u90e8\u7c7b\u4e0d\u80fd\u968f\u610f\u5b58\u53d6\u548c\u4fee\u6539\u3002 \u5728\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u68c0\u9a8c \u53c2\u6570\u7684\u5408\u6cd5\u6027 \u65b9\u6cd5\u53ef\u4ee5\u7ed9\u51fa\u7ecf\u8fc7\u8ba1\u7b97\u540e\u7684\u503c \u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u5176\u4ed6\u5fc5\u8981\u5de5\u4f5c\uff08\u5982\u6e05\u7406\u8d44\u6e90\u3001\u8bbe\u5b9a\u72b6\u6001 \u7b49\uff09 \u53ea\u63d0\u4f9b getXXX \u4e0d\u63d0\u4f9b setXXX \u4fdd\u8bc1\u5c5e\u6027\u662f\u53ea\u8bfb\u7684 \u5176\u4ed6\u4fee\u9970\u7b26 - static, final, abstract static \u5b57\u6bb5 \u4e0d\u4fdd\u5b58\u5728\u67d0\u4e2a\u5bf9\u8c61\u7684\u5b9e\u4f8b\u4e2d\uff0c\u800c\u662f\u4fdd\u5b58\u5728\u7c7b\u7684\u5b9e\u4f8b\u7684\u516c\u5171\u5b58\u50a8\u5355\u5143\u3002 \u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d \u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 \u5b9e\u4f8b \u8bbf\u95ee\uff0c\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 \u4f8b\u5982\uff0c System \u7c7b\u7684 in \u548c out \u5bf9\u8c61\uff0c\u5c31\u662f\u5c5e\u4e8e\u7c7b\u7684\u57df\uff0c\u76f4\u63a5\u7528\u7c7b\u540d\u6765\u8bbf\u95ee\uff0c\u5373 System.in \u548c System.out \u3002 \u53ef\u4ee5\u7528\u6765\u4f5c\u5b9e\u4f8b\u8ba1\u6570\uff1a class Person { static long totalNum ; int age ; String Name ; }; \u7531\u4e8e Java \u662f\u5b8c\u5168\u9762\u5411\u5bf9\u8c61\u7684\uff08\u4e0d\u652f\u6301 \u201c\u5c06\u53d8\u91cf\u5b9a\u4e49\u5728\u5916\u9762\u201d\uff09\uff0c\u6545 static \u6210\u5458\u53ef\u4ee5\u7528\u4ee5\u66ff\u6362 C++ \u4e2d\u7684 \u5168\u5c40\u53d8\u91cf \u3002 static \u65b9\u6cd5\u540c\u7406\uff0c\u5b83\u4e0d\u80fd\u7528\u6765\u5bf9\u5177\u4f53\u5b9e\u4f8b\u7684\u6210\u5458\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ea\u80fd\u8c03\u7528 static \u6210\u5458\u3001\u64cd\u7eb5 static \u53d8\u91cf\u3002\u663e\u7136\uff0c static \u7684\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee this \u6216 super \u8fd9\u79cd\u5b9e\u4f8b\u5f15\u7528\u3002 static \u65b9\u6cd5\u7684\u8c03\u7528\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf\u540d\uff0c\u4f46\u6548\u679c\u662f\u76f8\u540c\u7684\u3002 \u6709\u4e00\u79cd\u65b9\u4fbf\u7684\u5199\u6cd5\u662f import static \uff0c\u4f8b\u5982\uff1a import static java.lang.System.* ; out . println (); // \u8868\u793a System.out.println(); import static \u7684\u524d\u63d0\u662f\u7c7b\u7684\u6240\u6709\u6210\u5458\u90fd\u662f static \u7684\u3002 final final \u4fee\u9970\u7684\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f\uff0c\u5373\u4e0d\u80fd\u6709\u5b50\u7c7b\u3002 final \u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u5b50\u7c7b\u65b9\u6cd5\u8986\u76d6\u3002 final \u4fee\u9970\u7684\u5b57\u6bb5\u548c\u5c40\u90e8\u53d8\u91cf\uff08\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff09\u80fd\u4e14\u53ea\u80fd\u88ab\u8d4b\u503c\u4e00\u6b21\uff0c\u662f\u53ea\u8bfb\u7684\u3002 \u4e00\u4e2a\u5b57\u6bb5\u88ab static final \u4fee\u9970\u65f6\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u5e38\u91cf\uff0c\u5982 Integer.MAX_VALUE , Math.PIE \u3002 \u5728\u5b9a\u4e49 static final \u57df\u65f6\uff0c\u5982\u4e0d\u7ed9\u5b9a\u521d\u59cb\u503c\uff0c\u5219\u6309\u9ed8\u8ba4\u503c\u8fdb\u884c\u521d\u59cb\u5316\uff08\u6570\u503c\u4e3a 0 \uff0c\u5e03\u5c14\u578b\u4e3a false \uff0c\u5f15\u7528\u578b\u4e3a null \uff09\u3002 \u5728\u5b9a\u4e49 final \u5b57\u6bb5\u65f6\uff0c\u82e5\u4e0d\u662f static \u7684\u57df\uff0c\u5219 \u5fc5\u987b\u4e14\u53ea\u80fd \u8d4b\u503c\u4e00\u6b21\uff0c\u4e0d\u80fd\u7f3a\u7701\u3002 \u8fd9\u79cd\u57df\u7684\u8d4b\u503c\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \u4e00\u662f\u5728\u5b9a\u4e49\u53d8\u91cf\u65f6\u8d4b\u521d\u59cb\u503c\uff0c\u800c\u662f\u5728\u6bcf\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u8d4b\u503c \u3002 \u5728\u5b9a\u4e49 final \u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u4e5f \u5fc5\u987b\u4e14\u4ec5\u80fd\u8d4b\u503c\u4e00\u6b21 \u3002\u8fd9\u4e2a\u503c\u53ef\u4ee5\u4e0d\u662f\u5e38\u91cf\uff0c\u4f46\u5728\u8be5\u53d8\u91cf\u5b58\u5728\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u3002 abstract abstract \u7c7b\uff08 \u62bd\u8c61\u7c7b \uff09\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 abstract \u65b9\u6cd5\uff08 \u62bd\u8c61\u65b9\u6cd5 \uff09\u7684\u5199\u6cd5\u7c7b\u4f3c C++ \u4e2d\u7684\u51fd\u6570\u58f0\u660e\uff1a abstract retuanType abstractMethod ( /* param list */ ); \u5176\u4f5c\u7528\u5728\u4e8e \u4e3a\u6240\u6709\u7684\u5b50\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3 \u3002 \u62bd\u8c61\u7c7b\u53ef\u4ee5\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5305\u542b\u3002\u4f46\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002 \u62bd\u8c61\u65b9\u6cd5\u5728\u5b50\u7c7b\u4e2d\u5fc5\u987b\u88ab\u5b9e\u73b0\uff0c\u5426\u5219\u5b50\u7c7b\u4ecd\u7136\u662f abstract \u7684\u3002 \u63a5\u53e3\uff08interface\uff09 \u63a5\u53e3\u662f \u67d0\u79cd\u7279\u5f81\u7684\u7ea6\u5b9a \u3002 \u63a5\u53e3\u5b9a\u4e49\u4e2d\u6240\u6709\u65b9\u6cd5\u90fd\u662f public abstract \u7684\u3002\uff08\u5728 UML \u56fe\u4e2d\u7528\u659c\u4f53\u8868\u793a\uff09 \u5b9e\u73b0\u63a5\u53e3 implements \u53ef\u4ee5\u5b9e\u73b0\u591a\u7ee7\u627f\uff0c\u5e76\u4e14\u4e0e\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u65e0\u5173 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u53e3\u7ee7\u627fUML\u56fe \u9762\u5411\u63a5\u53e3\u7f16\u7a0b \uff0c\u800c\u4e0d\u662f\u9762\u5411\u5b9e\u73b0\uff1a Flyable f = new Bird(); Java \u4e2d\u6709\u5927\u91cf\u7684\u63a5\u53e3 \u63a5\u53e3\u7684\u4f5c\u7528\uff1a \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0 \u4e0d\u76f8\u5173\u7c7b\u7684\u76f8\u540c\u884c\u4e3a \uff0c\u800c\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e9b\u7c7b\u4e4b\u95f4\u7684\u5c42\u6b21\u5173\u7cfb\u3002\u4ece\u800c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9e\u73b0\u4e86\u591a\u91cd\u7ee7\u627f\u3002 \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u6307\u660e\u591a\u4e2a\u7c7b\u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u4e86\u89e3\u5bf9\u8c61\u7684\u4ea4\u4e92\u754c\u9762\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u7c7b\u3002 \u63a5\u53e3\u4e3e\u4f8b\uff1a interface Collection { void add ( Object obj ); void delete ( Object obj ); Object find ( Object obj ); int size (); } \u901a\u5e38 \u63a5\u53e3\u540d \u4ee5 ...able \u6216 ...ible \u7ed3\u5c3e\uff0c\u6807\u660e\u63a5\u53e3\u80fd\u5b8c\u6210\u4e00\u5b9a\u7684\u884c\u4e3a\u3002 \u63a5\u53e3\u7684\u58f0\u660e\u4e2d\u8fd8\u53ef\u4ee5\u5305\u62ec\u5bf9\u63a5\u53e3\u7684\u8bbf\u95ee\u6743\u9650\u4ee5\u53ca\u5bf9\u5b83\u7684\u7236\u63a5\u53e3\u5217\u8868\u3002\u5b8c\u6574\u7684\u63a5\u53e3\u58f0\u660e\u5982\u4e0b\uff1a [ public ] interface interfaceName [ extends listOfSuperInterface ] { // ... } \u5176\u4e2d public \u6307\u660e\u4efb\u610f\u7c7b\u5747\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\uff0c\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e0e\u8be5\u63a5\u53e3\u5b9a\u4e49\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u624d\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002 extends \u5b50\u53e5\u4e0e\u7c7b\u58f0\u660e\u4e2d\u7684 extends \u5b50\u53e5\u4e0d\u540c\u7684\u662f\u4e00\u4e2a\u63a5\u53e3\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u63a5\u53e3\uff0c\u4f46\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u7236\u7c7b\u3002\u5b50\u63a5\u53e3\u7ee7\u627f\u7236\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u5e38\u91cf\u548c\u65b9\u6cd5\u3002 \u63a5\u53e3\u5185\u65b9\u6cd5\u58f0\u660e\u7684\u683c\u5f0f\u4e3a\uff1a returnType methodName(/* paramlist */); \u63a5\u53e3\u4e2d\u53ea\u8fdb\u884c\u65b9\u6cd5\u7684\u58f0\u660e\uff0c\u4e0d\u63d0\u4f9b\u65b9\u6cd5\u7684\u5b9e\u73b0\b\uff0c\u6545\u8be5\u5b9a\u4e49\u6ca1\u6709\u65b9\u6cd5\u4f53\uff0c\u7528 ; \u7ed3\u5c3e\u3002 \u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\u5177\u6709 public \u548c abstract \u5c5e\u6027\u3002\u6240\u4ee5\u5b9a\u4e49\u7684\u65f6\u5019\u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u662f \u53ef\u4ee5\u7701\u7565\u7684 \u3002 \u53e6\u5916\uff0c\u5982\u679c\u5b50\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e86\u548c\u7236\u63a5\u53e3\u540c\u540d\u7684\u5e38\u91cf\u6216\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u5219\u7236\u63a5\u53e3\u4e2d\u7684\u5e38\u91cf\u88ab\u9690\u85cf\uff0c\u65b9\u6cd5\u88ab\u91cd\u8f7d\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e0b\u9762\u5b9a\u4e49\u7684 FIFOQueue \u4e2d\u5b9e\u73b0\u4e86\u4e0a\u9762\u6240\u5b9a\u4e49\u7684\u63a5\u53e3 Collection \uff1a class FIFOQueue implements Collection { public void add ( Object obj ) { // ... } public void delete ( Object obj ) { // ... } public Object find ( Object obj ) { // ... } public int currentCount () { // ... } } \u5728\u7c7b\u4e2d\u5b9e\u73b0\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u65f6\uff0c\u65b9\u6cd5\u7684\u58f0\u660e\u5fc5\u987b\u4e0e\u63a5\u53e3\u4e2d\u6240\u5b9a\u4e49\u7684\u5b8c\u5168\u4e00\u81f4\u3002 \u63a5\u53e3\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a \u5f15\u7528\u7c7b\u578b \u6765\u4f7f\u7528\u3002\u4efb\u4f55\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5 \u5b58\u50a8\u5728\u8be5\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u4e2d \uff0c\u901a\u8fc7\u8fd9\u4e9b\u53d8\u91cf \u53ef\u4ee5\u8bbf\u95ee\u7c7b\u6240\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u3002Java \u8fd0\u884c\u65f6\u7cfb\u7edf\u52a8\u6001\u5730\u51b3\u5b9a\u8be5\u4f7f\u7528\u54ea\u4e2a\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002 \u628a\u63a5\u53e3\u4f5c\u4e3a\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4e0d\u9700\u8981\u4e86\u89e3\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u5177\u4f53\u7684\u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a // ... Collection c = new FIFOQueue (); c . add ( obj ); //... \u63a5\u53e3\u4e2d\u7684\u5e38\u91cf\u548c\u679a\u4e3e\uff0cJava8 \u5bf9\u63a5\u53e3\u7684\u6269\u5145 \u5e38\u91cf\u548c\u679a\u4e3e \u63a5\u53e3\u4f53\u91cd\u53ef\u4ee5\u5305\u542b\u5e38\u91cf\u5b9a\u4e49\u3002 \u5e38\u91cf\u5b9a\u4e49\u7684\u683c\u5f0f\u4e3a\uff1a type NAME = value ; \u5176\u4e2d type \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c NAME \u662f\u5e38\u91cf\u540d\uff0c\u901a\u5e38\u7528\u5927\u5199\uff0c value \u662f\u5e38\u91cf\u503c\u3002 \u5728\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5e38\u91cf\u53ef\u4ee5\u88ab\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u591a\u4e2a\u7c7b\u5171\u4eab\uff0c\u5b83\u4e0e C \u4e2d define \u4ee5\u53ca C++ \u4e2d\u7528 cosnt \u5b9a\u4e49\u5e38\u91cf\u7684\u610f\u4e49\u662f\u76f8\u540c\u7684 \u3002 \u5728 \u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5e38\u91cf \u5177\u6709 public , static , final \u5c5e\u6027\u3002 \u4ece JDK5 \u5f00\u59cb\uff0c\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e enum Light { Red , Yello , Green } \u4f7f\u7528\uff1a Light light = Light . Red ; switch ( light ) { case Red : ... break ; } \u6ce8\u610f\uff1a case \u540e\u9762\u4e0d\u5199\u4e3a Light.Red \u3002 Java \u4e2d\u679a\u4e3e\u662f\u7528 class \u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u590d\u6742\u5730\u4f7f\u7528\u3002 Java8 \u4e2d\u7684\u63a5\u53e3 Java8 \u4ee5\u4e0a\uff0c\u63a5\u53e3\u6210\u5458\u8fd8\u53ef\u4ee5\u662f\uff1a static \u65b9\u6cd5\uff0c\u5177\u6709\u5b9e\u73b0\u4f53\u7684\u65b9\u6cd5\uff08default \u65b9\u6cd5\uff09 \u9ed8\u8ba4\u65b9\u6cd5\u7684\u597d\u5904\u662f\uff1a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5b50\u7c7b\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u7528\u91cd\u65b0\u5199\u4e86\u3002 \u5c0f\u7ed3 \u5b8c\u6574\u7684\u7c7b\u5b9a\u4e49 // \u7c7b\u58f0\u660e [ public ] [ abstract | final ] class className [ extends superClassName ] [ implements InterfaceNameList ] { // \u6210\u5458\u53d8\u91cf\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 [ public | protected | private ] [ static ] [ final ] [ transient ] [ volatile ] type variableName ; // \u65b9\u6cd5\u5b9a\u4e49\u53ca\u5b9e\u73b0\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 [ public | protected | private ] [ static ] [ final | abstract ] [ native ] [ synchronized ] returnType mathodName ( [ paramList ] ) [ throws exceptionList ] { // ... } } \u53ef\u89c1\uff0c\u5728\u58f0\u660e Java \u7c7b\u57df\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5458\u5173\u6ce8\u7684\u662f\uff1a \u53ef\u7ee7\u627f\u6027 \uff1a public , protected , private \u53ef\u8bbf\u95ee\u6027 \uff1a static \u53ef\u66f4\u6539\u6027 \uff1a final \u662f\u5426\u53c2\u4e0e\u5e8f\u5217\u5316 \uff1a transient \u7ebf\u7a0b\u540c\u6b65\u6027 \uff1a volatile \u5b8c\u6574\u7684\u63a5\u53e3\u5b9a\u4e49 // \u63a5\u53e3\u58f0\u660e [ public ] interface InterfaceName [ extends SuperInterfaceList ] { type constantName = Value ; // \u5e38\u91cf\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 returnType methodName ( [ paramList ] ); // \u65b9\u6cd5\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 } \u4e09\u79cd\u8981\u6c42\u56fa\u5b9a\u58f0\u660e\u65b9\u5f0f\u7684\u65b9\u6cd5 // \u6784\u9020\u65b9\u6cd5 className ( [ paramList ] ) { // ... } // main()\u65b9\u6cd5 public static void main ( String args [] ) { // ... } // finalize()\u65b9\u6cd5 protected void finalize () throws throwable { // ... } \u5176\u4e2d finalize \u65b9\u6cd5\u4e00\u822c\u4e0d\u7528\uff0c\u4e0e\u7f16\u8bd1\u5668\u76f8\u5173\u3002 \u5b8c\u6574\u7684 Java \u6e90\u6587\u4ef6 package packageName ; // \u6307\u5b9a\u6587\u4ef6\u4e2d\u7c7b\u6240\u5728\u7684\u5305\uff0c0\u4e2a\u62161\u4e2a import packageName. [ className |*] ; // \u6307\u5b9a\u5f15\u5165\u7684\u7c7b\uff0c0\u4e2a\u6216\u591a\u4e2a public classDefinition // \u5c5e\u6027\u4e3a public \u7684\u7c7b\u5b9a\u4e49\uff0c0\u4e2a\u62161\u4e2a interfaceDefinition and classDefinition // \u63a5\u53e3\u548c\u7c7b\u7684\u5b9a\u4e49\uff0c0\u4e2a\u6216\u591a\u4e2a \u5176\u4e2d\uff1a \u6e90\u6587\u4ef6\u7684\u540d\u5b57\u5fc5\u987b\u4e0e\u5c5e\u6027\u4e3a public \u7684\u7c7b\u540d\u5b8c\u5168\u76f8\u540c \u5728\u4e00\u4e2a .java \u6587\u4ef6\u4e2d\uff0c package \u8bed\u53e5\u548c public \u7c7b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a","title":"\u7c7b\u3001\u5305\u548c\u63a5\u53e3"},{"location":"languages/java/basic/class_package_interface/#_1","text":"","title":"\u7c7b\u3001\u5305\u548c\u63a5\u53e3"},{"location":"languages/java/basic/class_package_interface/#_2","text":"\u7c7b \u662f Java \u7a0b\u5e8f\u4e2d\u6700\u8fd1\u672c\u7684\u8981\u7d20\uff0c\u662f\u4e00\u7c7b\u5bf9\u8c61\u7684\u539f\u578b\uff0c\u5b83 \u5c01\u88c5 \u4e86\u4e00\u7c7b\u5bf9\u8c61\u7684\u72b6\u6001\u548c\u65b9\u6cd5\u3002 \u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u76f8\u5f53\u4e8e\u8bb2 \u53d8\u91cf\u548c\u51fd\u6570 \u5c01\u88c5\u5230\u4e00\u4e2a \u7c7b \u5f53\u4e2d\u3002 class Person { String name ; int age ; void sayHello () { System . out . println ( \"Hello! My name is \" + name ); } } \u5b57\u6bb5\uff08field\uff09 \u662f\u7c7b\u7684\u5c5e\u6027\uff0c\u662f\u7528 \u53d8\u91cf \u6765\u8868\u793a\u7684\u3002 \u5b57\u6bb5\u4e5f\u79f0\u4e3a \u57df\u3001\u57df\u53d8\u91cf\u3001\u5c5e\u6027\u3001\u6210\u5458\u53d8\u91cf \u7b49\u3002 \u65b9\u6cd5\uff08method\uff09 \u662f\u7c7b\u7684\u529f\u80fd\u548c\u64cd\u4f5c\uff0c\u7528 \u51fd\u6570 \u6765\u8868\u793a\u3002 \u6784\u9020\u65b9\u6cd5\uff08constructor\uff09 \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\uff0c\u7528\u6765\u521d\u59cb\u5316\u8be5\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002\u6784\u9020\u65b9\u6cd5\u4e0e\u7c7b\u540c\u540d\uff0c\u800c\u4e14\u4e0d\u5199\u8fd4\u56de\u7c7b\u578b\uff1a Person ( String _name , int _age ) { name = _name ; age = _age ; } \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7c7b\u6709\u4e00\u81f3\u591a\u4e2a\u6784\u9020\u65b9\u6cd5\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u6784\u9020\u65b9\u6cd5\uff0c\u7cfb\u7edf\u81ea\u52a8\u4ea7\u751f\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u79f0\u4e3a\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\uff08default constructor\uff09\u3002\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5\u4e0d\u5e26\u53c2\u6570\uff0c\u800c\u4e14\u65b9\u6cd5\u4f53\u4e3a\u7a7a\u3002 \u8bbf\u95ee\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u9700\u8981\u7528 . \u8fd0\u7b97\u7b26\uff1a Person p = new Person (); System . out . println ( p . name ); p . sayHello (); \u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u7684\u597d\u5904\u662f\uff1a \u5c01\u88c5\u6027 \u548c \u5b89\u5168\u6027 \uff08\u901a\u8fc7\u5f15\u7528\u8bbf\u95ee\u4fdd\u8bc1\u4e0d\u4f1a\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\uff09\u3002 \u65b9\u6cd5\u91cd\u8f7d\uff08override\uff09 \uff1a\u591a\u4e2a\u65b9\u6cd5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff0c \u7f16\u8bd1\u671f \u80fd\u8bc6\u522b\u51fa\u6765\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684 \u7b7e\u540d\uff08signature\uff09 \u4e0d\u540c\uff0c\u5373\u5177\u6709\u4e0d\u540c\u7684\u53c2\u6570\u5217\u8868\u3002 \u901a\u8fc7\u65b9\u6cd5\u91cd\u8f7d\u53ef\u4ee5\u5b9e\u73b0 \u591a\u6001\uff08polymorphism\uff09 \u3002","title":"\u7c7b\u3001\u5b57\u6bb5\u3001\u65b9\u6cd5"},{"location":"languages/java/basic/class_package_interface/#this","text":"\u5728\u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528 this \u6765\u8bbf\u95ee\u5b57\u6bb5\u53ca\u65b9\u6cd5\u3002\u6b64\u65f6 this \u8868\u793a\u5f53\u524d\u5b9e\u4f8b\u672c\u8eab\u3002 this \u7ecf\u5e38\u7528\u4e8e\u89e3\u51b3\u5c40\u90e8\u53d8\u91cf\u4e0e\u7c7b\u53d8\u91cf\u540c\u540d\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a Person ( int age , String name ) { this . age = age ; this . name = name ; } \u5728\u6784\u9020\u65b9\u6cd5\u4e2d\uff0c\u7528 this \u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u5982\uff1a Person () { this ( 0 , \"\" ); //... } \u6ce8\uff1a\u5728\u6784\u9020\u65b9\u6cd5\u4e2d\u8c03\u7528\u53e6\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\uff0c\u5219\u8fd9\u6761\u8c03\u7528\u8bed\u53e5 \u5fc5\u987b\u653e\u5728\u7b2c\u4e00\u53e5 \u3002","title":"this \u7684\u4f7f\u7528\uff1a"},{"location":"languages/java/basic/class_package_interface/#_3","text":"\u7ee7\u627f\uff08inheritance\uff09 \u662f\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u6700\u4e3a \u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00 \u3002 Java \u4e2d\u5173\u4e8e\u7ee7\u627f\u6709\uff1a \u5b50\u7c7b\uff08subclass\uff09 \u548c \u7236\u7c7b/\u8d85\u7c7b\uff08superclass\uff09 \u7684\u6982\u5ff5\u3002 Java \u53ea\u652f\u6301\u5355\u7ee7\u627f\uff0c\u5373 \u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u76f4\u63a5\u7684\u7236\u7c7b \u3002 \u5b50\u7c7b\u5728\u7ee7\u627f\u7236\u7c7b\u7684\u72b6\u6001\u548c\u884c\u4e3a\u7684\u540c\u65f6\uff0c\u53ef\u4ee5 \u4fee\u6539 \u7236\u7c7b\u7684\u72b6\u6001\u6216\u91cd\u8f7d\u7236\u7c7b\u7684\u884c\u4e3a\uff0c\u4e5f\u53ef\u4ee5 \u589e\u52a0 \u65b0\u7684\u72b6\u6001\u548c\u884c\u4e3a\u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a \u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u62bd\u8c61\u7a0b\u5ea6 \u5b9e\u73b0\u4ee3\u7801\u91cd\u7528\uff0c\u63d0\u5347\u5f00\u53d1\u6548\u7387\u597d\u53ef\u7ef4\u62a4\u6027 Java \u4e2d\u7ee7\u627f\u662f\u901a\u8fc7 extends \u5173\u952e\u5b57\u6765\u5b9e\u73b0\u7684\uff1a class Student extends Person { //... } \u7f3a\u7701 extends \u8868\u793a\u4ece java.lang.Object \u7c7b\u7ee7\u627f\u3002 \u6240\u6709\u7684\u7c7b\u90fd\u662f\u901a\u8fc7\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f java.lang.Object \u5f97\u5230\u7684\u3002 \u7528 UML \u56fe\u8868\u793a\u7ee7\u627f\u5173\u7cfb\uff1a class Student extends Person { String school ; int score ; boolean isGood () { return score > 80 ; } //... } JDK1.5 \u4e4b\u540e\u53ef\u4ee5\u7528 @override \u6ce8\u8bb0 \u6765\u8868\u793a\u51fd\u6570\u7684 \u8986\u76d6\uff08override\uff09 \uff0c\u800c\u4e0d\u7528\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a void sayHello () { System . out . println ( \"Hello! My name is \" + name + \" from \" + school ); } \u4e00\u4e2a\u7c7b\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u79f0\u4e3a\u65b9\u6cd5\u7684 \u91cd\u8f7d\uff08overload\uff09 \u3002\u5f53\u91cd\u8f7d\u7236\u7c7b\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u662f\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\uff1a void sayHello ( Student another ) { System . out . println ( \"Hi!\" ); if ( school . equals ( another . school )) { System . out . println ( \"Schoolmate!\" ); } } \u53ef\u4ee5\u4f7f\u7528 super \u6765\u8bbf\u95ee\u7236\u7c7b\u7684\u57df\u548c\u65b9\u6cd5\u3002 \u6ce8\u610f\u65e0\u8bba\u662f this \u8fd8\u662f super \u90fd\u662f\u5f53\u524d\u5bf9\u8c61\u5b9e\u4f8b\u7684\u6307\u9488\uff0c\u5e76\u4e0d\u4f1a\u56e0\u4e3a super \u7684\u4f7f\u7528\u4f7f\u5f97\u5185\u5b58\u4e2d\u591a\u51fa\u4e00\u4e2a\u7236\u7c7b\u7684\u5bf9\u8c61\u3002 super \u7684\u5b58\u5728\u4f7f\u5f97\u5b50\u7c7b\u5728 \u8986\u76d6 \u7236\u7c7b\u65b9\u6cd5\u7684\u540c\u65f6\uff0c\u53c8 \u53ef\u4ee5\u4f7f\u7528 \u539f\u6765\u5b9a\u4e49\u5728\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002","title":"\u7c7b\u7684\u7ee7\u627f"},{"location":"languages/java/basic/class_package_interface/#_4","text":"\u5b50\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5176\u7236\u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61 \u7236\u7c7b\u5bf9\u8c61\u4e0d\u80fd\u88ab\u5f53\u505a\u5176\u67d0\u4e00\u4e2a\u5b50\u7c7b\u7684\u5bf9\u8c61\uff08\u5982\u679c\u7528\u5b50\u7c7b\u6307\u9488\u6307\u5411\u7236\u7c7b\u5b9e\u4f8b\uff0c\u7f16\u8bd1\u80fd\u901a\u8fc7\uff0c\u4f46\u8fd0\u884c\u4f1a\u629b\u5f02\u5e38\uff09 \u7236\u7c7b\u4f5c\u4e3a\u51fd\u6570\u5f62\u53c2\u65f6\u53ef\u4ee5\u4f20\u4e00\u4e2a\u5b50\u7c7b\u5b9e\u53c2 \u5982\u679c\u4e00\u4e2a\u7236\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\u6307\u5411\u7684\u5b9e\u9645\u662f\u4e00\u4e2a\u5b50\u7c7b\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7236\u7c7b\u7684\u60f3\u7684\u5f15\u7528\u53ef\u4ee5\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08casting\uff09\u6210\u5b50\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\uff1a Person p = new Student ( \"Desmond\" , 12 ); Student s = ( Student ) p ;","title":"\u7236\u7c7b\u5bf9\u8c61\u4e0e\u5b50\u7c7b\u5bf9\u8c61\u7684\u8f6c\u6362\uff1a"},{"location":"languages/java/basic/class_package_interface/#_5","text":"","title":"\u5305\u7684\u4f7f\u7528"},{"location":"languages/java/basic/class_package_interface/#package","text":"\u5305\u53ca\u5b50\u5305\u7684\u5b9a\u4e49\uff0c\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u547d\u540d\u7a7a\u95f4\uff0c\u4e3a\u4e86\u89e3\u51b3\u547d\u540d\u51b2\u7a81\u3002 package pkg1.pkg2.pkg3 \u5b83\u4e0e\u7c7b\u7684\u7ee7\u627f\u6ca1\u6709\u5173\u7cfb\u3002\u5b9e\u9645\u4e0a\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u53ef\u4ee5\u4f4d\u4e8e\u4e0d\u540c\u7684\u5305\u4e2d\u3002 \u5305\u6709\u4e24\u4e2a\u5c42\u9762\u7684\u542b\u4e49\uff1a \u4e00\u4e2a\u662f \u547d\u540d\u7a7a\u95f4 \u3001\u5b58\u50a8\u8def\u5f84 \u4e00\u4e2a\u662f \u53ef\u8bbf\u95ee\u6027 \uff0c\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5404\u4e2a\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ef\u4ee5\u76f8\u4e92\u8bbf\u95ee \u5305\u5c42\u6b21\u7684\u6839\u76ee\u5f55\u662f\u7531\u73af\u5883\u53d8\u91cf CLASSPATH \u6765\u786e\u5b9a\u7684\u3002 \u5bf9\u4e8e\u6ca1\u6709 package \u8bed\u53e5\u7684\u6587\u4ef6\uff0c\u79f0\u4e3a\u9ed8\u8ba4\u5305\uff0c\u9ed8\u8ba4\u5728\u6839\u76ee\u5f55\u4e0b\u3002 JDK \u4e2d\u63d0\u4f9b\u4e86\u5f88\u591a\u5305\uff0c\u5982\uff1a java.applet , java.awt , java.awt.image , java.awt,peer , java.io , java.lang , java.net , java.util , java.swing \u7b49\u3002","title":"package"},{"location":"languages/java/basic/class_package_interface/#import","text":"\u4e3a\u4e86\u80fd\u4f7f\u7528 Java \u4e2d\u5df2\u7ecf\u63d0\u4f9b\u7684\u7c7b\uff0c\u9700\u8981\u7528 import \u8bed\u53e5\u6765\u5bfc\u5165\u6240\u9700\u8981\u7684\u7c7b\uff1a import pkg1.pkg2.pkg3.Class Java \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5bfc\u5165 java.lang.*","title":"import"},{"location":"languages/java/basic/class_package_interface/#-public-private-protected","text":"Java \u4e2d\u6709\u4e24\u79cd\u4fee\u9970\u7b26\uff08modifier\uff09\uff1a \u8bbf\u95ee\u4fee\u9970\u7b26\uff08\u5982 public/private\uff09 \u548c \u5176\u4ed6\u4fee\u9970\u7b26\uff08\u5982 abstract\uff09 \u3002\u4fee\u9970\u7b26\u53ef\u4ee5\u4fee\u9970\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u4fee\u9970\u7c7b\u7684\u6210\u5458\u3002","title":"\u8bbf\u95ee\u63a7\u5236\u7b26 - public, private, protected"},{"location":"languages/java/basic/class_package_interface/#_6","text":"\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26","title":"\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26"},{"location":"languages/java/basic/class_package_interface/#_7","text":"\u88ab public \u4fee\u9970\u7684\u7c7b\u53ef\u4ee5\u88ab \u5176\u4ed6\u7c7b \u6240\u8bbf\u95ee\uff0c\u800c\u9ed8\u8ba4\u7684\u8bbf\u95ee\u63a7\u5236\u6743\u9650\u662f \u540c\u5305 \u8bbf\u95ee\u3002","title":"\u7c7b\u7684\u8bbf\u95ee\u63a7\u5236\u7b26"},{"location":"languages/java/basic/class_package_interface/#setter-getter","text":"\u5c06\u5b57\u6bb5\u7528 private \u4fee\u9970\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5c06\u4fe1\u606f\u8fdb\u884c \u5c01\u88c5\u548c\u9690\u85cf \u3002 \u8fd9\u79cd\u65b9\u6cd5\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u5c5e\u6027\u7528 private \u66f4\u597d\u5730\u5c01\u88c5\u548c\u9690\u85cf\uff0c\u5916\u90e8\u7c7b\u4e0d\u80fd\u968f\u610f\u5b58\u53d6\u548c\u4fee\u6539\u3002 \u5728\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u68c0\u9a8c \u53c2\u6570\u7684\u5408\u6cd5\u6027 \u65b9\u6cd5\u53ef\u4ee5\u7ed9\u51fa\u7ecf\u8fc7\u8ba1\u7b97\u540e\u7684\u503c \u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u5176\u4ed6\u5fc5\u8981\u5de5\u4f5c\uff08\u5982\u6e05\u7406\u8d44\u6e90\u3001\u8bbe\u5b9a\u72b6\u6001 \u7b49\uff09 \u53ea\u63d0\u4f9b getXXX \u4e0d\u63d0\u4f9b setXXX \u4fdd\u8bc1\u5c5e\u6027\u662f\u53ea\u8bfb\u7684","title":"setter \u548c getter"},{"location":"languages/java/basic/class_package_interface/#-static-final-abstract","text":"","title":"\u5176\u4ed6\u4fee\u9970\u7b26 - static, final, abstract"},{"location":"languages/java/basic/class_package_interface/#static","text":"\u4e0d\u4fdd\u5b58\u5728\u67d0\u4e2a\u5bf9\u8c61\u7684\u5b9e\u4f8b\u4e2d\uff0c\u800c\u662f\u4fdd\u5b58\u5728\u7c7b\u7684\u5b9e\u4f8b\u7684\u516c\u5171\u5b58\u50a8\u5355\u5143\u3002 \u53ef\u4ee5\u901a\u8fc7 \u7c7b\u540d \u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 \u5b9e\u4f8b \u8bbf\u95ee\uff0c\u4e24\u79cd\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002 \u4f8b\u5982\uff0c System \u7c7b\u7684 in \u548c out \u5bf9\u8c61\uff0c\u5c31\u662f\u5c5e\u4e8e\u7c7b\u7684\u57df\uff0c\u76f4\u63a5\u7528\u7c7b\u540d\u6765\u8bbf\u95ee\uff0c\u5373 System.in \u548c System.out \u3002 \u53ef\u4ee5\u7528\u6765\u4f5c\u5b9e\u4f8b\u8ba1\u6570\uff1a class Person { static long totalNum ; int age ; String Name ; }; \u7531\u4e8e Java \u662f\u5b8c\u5168\u9762\u5411\u5bf9\u8c61\u7684\uff08\u4e0d\u652f\u6301 \u201c\u5c06\u53d8\u91cf\u5b9a\u4e49\u5728\u5916\u9762\u201d\uff09\uff0c\u6545 static \u6210\u5458\u53ef\u4ee5\u7528\u4ee5\u66ff\u6362 C++ \u4e2d\u7684 \u5168\u5c40\u53d8\u91cf \u3002 static \u65b9\u6cd5\u540c\u7406\uff0c\u5b83\u4e0d\u80fd\u7528\u6765\u5bf9\u5177\u4f53\u5b9e\u4f8b\u7684\u6210\u5458\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ea\u80fd\u8c03\u7528 static \u6210\u5458\u3001\u64cd\u7eb5 static \u53d8\u91cf\u3002\u663e\u7136\uff0c static \u7684\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee this \u6216 super \u8fd9\u79cd\u5b9e\u4f8b\u5f15\u7528\u3002 static \u65b9\u6cd5\u7684\u8c03\u7528\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf\u540d\uff0c\u4f46\u6548\u679c\u662f\u76f8\u540c\u7684\u3002 \u6709\u4e00\u79cd\u65b9\u4fbf\u7684\u5199\u6cd5\u662f import static \uff0c\u4f8b\u5982\uff1a import static java.lang.System.* ; out . println (); // \u8868\u793a System.out.println(); import static \u7684\u524d\u63d0\u662f\u7c7b\u7684\u6240\u6709\u6210\u5458\u90fd\u662f static \u7684\u3002","title":"static \u5b57\u6bb5"},{"location":"languages/java/basic/class_package_interface/#final","text":"final \u4fee\u9970\u7684\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f\uff0c\u5373\u4e0d\u80fd\u6709\u5b50\u7c7b\u3002 final \u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u5b50\u7c7b\u65b9\u6cd5\u8986\u76d6\u3002 final \u4fee\u9970\u7684\u5b57\u6bb5\u548c\u5c40\u90e8\u53d8\u91cf\uff08\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff09\u80fd\u4e14\u53ea\u80fd\u88ab\u8d4b\u503c\u4e00\u6b21\uff0c\u662f\u53ea\u8bfb\u7684\u3002 \u4e00\u4e2a\u5b57\u6bb5\u88ab static final \u4fee\u9970\u65f6\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u5e38\u91cf\uff0c\u5982 Integer.MAX_VALUE , Math.PIE \u3002 \u5728\u5b9a\u4e49 static final \u57df\u65f6\uff0c\u5982\u4e0d\u7ed9\u5b9a\u521d\u59cb\u503c\uff0c\u5219\u6309\u9ed8\u8ba4\u503c\u8fdb\u884c\u521d\u59cb\u5316\uff08\u6570\u503c\u4e3a 0 \uff0c\u5e03\u5c14\u578b\u4e3a false \uff0c\u5f15\u7528\u578b\u4e3a null \uff09\u3002 \u5728\u5b9a\u4e49 final \u5b57\u6bb5\u65f6\uff0c\u82e5\u4e0d\u662f static \u7684\u57df\uff0c\u5219 \u5fc5\u987b\u4e14\u53ea\u80fd \u8d4b\u503c\u4e00\u6b21\uff0c\u4e0d\u80fd\u7f3a\u7701\u3002 \u8fd9\u79cd\u57df\u7684\u8d4b\u503c\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a \u4e00\u662f\u5728\u5b9a\u4e49\u53d8\u91cf\u65f6\u8d4b\u521d\u59cb\u503c\uff0c\u800c\u662f\u5728\u6bcf\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u8d4b\u503c \u3002 \u5728\u5b9a\u4e49 final \u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u4e5f \u5fc5\u987b\u4e14\u4ec5\u80fd\u8d4b\u503c\u4e00\u6b21 \u3002\u8fd9\u4e2a\u503c\u53ef\u4ee5\u4e0d\u662f\u5e38\u91cf\uff0c\u4f46\u5728\u8be5\u53d8\u91cf\u5b58\u5728\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u3002","title":"final"},{"location":"languages/java/basic/class_package_interface/#abstract","text":"abstract \u7c7b\uff08 \u62bd\u8c61\u7c7b \uff09\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 abstract \u65b9\u6cd5\uff08 \u62bd\u8c61\u65b9\u6cd5 \uff09\u7684\u5199\u6cd5\u7c7b\u4f3c C++ \u4e2d\u7684\u51fd\u6570\u58f0\u660e\uff1a abstract retuanType abstractMethod ( /* param list */ ); \u5176\u4f5c\u7528\u5728\u4e8e \u4e3a\u6240\u6709\u7684\u5b50\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3 \u3002 \u62bd\u8c61\u7c7b\u53ef\u4ee5\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5305\u542b\u3002\u4f46\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002 \u62bd\u8c61\u65b9\u6cd5\u5728\u5b50\u7c7b\u4e2d\u5fc5\u987b\u88ab\u5b9e\u73b0\uff0c\u5426\u5219\u5b50\u7c7b\u4ecd\u7136\u662f abstract \u7684\u3002","title":"abstract"},{"location":"languages/java/basic/class_package_interface/#interface","text":"\u63a5\u53e3\u662f \u67d0\u79cd\u7279\u5f81\u7684\u7ea6\u5b9a \u3002 \u63a5\u53e3\u5b9a\u4e49\u4e2d\u6240\u6709\u65b9\u6cd5\u90fd\u662f public abstract \u7684\u3002\uff08\u5728 UML \u56fe\u4e2d\u7528\u659c\u4f53\u8868\u793a\uff09 \u5b9e\u73b0\u63a5\u53e3 implements \u53ef\u4ee5\u5b9e\u73b0\u591a\u7ee7\u627f\uff0c\u5e76\u4e14\u4e0e\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u65e0\u5173 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u53e3\u7ee7\u627fUML\u56fe \u9762\u5411\u63a5\u53e3\u7f16\u7a0b \uff0c\u800c\u4e0d\u662f\u9762\u5411\u5b9e\u73b0\uff1a Flyable f = new Bird(); Java \u4e2d\u6709\u5927\u91cf\u7684\u63a5\u53e3 \u63a5\u53e3\u7684\u4f5c\u7528\uff1a \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u5b9e\u73b0 \u4e0d\u76f8\u5173\u7c7b\u7684\u76f8\u540c\u884c\u4e3a \uff0c\u800c\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e9b\u7c7b\u4e4b\u95f4\u7684\u5c42\u6b21\u5173\u7cfb\u3002\u4ece\u800c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9e\u73b0\u4e86\u591a\u91cd\u7ee7\u627f\u3002 \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u6307\u660e\u591a\u4e2a\u7c7b\u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u63a5\u53e3\u53ef\u4ee5\u4e86\u89e3\u5bf9\u8c61\u7684\u4ea4\u4e92\u754c\u9762\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u7c7b\u3002 \u63a5\u53e3\u4e3e\u4f8b\uff1a interface Collection { void add ( Object obj ); void delete ( Object obj ); Object find ( Object obj ); int size (); } \u901a\u5e38 \u63a5\u53e3\u540d \u4ee5 ...able \u6216 ...ible \u7ed3\u5c3e\uff0c\u6807\u660e\u63a5\u53e3\u80fd\u5b8c\u6210\u4e00\u5b9a\u7684\u884c\u4e3a\u3002 \u63a5\u53e3\u7684\u58f0\u660e\u4e2d\u8fd8\u53ef\u4ee5\u5305\u62ec\u5bf9\u63a5\u53e3\u7684\u8bbf\u95ee\u6743\u9650\u4ee5\u53ca\u5bf9\u5b83\u7684\u7236\u63a5\u53e3\u5217\u8868\u3002\u5b8c\u6574\u7684\u63a5\u53e3\u58f0\u660e\u5982\u4e0b\uff1a [ public ] interface interfaceName [ extends listOfSuperInterface ] { // ... } \u5176\u4e2d public \u6307\u660e\u4efb\u610f\u7c7b\u5747\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\uff0c\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e0e\u8be5\u63a5\u53e3\u5b9a\u4e49\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u624d\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002 extends \u5b50\u53e5\u4e0e\u7c7b\u58f0\u660e\u4e2d\u7684 extends \u5b50\u53e5\u4e0d\u540c\u7684\u662f\u4e00\u4e2a\u63a5\u53e3\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u63a5\u53e3\uff0c\u4f46\u4e00\u4e2a\u5b50\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u7236\u7c7b\u3002\u5b50\u63a5\u53e3\u7ee7\u627f\u7236\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u5e38\u91cf\u548c\u65b9\u6cd5\u3002 \u63a5\u53e3\u5185\u65b9\u6cd5\u58f0\u660e\u7684\u683c\u5f0f\u4e3a\uff1a returnType methodName(/* paramlist */); \u63a5\u53e3\u4e2d\u53ea\u8fdb\u884c\u65b9\u6cd5\u7684\u58f0\u660e\uff0c\u4e0d\u63d0\u4f9b\u65b9\u6cd5\u7684\u5b9e\u73b0\b\uff0c\u6545\u8be5\u5b9a\u4e49\u6ca1\u6709\u65b9\u6cd5\u4f53\uff0c\u7528 ; \u7ed3\u5c3e\u3002 \u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\u5177\u6709 public \u548c abstract \u5c5e\u6027\u3002\u6240\u4ee5\u5b9a\u4e49\u7684\u65f6\u5019\u8fd9\u4e24\u4e2a\u5173\u952e\u8bcd\u662f \u53ef\u4ee5\u7701\u7565\u7684 \u3002 \u53e6\u5916\uff0c\u5982\u679c\u5b50\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e86\u548c\u7236\u63a5\u53e3\u540c\u540d\u7684\u5e38\u91cf\u6216\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u5219\u7236\u63a5\u53e3\u4e2d\u7684\u5e38\u91cf\u88ab\u9690\u85cf\uff0c\u65b9\u6cd5\u88ab\u91cd\u8f7d\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e0b\u9762\u5b9a\u4e49\u7684 FIFOQueue \u4e2d\u5b9e\u73b0\u4e86\u4e0a\u9762\u6240\u5b9a\u4e49\u7684\u63a5\u53e3 Collection \uff1a class FIFOQueue implements Collection { public void add ( Object obj ) { // ... } public void delete ( Object obj ) { // ... } public Object find ( Object obj ) { // ... } public int currentCount () { // ... } } \u5728\u7c7b\u4e2d\u5b9e\u73b0\u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u65f6\uff0c\u65b9\u6cd5\u7684\u58f0\u660e\u5fc5\u987b\u4e0e\u63a5\u53e3\u4e2d\u6240\u5b9a\u4e49\u7684\u5b8c\u5168\u4e00\u81f4\u3002 \u63a5\u53e3\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a \u5f15\u7528\u7c7b\u578b \u6765\u4f7f\u7528\u3002\u4efb\u4f55\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5 \u5b58\u50a8\u5728\u8be5\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u4e2d \uff0c\u901a\u8fc7\u8fd9\u4e9b\u53d8\u91cf \u53ef\u4ee5\u8bbf\u95ee\u7c7b\u6240\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5 \u3002Java \u8fd0\u884c\u65f6\u7cfb\u7edf\u52a8\u6001\u5730\u51b3\u5b9a\u8be5\u4f7f\u7528\u54ea\u4e2a\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002 \u628a\u63a5\u53e3\u4f5c\u4e3a\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u4e0d\u9700\u8981\u4e86\u89e3\u5bf9\u8c61\u6240\u5bf9\u5e94\u7684\u5177\u4f53\u7684\u7c7b\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a // ... Collection c = new FIFOQueue (); c . add ( obj ); //...","title":"\u63a5\u53e3\uff08interface\uff09"},{"location":"languages/java/basic/class_package_interface/#java8","text":"","title":"\u63a5\u53e3\u4e2d\u7684\u5e38\u91cf\u548c\u679a\u4e3e\uff0cJava8 \u5bf9\u63a5\u53e3\u7684\u6269\u5145"},{"location":"languages/java/basic/class_package_interface/#_8","text":"\u63a5\u53e3\u4f53\u91cd\u53ef\u4ee5\u5305\u542b\u5e38\u91cf\u5b9a\u4e49\u3002 \u5e38\u91cf\u5b9a\u4e49\u7684\u683c\u5f0f\u4e3a\uff1a type NAME = value ; \u5176\u4e2d type \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c NAME \u662f\u5e38\u91cf\u540d\uff0c\u901a\u5e38\u7528\u5927\u5199\uff0c value \u662f\u5e38\u91cf\u503c\u3002 \u5728\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5e38\u91cf\u53ef\u4ee5\u88ab\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u591a\u4e2a\u7c7b\u5171\u4eab\uff0c\u5b83\u4e0e C \u4e2d define \u4ee5\u53ca C++ \u4e2d\u7528 cosnt \u5b9a\u4e49\u5e38\u91cf\u7684\u610f\u4e49\u662f\u76f8\u540c\u7684 \u3002 \u5728 \u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5e38\u91cf \u5177\u6709 public , static , final \u5c5e\u6027\u3002 \u4ece JDK5 \u5f00\u59cb\uff0c\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e enum Light { Red , Yello , Green } \u4f7f\u7528\uff1a Light light = Light . Red ; switch ( light ) { case Red : ... break ; } \u6ce8\u610f\uff1a case \u540e\u9762\u4e0d\u5199\u4e3a Light.Red \u3002 Java \u4e2d\u679a\u4e3e\u662f\u7528 class \u6765\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u590d\u6742\u5730\u4f7f\u7528\u3002","title":"\u5e38\u91cf\u548c\u679a\u4e3e"},{"location":"languages/java/basic/class_package_interface/#java8_1","text":"Java8 \u4ee5\u4e0a\uff0c\u63a5\u53e3\u6210\u5458\u8fd8\u53ef\u4ee5\u662f\uff1a static \u65b9\u6cd5\uff0c\u5177\u6709\u5b9e\u73b0\u4f53\u7684\u65b9\u6cd5\uff08default \u65b9\u6cd5\uff09 \u9ed8\u8ba4\u65b9\u6cd5\u7684\u597d\u5904\u662f\uff1a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5b50\u7c7b\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u7528\u91cd\u65b0\u5199\u4e86\u3002","title":"Java8 \u4e2d\u7684\u63a5\u53e3"},{"location":"languages/java/basic/class_package_interface/#_9","text":"","title":"\u5c0f\u7ed3"},{"location":"languages/java/basic/class_package_interface/#_10","text":"// \u7c7b\u58f0\u660e [ public ] [ abstract | final ] class className [ extends superClassName ] [ implements InterfaceNameList ] { // \u6210\u5458\u53d8\u91cf\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 [ public | protected | private ] [ static ] [ final ] [ transient ] [ volatile ] type variableName ; // \u65b9\u6cd5\u5b9a\u4e49\u53ca\u5b9e\u73b0\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 [ public | protected | private ] [ static ] [ final | abstract ] [ native ] [ synchronized ] returnType mathodName ( [ paramList ] ) [ throws exceptionList ] { // ... } } \u53ef\u89c1\uff0c\u5728\u58f0\u660e Java \u7c7b\u57df\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5458\u5173\u6ce8\u7684\u662f\uff1a \u53ef\u7ee7\u627f\u6027 \uff1a public , protected , private \u53ef\u8bbf\u95ee\u6027 \uff1a static \u53ef\u66f4\u6539\u6027 \uff1a final \u662f\u5426\u53c2\u4e0e\u5e8f\u5217\u5316 \uff1a transient \u7ebf\u7a0b\u540c\u6b65\u6027 \uff1a volatile","title":"\u5b8c\u6574\u7684\u7c7b\u5b9a\u4e49"},{"location":"languages/java/basic/class_package_interface/#_11","text":"// \u63a5\u53e3\u58f0\u660e [ public ] interface InterfaceName [ extends SuperInterfaceList ] { type constantName = Value ; // \u5e38\u91cf\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 returnType methodName ( [ paramList ] ); // \u65b9\u6cd5\u58f0\u660e\uff08\u53ef\u4e3a\u591a\u4e2a\uff09 }","title":"\u5b8c\u6574\u7684\u63a5\u53e3\u5b9a\u4e49"},{"location":"languages/java/basic/class_package_interface/#_12","text":"// \u6784\u9020\u65b9\u6cd5 className ( [ paramList ] ) { // ... } // main()\u65b9\u6cd5 public static void main ( String args [] ) { // ... } // finalize()\u65b9\u6cd5 protected void finalize () throws throwable { // ... } \u5176\u4e2d finalize \u65b9\u6cd5\u4e00\u822c\u4e0d\u7528\uff0c\u4e0e\u7f16\u8bd1\u5668\u76f8\u5173\u3002","title":"\u4e09\u79cd\u8981\u6c42\u56fa\u5b9a\u58f0\u660e\u65b9\u5f0f\u7684\u65b9\u6cd5"},{"location":"languages/java/basic/class_package_interface/#java","text":"package packageName ; // \u6307\u5b9a\u6587\u4ef6\u4e2d\u7c7b\u6240\u5728\u7684\u5305\uff0c0\u4e2a\u62161\u4e2a import packageName. [ className |*] ; // \u6307\u5b9a\u5f15\u5165\u7684\u7c7b\uff0c0\u4e2a\u6216\u591a\u4e2a public classDefinition // \u5c5e\u6027\u4e3a public \u7684\u7c7b\u5b9a\u4e49\uff0c0\u4e2a\u62161\u4e2a interfaceDefinition and classDefinition // \u63a5\u53e3\u548c\u7c7b\u7684\u5b9a\u4e49\uff0c0\u4e2a\u6216\u591a\u4e2a \u5176\u4e2d\uff1a \u6e90\u6587\u4ef6\u7684\u540d\u5b57\u5fc5\u987b\u4e0e\u5c5e\u6027\u4e3a public \u7684\u7c7b\u540d\u5b8c\u5168\u76f8\u540c \u5728\u4e00\u4e2a .java \u6587\u4ef6\u4e2d\uff0c package \u8bed\u53e5\u548c public \u7c7b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a","title":"\u5b8c\u6574\u7684 Java \u6e90\u6587\u4ef6"},{"location":"languages/java/basic/exception/","text":"\u5f02\u5e38\u673a\u5236 \u5f02\u5e38\u7684\u672c\u8d28\u662f\u7531\u7a0b\u5e8f\u5458\u901a\u8fc7\u7f16\u7a0b\u6765\u63d0\u9ad8\u7a0b\u5e8f\u7684\u9c81\u68d2\u6027\uff08\u5bb9\u9519\u6027\uff09\u3002 \u5f02\u5e38\u5904\u7406 \u57fa\u672c\u5199\u6cd5 try { // \u7a0b\u5e8f\u903b\u8f91 } catch ( Exception1 ex ) { // \u5f02\u5e38\u5904\u7406 } catch ( Exception2 ex ) { // \u5f02\u5e38\u5904\u7406 } finally { // \u5f02\u5e38\u5904\u7406 } \u5176\u4e2d\uff0c catch \u8bed\u53e5\u53ef\u4ee5\u6709\u96f6\u4e2a\u81f3\u591a\u4e2a\uff0c\u53ef\u4ee5\u6ca1\u6709 finally \u8bed\u53e5 Java \u4e2d\u7684\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u662f\uff1a \u629b\u51fa\uff08throw\uff09 \u5f02\u5e38 \u8fd0\u884c\u65f6\u7cfb\u7edf\u5728\u8c03\u7528\u6808\u4e2d \u67e5\u627e\u5f02\u5e38 \u4ece\u5f02\u5e38\u751f\u6210\u7684\u65b9\u6cd5\u5f00\u59cb \u56de\u6eaf \uff0c\u76f4\u5230\u627e\u5230\uff1b \u6355\u83b7\uff08catch\uff09 \u5f02\u5e38\u7684\u4ee3\u7801 Java \u4e2d Throwable \u662f\u6240\u6709\u5f02\u5e38\u7684\u7236\u7c7b\uff0c\u5b83\u4e0b\u9762\u5206\u6210\u4e24\u7c7b\uff1a Error \uff1aJVM \u9519\u8bef Exception \uff1a\u5f02\u5e38 \u4e00\u822c\u6211\u4eec\u6240\u8bf4\u7684\u5f02\u5e38\u662f\u6307 Exception \u53ca\u5176\u5b50\u7c7b Exception \u7c7b \u6784\u9020\u65b9\u6cd5\uff1a public Exception (); public Exception ( String message ); Exception ( String message , Throwable cause ); \u65b9\u6cd5\uff1a getMessage () getCause () printStackTrace () \u591a\u5f02\u5e38\u5904\u7406 \u5b50\u7c7b\u5f02\u5e38\u8981\u6392\u5728\u7236\u7c7b\u5f02\u5e38\u524d\u9762\u3002 finally \u8bed\u53e5\u65e0\u8bba\u662f\u5426\u6709\u5f02\u5e38\u90fd\u8981\u6267\u884c \uff0c\u5373\u4f7f\u5176\u4e2d\u6709 break , return \u7b49\u8bed\u53e5\u3002\u5728\u7f16\u8bd1\u65f6\uff0c finally \u90e8\u5206\u7684\u4ee3\u7801\u751f\u6210\u4e86\u591a\u904d\u3002 \u53d7\u68c0\u7684\u5f02\u5e38 Java \u4e2d\u7684\u5f02\u5e38\u5206\u4e24\u79cd\uff1a RuntimeException \u53ca\u5176\u5b50\u7c7b\uff0c\u53ef\u4ee5\u4e0d\u660e\u786e\u5904\u7406\uff08\u4e00\u822c\u4f7f\u7528 if \u6765\u8bed\u53e5\u5224\u65ad\uff09 \u5426\u5219\uff0c\u79f0\u4e3a \u53d7\u68c0\u7684\u5f02\u5e38 \uff08chected Exception\uff09\uff0c\u4f8b\u5982 IO \u5f02\u5e38 \u53d7\u68c0\u7684\u5f02\u5e38\uff0c\u8981\u6c42 \u660e\u786e\u8fdb\u884c\u8bed\u6cd5\u5904\u7406 \u8981\u4e48\u6355\u83b7\uff08catch\uff09 \u8981\u4e48\u629b\u51fa\uff08throw\uff09\uff1a\u5728\u65b9\u6cd5\u7b7e\u540d\u7684\u540e\u9762\u7528 throws xxxx \u6765\u58f0\u660e \u5728\u5b50\u7c7b\u4e2d\uff0c\u5982\u679c\u8981\u8986\u76d6\u7236\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u82e5\u7236\u7c7b\u7684\u65b9\u6cd5\u58f0\u660e\u4e86 throws \u5f02\u5e38\uff0c\u5219\u5b50\u7c7b\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5 throws \u5f02\u5e38\u3002 \u53ef\u4ee5\u8dd1\u51fa\u5b50\u7c7b\u5f02\u5e38\uff08\u66f4\u5177\u4f53\u7684\u5f02\u5e38\uff09\uff0c\u4f46\u4e0d\u80fd\u629b\u51fa\u66f4\u4e00\u822c\u7684\u5f02\u5e38\u3002 \u4e00\u79cd\u8bed\u6cd5\u7cd6\uff08Compiler suger\uff09\uff1a try ... with ... resource try ( \u7c7b\u578b \u53d8\u91cf = new \u7c7b\u578b () ) { // ... } \u8fd9\u91cc\u7f16\u8bd1\u671f\u81ea\u52a8\u6dfb\u52a0\u4e86 finally { \u53d8\u91cf.close(); } \uff0c\u65e0\u8bba\u662f\u5426\u51fa\u73b0\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u3002 \u7c7b\u4f3c\u4e8e Python \u91cc\u9762\u7684 with \u8bed\u53e5\u3002 \u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b \u7ee7\u627f\u81ea Exception \u53ca\u5176\u5b50\u7c7b\uff0c\u53ef\u4ee5\u91cd\u8f7d\u7236\u7c7b\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002 \u91cd\u629b\u5f02\u5e38\u53ca\u5f02\u5e38\u94fe\u63a5\uff1a \u5bf9\u4e8e\u5f02\u5e38\uff0c\u4f18\u52bf\u5149\u6355\u83b7\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u5c06\u5176\u8fdb\u4e00\u6b65\u4f20\u9012\u7ed9\u8c03\u7528\u8005\uff0c\u4ee5\u4fbf\u8ba9\u8c03\u7528\u8005\u4e5f\u80fd\u611f\u53d7\u5230\u8fd9\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u53ef\u4ee5\u5728 catch \u8bed\u53e5\u5757\u6216 finally \u8bed\u53e5\u5757\u4e2d\u91c7\u53d6\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\uff1a \u5f53\u524d\u6355\u83b7\u7684\u5f02\u5e38\u518d\u6b21\u629b\u51fa\uff1a throw e ; \u91cd\u65b0\u751f\u6210\u5e76\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff1a throw new Exception ( \"Some message\" ); \u91cd\u65b0\u751f\u6210\u5e76\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u4e2d\u5305\u542b\u4e86\u5f53\u524d\u5f02\u5e38\u7684\u4fe1\u606f\uff0c\u5982\uff1a throw new ExceptioN ( \"Some message\" , e ); \u53ef\u4ee5\u7528 e.getCause() \u6765\u5f97\u5230\u5185\u90e8\u5f02\u5e38\u3002 \u65ad\u8a00\uff08assertion\uff09 assert \u7684\u683c\u5f0f\u662f\uff1a assert \u8868\u8fbe\u5f0f; assert \u8868\u8fbe\u5f0f: \u4fe1\u606f; \u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\uff0c\u5982\u679c\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u4e3a true \uff0c\u5219\u7a0b\u5e8f\u4f1a\u4ea7\u751f\u5f02\u5e38\uff0c\u5e76\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002 assert \u7684\u7f16\u8bd1\u548c\u8fd0\u884c \u7f16\u8bd1 \uff1a\u53ea\u6709\u5728 JDK1.4 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u624d\u80fd\u4f7f\u7528\u65ad\u8a00\u3002 \u5177\u4f53\u5730\u8bf4\uff0c\u5728\u65e9\u671f\u7684 JDK \u7248\u672c\uff081.4\uff09\u4e2d\u7f16\u8bd1\u65f6\uff0c\u8981\u901a\u8fc7 -source \u9009\u9879\u6765\u6307\u660e\u7248\u672c\uff0c\u5982\uff1a javac -deprecation -source 1.4 -classpath . XXX.java \u8fd0\u884c \uff1a\u5728\u8fd0\u884c\u65f6\uff0c\u8981\u4f7f assert \u8bed\u53e5\u8d77\u4f5c\u7528\uff0c\u9700\u8981\u52a0\u4e0a -ea / -enableassertions \u9009\u9879\uff0c\u5982\uff1a java - ea - classpath . XXX \u6d4b\u8bd5\u53ca JUnit \u7a0b\u5e8f\u7684\u4fee\u6539\u662f\u7ecf\u5e38\u8981\u8fdb\u884c\u7684\u8fc7\u7a0b\uff0c\u800c\u6d4b\u8bd5\u4fdd\u8bc1\u4e86\u7a0b\u5e8f\u5728\u6bcf\u6b21\u4fee\u6539\u4e4b\u540e\u7684\u6b63\u786e\u6027\u3002 \u5728\u7f16\u5199\u7a0b\u5e8f\u4ee3\u7801\u7684\u540c\u65f6\uff0c\u8fd8\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u6765\u5224\u65ad\u8fd9\u4e9b\u7a0b\u5e8f\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 \u4ece\u800c\u4fdd\u8bc1\u4e86\u4ee3\u7801\u8d28\u91cf\uff0c\u51cf\u5c11\u4e86\u540e\u671f\u7684\u67e5\u9519\u548c\u8c03\u8bd5\u65f6\u95f4\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u5927\u5e45\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u5f00\u53d1\u6548\u7387\u3002 \u901a\u5e38\u4f7f\u7528 JUnit \u6846\u67b6\u6765\u8fdb\u884c Java \u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u73b0\u5728\u5927\u591a\u6570 IDE \u90fd\u96c6\u6210\u4e86\u5bf9 JUnit \u7684\u652f\u6301\u3002 \u7528 @Test \u6765\u6807\u6ce8\u6d4b\u8bd5\u51fd\u6570 \u5728\u6d4b\u8bd5\u4e2d\u5e38\u7528\u7684\u8bed\u53e5\u5982\u4e0b\uff1a fail(\u4fe1\u606f); \uff1a\u7a0b\u5e8f\u51fa\u9519 assertEqual(\u53c2\u65701, \u53c2\u65702); \uff1a\u7a0b\u5e8f\u8981\u4fdd\u8bc1\u4e24\u53c2\u6570\u76f8\u7b49 assertNull(\u53c2\u6570); \uff1a\u8868\u793a\u53c2\u6570\u8981\u4e3a null @Test public void testSum () { // ... } \u7a0b\u5e8f\u7684\u8c03\u8bd5 \u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u53ef\u4ee5\u5206\u6210\u4e09\u5927\u7c7b\uff1a \u8bed\u6cd5\u9519\u8bef \uff08Syntax error\uff09\uff1a\u4eba\u5728\u7f16\u8f91\u7684\u65f6\u5019\u53d1\u73b0\u3001\u7f16\u8bd1\u5668\u53d1\u73b0 \u8fd0\u884c\u9519\u8bef \uff08Runtime error\uff09\uff1a\u5f02\u5e38\u5904\u7406\u673a\u5236 \u903b\u8f91\u9519\u8bef \uff08Logic error\uff09\uff1a\u8c03\u8bd5\uff08debug\uff09\u3001\u5355\u5143\u6d4b\u8bd5\uff08UT\uff09 \u8c03\u8bd5\uff08debug\uff09\u7684\u5e38\u7528\u624b\u6bb5\uff1a \u65ad\u70b9\uff08breakpoint\uff09 \u3001 \u8ddf\u8e2a\uff08trace\uff09 \u3001 \u76d1\u89c6\uff08watch\uff09 \u5f53\u7136\uff0c \u8c03\u7528\u5806\u6808 \uff08call stack\uff09\u4e5f\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u5f88\u591a\u4fe1\u606f\u3002","title":"\u5f02\u5e38\u673a\u5236"},{"location":"languages/java/basic/exception/#_1","text":"\u5f02\u5e38\u7684\u672c\u8d28\u662f\u7531\u7a0b\u5e8f\u5458\u901a\u8fc7\u7f16\u7a0b\u6765\u63d0\u9ad8\u7a0b\u5e8f\u7684\u9c81\u68d2\u6027\uff08\u5bb9\u9519\u6027\uff09\u3002","title":"\u5f02\u5e38\u673a\u5236"},{"location":"languages/java/basic/exception/#_2","text":"\u57fa\u672c\u5199\u6cd5 try { // \u7a0b\u5e8f\u903b\u8f91 } catch ( Exception1 ex ) { // \u5f02\u5e38\u5904\u7406 } catch ( Exception2 ex ) { // \u5f02\u5e38\u5904\u7406 } finally { // \u5f02\u5e38\u5904\u7406 } \u5176\u4e2d\uff0c catch \u8bed\u53e5\u53ef\u4ee5\u6709\u96f6\u4e2a\u81f3\u591a\u4e2a\uff0c\u53ef\u4ee5\u6ca1\u6709 finally \u8bed\u53e5 Java \u4e2d\u7684\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u662f\uff1a \u629b\u51fa\uff08throw\uff09 \u5f02\u5e38 \u8fd0\u884c\u65f6\u7cfb\u7edf\u5728\u8c03\u7528\u6808\u4e2d \u67e5\u627e\u5f02\u5e38 \u4ece\u5f02\u5e38\u751f\u6210\u7684\u65b9\u6cd5\u5f00\u59cb \u56de\u6eaf \uff0c\u76f4\u5230\u627e\u5230\uff1b \u6355\u83b7\uff08catch\uff09 \u5f02\u5e38\u7684\u4ee3\u7801 Java \u4e2d Throwable \u662f\u6240\u6709\u5f02\u5e38\u7684\u7236\u7c7b\uff0c\u5b83\u4e0b\u9762\u5206\u6210\u4e24\u7c7b\uff1a Error \uff1aJVM \u9519\u8bef Exception \uff1a\u5f02\u5e38 \u4e00\u822c\u6211\u4eec\u6240\u8bf4\u7684\u5f02\u5e38\u662f\u6307 Exception \u53ca\u5176\u5b50\u7c7b","title":"\u5f02\u5e38\u5904\u7406"},{"location":"languages/java/basic/exception/#exception","text":"\u6784\u9020\u65b9\u6cd5\uff1a public Exception (); public Exception ( String message ); Exception ( String message , Throwable cause ); \u65b9\u6cd5\uff1a getMessage () getCause () printStackTrace ()","title":"Exception \u7c7b"},{"location":"languages/java/basic/exception/#_3","text":"\u5b50\u7c7b\u5f02\u5e38\u8981\u6392\u5728\u7236\u7c7b\u5f02\u5e38\u524d\u9762\u3002 finally \u8bed\u53e5\u65e0\u8bba\u662f\u5426\u6709\u5f02\u5e38\u90fd\u8981\u6267\u884c \uff0c\u5373\u4f7f\u5176\u4e2d\u6709 break , return \u7b49\u8bed\u53e5\u3002\u5728\u7f16\u8bd1\u65f6\uff0c finally \u90e8\u5206\u7684\u4ee3\u7801\u751f\u6210\u4e86\u591a\u904d\u3002","title":"\u591a\u5f02\u5e38\u5904\u7406"},{"location":"languages/java/basic/exception/#_4","text":"Java \u4e2d\u7684\u5f02\u5e38\u5206\u4e24\u79cd\uff1a RuntimeException \u53ca\u5176\u5b50\u7c7b\uff0c\u53ef\u4ee5\u4e0d\u660e\u786e\u5904\u7406\uff08\u4e00\u822c\u4f7f\u7528 if \u6765\u8bed\u53e5\u5224\u65ad\uff09 \u5426\u5219\uff0c\u79f0\u4e3a \u53d7\u68c0\u7684\u5f02\u5e38 \uff08chected Exception\uff09\uff0c\u4f8b\u5982 IO \u5f02\u5e38 \u53d7\u68c0\u7684\u5f02\u5e38\uff0c\u8981\u6c42 \u660e\u786e\u8fdb\u884c\u8bed\u6cd5\u5904\u7406 \u8981\u4e48\u6355\u83b7\uff08catch\uff09 \u8981\u4e48\u629b\u51fa\uff08throw\uff09\uff1a\u5728\u65b9\u6cd5\u7b7e\u540d\u7684\u540e\u9762\u7528 throws xxxx \u6765\u58f0\u660e \u5728\u5b50\u7c7b\u4e2d\uff0c\u5982\u679c\u8981\u8986\u76d6\u7236\u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u82e5\u7236\u7c7b\u7684\u65b9\u6cd5\u58f0\u660e\u4e86 throws \u5f02\u5e38\uff0c\u5219\u5b50\u7c7b\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5 throws \u5f02\u5e38\u3002 \u53ef\u4ee5\u8dd1\u51fa\u5b50\u7c7b\u5f02\u5e38\uff08\u66f4\u5177\u4f53\u7684\u5f02\u5e38\uff09\uff0c\u4f46\u4e0d\u80fd\u629b\u51fa\u66f4\u4e00\u822c\u7684\u5f02\u5e38\u3002 \u4e00\u79cd\u8bed\u6cd5\u7cd6\uff08Compiler suger\uff09\uff1a try ... with ... resource try ( \u7c7b\u578b \u53d8\u91cf = new \u7c7b\u578b () ) { // ... } \u8fd9\u91cc\u7f16\u8bd1\u671f\u81ea\u52a8\u6dfb\u52a0\u4e86 finally { \u53d8\u91cf.close(); } \uff0c\u65e0\u8bba\u662f\u5426\u51fa\u73b0\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u3002 \u7c7b\u4f3c\u4e8e Python \u91cc\u9762\u7684 with \u8bed\u53e5\u3002","title":"\u53d7\u68c0\u7684\u5f02\u5e38"},{"location":"languages/java/basic/exception/#_5","text":"\u7ee7\u627f\u81ea Exception \u53ca\u5176\u5b50\u7c7b\uff0c\u53ef\u4ee5\u91cd\u8f7d\u7236\u7c7b\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b"},{"location":"languages/java/basic/exception/#_6","text":"\u5bf9\u4e8e\u5f02\u5e38\uff0c\u4f18\u52bf\u5149\u6355\u83b7\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u5c06\u5176\u8fdb\u4e00\u6b65\u4f20\u9012\u7ed9\u8c03\u7528\u8005\uff0c\u4ee5\u4fbf\u8ba9\u8c03\u7528\u8005\u4e5f\u80fd\u611f\u53d7\u5230\u8fd9\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u53ef\u4ee5\u5728 catch \u8bed\u53e5\u5757\u6216 finally \u8bed\u53e5\u5757\u4e2d\u91c7\u53d6\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\uff1a \u5f53\u524d\u6355\u83b7\u7684\u5f02\u5e38\u518d\u6b21\u629b\u51fa\uff1a throw e ; \u91cd\u65b0\u751f\u6210\u5e76\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff1a throw new Exception ( \"Some message\" ); \u91cd\u65b0\u751f\u6210\u5e76\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u8be5\u5f02\u5e38\u4e2d\u5305\u542b\u4e86\u5f53\u524d\u5f02\u5e38\u7684\u4fe1\u606f\uff0c\u5982\uff1a throw new ExceptioN ( \"Some message\" , e ); \u53ef\u4ee5\u7528 e.getCause() \u6765\u5f97\u5230\u5185\u90e8\u5f02\u5e38\u3002","title":"\u91cd\u629b\u5f02\u5e38\u53ca\u5f02\u5e38\u94fe\u63a5\uff1a"},{"location":"languages/java/basic/exception/#assertion","text":"assert \u7684\u683c\u5f0f\u662f\uff1a assert \u8868\u8fbe\u5f0f; assert \u8868\u8fbe\u5f0f: \u4fe1\u606f; \u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\uff0c\u5982\u679c\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u4e3a true \uff0c\u5219\u7a0b\u5e8f\u4f1a\u4ea7\u751f\u5f02\u5e38\uff0c\u5e76\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\u3002","title":"\u65ad\u8a00\uff08assertion\uff09"},{"location":"languages/java/basic/exception/#assert","text":"\u7f16\u8bd1 \uff1a\u53ea\u6709\u5728 JDK1.4 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u624d\u80fd\u4f7f\u7528\u65ad\u8a00\u3002 \u5177\u4f53\u5730\u8bf4\uff0c\u5728\u65e9\u671f\u7684 JDK \u7248\u672c\uff081.4\uff09\u4e2d\u7f16\u8bd1\u65f6\uff0c\u8981\u901a\u8fc7 -source \u9009\u9879\u6765\u6307\u660e\u7248\u672c\uff0c\u5982\uff1a javac -deprecation -source 1.4 -classpath . XXX.java \u8fd0\u884c \uff1a\u5728\u8fd0\u884c\u65f6\uff0c\u8981\u4f7f assert \u8bed\u53e5\u8d77\u4f5c\u7528\uff0c\u9700\u8981\u52a0\u4e0a -ea / -enableassertions \u9009\u9879\uff0c\u5982\uff1a java - ea - classpath . XXX","title":"assert \u7684\u7f16\u8bd1\u548c\u8fd0\u884c"},{"location":"languages/java/basic/exception/#junit","text":"\u7a0b\u5e8f\u7684\u4fee\u6539\u662f\u7ecf\u5e38\u8981\u8fdb\u884c\u7684\u8fc7\u7a0b\uff0c\u800c\u6d4b\u8bd5\u4fdd\u8bc1\u4e86\u7a0b\u5e8f\u5728\u6bcf\u6b21\u4fee\u6539\u4e4b\u540e\u7684\u6b63\u786e\u6027\u3002 \u5728\u7f16\u5199\u7a0b\u5e8f\u4ee3\u7801\u7684\u540c\u65f6\uff0c\u8fd8\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u6765\u5224\u65ad\u8fd9\u4e9b\u7a0b\u5e8f\u662f\u6b63\u786e\u7684\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 \u4ece\u800c\u4fdd\u8bc1\u4e86\u4ee3\u7801\u8d28\u91cf\uff0c\u51cf\u5c11\u4e86\u540e\u671f\u7684\u67e5\u9519\u548c\u8c03\u8bd5\u65f6\u95f4\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u5927\u5e45\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u5f00\u53d1\u6548\u7387\u3002 \u901a\u5e38\u4f7f\u7528 JUnit \u6846\u67b6\u6765\u8fdb\u884c Java \u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u73b0\u5728\u5927\u591a\u6570 IDE \u90fd\u96c6\u6210\u4e86\u5bf9 JUnit \u7684\u652f\u6301\u3002 \u7528 @Test \u6765\u6807\u6ce8\u6d4b\u8bd5\u51fd\u6570 \u5728\u6d4b\u8bd5\u4e2d\u5e38\u7528\u7684\u8bed\u53e5\u5982\u4e0b\uff1a fail(\u4fe1\u606f); \uff1a\u7a0b\u5e8f\u51fa\u9519 assertEqual(\u53c2\u65701, \u53c2\u65702); \uff1a\u7a0b\u5e8f\u8981\u4fdd\u8bc1\u4e24\u53c2\u6570\u76f8\u7b49 assertNull(\u53c2\u6570); \uff1a\u8868\u793a\u53c2\u6570\u8981\u4e3a null @Test public void testSum () { // ... }","title":"\u6d4b\u8bd5\u53ca JUnit"},{"location":"languages/java/basic/exception/#_7","text":"\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u53ef\u4ee5\u5206\u6210\u4e09\u5927\u7c7b\uff1a \u8bed\u6cd5\u9519\u8bef \uff08Syntax error\uff09\uff1a\u4eba\u5728\u7f16\u8f91\u7684\u65f6\u5019\u53d1\u73b0\u3001\u7f16\u8bd1\u5668\u53d1\u73b0 \u8fd0\u884c\u9519\u8bef \uff08Runtime error\uff09\uff1a\u5f02\u5e38\u5904\u7406\u673a\u5236 \u903b\u8f91\u9519\u8bef \uff08Logic error\uff09\uff1a\u8c03\u8bd5\uff08debug\uff09\u3001\u5355\u5143\u6d4b\u8bd5\uff08UT\uff09 \u8c03\u8bd5\uff08debug\uff09\u7684\u5e38\u7528\u624b\u6bb5\uff1a \u65ad\u70b9\uff08breakpoint\uff09 \u3001 \u8ddf\u8e2a\uff08trace\uff09 \u3001 \u76d1\u89c6\uff08watch\uff09 \u5f53\u7136\uff0c \u8c03\u7528\u5806\u6808 \uff08call stack\uff09\u4e5f\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u5f88\u591a\u4fe1\u606f\u3002","title":"\u7a0b\u5e8f\u7684\u8c03\u8bd5"},{"location":"languages/java/basic/file_and_stream/","text":"\u6587\u4ef6\u4e0e\u6d41","title":"\u6587\u4ef6\u4e0e\u6d41"},{"location":"languages/java/basic/file_and_stream/#_1","text":"","title":"\u6587\u4ef6\u4e0e\u6d41"},{"location":"languages/java/basic/grammar/","text":"\u57fa\u672c\u8bed\u6cd5 \u2014\u2014 \u6570\u636e\u8fd0\u7b97\u3001\u6d41\u63a7\u5236\u548c\u6570\u7ec4 \u6570\u636e\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u5e38\u91cf \u6570\u636e\u7c7b\u578b\u51b3\u5b9a\u4e86 Java \u4e2d\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u8fd0\u7b97\u65b9\u5f0f\u3002 Java \u4e2d\u7684\u6570\u636e\u7c7b\u578b\u5206\u4e3a\uff1a \u57fa\u672c\u7c7b\u578b\uff08primitive types\uff09 \u548c \u5f15\u7528\u7c7b\u578b\uff08reference types\uff09 \uff1a \u6570\u636e\u7c7b\u578b \u57fa\u672c\u7c7b\u578b \u6570\u503c\u578b \u6574\u6570\u7c7b\u578b\uff08byte, short, int, long\uff09 \u6d6e\u70b9\u7c7b\u578b\uff08float, double\uff09 \u5b57\u7b26\u578b\uff08char\uff09 \u5e03\u5c14\u578b\uff08boolean\uff09 \u5f15\u7528\u7c7b\u578b \u7c7b\uff08class\uff09 \u63a5\u53e3\uff08interface\uff09 \u6570\u7ec4 \u57fa\u672c\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4f4d\u4e8e \u6808\u7a7a\u95f4 \uff0c\u8d4b\u503c\u8bed\u53e5\u590d\u5236 \u503c double d = 3 ; Person p = new Person (); \u5e94\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u5f15\u7528\u5230 \u5806\u7a7a\u95f4 \uff0c\u8d4b\u503c\u8bed\u53e5\u590d\u5236\u7684\u662f \u5f15\u7528 double d1 = d ; Person p1 = p ; \u5173\u4e8e Java \u4e2d\u7684\u56db\u7c7b\u516b\u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u8981\u6ce8\u610f\uff1a \u00b7boolean\u00b7 \u7c7b\u578b\u4e0d\u80fd\u4e0e\u6574\u5f62\u6df7\u7528\uff0c\u53d6\u503c\u53ea\u80fd\u4e3a true \u6216 false \uff0c\u8fd9\u4e00\u70b9\u4e0e C++ \u4e0d\u540c\u3002 \u00b7char\u00b7 \u7c7b\u578b\u7528 Unicode \u7f16\u7801\uff0c\u5360 2 \u5b57\u8282\u3002 \u56db\u79cd\u6574\u578b\u6709\u56fa\u5b9a\u7684\u8868\u793a\u8303\u56f4\u548c\u5b57\u6bb5\u957f\u5ea6\uff0c \u4e0d\u53d7\u64cd\u4f5c\u7cfb\u7edf\u5f71\u54cd \uff0c\u4ee5\u6b64\u4fdd\u8bc1\u53ef\u79fb\u690d\u6027\u3002 Java \u6574\u578b\u4e2d\u6ca1\u6709\u201d\u65e0\u7b26\u53f7\u6570\u201c \u6807\u8bc6\u7b26\uff08identifier\uff09\uff1a\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf\u3001\u5e38\u91cf\u3001\u65b9\u6cd5\u3001\u5bf9\u8c61\u548c\u7c7b\u90fd\u8981\u6709\u540d\u5b57\u3002 \u6807\u8bc6\u7b26\u53ef\u4ee5\u7531\u6570\u5b57\u3001\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u3001$\u7b26\u53f7\u7ec4\u6210\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 \u4e00\u822c\u6309\u7167 Java \u7684\u547d\u540d\u60ef\u4f8b\uff0c \u7c7b\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff08Pascal\uff09 \uff0c\u5176\u4f59\u7684\uff08\u5305\u3001\u65b9\u6cd5\u3001\u53d8\u91cf\u540d\uff09 \u9996\u5b57\u6bcd\u5c0f\u5199\uff08camel\uff09 \u3002\u4e00\u822c\u5f88\u5c11\u4f7f\u7528\u4e0b\u5212\u7ebf\uff0c\u5e38\u91cf\u5728\u4f7f\u7528\u5904\u5b9a\u4e49\uff0c\u800c\u4e0d\u662f\u90fd\u5199\u5728\u5f00\u7bc7\u3002 \u8fd0\u7b97\u7b26\u4e0e\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26 \u7b97\u6570\u8fd0\u7b97\u7b26\uff1a + , = , * , / , % , ++ , -- \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a < , > , <= , >= , == , != \u903b\u8f91\u8fd0\u7b97\u7b26\uff1a ! , & , | , ^ , $$ \uff08\u77ed\u8def\u4e0e\uff09, || \uff08\u77ed\u8def\u6216\uff09 \u4f4d\u8fd0\u7b97\u7b26\uff1a & , | , ^ , ~ , << \uff08\u5de6\u79fb\uff0c\u4f4e\u4f4d\u8865\u96f6\uff09, >> \uff08\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865\u539f\u6765\u7684\u7b26\u53f7\u4f4d\uff09, >>> \uff08\u65e0\u7b26\u53f7\u53f3\u79fb\uff0c\u5373\u9ad8\u4f4d\u8865\u96f6\uff09 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a = \uff1b\u6269\u5c55\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a += , -= , *= , /= \u5b57\u7b26\u4e32\u8fde\u63a5\u8fd0\u7b97\u7b26\uff1a + \u79fb\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\uff1a \u9002\u7528\u4e8e \u6574\u578b \u548c \u5b57\u7b26\u578b \u5bf9\u957f\u5ea6\u5c11\u4e8e int \u578b\u7684\u64cd\u4f5c\u6570\u5148\u81ea\u52a8\u8f6c\u5316\u4e3a int \u578b\u518d\u79fb\u4f4d\uff08\u6574\u5f62\u63d0\u5347\uff0c\u5bf9\u6240\u6709\u7684\u8fd0\u7b97\u90fd\u662f\u8fd9\u6837\uff09 \u5bf9\u4e8e int \u578b\u6574\u6570\u79fb\u4f4d\uff0c\u79fb\u52a8\u4f4d\u6570\u5148\u5bf9 32 32 \u53d6\u6a21 \u5bf9\u4e8e long \u578b\u6574\u6570\u79fb\u4f4d\uff0c\u79fb\u52a8\u4e3a\u6570\u5148\u5bf9 64 64 \u53d6\u6a21 \u8d4b\u503c\u8fd0\u7b97\u7b26 = \u4e24\u4fa7\u64cd\u4f5c\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528 \u9ed8\u8ba4\u7c7b\u578b\u8f6c\u6362 \u6216 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08casting\uff09 \u539f\u5219\u8fdb\u884c\u5904\u7406\u3002\u540e\u8005\u7528\u4e8e\u7f29\u5c0f\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u5982\uff1a long a = 1000 ; int b = ( int ) a ; \u7279\u4f8b\uff1a\u53ef\u4ee5\u5c06\u6574\u5f62\u5e38\u91cf\u76f4\u63a5\u8d4b\u503c\u7ed9 byte , short , char \u7b49\u53d8\u91cf\u7c7b\u578b\uff0c\u800c\u4e0d\u9700\u8981\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u53ea\u8981\u4e0d\u8d85\u8fc7\u5176\u8868\u6570\u8303\u56f4\uff0c\u5982\u00b7\uff1a byte b = 2 ; // valid byte b = 4096 ; // invalid \u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f \u662f\u7b26\u5408\u4e00\u5b9a\u8bed\u6cd5\u89c4\u5219\u7684\u8fd0\u7b97\u7b26\u548c\u64cd\u4f5c\u6570\u7684\u5e8f\u5217\u3002 \u8868\u8fbe\u5f0f\u4e2d\u64cd\u4f5c\u6570\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u503c \uff0c\u503c\u7684\u7c7b\u578b\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7c7b\u578b \u3002 \u5f53\u8868\u8fbe\u5f0f\u4e2d\u6709\u4e0d\u540c\u7c7b\u578b\u64cd\u4f5c\u6570\u65f6\uff0c\u540c\u610f\u8f6c\u5316\u6210\u66f4\u9ad8\u7684\u7c7b\u578b\uff1a int < long < float < double \u3002 \u6574\u5f62\u63d0\u5347\uff1a\u6240\u6709 byte , char , short \u53c2\u4e0e\u7b97\u672f\u8fd0\u7b97\u65f6\u90fd\u8f6c\u5316\u4e3a int \u3002 \u5982\u679c\u4f60\u4e0d\u662f\u5206\u786e\u5b9a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u53ef\u4ee5\u591a\u4f7f\u7528 () \u63d0\u9ad8\u7a0b\u5e8f\u53ef\u8bfb\u6027\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u4ece javap -c \u7c7b\u540d \u53cd\u6c47\u7f16\u5f97\u5230\u7684 JVM \u6c47\u7f16\u6307\u4ee4\u4e2d\u6316\u5c40\u6709\u7528\u4fe1\u606f\u3002 \u6d41\u7a0b\u63a7\u5236 \u4e0e C++ \u4e0d\u540c\uff0cJava \u4e2d\u6ca1\u6709 \u201d\u8868\u8fbe\u5f0f\u8bed\u53e5\u201c\uff0c\u5373\u4e0b\u8ff0\u5199\u6cd5\u4e0d\u5408\u6cd5\uff1a x + y ; \u8fd9\u79cd\u8bbe\u8ba1\u907f\u514d\u4e86\u7a0b\u5e8f\u5458\u5199\u65e0\u610f\u4e49\u7684\u8868\u8fbe\u5f0f \u3002 Java \u4e2d\u7684\u6ce8\u91ca\u9664\u4e86\u4e0e C++ \u76f8\u540c\u7684 // \u548c /* */ \u7684\u5199\u6cd5\u4e4b\u5916\u3002\u8fd8\u6709\u5f62\u5982 /** */ \u7684 doc \u6ce8\u91ca\uff0c\u7528\u4e8e JDK \u7684 javadoc \u5de5\u5177\u3002\u8fd9\u79cd\u8bbe\u8ba1\u7684\u672c\u8d28\u662f\u4e3a\u4e86\u63d0\u9ad8\u7a0b\u5e8f\u7684 \u6613\u8bfb\u6027 \u3002 Java \u4e2d\u7684 if else \u548c switch \u7684\u8bed\u6cd5\u4e0e C++ \u76f8\u540c\u3002 Java \u4e2d\u7684 for , while , do while \u7684\u8bed\u6cd5\u4e0e C++ \u76f8\u540c\u3002 \u5173\u4e8e goto \u8bed\u53e5\uff1a \u5728\u5404\u79cd\u8bed\u8a00\u4e2d\uff0c\u662f\u5426\u4fdd\u7559 goto \u8bed\u53e5\u90fd\u662f\u4e00\u4e2a\u5177\u6709\u4e89\u8bae\u7684\u8bdd\u9898\uff0c\u4e3b\u8981\u95ee\u9898\u5728\u4e8e goto \u8bed\u53e5\u7684\u968f\u673a\u8df3\u8f6c\u4e25\u91cd\u964d\u4f4e\u4e86\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0cJava \u7684\u89e3\u51b3\u65b9\u6848\u662f\u5f15\u5165\u76f8\u6bd4\u4e8e C++ \u589e\u5f3a\u7248\u7684 break \u548c continue \u5173\u952e\u5b57\u3002\u5728\u5faa\u73af\u524d\u9762\u53ef\u4ee5\u7528\u6807\u53f7\u6765\u6807\u660e\u662f\u54ea\u4e00\u91cd\u5faa\u73af\uff0c\u4f8b\u5982\uff1a label1: {... label2: {... label3: {... break label2 ; } } } \u540c\u6837\u5730\uff0c continue \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6807\u53f7\u6765\u5236\u5b9a\u8c03\u5230\u5916\u9762\u7684\u67d0\u4e00\u5c42\u5faa\u73af\u3002 \u5173\u4e8e\u6570\u7ec4 \u6570\u7ec4\u662f\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ec4\u5408\u3002 \u4e00\u7ef4\u6570\u7ec4\u7684\u58f0\u660e\u65b9\u5f0f\uff1a int [] a ; double [] b ; MyClass [] C ; \u6ce8\uff1a\u6570\u7ec4\u65b9\u62ec\u53f7\u53ef\u4ee5\u5199\u5728\u53d8\u91cf\u524d\u9762\uff0c\u4e5f\u53ef\u4ee5\u5199\u5728\u53d8\u91cf\u540e\u9762\u3002 \u6570\u7ec4\u5b9a\u4e49 \u4e0e \u4e3a\u6570\u7ec4\u5206\u914d\u7a7a\u95f4 \u5206\u5f00\u8fdb\u884c\uff0c\u5982\uff1a int [] a = new int [ 3 ] ; a [ 0 ] = 3 ; a [ 1 ] = 6 ; a [ 2 ] = 9 ; MyClass [] mcs = new MyClass [ 3 ] ; mcs [ 0 ] = new MyClass ( /* params */ ); mcs [ 1 ] = new MyClass ( /* params */ ); mcs [ 2 ] = new MyClass ( /* params */ ); Java \u4e2d\u58f0\u660e\u6570\u7ec4\u65f6\u4e0d\u80fd\u6307\u5b9a\u5176\u957f\u5ea6\uff0c\u4f8b\u5982 int a[5]; \u8fd9\u79cd\u5199\u6cd5\u5c31\u662f\u975e\u6cd5\u7684\u3002\u8fd9\u4e2a \u6839\u672c\u539f\u56e0 \u662f\u6570\u7ec4\u65f6\u5f15\u7528\u7c7b\u578b\uff0c\u6211\u4eec\u5728\u58f0\u660e\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u628a\u6570\u636e\u5b58\u5230\u6808\u7a7a\u95f4\u5185\u3002 \u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u9759\u6001\u521d\u59cb\u5316 \uff0c\u5b9a\u4e49\u6570\u7ec4\u7684\u540c\u65f6\u5c31\u4e3a\u6570\u7ec4\u5143\u7d20\u5206\u914d\u7a7a\u95f4\u5e76\u8d4b\u503c\u3002\u5982\uff1a int [] a = { 1 , 2 , 3 }; int [] b = new int [] { 1 , 2 , 3 }; MyClass [] mcs = { new MyClass ( /* params */ ), new MyClass ( /* params */ ), new MyClass ( /* params */ ), }; \u521d\u59cb\u5316\u5217\u8868\u4e2d\u6700\u540e\u53ef\u4ee5\u591a\u4e00\u4e2a , \u3002 \u6709\u6570\u7ec4\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6545\u6570\u7ec4\u4e00\u7ecf\u5206\u914d\u7a7a\u95f4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5c31\u88ab \u9690\u5f0f\u521d\u59cb\u5316 \u3002\u6570\u503c\u7c7b\u578b\u662f 0 \uff0c\u5f15\u7528\u7c7b\u578b\u662f null \u3002 \u8fd9\u6837\u8bbe\u8ba1\u7684\u521d\u8877\u662f\u907f\u514d\u5206\u914d\u7a7a\u95f4\u540e\u5185\u5bb9\u4e0d\u786e\u5b9a\u5e26\u6765\u7684\u5b89\u5168\u6027\u9690\u60a3 \u3002 Java \u7684\u6570\u7ec4\u6709\u4e00\u4e2a length \u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Java \u4e2d\u4e5f\u6709\u589e\u5f3a for \u5faa\u73af\uff1a int [] ages = new int [ 10 ] ; for ( age : ages ) { System . out . pringln ( age ); } \u6ce8\u610f\u8fd9\u79cd\u904d\u5386\u65b9\u5f0f\u662f \u53ea\u8bfb \u7684\u3002 Array.copy \u65b9\u6cd5\u63d0\u4f9b\u4e86\u6570\u7ec4\u5143\u7d20\u7684\u590d\u5236\u529f\u80fd\u3002 \u591a\u7ef4\u6570\u7ec4 \u5728 Java \u4e2d\uff0c\u4e8c\u7ef4\u6570\u7ec4\u662f \u201c\u6570\u7ec4\u7684\u6570\u7ec4\u201d\uff0c\u6545\u6570\u7ec4\u6bcf\u884c\u7684\u957f\u5ea6\u53ef\u4ee5\u4e0d\u540c\uff0c\u8fd9\u4e00\u70b9\u4e0e C++ \u4e0d\u540c\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a int [][] a = {{ 1 , 2 }, { 3 , 4 , 0 , 9 }, { 5 , 6 , 7 }}; int [][] b = new int [ 3 ][] ; b [ 0 ] = new int [ 2 ] ; b [ 1 ] = new int [ 4 ] ; b [ 2 ] = nwe int [ 3 ] ;","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"languages/java/basic/grammar/#_1","text":"","title":"\u57fa\u672c\u8bed\u6cd5 \u2014\u2014 \u6570\u636e\u8fd0\u7b97\u3001\u6d41\u63a7\u5236\u548c\u6570\u7ec4"},{"location":"languages/java/basic/grammar/#_2","text":"\u6570\u636e\u7c7b\u578b\u51b3\u5b9a\u4e86 Java \u4e2d\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u8fd0\u7b97\u65b9\u5f0f\u3002 Java \u4e2d\u7684\u6570\u636e\u7c7b\u578b\u5206\u4e3a\uff1a \u57fa\u672c\u7c7b\u578b\uff08primitive types\uff09 \u548c \u5f15\u7528\u7c7b\u578b\uff08reference types\uff09 \uff1a \u6570\u636e\u7c7b\u578b \u57fa\u672c\u7c7b\u578b \u6570\u503c\u578b \u6574\u6570\u7c7b\u578b\uff08byte, short, int, long\uff09 \u6d6e\u70b9\u7c7b\u578b\uff08float, double\uff09 \u5b57\u7b26\u578b\uff08char\uff09 \u5e03\u5c14\u578b\uff08boolean\uff09 \u5f15\u7528\u7c7b\u578b \u7c7b\uff08class\uff09 \u63a5\u53e3\uff08interface\uff09 \u6570\u7ec4 \u57fa\u672c\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4f4d\u4e8e \u6808\u7a7a\u95f4 \uff0c\u8d4b\u503c\u8bed\u53e5\u590d\u5236 \u503c double d = 3 ; Person p = new Person (); \u5e94\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u5f15\u7528\u5230 \u5806\u7a7a\u95f4 \uff0c\u8d4b\u503c\u8bed\u53e5\u590d\u5236\u7684\u662f \u5f15\u7528 double d1 = d ; Person p1 = p ; \u5173\u4e8e Java \u4e2d\u7684\u56db\u7c7b\u516b\u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u8981\u6ce8\u610f\uff1a \u00b7boolean\u00b7 \u7c7b\u578b\u4e0d\u80fd\u4e0e\u6574\u5f62\u6df7\u7528\uff0c\u53d6\u503c\u53ea\u80fd\u4e3a true \u6216 false \uff0c\u8fd9\u4e00\u70b9\u4e0e C++ \u4e0d\u540c\u3002 \u00b7char\u00b7 \u7c7b\u578b\u7528 Unicode \u7f16\u7801\uff0c\u5360 2 \u5b57\u8282\u3002 \u56db\u79cd\u6574\u578b\u6709\u56fa\u5b9a\u7684\u8868\u793a\u8303\u56f4\u548c\u5b57\u6bb5\u957f\u5ea6\uff0c \u4e0d\u53d7\u64cd\u4f5c\u7cfb\u7edf\u5f71\u54cd \uff0c\u4ee5\u6b64\u4fdd\u8bc1\u53ef\u79fb\u690d\u6027\u3002 Java \u6574\u578b\u4e2d\u6ca1\u6709\u201d\u65e0\u7b26\u53f7\u6570\u201c \u6807\u8bc6\u7b26\uff08identifier\uff09\uff1a\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf\u3001\u5e38\u91cf\u3001\u65b9\u6cd5\u3001\u5bf9\u8c61\u548c\u7c7b\u90fd\u8981\u6709\u540d\u5b57\u3002 \u6807\u8bc6\u7b26\u53ef\u4ee5\u7531\u6570\u5b57\u3001\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u3001$\u7b26\u53f7\u7ec4\u6210\uff0c\u4f46\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 \u4e00\u822c\u6309\u7167 Java \u7684\u547d\u540d\u60ef\u4f8b\uff0c \u7c7b\u540d\u9996\u5b57\u6bcd\u5927\u5199\uff08Pascal\uff09 \uff0c\u5176\u4f59\u7684\uff08\u5305\u3001\u65b9\u6cd5\u3001\u53d8\u91cf\u540d\uff09 \u9996\u5b57\u6bcd\u5c0f\u5199\uff08camel\uff09 \u3002\u4e00\u822c\u5f88\u5c11\u4f7f\u7528\u4e0b\u5212\u7ebf\uff0c\u5e38\u91cf\u5728\u4f7f\u7528\u5904\u5b9a\u4e49\uff0c\u800c\u4e0d\u662f\u90fd\u5199\u5728\u5f00\u7bc7\u3002","title":"\u6570\u636e\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u5e38\u91cf"},{"location":"languages/java/basic/grammar/#_3","text":"","title":"\u8fd0\u7b97\u7b26\u4e0e\u8868\u8fbe\u5f0f"},{"location":"languages/java/basic/grammar/#_4","text":"\u7b97\u6570\u8fd0\u7b97\u7b26\uff1a + , = , * , / , % , ++ , -- \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a < , > , <= , >= , == , != \u903b\u8f91\u8fd0\u7b97\u7b26\uff1a ! , & , | , ^ , $$ \uff08\u77ed\u8def\u4e0e\uff09, || \uff08\u77ed\u8def\u6216\uff09 \u4f4d\u8fd0\u7b97\u7b26\uff1a & , | , ^ , ~ , << \uff08\u5de6\u79fb\uff0c\u4f4e\u4f4d\u8865\u96f6\uff09, >> \uff08\u53f3\u79fb\uff0c\u9ad8\u4f4d\u8865\u539f\u6765\u7684\u7b26\u53f7\u4f4d\uff09, >>> \uff08\u65e0\u7b26\u53f7\u53f3\u79fb\uff0c\u5373\u9ad8\u4f4d\u8865\u96f6\uff09 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a = \uff1b\u6269\u5c55\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a += , -= , *= , /= \u5b57\u7b26\u4e32\u8fde\u63a5\u8fd0\u7b97\u7b26\uff1a + \u79fb\u4f4d\u8fd0\u7b97\u7684\u6027\u8d28\uff1a \u9002\u7528\u4e8e \u6574\u578b \u548c \u5b57\u7b26\u578b \u5bf9\u957f\u5ea6\u5c11\u4e8e int \u578b\u7684\u64cd\u4f5c\u6570\u5148\u81ea\u52a8\u8f6c\u5316\u4e3a int \u578b\u518d\u79fb\u4f4d\uff08\u6574\u5f62\u63d0\u5347\uff0c\u5bf9\u6240\u6709\u7684\u8fd0\u7b97\u90fd\u662f\u8fd9\u6837\uff09 \u5bf9\u4e8e int \u578b\u6574\u6570\u79fb\u4f4d\uff0c\u79fb\u52a8\u4f4d\u6570\u5148\u5bf9 32 32 \u53d6\u6a21 \u5bf9\u4e8e long \u578b\u6574\u6570\u79fb\u4f4d\uff0c\u79fb\u52a8\u4e3a\u6570\u5148\u5bf9 64 64 \u53d6\u6a21 \u8d4b\u503c\u8fd0\u7b97\u7b26 = \u4e24\u4fa7\u64cd\u4f5c\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f7f\u7528 \u9ed8\u8ba4\u7c7b\u578b\u8f6c\u6362 \u6216 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff08casting\uff09 \u539f\u5219\u8fdb\u884c\u5904\u7406\u3002\u540e\u8005\u7528\u4e8e\u7f29\u5c0f\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u5982\uff1a long a = 1000 ; int b = ( int ) a ; \u7279\u4f8b\uff1a\u53ef\u4ee5\u5c06\u6574\u5f62\u5e38\u91cf\u76f4\u63a5\u8d4b\u503c\u7ed9 byte , short , char \u7b49\u53d8\u91cf\u7c7b\u578b\uff0c\u800c\u4e0d\u9700\u8981\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u53ea\u8981\u4e0d\u8d85\u8fc7\u5176\u8868\u6570\u8303\u56f4\uff0c\u5982\u00b7\uff1a byte b = 2 ; // valid byte b = 4096 ; // invalid","title":"\u8fd0\u7b97\u7b26"},{"location":"languages/java/basic/grammar/#_5","text":"\u8868\u8fbe\u5f0f \u662f\u7b26\u5408\u4e00\u5b9a\u8bed\u6cd5\u89c4\u5219\u7684\u8fd0\u7b97\u7b26\u548c\u64cd\u4f5c\u6570\u7684\u5e8f\u5217\u3002 \u8868\u8fbe\u5f0f\u4e2d\u64cd\u4f5c\u6570\u8fd0\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u503c \uff0c\u503c\u7684\u7c7b\u578b\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7c7b\u578b \u3002 \u5f53\u8868\u8fbe\u5f0f\u4e2d\u6709\u4e0d\u540c\u7c7b\u578b\u64cd\u4f5c\u6570\u65f6\uff0c\u540c\u610f\u8f6c\u5316\u6210\u66f4\u9ad8\u7684\u7c7b\u578b\uff1a int < long < float < double \u3002 \u6574\u5f62\u63d0\u5347\uff1a\u6240\u6709 byte , char , short \u53c2\u4e0e\u7b97\u672f\u8fd0\u7b97\u65f6\u90fd\u8f6c\u5316\u4e3a int \u3002 \u5982\u679c\u4f60\u4e0d\u662f\u5206\u786e\u5b9a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u53ef\u4ee5\u591a\u4f7f\u7528 () \u63d0\u9ad8\u7a0b\u5e8f\u53ef\u8bfb\u6027\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u4ece javap -c \u7c7b\u540d \u53cd\u6c47\u7f16\u5f97\u5230\u7684 JVM \u6c47\u7f16\u6307\u4ee4\u4e2d\u6316\u5c40\u6709\u7528\u4fe1\u606f\u3002","title":"\u8868\u8fbe\u5f0f"},{"location":"languages/java/basic/grammar/#_6","text":"\u4e0e C++ \u4e0d\u540c\uff0cJava \u4e2d\u6ca1\u6709 \u201d\u8868\u8fbe\u5f0f\u8bed\u53e5\u201c\uff0c\u5373\u4e0b\u8ff0\u5199\u6cd5\u4e0d\u5408\u6cd5\uff1a x + y ; \u8fd9\u79cd\u8bbe\u8ba1\u907f\u514d\u4e86\u7a0b\u5e8f\u5458\u5199\u65e0\u610f\u4e49\u7684\u8868\u8fbe\u5f0f \u3002 Java \u4e2d\u7684\u6ce8\u91ca\u9664\u4e86\u4e0e C++ \u76f8\u540c\u7684 // \u548c /* */ \u7684\u5199\u6cd5\u4e4b\u5916\u3002\u8fd8\u6709\u5f62\u5982 /** */ \u7684 doc \u6ce8\u91ca\uff0c\u7528\u4e8e JDK \u7684 javadoc \u5de5\u5177\u3002\u8fd9\u79cd\u8bbe\u8ba1\u7684\u672c\u8d28\u662f\u4e3a\u4e86\u63d0\u9ad8\u7a0b\u5e8f\u7684 \u6613\u8bfb\u6027 \u3002 Java \u4e2d\u7684 if else \u548c switch \u7684\u8bed\u6cd5\u4e0e C++ \u76f8\u540c\u3002 Java \u4e2d\u7684 for , while , do while \u7684\u8bed\u6cd5\u4e0e C++ \u76f8\u540c\u3002","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"languages/java/basic/grammar/#goto","text":"\u5728\u5404\u79cd\u8bed\u8a00\u4e2d\uff0c\u662f\u5426\u4fdd\u7559 goto \u8bed\u53e5\u90fd\u662f\u4e00\u4e2a\u5177\u6709\u4e89\u8bae\u7684\u8bdd\u9898\uff0c\u4e3b\u8981\u95ee\u9898\u5728\u4e8e goto \u8bed\u53e5\u7684\u968f\u673a\u8df3\u8f6c\u4e25\u91cd\u964d\u4f4e\u4e86\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0cJava \u7684\u89e3\u51b3\u65b9\u6848\u662f\u5f15\u5165\u76f8\u6bd4\u4e8e C++ \u589e\u5f3a\u7248\u7684 break \u548c continue \u5173\u952e\u5b57\u3002\u5728\u5faa\u73af\u524d\u9762\u53ef\u4ee5\u7528\u6807\u53f7\u6765\u6807\u660e\u662f\u54ea\u4e00\u91cd\u5faa\u73af\uff0c\u4f8b\u5982\uff1a label1: {... label2: {... label3: {... break label2 ; } } } \u540c\u6837\u5730\uff0c continue \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6807\u53f7\u6765\u5236\u5b9a\u8c03\u5230\u5916\u9762\u7684\u67d0\u4e00\u5c42\u5faa\u73af\u3002","title":"\u5173\u4e8e goto \u8bed\u53e5\uff1a"},{"location":"languages/java/basic/grammar/#_7","text":"\u6570\u7ec4\u662f\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u6570\u636e\u7684\u7ec4\u5408\u3002 \u4e00\u7ef4\u6570\u7ec4\u7684\u58f0\u660e\u65b9\u5f0f\uff1a int [] a ; double [] b ; MyClass [] C ; \u6ce8\uff1a\u6570\u7ec4\u65b9\u62ec\u53f7\u53ef\u4ee5\u5199\u5728\u53d8\u91cf\u524d\u9762\uff0c\u4e5f\u53ef\u4ee5\u5199\u5728\u53d8\u91cf\u540e\u9762\u3002 \u6570\u7ec4\u5b9a\u4e49 \u4e0e \u4e3a\u6570\u7ec4\u5206\u914d\u7a7a\u95f4 \u5206\u5f00\u8fdb\u884c\uff0c\u5982\uff1a int [] a = new int [ 3 ] ; a [ 0 ] = 3 ; a [ 1 ] = 6 ; a [ 2 ] = 9 ; MyClass [] mcs = new MyClass [ 3 ] ; mcs [ 0 ] = new MyClass ( /* params */ ); mcs [ 1 ] = new MyClass ( /* params */ ); mcs [ 2 ] = new MyClass ( /* params */ ); Java \u4e2d\u58f0\u660e\u6570\u7ec4\u65f6\u4e0d\u80fd\u6307\u5b9a\u5176\u957f\u5ea6\uff0c\u4f8b\u5982 int a[5]; \u8fd9\u79cd\u5199\u6cd5\u5c31\u662f\u975e\u6cd5\u7684\u3002\u8fd9\u4e2a \u6839\u672c\u539f\u56e0 \u662f\u6570\u7ec4\u65f6\u5f15\u7528\u7c7b\u578b\uff0c\u6211\u4eec\u5728\u58f0\u660e\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u628a\u6570\u636e\u5b58\u5230\u6808\u7a7a\u95f4\u5185\u3002 \u6570\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u9759\u6001\u521d\u59cb\u5316 \uff0c\u5b9a\u4e49\u6570\u7ec4\u7684\u540c\u65f6\u5c31\u4e3a\u6570\u7ec4\u5143\u7d20\u5206\u914d\u7a7a\u95f4\u5e76\u8d4b\u503c\u3002\u5982\uff1a int [] a = { 1 , 2 , 3 }; int [] b = new int [] { 1 , 2 , 3 }; MyClass [] mcs = { new MyClass ( /* params */ ), new MyClass ( /* params */ ), new MyClass ( /* params */ ), }; \u521d\u59cb\u5316\u5217\u8868\u4e2d\u6700\u540e\u53ef\u4ee5\u591a\u4e00\u4e2a , \u3002 \u6709\u6570\u7ec4\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6545\u6570\u7ec4\u4e00\u7ecf\u5206\u914d\u7a7a\u95f4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5c31\u88ab \u9690\u5f0f\u521d\u59cb\u5316 \u3002\u6570\u503c\u7c7b\u578b\u662f 0 \uff0c\u5f15\u7528\u7c7b\u578b\u662f null \u3002 \u8fd9\u6837\u8bbe\u8ba1\u7684\u521d\u8877\u662f\u907f\u514d\u5206\u914d\u7a7a\u95f4\u540e\u5185\u5bb9\u4e0d\u786e\u5b9a\u5e26\u6765\u7684\u5b89\u5168\u6027\u9690\u60a3 \u3002 Java \u7684\u6570\u7ec4\u6709\u4e00\u4e2a length \u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u6570\u7ec4\u7684\u957f\u5ea6\u3002 Java \u4e2d\u4e5f\u6709\u589e\u5f3a for \u5faa\u73af\uff1a int [] ages = new int [ 10 ] ; for ( age : ages ) { System . out . pringln ( age ); } \u6ce8\u610f\u8fd9\u79cd\u904d\u5386\u65b9\u5f0f\u662f \u53ea\u8bfb \u7684\u3002 Array.copy \u65b9\u6cd5\u63d0\u4f9b\u4e86\u6570\u7ec4\u5143\u7d20\u7684\u590d\u5236\u529f\u80fd\u3002","title":"\u5173\u4e8e\u6570\u7ec4"},{"location":"languages/java/basic/grammar/#_8","text":"\u5728 Java \u4e2d\uff0c\u4e8c\u7ef4\u6570\u7ec4\u662f \u201c\u6570\u7ec4\u7684\u6570\u7ec4\u201d\uff0c\u6545\u6570\u7ec4\u6bcf\u884c\u7684\u957f\u5ea6\u53ef\u4ee5\u4e0d\u540c\uff0c\u8fd9\u4e00\u70b9\u4e0e C++ \u4e0d\u540c\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a int [][] a = {{ 1 , 2 }, { 3 , 4 , 0 , 9 }, { 5 , 6 , 7 }}; int [][] b = new int [ 3 ][] ; b [ 0 ] = new int [ 2 ] ; b [ 1 ] = new int [ 4 ] ; b [ 2 ] = nwe int [ 3 ] ;","title":"\u591a\u7ef4\u6570\u7ec4"},{"location":"languages/java/basic/history/","text":"Java \u7b80\u4ecb Java\u7684\u5386\u53f2\u4e0e\u53d1\u5c55 1990 \u5e74 SUN \u516c\u53f8\u5f00\u59cb\u7528 C++ \u5f00\u53d1\u5bb6\u7528\u7535\u5668\u8f6f\u4ef6\uff0c1994 \u5e74\u57fa\u4e8e C++ \u5f00\u53d1\u51fa\u4e86 Oka \u8bed\u8a00\uff0c1995 \u5e74 \u6b63\u5f0f\u5c06 Oka \u547d\u540d\u4e3a Java\uff0c\u5b98\u7f51 java.sun.com\uff0c\u540e SUN \u88ab Oracle \u6536\u8d2d\u3002 Java \u5206\u4e3a\u4e09\u5927\u5e73\u53f0\uff1a Java SE \u6807\u51c6\u7248\uff1a\u7528\u4e8e\u684c\u9762\u5e94\u7528 Java EE \u4f01\u4e1a\u7248\uff1a\u7528\u4e8e web \u5e94\u7528 Java ME \u5fae\u578b\u7248\uff1a\u7528\u4e8e\u79fb\u52a8\u7aef\u5e94\u7528 JDK \u662f Java \u5f00\u53d1\u5de5\u5177\u5305\uff0c\u5176\u53d1\u5c55\u5386\u7a0b\u5982\u4e0b\uff1a 1995 - JDK 1.0\uff1a\u521d\u521b 1998 - JDK 1.2\uff1aJava2 2000 - JDK 1.3\uff1a\u6539\u8fdb 2002 - JDK 1.4\uff1a\u7a33\u5b9a 2004 - JDK 1.5\uff1a\u8bed\u6cd5\u589e\u52a0\uff0c\u4ece\u6b64\u53eb Java 5,6,7... 2006 - JDK 1.6\uff1a\u5e7f\u6cdb\u4f7f\u7528 2010 - Oracle \u5e76\u8d2d SUN 2011 - JDK 1.7\uff1a\u6539\u8fdb 2014 - JDK 1.8\uff1a\u524d\u8fdb\u5927\u6b65 Java \u7684\u53d1\u5c55\u662f\u7531 JCP\uff08Java Community Process\uff09 \u548c JSR\uff08Java Specification Requests\uff09\u4e3b\u8981\u63a8\u52a8\u7684\u3002\u4f8b\u5982\uff0cLambda \u8868\u8fbe\u5f0f\u662f JSR-335 \u5f15\u5165\u7684\uff0c\u8fd9\u4e5f\u662f Java8 \u91cd\u8981\u7684\u65b0\u7279\u6027\u3002 Java \u8bed\u8a00\u7684\u7279\u70b9 Java \u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u9762\u5411\u5bf9\u8c61\uff0c\u8bed\u6cd5\u4e0e C++ \u6781\u4e3a\u76f8\u4f3c\uff0c\u4f46\u6bd4 C++ \u66f4\u7b80\u5355\u3002 Java \u7684\u7279\u70b9\u53ef\u4ee5\u89c4\u7eb3\u5165\u4e0b\uff1a \u8bed\u6cd5\u7b80\u5355 \u9762\u5411\u5bf9\u8c61\uff08\u4e0e C++ \u4fdd\u7559\u4e86\u4e00\u90e8\u5206 C \u7684\u7279\u6027\u4e0d\u540c\uff0cJava \u7684\u4e00\u5207\u51bb\u707e\u5bf9\u8c61\u5185\uff0c\u662f\u66f4\u4e3a\u7eaf\u7cb9\u7684\u9762\u5411\u5bf9\u8c61\uff09 \u5e73\u53f0\u65e0\u5173 \u5b89\u5168\u7a33\u5b9a \u652f\u6301\u591a\u7ebf\u7a0b \u53e6\u5916\uff0cJava \u5177\u5907\u4e30\u5bcc\u7684\u7c7b\u5e93\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7c7b\u4ee5\u6ee1\u8db3\u7f51\u7edc\u5316\u3001\u591a\u7ebf\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7cfb\u7edf\u7684\u9700\u8981\u3002 \u6240\u4ee5\uff0cJava \u80fd\u591f\u80dc\u4efb \u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u5f00\u53d1\u3001\u5404\u7c7b\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u3001\u8ba1\u7b97\u8fc7\u7a0b\u7684\u53ef\u89c6\u5316\u3001\u52a8\u6001\u753b\u9762\u548c\u4ea4\u4e92\u64cd\u4f5c\u3001Internet\u7cfb\u7edf\u7ba1\u7406\u3001\u6570\u636e\u5e93\u64cd\u4f5c \u7b49\u4efb\u52a1\u3002 Java \u76f8\u6bd4 C++ \u7684\u780d\u6389\u4e86\u4ec0\u4e48\uff1a \u65e0\u76f4\u63a5\u6307\u9488\u64cd\u4f5c \u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff08\u7cfb\u7edf\u81ea\u52a8\u91ca\u653e\u5185\u5b58\uff09 \u6570\u636e\u7c7b\u578b\u957f\u5ea6\u56fa\u5b9a\uff08\u5e73\u53f0\u65e0\u5173\uff09 \u4e0d\u7528\u5934\u6587\u4ef6 \u4e0d\u5305\u542b\u7ed3\u6784\u548c\u8054\u5408 \u4e0d\u652f\u6301\u5b8f \u4e0d\u7528\u591a\u91cd\u7ee7\u627f\uff08\u800c\u662f\u7528\u7ed3\u6784\uff0c\u4ece\u800c\u907f\u514d\u4e86\u62f7\u8d1d\u6784\u9020\u7b49 C++ \u4e2d\u7684\u590d\u6742\u64cd\u4f5c\uff09 \u65e0\u7c7b\u5916\u5168\u5c40\u53d8\u91cf \u65e0 GOTO Java \u8fd0\u884c\u673a\u5236 - \u8de8\u5e73\u53f0\u7684\u539f\u56e0 Java \u6709\u4e09\u4e2a\u6838\u5fc3\u673a\u5236\uff1a Java \u865a\u62df\u673a\uff08JVM\uff09 \u4ee3\u7801\u5b89\u5168\u6027\u68c0\u67e5\uff08Code Security\uff09 \u5783\u573e\u6536\u96c6\u673a\u5236\uff08Garbage Collection\uff09 Java \u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c \u5176\u4e2d JVM \u662f\u5728\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u7531\u8f6f\u4ef6\u6216\u786c\u4ef6\u6a21\u62df\u7684\u8ba1\u7b97\u673a\uff0c\u8bfb\u53d6\u5e76\u5904\u7406\u7ecf\u8fc7\u5e76\u4ee5\u8fc7\u7684\u5b57\u8282\u7801 class \u6587\u4ef6\u3002 JVM \u89c4\u8303\u5b9a\u4e49\u4e86\uff1a\u6307\u4ee4\u96c6\u3001\u5bc4\u5b58\u5668\u96c6\u3001\u7c7b\u6587\u4ef6\u7ed3\u6784\u3001\u5806\u6808\u3001\u5783\u573e\u6536\u96c6\u5806\u3001\u5185\u5b58\u533a\u57df\u3002 \u5177\u4f53\u8fd0\u884c\u65f6\u9700\u8981\u8fd0\u884c\u73af\u5883 JRE\uff08Java Runtime Environment\uff09 JRE = JVM + API(Lib) JRE \u8fd0\u884c\u65f6\u6709\u4e09\u9879\u4e3b\u8981\u529f\u80fd\uff1a \u52a0\u8f7d\u4ee3\u7801\uff1a\u7531 class loader \u5b8c\u6210 \u6821\u9a8c\u4ee3\u7801\uff1a\u7531 bytecode verifier \u5b8c\u6210 \u2014\u2014 \u8be5\u7279\u70b9\u4fdd\u8bc1 Java \u7684\u5b89\u5168\u6027 \u6267\u884c\u4ee3\u7801\uff1a\u7531 run time interpreter \u5b8c\u6210 \u53e6\u4e00\u65b9\u9762\uff0cJava \u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u673a\u5236\uff08\u5728 C++ \u4e2d\u7a0b\u5e8f\u5458\u9700\u8981\u5229\u7528 new/delete \u64cd\u4f5c\u7ba1\u7406\u5185\u5b58\uff09\u3002 JVM \u4e2d\u6709\u7cfb\u7edf\u53ca\u7ebf\u7a0b\u8ddf\u8e2a\u5b58\u50a8\u7a7a\u95f4\u7684\u5206\u914d\u60c5\u51b5 \u5728 JVM \u7a7a\u95f2\u65f6\uff0c\u68c0\u67e5\u5e76\u91ca\u653e\u90a3\u4e9b\u53ef\u88ab\u91ca\u653e\u7684\u5b58\u50a8\u7a7a\u95f4 \u7a0b\u5e8f\u5458\u65e0\u987b\u4e5f\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u6216\u5e72\u9884\u8be5\u56de\u6536\u8fc7\u7a0b \u6700\u540e JDK \u662f\u7531 JRE+\u5de5\u5177\u5305 \u6784\u6210\u7684\uff0c\u5176\u4e2d\u5de5\u5177\u5305\u4e3b\u8981\u5305\u62ec\uff1aJava Compiler, Java Debugger, JavaDoc, JPDA\u3002 JDK \u63d0\u4f9b\u7684\u5de5\u5177\u6709\uff1a java \u7f16\u8bd1\u5668\uff1ajavac java \u6267\u884c\u5668\uff1ajava \u6587\u6863\u751f\u6210\u5668\uff1ajavadoc java \u6253\u5305\u5668\uff1ajar java \u8c03\u8bd5\u5668\uff1ajdb \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1 \u5bf9\u8c61\u7684\u542b\u4e49\uff1a \u73b0\u5b9e\u4e16\u754c\u4e2d\uff1a\u4e00\u4e2a\u5ba2\u89c2\u5b9e\u4f53 \u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff1a\u4e00\u4e2a\u53ef\u6807\u8bc6\u7684\u5b58\u50a8\u533a\u57df \u7c7b\uff1a\u5177\u6709\u5171\u540c\u5c5e\u6027\uff08\u53d8\u91cf\uff0cfield\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff0cmethod\uff09\u7684\u5bf9\u8c61\u96c6\u5408 \u7c7b\u662f\u5bf9\u8c61\u7684\u62bd\u8c61\uff08\u6a21\u677f\uff09\uff0c\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u6ce8\uff1a\u7c7b\u548c\u5bf9\u8c61\u6709\u65f6\u90fd\u79f0\u4e3a\u201c\u5bf9\u8c61\u201d\uff0c\u4e3a\u4e86\u660e\u786e\u8d77\u89c1\uff0c\u540e\u8005\u79f0\u4e3a\u5bf9\u8c61\u5b9e\u4f8b\u3002 \u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u6709 \u5c01\u88c5\u6027\u3001\u7ee7\u627f\u6027\u3001\u591a\u6001\u6027 \u4e09\u5927\u7279\u5f81\u3002 \u5c01\u88c5 \u6a21\u5757\u5316\uff1a\u5c06\u5c5e\u6027\u548c\u884c\u4e3a\u5c01\u88c5\u5728\u7c7b\u4e2d\uff0c\u7a0b\u5e8f\u5b9a\u4e49\u5f88\u591a\u7c7b\u3002 \u4fe1\u606f\u9690\u853d\uff1a\u5c06\u7c7b\u7684\u7ec6\u8282\u90e8\u5206\u9690\u85cf\u8d77\u6765\uff0c\u7528\u6237\u53ea\u901a\u8fc7\u67d0\u4e2a\u540e\u4fdd\u62a4\u7684\u63a5\u53e3\u8bbf\u95ee\u67d0\u4e2a\u7c7b\u3002 \u7ee7\u627f\uff08inheritance\uff09 \u7ee7\u627f\u7684\u672c\u8d28\u662f\u57fa\u4e00\u79cd \u7c7b\u548c\u5b50\u7c7b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u7684\u65b9\u6cd5 \u3002\u4ece\u800c\u5927\u5927\u63d0\u9ad8\u4e86\u7f16\u7a0b\u6548\u7387\u3002 \u7ee7\u627f\u7684\u597d\u5904\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a \u66f4\u597d\u5730\u8fdb\u884c \u62bd\u8c61\u4e0e\u5206\u79bb \u589e\u5f3a\u4ee3\u7801\u7684 \u91cd\u7528\u7387 \u63d0\u9ad8 \u53ef\u7ef4\u62a4\u6027 \u591a\u6001\uff08polymorphism\uff09 \u8ba9\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5728\u63a5\u6536\u540c\u4e00\u4e2a\u6307\u4ee4\uff08\u65b9\u6cd5\uff09\u7684\u65f6\u5019\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u5176\u4e2d\u6c14\u8282\u7684\u5b9e\u73b0\u5219\u7531\u63a5\u6536\u5bf9\u8c61\u81ea\u884c\u51b3\u5b9a\u3002 \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8981\u70b9 \u8ba4\u4e3a\u5ba2\u89c2\u4e16\u754c\u6709\u5404\u79cd\u5bf9\u8c61\u7ec4\u6210 \u7a0b\u5e8f\u7684\u5206\u6790\u548c\u8bbe\u8ba1\u90fd\u56f4\u7ed5\u7740 \u6709\u54ea\u4e9b\u7c7b \u6885\u683c\u96f7\u6709\u54ea\u4e9b\u5c5e\u6027\u3001\u54ea\u4e9b\u65b9\u6cd5 \u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u5982\u7ee7\u627f\u3001\u5173\u8054\uff09 \u5bf9\u8c61\u4e4b\u95f4\u53d1\u9001\u6d88\u606f\uff08\u8c03\u7528\u65b9\u6cd5\uff09","title":"Java \u5386\u53f2\u7b80\u4ecb"},{"location":"languages/java/basic/history/#java","text":"","title":"Java \u7b80\u4ecb"},{"location":"languages/java/basic/history/#java_1","text":"1990 \u5e74 SUN \u516c\u53f8\u5f00\u59cb\u7528 C++ \u5f00\u53d1\u5bb6\u7528\u7535\u5668\u8f6f\u4ef6\uff0c1994 \u5e74\u57fa\u4e8e C++ \u5f00\u53d1\u51fa\u4e86 Oka \u8bed\u8a00\uff0c1995 \u5e74 \u6b63\u5f0f\u5c06 Oka \u547d\u540d\u4e3a Java\uff0c\u5b98\u7f51 java.sun.com\uff0c\u540e SUN \u88ab Oracle \u6536\u8d2d\u3002 Java \u5206\u4e3a\u4e09\u5927\u5e73\u53f0\uff1a Java SE \u6807\u51c6\u7248\uff1a\u7528\u4e8e\u684c\u9762\u5e94\u7528 Java EE \u4f01\u4e1a\u7248\uff1a\u7528\u4e8e web \u5e94\u7528 Java ME \u5fae\u578b\u7248\uff1a\u7528\u4e8e\u79fb\u52a8\u7aef\u5e94\u7528 JDK \u662f Java \u5f00\u53d1\u5de5\u5177\u5305\uff0c\u5176\u53d1\u5c55\u5386\u7a0b\u5982\u4e0b\uff1a 1995 - JDK 1.0\uff1a\u521d\u521b 1998 - JDK 1.2\uff1aJava2 2000 - JDK 1.3\uff1a\u6539\u8fdb 2002 - JDK 1.4\uff1a\u7a33\u5b9a 2004 - JDK 1.5\uff1a\u8bed\u6cd5\u589e\u52a0\uff0c\u4ece\u6b64\u53eb Java 5,6,7... 2006 - JDK 1.6\uff1a\u5e7f\u6cdb\u4f7f\u7528 2010 - Oracle \u5e76\u8d2d SUN 2011 - JDK 1.7\uff1a\u6539\u8fdb 2014 - JDK 1.8\uff1a\u524d\u8fdb\u5927\u6b65 Java \u7684\u53d1\u5c55\u662f\u7531 JCP\uff08Java Community Process\uff09 \u548c JSR\uff08Java Specification Requests\uff09\u4e3b\u8981\u63a8\u52a8\u7684\u3002\u4f8b\u5982\uff0cLambda \u8868\u8fbe\u5f0f\u662f JSR-335 \u5f15\u5165\u7684\uff0c\u8fd9\u4e5f\u662f Java8 \u91cd\u8981\u7684\u65b0\u7279\u6027\u3002","title":"Java\u7684\u5386\u53f2\u4e0e\u53d1\u5c55"},{"location":"languages/java/basic/history/#java_2","text":"Java \u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u9762\u5411\u5bf9\u8c61\uff0c\u8bed\u6cd5\u4e0e C++ \u6781\u4e3a\u76f8\u4f3c\uff0c\u4f46\u6bd4 C++ \u66f4\u7b80\u5355\u3002 Java \u7684\u7279\u70b9\u53ef\u4ee5\u89c4\u7eb3\u5165\u4e0b\uff1a \u8bed\u6cd5\u7b80\u5355 \u9762\u5411\u5bf9\u8c61\uff08\u4e0e C++ \u4fdd\u7559\u4e86\u4e00\u90e8\u5206 C \u7684\u7279\u6027\u4e0d\u540c\uff0cJava \u7684\u4e00\u5207\u51bb\u707e\u5bf9\u8c61\u5185\uff0c\u662f\u66f4\u4e3a\u7eaf\u7cb9\u7684\u9762\u5411\u5bf9\u8c61\uff09 \u5e73\u53f0\u65e0\u5173 \u5b89\u5168\u7a33\u5b9a \u652f\u6301\u591a\u7ebf\u7a0b \u53e6\u5916\uff0cJava \u5177\u5907\u4e30\u5bcc\u7684\u7c7b\u5e93\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7c7b\u4ee5\u6ee1\u8db3\u7f51\u7edc\u5316\u3001\u591a\u7ebf\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7cfb\u7edf\u7684\u9700\u8981\u3002 \u6240\u4ee5\uff0cJava \u80fd\u591f\u80dc\u4efb \u9762\u5411\u5bf9\u8c61\u7684\u5e94\u7528\u5f00\u53d1\u3001\u5404\u7c7b\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u3001\u8ba1\u7b97\u8fc7\u7a0b\u7684\u53ef\u89c6\u5316\u3001\u52a8\u6001\u753b\u9762\u548c\u4ea4\u4e92\u64cd\u4f5c\u3001Internet\u7cfb\u7edf\u7ba1\u7406\u3001\u6570\u636e\u5e93\u64cd\u4f5c \u7b49\u4efb\u52a1\u3002 Java \u76f8\u6bd4 C++ \u7684\u780d\u6389\u4e86\u4ec0\u4e48\uff1a \u65e0\u76f4\u63a5\u6307\u9488\u64cd\u4f5c \u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff08\u7cfb\u7edf\u81ea\u52a8\u91ca\u653e\u5185\u5b58\uff09 \u6570\u636e\u7c7b\u578b\u957f\u5ea6\u56fa\u5b9a\uff08\u5e73\u53f0\u65e0\u5173\uff09 \u4e0d\u7528\u5934\u6587\u4ef6 \u4e0d\u5305\u542b\u7ed3\u6784\u548c\u8054\u5408 \u4e0d\u652f\u6301\u5b8f \u4e0d\u7528\u591a\u91cd\u7ee7\u627f\uff08\u800c\u662f\u7528\u7ed3\u6784\uff0c\u4ece\u800c\u907f\u514d\u4e86\u62f7\u8d1d\u6784\u9020\u7b49 C++ \u4e2d\u7684\u590d\u6742\u64cd\u4f5c\uff09 \u65e0\u7c7b\u5916\u5168\u5c40\u53d8\u91cf \u65e0 GOTO","title":"Java \u8bed\u8a00\u7684\u7279\u70b9"},{"location":"languages/java/basic/history/#java-","text":"Java \u6709\u4e09\u4e2a\u6838\u5fc3\u673a\u5236\uff1a Java \u865a\u62df\u673a\uff08JVM\uff09 \u4ee3\u7801\u5b89\u5168\u6027\u68c0\u67e5\uff08Code Security\uff09 \u5783\u573e\u6536\u96c6\u673a\u5236\uff08Garbage Collection\uff09 Java \u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c \u5176\u4e2d JVM \u662f\u5728\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u7531\u8f6f\u4ef6\u6216\u786c\u4ef6\u6a21\u62df\u7684\u8ba1\u7b97\u673a\uff0c\u8bfb\u53d6\u5e76\u5904\u7406\u7ecf\u8fc7\u5e76\u4ee5\u8fc7\u7684\u5b57\u8282\u7801 class \u6587\u4ef6\u3002 JVM \u89c4\u8303\u5b9a\u4e49\u4e86\uff1a\u6307\u4ee4\u96c6\u3001\u5bc4\u5b58\u5668\u96c6\u3001\u7c7b\u6587\u4ef6\u7ed3\u6784\u3001\u5806\u6808\u3001\u5783\u573e\u6536\u96c6\u5806\u3001\u5185\u5b58\u533a\u57df\u3002 \u5177\u4f53\u8fd0\u884c\u65f6\u9700\u8981\u8fd0\u884c\u73af\u5883 JRE\uff08Java Runtime Environment\uff09 JRE = JVM + API(Lib) JRE \u8fd0\u884c\u65f6\u6709\u4e09\u9879\u4e3b\u8981\u529f\u80fd\uff1a \u52a0\u8f7d\u4ee3\u7801\uff1a\u7531 class loader \u5b8c\u6210 \u6821\u9a8c\u4ee3\u7801\uff1a\u7531 bytecode verifier \u5b8c\u6210 \u2014\u2014 \u8be5\u7279\u70b9\u4fdd\u8bc1 Java \u7684\u5b89\u5168\u6027 \u6267\u884c\u4ee3\u7801\uff1a\u7531 run time interpreter \u5b8c\u6210 \u53e6\u4e00\u65b9\u9762\uff0cJava \u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u673a\u5236\uff08\u5728 C++ \u4e2d\u7a0b\u5e8f\u5458\u9700\u8981\u5229\u7528 new/delete \u64cd\u4f5c\u7ba1\u7406\u5185\u5b58\uff09\u3002 JVM \u4e2d\u6709\u7cfb\u7edf\u53ca\u7ebf\u7a0b\u8ddf\u8e2a\u5b58\u50a8\u7a7a\u95f4\u7684\u5206\u914d\u60c5\u51b5 \u5728 JVM \u7a7a\u95f2\u65f6\uff0c\u68c0\u67e5\u5e76\u91ca\u653e\u90a3\u4e9b\u53ef\u88ab\u91ca\u653e\u7684\u5b58\u50a8\u7a7a\u95f4 \u7a0b\u5e8f\u5458\u65e0\u987b\u4e5f\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u6216\u5e72\u9884\u8be5\u56de\u6536\u8fc7\u7a0b \u6700\u540e JDK \u662f\u7531 JRE+\u5de5\u5177\u5305 \u6784\u6210\u7684\uff0c\u5176\u4e2d\u5de5\u5177\u5305\u4e3b\u8981\u5305\u62ec\uff1aJava Compiler, Java Debugger, JavaDoc, JPDA\u3002 JDK \u63d0\u4f9b\u7684\u5de5\u5177\u6709\uff1a java \u7f16\u8bd1\u5668\uff1ajavac java \u6267\u884c\u5668\uff1ajava \u6587\u6863\u751f\u6210\u5668\uff1ajavadoc java \u6253\u5305\u5668\uff1ajar java \u8c03\u8bd5\u5668\uff1ajdb","title":"Java \u8fd0\u884c\u673a\u5236 - \u8de8\u5e73\u53f0\u7684\u539f\u56e0"},{"location":"languages/java/basic/history/#_1","text":"\u5bf9\u8c61\u7684\u542b\u4e49\uff1a \u73b0\u5b9e\u4e16\u754c\u4e2d\uff1a\u4e00\u4e2a\u5ba2\u89c2\u5b9e\u4f53 \u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff1a\u4e00\u4e2a\u53ef\u6807\u8bc6\u7684\u5b58\u50a8\u533a\u57df \u7c7b\uff1a\u5177\u6709\u5171\u540c\u5c5e\u6027\uff08\u53d8\u91cf\uff0cfield\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff0cmethod\uff09\u7684\u5bf9\u8c61\u96c6\u5408 \u7c7b\u662f\u5bf9\u8c61\u7684\u62bd\u8c61\uff08\u6a21\u677f\uff09\uff0c\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u6ce8\uff1a\u7c7b\u548c\u5bf9\u8c61\u6709\u65f6\u90fd\u79f0\u4e3a\u201c\u5bf9\u8c61\u201d\uff0c\u4e3a\u4e86\u660e\u786e\u8d77\u89c1\uff0c\u540e\u8005\u79f0\u4e3a\u5bf9\u8c61\u5b9e\u4f8b\u3002 \u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u6709 \u5c01\u88c5\u6027\u3001\u7ee7\u627f\u6027\u3001\u591a\u6001\u6027 \u4e09\u5927\u7279\u5f81\u3002","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"languages/java/basic/history/#_2","text":"\u6a21\u5757\u5316\uff1a\u5c06\u5c5e\u6027\u548c\u884c\u4e3a\u5c01\u88c5\u5728\u7c7b\u4e2d\uff0c\u7a0b\u5e8f\u5b9a\u4e49\u5f88\u591a\u7c7b\u3002 \u4fe1\u606f\u9690\u853d\uff1a\u5c06\u7c7b\u7684\u7ec6\u8282\u90e8\u5206\u9690\u85cf\u8d77\u6765\uff0c\u7528\u6237\u53ea\u901a\u8fc7\u67d0\u4e2a\u540e\u4fdd\u62a4\u7684\u63a5\u53e3\u8bbf\u95ee\u67d0\u4e2a\u7c7b\u3002","title":"\u5c01\u88c5"},{"location":"languages/java/basic/history/#inheritance","text":"\u7ee7\u627f\u7684\u672c\u8d28\u662f\u57fa\u4e00\u79cd \u7c7b\u548c\u5b50\u7c7b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u7684\u65b9\u6cd5 \u3002\u4ece\u800c\u5927\u5927\u63d0\u9ad8\u4e86\u7f16\u7a0b\u6548\u7387\u3002 \u7ee7\u627f\u7684\u597d\u5904\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a \u66f4\u597d\u5730\u8fdb\u884c \u62bd\u8c61\u4e0e\u5206\u79bb \u589e\u5f3a\u4ee3\u7801\u7684 \u91cd\u7528\u7387 \u63d0\u9ad8 \u53ef\u7ef4\u62a4\u6027","title":"\u7ee7\u627f\uff08inheritance\uff09"},{"location":"languages/java/basic/history/#polymorphism","text":"\u8ba9\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5728\u63a5\u6536\u540c\u4e00\u4e2a\u6307\u4ee4\uff08\u65b9\u6cd5\uff09\u7684\u65f6\u5019\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u5176\u4e2d\u6c14\u8282\u7684\u5b9e\u73b0\u5219\u7531\u63a5\u6536\u5bf9\u8c61\u81ea\u884c\u51b3\u5b9a\u3002","title":"\u591a\u6001\uff08polymorphism\uff09"},{"location":"languages/java/basic/history/#_3","text":"\u8ba4\u4e3a\u5ba2\u89c2\u4e16\u754c\u6709\u5404\u79cd\u5bf9\u8c61\u7ec4\u6210 \u7a0b\u5e8f\u7684\u5206\u6790\u548c\u8bbe\u8ba1\u90fd\u56f4\u7ed5\u7740 \u6709\u54ea\u4e9b\u7c7b \u6885\u683c\u96f7\u6709\u54ea\u4e9b\u5c5e\u6027\u3001\u54ea\u4e9b\u65b9\u6cd5 \u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u5982\u7ee7\u627f\u3001\u5173\u8054\uff09 \u5bf9\u8c61\u4e4b\u95f4\u53d1\u9001\u6d88\u606f\uff08\u8c03\u7528\u65b9\u6cd5\uff09","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8981\u70b9"},{"location":"languages/java/basic/multi_thread/","text":"\u591a\u7ebf\u7a0b","title":"\u591a\u7ebf\u7a0b"},{"location":"languages/java/basic/multi_thread/#_1","text":"","title":"\u591a\u7ebf\u7a0b"},{"location":"languages/java/basic/programming_basic/","text":"\u7b80\u5355\u7684 Java \u7a0b\u5e8f Java \u7a0b\u5e8f\u7684\u7c7b\u578b\u4e0e\u57fa\u672c\u6784\u6210 Java \u7a0b\u5e8f\u6709\u5f88\u591a\u79cd\u7c7b\u578b\u3002\u800c\u5728 Java SE \u4e2d\u4e3b\u8981\u6709\u4e24\u79cd\u7c7b\u578b\uff1a Application \u548c Applet \uff0c\u4e8c\u8005\u7684\u7ed3\u6784\u548c\u8fd0\u884c\u73af\u5883\u6709\u6240\u4e0d\u540c\uff1a Application\uff1a\u524d\u8005\u662f\u72ec\u7acb\u7a0b\u5e8f\uff0c\u9700\u8981\u6267\u884c\u5668\uff08JVM\uff09\u6765\u8fd0\u884c Applet\uff1a\u5d4c\u5728 HTML \u7f51\u9875\u4e2d\u7684\u975e\u72ec\u7acb\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u7531\u4e13\u95e8\u7684 Applet View \u6765\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u7531 Web \u6d4f\u89c8\u5668\uff08\u8c03\u7528 JMV\uff09\u6765\u8fd0\u884c Application HelloWorld.java public class HelloWorldApp { public static void main ( String args [] ) { System . out . println ( \"Hello World!\" ); } } \u8981\u70b9\uff1a class \u662f\u4e3b\u4f53 public \u7c7b\u540d\u4e0e\u6587\u4ef6\u540c\u540d main() \u7684\u5199\u6cd5\u662f\u56fa\u5b9a\u7684 Applet \u6ca1\u6709\u5165\u53e3\u51fd\u6570 main\uff0c\u6545\u4e3a\u975e\u72ec\u7acb\u8fd0\u884c\u3002 \u5b57\u8282\u7801\u6587\u4ef6 .class \u9700\u8981\u501f\u52a9\u652f\u6301Java\u7684\u6d4f\u89c8\u5668\u6765\u8fd0\u884c\u3002 \u7a0b\u5e8f\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u548c\u8fd0\u884c \u7f16\u8f91\uff1a\u7eaf\u6587\u672c\u6587\u4ef6 .java \u2014\u2014 \u6ce8\u610f\u6587\u4ef6\u540d\u8981\u548c public \u7684\u7c7b\u540d\u4e00\u81f4\u3002 \u7f16\u8bd1\uff1aJDK \u4e2d\u7684 javac \u5de5\u5177\u5c06\u6e90\u6587\u4ef6\uff08.java\uff09\u8f6c\u6362\u4e3a\u5b57\u8282\u7801\u6587\u4ef6\uff08.class\uff09 \u2014\u2014 \u5b57\u8282\u7801\u6587\u4ef6\u4e2d\u5305\u542b\u7684\u662f JVM \u6307\u4ee4\u3002 \u8fd0\u884c\uff1aJDK \u4e2d\u7684 java \u5de5\u5177 \u2014\u2014 \u6ce8\u610f java \u5de5\u5177\u540e\u8ddf\u7684\u662f \u7c7b \u4e0d\u662f \u6587\u4ef6 \u3002 \u8bbe\u5b9a classpath \u5728 java \u53ca java \u547d\u4ee4\u884c\u4e0a\u4f7f\u7528 -classpath/-cp \u9009\u9879\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u7684\u7c7b\u5e93\uff1a javac -cp libxx.jar Source.java java -cp libxx.jar Source \u4f7f\u7528 package \u65f6\u7684\u7f16\u8bd1 \u5b9e\u9645\u76ee\u5f55\u7ed3\u6784\u8981\u4e0e \u00b7package\u00b7 \u5173\u952e\u5b57\u540e\u8ddf\u7684\u6587\u4ef6\u8def\u5f84\u4e00\u81f4\u3002 \u7f16\u8bd1\u53ca\u8fd0\u884c\uff1a # Use -d option to make the dir for target classes. javac -d classes path/to/dir1/*.java path/to/dir2/*.java path/to/dir3/*.java # Use -cp option to specify the dir in which to find target class. java -cp classes path.to.target.Class Applet \u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c Java Applet \u7a0b\u5e8f\u5fc5\u987b\u5d4c\u5165\u5230 HTML \u4e2d\uff0c\u5e76\u7531\u8d1f\u8d23\u89e3\u91ca HTML \u6587\u4ef6\u7684 WWW \u6d4f\u89c8\u5668\u5145\u5f53\u89e3\u91ca\u5668\uff0c\u89e3\u91ca\u6267\u884c\u7a0b\u5e8f\u3002 Java Applet \u5728 WWW \u4e2d\u5f15\u5165\u4e86\u52a8\u6001\u4ea4\u4e92\u7684\u5185\u5bb9\u3002 \u5728\u7f16\u8bd1\u5f97\u5230 .class \u6587\u4ef6\u540e\uff0c\u4f7f\u7528 HTML \u4e2d\u7684 \u6807\u7b7e\u6765\u5d4c\u5165 Applet\u3002 \u53ef\u4ee5\u4f7f\u7528\u3000 appletViewer \u6765\u6267\u884c\u5185\u5d4c\u3000Applet \u7684 HTML \u6587\u4ef6\u3002 appletViewer xxx_including_applet.html \u4ece Java8 \u5f00\u59cb\uff0c Applet \u7684\u8fd0\u884c\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u7531\u6b64\u4e5f\u8bde\u751f\u4e86\u5f88\u591a\u66ff\u4ee3\u65b9\u6848\uff0c\u5982 Flash \u3001 SilverLight \u7b49\u3002\u540e\u6765\u66f4\u76f4\u63a5\u7684\u76f4\u63a5\u4f7f\u7528 JavaScript \u6216 HTML5 \u91cc\u7684\u4e00\u4e9b\u529f\u80fd\u6765\u5b9e\u73b0\u7f51\u9875\u91cc\u9762\u7684\u4ea4\u4e92\u529f\u80fd\u3002 JDK\u4e2d\u7684\u5176\u4ed6\u51e0\u4e2a\u5de5\u5177 javac\uff1a\u7f16\u8bd1 java\uff1a\u8fd0\u884c\uff08\u7ec8\u7aef \u6216 GUI\uff09 appletViewer\uff1a\u8fd0\u884c Applet \u7a0b\u5e8f jar\uff1a\u6253\u5305\u5de5\u5177 javadoc\uff1a\u751f\u6210\u6587\u6863 javap\uff1a\u67e5\u770b\u7c7b\u4fe1\u606f\u53ca\u53cd\u6c47\u7f16 ... \u4f7f\u7528 jar \u6253\u5305 \u6253\u5305 javac -cvfm A.jar A.man A.class \u5176\u4e2d c \uff08create \u521b\u5efa\uff09\uff0c v \uff08verbose \u8be6\u60c5\uff09\uff0c f \u4e3a\u8f93\u51fa\u6587\u4ef6\u540d\uff0c m \u4e3a\u6e05\u5355\u6587\u4ef6\u540d\u3002 \u8fd0\u884c java -jar A.jar \u4e00\u822c\u6e05\u5355\u6587\u4ef6\u4f1a\u5199\u660e jar \u5305\u7684 \u7248\u672c \u3001 \u6839\u8def\u5f84 \u548c \u4e3b\u7c7b\u540d Manifest-Version: 1.0 Class-Path: . Main-Class: A \u6ce8\uff1a\u6e05\u5355\u6587\u4ef6\u53ef\u4ee5\u4efb\u610f\u547d\u540d\uff0c\u5e38\u89c1\u7528\u6cd5\u662f MANIFEST.MF\u3002 \u4f7f\u7528 javadoc \u751f\u6210\u6587\u6863 javadoc -d \u76ee\u5f55\u540d xxx.java /** */ \u4e2d\u7684\u5185\u5bb9\u53ef\u4ee5\u7528\u4e00\u4e0b\u6807\u8bb0\uff1a @author \uff1a\u7c7b\u8bf4\u660e\uff1b\u6807\u660e\u5f00\u53d1\u8be5\u7c7b\u6a21\u5757\u7684\u4f5c\u8005 @version \uff1a\u7c7b\u8bf4\u660e\uff1b\u6807\u660e\u8be5\u7c7b\u6a21\u5757\u7684\u7248\u672c @see \uff1a\u7c7b\u3001\u5c5e\u6027\u3001\u65b9\u6cd5\u7684\u8bf4\u660e\uff1b\u53c2\u8003\u4e13\u9879\uff0c\u5373\u76f8\u5173\u4e3b\u9898 @param \uff1a\u65b9\u6cd5\u8bf4\u660e\uff1b\u5bf9\u65b9\u6cd5\u4e2d\u67d0\u53c2\u6570\u7684\u8bf4\u660e @return \uff1a\u65b9\u6cd5\u8bf4\u660e\uff1b\u5bf9\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u8bf4\u660e @exception \uff1a\u65b9\u6cd5\u8bf4\u660e\uff0c\u5bf9\u65b9\u6cd5\u53ef\u80fd\u8dd1\u51fa\u5f02\u5e38\u7684\u8bf4\u660e Java API \u7684\u6587\u6863 \u5b98\u65b9\u6587\u6863\uff1a https://docs.oracle.com/javase/8/docs/api/index.html javap \u4ea7\u770b\u7c7b\u4fe1\u606f\u548c\u53cd\u6c47\u7f16 \u67e5\u770b\u7c7b\u4fe1\u606f javap \u7c7b\u540d \u53cd\u6c47\u7f16 javap -c \u7c7b\u540d \u8f93\u51fa\u7684\u662f JVM \u6307\u4ee4\u3002","title":"\u7b80\u5355\u7684 Java \u7a0b\u5e8f"},{"location":"languages/java/basic/programming_basic/#java","text":"","title":"\u7b80\u5355\u7684 Java \u7a0b\u5e8f"},{"location":"languages/java/basic/programming_basic/#java_1","text":"Java \u7a0b\u5e8f\u6709\u5f88\u591a\u79cd\u7c7b\u578b\u3002\u800c\u5728 Java SE \u4e2d\u4e3b\u8981\u6709\u4e24\u79cd\u7c7b\u578b\uff1a Application \u548c Applet \uff0c\u4e8c\u8005\u7684\u7ed3\u6784\u548c\u8fd0\u884c\u73af\u5883\u6709\u6240\u4e0d\u540c\uff1a Application\uff1a\u524d\u8005\u662f\u72ec\u7acb\u7a0b\u5e8f\uff0c\u9700\u8981\u6267\u884c\u5668\uff08JVM\uff09\u6765\u8fd0\u884c Applet\uff1a\u5d4c\u5728 HTML \u7f51\u9875\u4e2d\u7684\u975e\u72ec\u7acb\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u7531\u4e13\u95e8\u7684 Applet View \u6765\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u7531 Web \u6d4f\u89c8\u5668\uff08\u8c03\u7528 JMV\uff09\u6765\u8fd0\u884c","title":"Java \u7a0b\u5e8f\u7684\u7c7b\u578b\u4e0e\u57fa\u672c\u6784\u6210"},{"location":"languages/java/basic/programming_basic/#application","text":"HelloWorld.java public class HelloWorldApp { public static void main ( String args [] ) { System . out . println ( \"Hello World!\" ); } } \u8981\u70b9\uff1a class \u662f\u4e3b\u4f53 public \u7c7b\u540d\u4e0e\u6587\u4ef6\u540c\u540d main() \u7684\u5199\u6cd5\u662f\u56fa\u5b9a\u7684","title":"Application"},{"location":"languages/java/basic/programming_basic/#applet","text":"\u6ca1\u6709\u5165\u53e3\u51fd\u6570 main\uff0c\u6545\u4e3a\u975e\u72ec\u7acb\u8fd0\u884c\u3002 \u5b57\u8282\u7801\u6587\u4ef6 .class \u9700\u8981\u501f\u52a9\u652f\u6301Java\u7684\u6d4f\u89c8\u5668\u6765\u8fd0\u884c\u3002","title":"Applet"},{"location":"languages/java/basic/programming_basic/#_1","text":"\u7f16\u8f91\uff1a\u7eaf\u6587\u672c\u6587\u4ef6 .java \u2014\u2014 \u6ce8\u610f\u6587\u4ef6\u540d\u8981\u548c public \u7684\u7c7b\u540d\u4e00\u81f4\u3002 \u7f16\u8bd1\uff1aJDK \u4e2d\u7684 javac \u5de5\u5177\u5c06\u6e90\u6587\u4ef6\uff08.java\uff09\u8f6c\u6362\u4e3a\u5b57\u8282\u7801\u6587\u4ef6\uff08.class\uff09 \u2014\u2014 \u5b57\u8282\u7801\u6587\u4ef6\u4e2d\u5305\u542b\u7684\u662f JVM \u6307\u4ee4\u3002 \u8fd0\u884c\uff1aJDK \u4e2d\u7684 java \u5de5\u5177 \u2014\u2014 \u6ce8\u610f java \u5de5\u5177\u540e\u8ddf\u7684\u662f \u7c7b \u4e0d\u662f \u6587\u4ef6 \u3002","title":"\u7a0b\u5e8f\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u548c\u8fd0\u884c"},{"location":"languages/java/basic/programming_basic/#classpath","text":"\u5728 java \u53ca java \u547d\u4ee4\u884c\u4e0a\u4f7f\u7528 -classpath/-cp \u9009\u9879\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u7684\u7c7b\u5e93\uff1a javac -cp libxx.jar Source.java java -cp libxx.jar Source","title":"\u8bbe\u5b9a classpath"},{"location":"languages/java/basic/programming_basic/#package","text":"\u5b9e\u9645\u76ee\u5f55\u7ed3\u6784\u8981\u4e0e \u00b7package\u00b7 \u5173\u952e\u5b57\u540e\u8ddf\u7684\u6587\u4ef6\u8def\u5f84\u4e00\u81f4\u3002 \u7f16\u8bd1\u53ca\u8fd0\u884c\uff1a # Use -d option to make the dir for target classes. javac -d classes path/to/dir1/*.java path/to/dir2/*.java path/to/dir3/*.java # Use -cp option to specify the dir in which to find target class. java -cp classes path.to.target.Class","title":"\u4f7f\u7528 package \u65f6\u7684\u7f16\u8bd1"},{"location":"languages/java/basic/programming_basic/#applet_1","text":"Java Applet \u7a0b\u5e8f\u5fc5\u987b\u5d4c\u5165\u5230 HTML \u4e2d\uff0c\u5e76\u7531\u8d1f\u8d23\u89e3\u91ca HTML \u6587\u4ef6\u7684 WWW \u6d4f\u89c8\u5668\u5145\u5f53\u89e3\u91ca\u5668\uff0c\u89e3\u91ca\u6267\u884c\u7a0b\u5e8f\u3002 Java Applet \u5728 WWW \u4e2d\u5f15\u5165\u4e86\u52a8\u6001\u4ea4\u4e92\u7684\u5185\u5bb9\u3002 \u5728\u7f16\u8bd1\u5f97\u5230 .class \u6587\u4ef6\u540e\uff0c\u4f7f\u7528 HTML \u4e2d\u7684 \u6807\u7b7e\u6765\u5d4c\u5165 Applet\u3002 \u53ef\u4ee5\u4f7f\u7528\u3000 appletViewer \u6765\u6267\u884c\u5185\u5d4c\u3000Applet \u7684 HTML \u6587\u4ef6\u3002 appletViewer xxx_including_applet.html \u4ece Java8 \u5f00\u59cb\uff0c Applet \u7684\u8fd0\u884c\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u7531\u6b64\u4e5f\u8bde\u751f\u4e86\u5f88\u591a\u66ff\u4ee3\u65b9\u6848\uff0c\u5982 Flash \u3001 SilverLight \u7b49\u3002\u540e\u6765\u66f4\u76f4\u63a5\u7684\u76f4\u63a5\u4f7f\u7528 JavaScript \u6216 HTML5 \u91cc\u7684\u4e00\u4e9b\u529f\u80fd\u6765\u5b9e\u73b0\u7f51\u9875\u91cc\u9762\u7684\u4ea4\u4e92\u529f\u80fd\u3002","title":"Applet \u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c"},{"location":"languages/java/basic/programming_basic/#jdk","text":"javac\uff1a\u7f16\u8bd1 java\uff1a\u8fd0\u884c\uff08\u7ec8\u7aef \u6216 GUI\uff09 appletViewer\uff1a\u8fd0\u884c Applet \u7a0b\u5e8f jar\uff1a\u6253\u5305\u5de5\u5177 javadoc\uff1a\u751f\u6210\u6587\u6863 javap\uff1a\u67e5\u770b\u7c7b\u4fe1\u606f\u53ca\u53cd\u6c47\u7f16 ...","title":"JDK\u4e2d\u7684\u5176\u4ed6\u51e0\u4e2a\u5de5\u5177"},{"location":"languages/java/basic/programming_basic/#jar","text":"\u6253\u5305 javac -cvfm A.jar A.man A.class \u5176\u4e2d c \uff08create \u521b\u5efa\uff09\uff0c v \uff08verbose \u8be6\u60c5\uff09\uff0c f \u4e3a\u8f93\u51fa\u6587\u4ef6\u540d\uff0c m \u4e3a\u6e05\u5355\u6587\u4ef6\u540d\u3002 \u8fd0\u884c java -jar A.jar \u4e00\u822c\u6e05\u5355\u6587\u4ef6\u4f1a\u5199\u660e jar \u5305\u7684 \u7248\u672c \u3001 \u6839\u8def\u5f84 \u548c \u4e3b\u7c7b\u540d Manifest-Version: 1.0 Class-Path: . Main-Class: A \u6ce8\uff1a\u6e05\u5355\u6587\u4ef6\u53ef\u4ee5\u4efb\u610f\u547d\u540d\uff0c\u5e38\u89c1\u7528\u6cd5\u662f MANIFEST.MF\u3002","title":"\u4f7f\u7528 jar \u6253\u5305"},{"location":"languages/java/basic/programming_basic/#javadoc","text":"javadoc -d \u76ee\u5f55\u540d xxx.java /** */ \u4e2d\u7684\u5185\u5bb9\u53ef\u4ee5\u7528\u4e00\u4e0b\u6807\u8bb0\uff1a @author \uff1a\u7c7b\u8bf4\u660e\uff1b\u6807\u660e\u5f00\u53d1\u8be5\u7c7b\u6a21\u5757\u7684\u4f5c\u8005 @version \uff1a\u7c7b\u8bf4\u660e\uff1b\u6807\u660e\u8be5\u7c7b\u6a21\u5757\u7684\u7248\u672c @see \uff1a\u7c7b\u3001\u5c5e\u6027\u3001\u65b9\u6cd5\u7684\u8bf4\u660e\uff1b\u53c2\u8003\u4e13\u9879\uff0c\u5373\u76f8\u5173\u4e3b\u9898 @param \uff1a\u65b9\u6cd5\u8bf4\u660e\uff1b\u5bf9\u65b9\u6cd5\u4e2d\u67d0\u53c2\u6570\u7684\u8bf4\u660e @return \uff1a\u65b9\u6cd5\u8bf4\u660e\uff1b\u5bf9\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u8bf4\u660e @exception \uff1a\u65b9\u6cd5\u8bf4\u660e\uff0c\u5bf9\u65b9\u6cd5\u53ef\u80fd\u8dd1\u51fa\u5f02\u5e38\u7684\u8bf4\u660e","title":"\u4f7f\u7528 javadoc \u751f\u6210\u6587\u6863"},{"location":"languages/java/basic/programming_basic/#java-api","text":"\u5b98\u65b9\u6587\u6863\uff1a https://docs.oracle.com/javase/8/docs/api/index.html","title":"Java API \u7684\u6587\u6863"},{"location":"languages/java/basic/programming_basic/#javap","text":"\u67e5\u770b\u7c7b\u4fe1\u606f javap \u7c7b\u540d \u53cd\u6c47\u7f16 javap -c \u7c7b\u540d \u8f93\u51fa\u7684\u662f JVM \u6307\u4ee4\u3002","title":"javap \u4ea7\u770b\u7c7b\u4fe1\u606f\u548c\u53cd\u6c47\u7f16"},{"location":"languages/java/basic/tools_and_algorithm/","text":"\u5de5\u5177\u7c7b\u53ca\u5e38\u7528\u7b97\u6cd5 \u5185\u5bb9\u63d0\u8981\uff1a Java\u8bed\u8a00\u7684\u57fa\u7840\u7c7b \uff0c \u5b57\u7b26\u4e32\u53ca\u65e5\u671f \uff0c \u96c6\u5408 \uff0c \u6392\u5e8f\u4e0e\u67e5\u627e \uff0c \u6cdb\u578b \uff0c \u5e38\u7528\u7b97\u6cd5 Java \u4e2d\u7684\u57fa\u7840\u7c7b Java \u57fa\u7840\u7c7b\u5e93\uff1a java.lang Java \u8bed\u8a00\u6838\u5fc3\u7c7b\u5e93 Java \u662f\u81ea\u52a8\u5bfc\u5165 java.lang.* \u7684 java.util \u5b9e\u7528\u5de5\u5177 java.io \u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u7c7b\u5e93 java.awt , javax.swing \u56fe\u5f62\u7528\u6237\u754c\u9762\uff08GUI\uff09\u7684\u7c7b\u5e93 java.net \u7f51\u7edc\u529f\u80fd\u7684\u7c7b\u5e93 java.sql \u6570\u636e\u5e93\u8bbf\u95ee\u7684\u7c7b\u5e93 \u6587\u6863\uff1a \u5728\u7ebf JDK API \u6587\u6863 \uff0c \u6587\u6863\u4e0b\u8f7d \uff0c \u66f4\u591a\u6587\u6863 \u540c\u65f6\u4e5f\u53ef\u4ee5\u9605\u8bfb JDK \u6e90\u7801 \uff0c\u4e00\u822c\u4f4d\u4e8e JDK \u76ee\u5f55\u4e0b\u7684 source.zip \u6587\u4ef6 Object \u7c7b Object \u662f\u6240\u6709\u7c7b\u7684\u76f4\u63a5\u6216\u95f4\u63a5\u7236\u7c7b\u3002\u4ed6\u7684\u5b58\u5728 \u4fdd\u8bc1\u4e86\u6240\u6709\u7c7b\u7684\u4e00\u81f4\u6027 \u3002 equals() \u65b9\u6cd5 \u7b80\u5355\u5730\u8bf4\uff0c equals() \u5224\u65ad\u5185\u5bb9\uff0c == \u5224\u65ad\u5f15\u7528\uff1a Integer one = new Integer ( 1 ); Integer anotherOne = new Integer ( 1 ); if ( one == anotherOne ) { // false // ... } if ( one . euqals ( anotherOne )) { // true // ... } \u5982\u679c\u8986\u76d6 equals() \u65b9\u6cd5\uff0c\u4e00\u822c\u4e5f\u8981\u8986\u76d6 hashCode() \u65b9\u6cd5\u3002\u76ee\u6807\u662f\u8ba9 \"equal\" \u7684\u5bf9\u8c61 \"hashCode\" \u5c3d\u91cf\u76f8\u7b49\u3002 getClass() \u65b9\u6cd5 getClass() \u662f\u4e00\u4e2a final \u65b9\u6cd5\uff0c\u4e0d\u80fd\u88ab\u91cd\u5199\uff08\u8986\u76d6\uff09\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5728\u8fd0\u884c\u65f6\u6240\u5bf9\u5e94\u7684\u7c7b\u7684\u8868\u793a\uff1a void printClassName ( Object obj ) { System . out . println ( \"The object's class is \" + obj . getClass (). getName ()); } Object createNewInstanceOf ( Object obj ) { return obj . getClass (). newInstance (); } toString() \u65b9\u6cd5 toString() \u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u5e38\u7528\u4e8e\u663e\u793a\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u6253\u5370\u51fd\u6570\u5b9e\u8d28\u4e0a\u5c31\u8c03\u7528\u4e86\u5bf9\u8c61\u7684 toString \u65b9\u6cd5\uff1a System . out . println ( person ); \u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u7684 + \u53f7 \"current person is \" + person ; \u901a\u8fc7\u91cd\u8f7d toString() \u65b9\u6cd5\u53ef\u4ee5\u9002\u5f53\u663e\u793a\u5bf9\u8c61\u4fe1\u606f\u4ee5\u8fdb\u884c\u8c03\u8bd5\u3002 finalize() \u5728\u5783\u573e\u6536\u96c6\u524d\u6e05\u9664\u5bf9\u8c61\u3002 notify() , notifAall() , wait() \u4e0e\u7ebf\u7a0b\u76f8\u5173\u7684\u51fd\u6570\u3002 \u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u7c7b \u4e3a\u4e86\u9002\u5e94\u9762\u5411\u5bf9\u8c61\u7684\u73af\u5883\uff0cJava \u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e5f\u63d0\u4f9b\u4e86\u5305\u88c5\u7c7b\uff08wrapper\uff09\u3002\u5b83\u4eec\u662f\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u9762\u5411\u5bf9\u8c61\u7684\u4ee3\u8868\u3002 \u4e0e 8 \u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f8\u5bf9\u5e94\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u7c7b\u4e5f\u6709 8 \u79cd\uff1a Character , Byte , Short , Integer , Long , Float , Double , Boolean \u3002 \u5305\u88c5\u7c7b\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e00\u4e9b\u5e38\u6570\uff0c\u4f8b\u5982\uff1a Integer.MAX_VALUE , Double.NaN , Double.POSITIVE_INFINITY \u4e0e\u5b57\u7b26\u8f6c\u76f8\u4e92\u8f6c\u6362\u7684\u51fd\u6570\uff1a valueOf(String) , toString() \u901a\u8fc7 xxxValue() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6240\u5305\u88c5\u7684\u503c\uff0c\u4f8b\u5982\uff1a Integer \u5bf9\u8c61\u7684 intValue() \u65b9\u6cd5 \u5bf9\u8c61\u4e2d\u6240\u5305\u88c5\u7684\u503c\u662f\u4e0d\u53ef\u6539\u53d8\uff08immutable\uff09\u7684\u3002\u5982\u8981\u6539\u53d8\u53ea\u80fd\u751f\u6210\u65b0\u7684\u5bf9\u8c61\uff0c\u7531\u6b64\u4fdd\u8bc1\u5bf9\u8c61\u672c\u8eab\u7684 \u7a33\u5b9a\u6027 \u3002 toString() , equals() \u7b49\u65b9\u6cd5\u8fdb\u884c\u4e86\u8986\u76d6 \u9664\u4e86\u4ee5\u4e0a\u7279\u70b9\uff0c\u6709\u7684\u7c7b\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b9e\u7528\u7684\u65b9\u6cd5\u4ee5\u4fbf\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c Double \u7c7b\u5c31\u63d0\u4f9b\u4e86 parseDouble() , max , min \u65b9\u6cd5\u7b49\u3002 \u5728 JDK1.5 \u4ee5\u4e0a\u63d0\u4f9b\u4e86 \u5305\u88c5\uff08boxing\uff09\u4e0e\u62c6\u5305\uff08unboxing\uff09 \u529f\u80fd\uff1a Integer I = 5 ; // Integer I = Integer.valueOf(5); int i = I ; // int i = I.intValue(); Math \u7c7b \u5c01\u88c5\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u5e38\u7528\u7684 \u9759\u6001\u51fd\u6570 \u548c \u9759\u6001\u5e38\u91cf \u3002 System \u7c7b \u5728 Java \u4e2d\uff0c\u7cfb\u7edf\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u83b7\u5f97\u3002 System.getProperty(String name) \u65b9\u6cd5\u83b7\u5f97\u7279\u5b9a\u7684\u7cfb\u7edf\u5c5e\u6027\u503c\u3002 System.getProperties() \u65b9\u6cd5\u83b7\u5f97\u4e00\u4e2a Properties \u7c7b\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u53ef\u7528\u7684\u7cfb\u7edf\u5c5e\u6027\u4fe1\u606f\u3002 \u5728\u547d\u4ee4\u884c\u8fd0\u884c Java \u7a0b\u5e8f\u65f6\u53ef\u4f7f\u7528 -D \u9009\u9879\u6dfb\u52a0\u65b0\u7684\u7cfb\u7edf\u5c5e\u6027\u3002 java -D var=value MyProg \u5b57\u7b26\u4e32\u548c\u65e5\u671f \u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a String \u7c7b \uff1a\u4e00\u7ecf\u521b\u5efa\u65e0\u6cd5\u4fee\u6539\uff0c\u5373 immutable StringBuffer , StringBuilder \u7c7b \uff1a\u521b\u5efa\u4e4b\u540e\u5141\u8bb8\u518d\u505a\u4fee\u6539 \u5176\u4e2d StringBuilder \u662f JDK1.5 \u589e\u52a0\u7684\uff0c\u5b83\u662f \u975e\u7ebf\u7a0b\u5b89\u5168\u7684 \uff0c\u6240\u4ee5\u6267\u884c\u6548\u7387\u66f4\u9ad8 \u7279\u522b\u6ce8\u610f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 String \u7684 += \u53ef\u80fd\u4f1a\u5e26\u6765\u6548\u7387\u95ee\u9898\u3002\u56e0\u4e3a immutable \u7684\u7279\u6027\u51b3\u5b9a\u5b83\u53ea\u80fd\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002 String \u7c7b String \u7c7b\u5bf9\u8c61\u4fdd\u5b58\u4e0d\u53ef\u4fee\u6539\u7684 Unicode \u5b57\u7b26\u5e8f\u5217 String \u7c7b\u7684\u4e0b\u8ff0\u65b9\u6cd5\u80fd\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 String \u5bf9\u8c61\u5b9e\u4f8b\uff1a concat , replace , replaceAll , substring , toLowerCase , toUpperCase , trim , toString \u67e5\u627e\uff1a endsWith , startsWith , indexOf , lastIndexOf \u6bd4\u8f83\uff1a equals , equalsIgnoreCase \u5b57\u7b26\u53ca\u957f\u5ea6\uff1a charAt , length \u6b64\u5916\uff0cJDK1.5 \u589e\u52a0\u4e86 format \u51fd\u6570\u3002 \u9664\u4e86 immutable \u7684\u7279\u70b9\u5916\uff0c\u8fd8\u8981\u6ce8\u610f String \u5e38\u91cf \u7684\u5185\u90e8\u5316\uff08interned\uff09\u95ee\u9898\u3002\u5373\u540c\u6837\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u662f \u5408\u540c \uff08\u6307\u5411\u540c\u4e00\u4e2a\u5f15\u7528\uff09\u7684\u3002 \u8fd9\u4fdd\u8bc1\u4e86 \"abc\" == \"abc\" \uff0c\u4f46 \"abc\" != new String(\"abc\") StringBuffer \u7c7b StringBuffer \u7c7b\u5bf9\u8c61\u4fdd\u5b58\u53ef\u4fee\u6539\u7684 Unicode \u5b57\u7b26\u5e8f\u5217\uff0c StringBuilder \u7c7b\u4f3c\uff0c\u5b83\u6548\u7387\u66f4\u9ad8\uff0c\u4e0d\u7528\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u6027\u3002 \u6784\u9020\u65b9\u6cd5\uff1a StringBuffer() , StringBuffer(int capacity) , StringBuffer(String initialString) \u5b9e\u73b0\u4fee\u6539\u64cd\u4f5c\u7684\u65b9\u6cd5\uff1a append , insert , reverse , setCharAt , setLength \u5b57\u7b26\u4e32\u7684\u5206\u5272 java.util.StringToken \u7c7b\u63d0\u4f9b\u4e86\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\u7684\u529f\u80fd\u3002 \u6784\u9020\uff1a StringTokenizer(String str, String delim); \u8be5\u7c7b\u7684\u91cd\u8981\u65b9\u6cd5\u6709\uff1a public int countTokens (); // \u5206\u5272\u4e32\u7684\u4e2a\u6570 public boolean hasMoreTokens (); // \u662f\u5426\u8fd8\u6709\u5206\u5272\u4e32 public String nextToken (); // \u5f97\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u4e32 String \u7c7b\u7684 matches , replaceAll , split \u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u65e5\u671f\u7c7b Calendar \u662f Java \u5185\u7f6e\u7684\u65e5\u5386\u7c7b\uff0c Calendar.getTime() \u5f97\u5230\u4e00\u4e2a Date \u7c7b\u7684\u5b9e\u4f8b\uff0c Data.getTime \u5f97\u5230\u4e00\u4e2a long \u3002 SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\") \u7c7b\u6709 .format , .parse \u65b9\u6cd5\u7528\u6765\u683c\u5f0f\u5316\u3001\u89e3\u6790\u65f6\u95f4\u683c\u5f0f\u3002 Java8 \u4e2d\u5f15\u5165\u4e86 time api import java.time.* ; import java.time.format.* ; \u5176\u4e2d\uff0c\u4e3b\u8981\u7684\u7c7b\u6709\uff1a Instant \u65f6\u523b\uff0c Clock \u65f6\u533a\uff0c Duration \u65f6\u95f4\u6bb5 \u5e38\u7528\u7684\u7c7b LocalDateTime , LocalDate , LocalTime \uff0c\u5b83\u4eec\u90fd\u652f\u6301 .of , .parse , .format , .plus , .minus \u65b9\u6cd5 DateTimeFormatter \u96c6\u5408 Collection API \u4e09\u5927\u7c7b\uff1a Collection \u63a5\u53e3 List \uff08 Collection \u7684\u5b50\u63a5\u53e3\uff09\uff1a\u6709\u987a\u5e8f\uff0c\u53ef\u91cd\u590d Set \uff08 Collection \u7684\u5b50\u63a5\u53e3\uff09\uff1a\u65e0\u987a\u5e8f\uff0c\u4e0d\u91cd\u590d Map \u63a5\u53e3 \u952e\u503c\u5bf9 \u96c6\u5408 Collection \u63a5\u53e3\u63d0\u4f9b\u5982\u4e0b\u57df\uff1a \u96c6\u5408UML \u4e0b\u56fe\u5c55\u793a\u4e86\u7531 Collection \u6d3e\u751f\u7684\u7c7b\uff1a \u96c6\u5408\u5c42\u6b21\u7ed3\u6784 List List \u63a5\u53e3\uff1a\u7ebf\u6027\u8868\uff08linear list\uff09\u3002 \u4e3b\u8981\u7684\u5b9e\u73b0\u7c7b\u6709\uff1a ArrayList , LinkedList \uff0c\u4ee5\u53ca\u65e9\u671f\u7684 Vector List \u63a5\u53e3\uff1a public interface List < E > extends Collection < E > \u6392\u5e8f\u4e0e\u67e5\u627e \u6cdb\u578b \u5e38\u7528\u7b97\u6cd5","title":"\u5de5\u5177\u7c7b\u53ca\u5e38\u7528\u7b97\u6cd5"},{"location":"languages/java/basic/tools_and_algorithm/#_1","text":"\u5185\u5bb9\u63d0\u8981\uff1a Java\u8bed\u8a00\u7684\u57fa\u7840\u7c7b \uff0c \u5b57\u7b26\u4e32\u53ca\u65e5\u671f \uff0c \u96c6\u5408 \uff0c \u6392\u5e8f\u4e0e\u67e5\u627e \uff0c \u6cdb\u578b \uff0c \u5e38\u7528\u7b97\u6cd5","title":"\u5de5\u5177\u7c7b\u53ca\u5e38\u7528\u7b97\u6cd5"},{"location":"languages/java/basic/tools_and_algorithm/#java","text":"Java \u57fa\u7840\u7c7b\u5e93\uff1a java.lang Java \u8bed\u8a00\u6838\u5fc3\u7c7b\u5e93 Java \u662f\u81ea\u52a8\u5bfc\u5165 java.lang.* \u7684 java.util \u5b9e\u7528\u5de5\u5177 java.io \u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u7c7b\u5e93 java.awt , javax.swing \u56fe\u5f62\u7528\u6237\u754c\u9762\uff08GUI\uff09\u7684\u7c7b\u5e93 java.net \u7f51\u7edc\u529f\u80fd\u7684\u7c7b\u5e93 java.sql \u6570\u636e\u5e93\u8bbf\u95ee\u7684\u7c7b\u5e93 \u6587\u6863\uff1a \u5728\u7ebf JDK API \u6587\u6863 \uff0c \u6587\u6863\u4e0b\u8f7d \uff0c \u66f4\u591a\u6587\u6863 \u540c\u65f6\u4e5f\u53ef\u4ee5\u9605\u8bfb JDK \u6e90\u7801 \uff0c\u4e00\u822c\u4f4d\u4e8e JDK \u76ee\u5f55\u4e0b\u7684 source.zip \u6587\u4ef6","title":"Java \u4e2d\u7684\u57fa\u7840\u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#object","text":"Object \u662f\u6240\u6709\u7c7b\u7684\u76f4\u63a5\u6216\u95f4\u63a5\u7236\u7c7b\u3002\u4ed6\u7684\u5b58\u5728 \u4fdd\u8bc1\u4e86\u6240\u6709\u7c7b\u7684\u4e00\u81f4\u6027 \u3002 equals() \u65b9\u6cd5 \u7b80\u5355\u5730\u8bf4\uff0c equals() \u5224\u65ad\u5185\u5bb9\uff0c == \u5224\u65ad\u5f15\u7528\uff1a Integer one = new Integer ( 1 ); Integer anotherOne = new Integer ( 1 ); if ( one == anotherOne ) { // false // ... } if ( one . euqals ( anotherOne )) { // true // ... } \u5982\u679c\u8986\u76d6 equals() \u65b9\u6cd5\uff0c\u4e00\u822c\u4e5f\u8981\u8986\u76d6 hashCode() \u65b9\u6cd5\u3002\u76ee\u6807\u662f\u8ba9 \"equal\" \u7684\u5bf9\u8c61 \"hashCode\" \u5c3d\u91cf\u76f8\u7b49\u3002 getClass() \u65b9\u6cd5 getClass() \u662f\u4e00\u4e2a final \u65b9\u6cd5\uff0c\u4e0d\u80fd\u88ab\u91cd\u5199\uff08\u8986\u76d6\uff09\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5728\u8fd0\u884c\u65f6\u6240\u5bf9\u5e94\u7684\u7c7b\u7684\u8868\u793a\uff1a void printClassName ( Object obj ) { System . out . println ( \"The object's class is \" + obj . getClass (). getName ()); } Object createNewInstanceOf ( Object obj ) { return obj . getClass (). newInstance (); } toString() \u65b9\u6cd5 toString() \u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u5e38\u7528\u4e8e\u663e\u793a\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u6253\u5370\u51fd\u6570\u5b9e\u8d28\u4e0a\u5c31\u8c03\u7528\u4e86\u5bf9\u8c61\u7684 toString \u65b9\u6cd5\uff1a System . out . println ( person ); \u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u7684 + \u53f7 \"current person is \" + person ; \u901a\u8fc7\u91cd\u8f7d toString() \u65b9\u6cd5\u53ef\u4ee5\u9002\u5f53\u663e\u793a\u5bf9\u8c61\u4fe1\u606f\u4ee5\u8fdb\u884c\u8c03\u8bd5\u3002 finalize() \u5728\u5783\u573e\u6536\u96c6\u524d\u6e05\u9664\u5bf9\u8c61\u3002 notify() , notifAall() , wait() \u4e0e\u7ebf\u7a0b\u76f8\u5173\u7684\u51fd\u6570\u3002","title":"Object \u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#_2","text":"\u4e3a\u4e86\u9002\u5e94\u9762\u5411\u5bf9\u8c61\u7684\u73af\u5883\uff0cJava \u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e5f\u63d0\u4f9b\u4e86\u5305\u88c5\u7c7b\uff08wrapper\uff09\u3002\u5b83\u4eec\u662f\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u9762\u5411\u5bf9\u8c61\u7684\u4ee3\u8868\u3002 \u4e0e 8 \u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\u76f8\u5bf9\u5e94\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u7c7b\u4e5f\u6709 8 \u79cd\uff1a Character , Byte , Short , Integer , Long , Float , Double , Boolean \u3002 \u5305\u88c5\u7c7b\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u4e00\u4e9b\u5e38\u6570\uff0c\u4f8b\u5982\uff1a Integer.MAX_VALUE , Double.NaN , Double.POSITIVE_INFINITY \u4e0e\u5b57\u7b26\u8f6c\u76f8\u4e92\u8f6c\u6362\u7684\u51fd\u6570\uff1a valueOf(String) , toString() \u901a\u8fc7 xxxValue() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u6240\u5305\u88c5\u7684\u503c\uff0c\u4f8b\u5982\uff1a Integer \u5bf9\u8c61\u7684 intValue() \u65b9\u6cd5 \u5bf9\u8c61\u4e2d\u6240\u5305\u88c5\u7684\u503c\u662f\u4e0d\u53ef\u6539\u53d8\uff08immutable\uff09\u7684\u3002\u5982\u8981\u6539\u53d8\u53ea\u80fd\u751f\u6210\u65b0\u7684\u5bf9\u8c61\uff0c\u7531\u6b64\u4fdd\u8bc1\u5bf9\u8c61\u672c\u8eab\u7684 \u7a33\u5b9a\u6027 \u3002 toString() , equals() \u7b49\u65b9\u6cd5\u8fdb\u884c\u4e86\u8986\u76d6 \u9664\u4e86\u4ee5\u4e0a\u7279\u70b9\uff0c\u6709\u7684\u7c7b\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b9e\u7528\u7684\u65b9\u6cd5\u4ee5\u4fbf\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c Double \u7c7b\u5c31\u63d0\u4f9b\u4e86 parseDouble() , max , min \u65b9\u6cd5\u7b49\u3002 \u5728 JDK1.5 \u4ee5\u4e0a\u63d0\u4f9b\u4e86 \u5305\u88c5\uff08boxing\uff09\u4e0e\u62c6\u5305\uff08unboxing\uff09 \u529f\u80fd\uff1a Integer I = 5 ; // Integer I = Integer.valueOf(5); int i = I ; // int i = I.intValue();","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#math","text":"\u5c01\u88c5\u4e86\u4e00\u4e9b\u6570\u5b66\u4e0a\u5e38\u7528\u7684 \u9759\u6001\u51fd\u6570 \u548c \u9759\u6001\u5e38\u91cf \u3002","title":"Math \u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#system","text":"\u5728 Java \u4e2d\uff0c\u7cfb\u7edf\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u83b7\u5f97\u3002 System.getProperty(String name) \u65b9\u6cd5\u83b7\u5f97\u7279\u5b9a\u7684\u7cfb\u7edf\u5c5e\u6027\u503c\u3002 System.getProperties() \u65b9\u6cd5\u83b7\u5f97\u4e00\u4e2a Properties \u7c7b\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u53ef\u7528\u7684\u7cfb\u7edf\u5c5e\u6027\u4fe1\u606f\u3002 \u5728\u547d\u4ee4\u884c\u8fd0\u884c Java \u7a0b\u5e8f\u65f6\u53ef\u4f7f\u7528 -D \u9009\u9879\u6dfb\u52a0\u65b0\u7684\u7cfb\u7edf\u5c5e\u6027\u3002 java -D var=value MyProg","title":"System \u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#_3","text":"\u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a String \u7c7b \uff1a\u4e00\u7ecf\u521b\u5efa\u65e0\u6cd5\u4fee\u6539\uff0c\u5373 immutable StringBuffer , StringBuilder \u7c7b \uff1a\u521b\u5efa\u4e4b\u540e\u5141\u8bb8\u518d\u505a\u4fee\u6539 \u5176\u4e2d StringBuilder \u662f JDK1.5 \u589e\u52a0\u7684\uff0c\u5b83\u662f \u975e\u7ebf\u7a0b\u5b89\u5168\u7684 \uff0c\u6240\u4ee5\u6267\u884c\u6548\u7387\u66f4\u9ad8 \u7279\u522b\u6ce8\u610f\uff1a\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 String \u7684 += \u53ef\u80fd\u4f1a\u5e26\u6765\u6548\u7387\u95ee\u9898\u3002\u56e0\u4e3a immutable \u7684\u7279\u6027\u51b3\u5b9a\u5b83\u53ea\u80fd\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002","title":"\u5b57\u7b26\u4e32\u548c\u65e5\u671f"},{"location":"languages/java/basic/tools_and_algorithm/#string","text":"String \u7c7b\u5bf9\u8c61\u4fdd\u5b58\u4e0d\u53ef\u4fee\u6539\u7684 Unicode \u5b57\u7b26\u5e8f\u5217 String \u7c7b\u7684\u4e0b\u8ff0\u65b9\u6cd5\u80fd\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 String \u5bf9\u8c61\u5b9e\u4f8b\uff1a concat , replace , replaceAll , substring , toLowerCase , toUpperCase , trim , toString \u67e5\u627e\uff1a endsWith , startsWith , indexOf , lastIndexOf \u6bd4\u8f83\uff1a equals , equalsIgnoreCase \u5b57\u7b26\u53ca\u957f\u5ea6\uff1a charAt , length \u6b64\u5916\uff0cJDK1.5 \u589e\u52a0\u4e86 format \u51fd\u6570\u3002 \u9664\u4e86 immutable \u7684\u7279\u70b9\u5916\uff0c\u8fd8\u8981\u6ce8\u610f String \u5e38\u91cf \u7684\u5185\u90e8\u5316\uff08interned\uff09\u95ee\u9898\u3002\u5373\u540c\u6837\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u662f \u5408\u540c \uff08\u6307\u5411\u540c\u4e00\u4e2a\u5f15\u7528\uff09\u7684\u3002 \u8fd9\u4fdd\u8bc1\u4e86 \"abc\" == \"abc\" \uff0c\u4f46 \"abc\" != new String(\"abc\")","title":"String \u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#stringbuffer","text":"StringBuffer \u7c7b\u5bf9\u8c61\u4fdd\u5b58\u53ef\u4fee\u6539\u7684 Unicode \u5b57\u7b26\u5e8f\u5217\uff0c StringBuilder \u7c7b\u4f3c\uff0c\u5b83\u6548\u7387\u66f4\u9ad8\uff0c\u4e0d\u7528\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u6027\u3002 \u6784\u9020\u65b9\u6cd5\uff1a StringBuffer() , StringBuffer(int capacity) , StringBuffer(String initialString) \u5b9e\u73b0\u4fee\u6539\u64cd\u4f5c\u7684\u65b9\u6cd5\uff1a append , insert , reverse , setCharAt , setLength","title":"StringBuffer \u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#_4","text":"java.util.StringToken \u7c7b\u63d0\u4f9b\u4e86\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\u7684\u529f\u80fd\u3002 \u6784\u9020\uff1a StringTokenizer(String str, String delim); \u8be5\u7c7b\u7684\u91cd\u8981\u65b9\u6cd5\u6709\uff1a public int countTokens (); // \u5206\u5272\u4e32\u7684\u4e2a\u6570 public boolean hasMoreTokens (); // \u662f\u5426\u8fd8\u6709\u5206\u5272\u4e32 public String nextToken (); // \u5f97\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u4e32 String \u7c7b\u7684 matches , replaceAll , split \u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002","title":"\u5b57\u7b26\u4e32\u7684\u5206\u5272"},{"location":"languages/java/basic/tools_and_algorithm/#_5","text":"Calendar \u662f Java \u5185\u7f6e\u7684\u65e5\u5386\u7c7b\uff0c Calendar.getTime() \u5f97\u5230\u4e00\u4e2a Date \u7c7b\u7684\u5b9e\u4f8b\uff0c Data.getTime \u5f97\u5230\u4e00\u4e2a long \u3002 SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\") \u7c7b\u6709 .format , .parse \u65b9\u6cd5\u7528\u6765\u683c\u5f0f\u5316\u3001\u89e3\u6790\u65f6\u95f4\u683c\u5f0f\u3002 Java8 \u4e2d\u5f15\u5165\u4e86 time api import java.time.* ; import java.time.format.* ; \u5176\u4e2d\uff0c\u4e3b\u8981\u7684\u7c7b\u6709\uff1a Instant \u65f6\u523b\uff0c Clock \u65f6\u533a\uff0c Duration \u65f6\u95f4\u6bb5 \u5e38\u7528\u7684\u7c7b LocalDateTime , LocalDate , LocalTime \uff0c\u5b83\u4eec\u90fd\u652f\u6301 .of , .parse , .format , .plus , .minus \u65b9\u6cd5 DateTimeFormatter","title":"\u65e5\u671f\u7c7b"},{"location":"languages/java/basic/tools_and_algorithm/#_6","text":"Collection API \u4e09\u5927\u7c7b\uff1a Collection \u63a5\u53e3 List \uff08 Collection \u7684\u5b50\u63a5\u53e3\uff09\uff1a\u6709\u987a\u5e8f\uff0c\u53ef\u91cd\u590d Set \uff08 Collection \u7684\u5b50\u63a5\u53e3\uff09\uff1a\u65e0\u987a\u5e8f\uff0c\u4e0d\u91cd\u590d Map \u63a5\u53e3 \u952e\u503c\u5bf9 \u96c6\u5408 Collection \u63a5\u53e3\u63d0\u4f9b\u5982\u4e0b\u57df\uff1a \u96c6\u5408UML \u4e0b\u56fe\u5c55\u793a\u4e86\u7531 Collection \u6d3e\u751f\u7684\u7c7b\uff1a \u96c6\u5408\u5c42\u6b21\u7ed3\u6784","title":"\u96c6\u5408"},{"location":"languages/java/basic/tools_and_algorithm/#list","text":"List \u63a5\u53e3\uff1a\u7ebf\u6027\u8868\uff08linear list\uff09\u3002 \u4e3b\u8981\u7684\u5b9e\u73b0\u7c7b\u6709\uff1a ArrayList , LinkedList \uff0c\u4ee5\u53ca\u65e9\u671f\u7684 Vector List \u63a5\u53e3\uff1a public interface List < E > extends Collection < E >","title":"List"},{"location":"languages/java/basic/tools_and_algorithm/#_7","text":"","title":"\u6392\u5e8f\u4e0e\u67e5\u627e"},{"location":"languages/java/basic/tools_and_algorithm/#_8","text":"","title":"\u6cdb\u578b"},{"location":"languages/java/basic/tools_and_algorithm/#_9","text":"","title":"\u5e38\u7528\u7b97\u6cd5"},{"location":"machine_learning/","text":"","title":"\u673a\u5668\u5b66\u4e60"},{"location":"network/sciencetific_surfing/","text":"\u79d1\u5b66\u4e0a\u7f51 GFW VPN Socks5\u4ee3\u7406","title":"\u79d1\u5b66\u4e0a\u7f51"},{"location":"network/sciencetific_surfing/#_1","text":"","title":"\u79d1\u5b66\u4e0a\u7f51"},{"location":"network/sciencetific_surfing/#gfw","text":"","title":"GFW"},{"location":"network/sciencetific_surfing/#vpn","text":"","title":"VPN"},{"location":"network/sciencetific_surfing/#socks5","text":"","title":"Socks5\u4ee3\u7406"},{"location":"open_source/browser/chromium/","text":"Chromium Home: https://www.chromium.org/ Github: https://github.com/chromium/chromium","title":"Chromium"},{"location":"open_source/browser/chromium/#chromium","text":"Home: https://www.chromium.org/ Github: https://github.com/chromium/chromium","title":"Chromium"},{"location":"open_source/database/leveldb/","text":"LevelDB Github Handbook Authors: Sanjay Ghemawat ( sanjay@google.com ) and Jeff Dean ( jeff@google.com ) \u6982\u8ff0 LevelDB\u662fGoogle\u7684\u5206\u5e03\u5f0f\u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8\u7cfb\u7edf BigTable \u7684\u5355\u673a\u7248\u672c\u3002BigTable\u5728 \u6570\u5343\u53f0 \u5546\u7528\u670d\u52a1\u5668\u4e0a\u7ba1\u7406 PB \u91cf\u7ea7\u6570\u636e\uff0c\u4e3aGoogle\u7f51\u9875\u7d22\u5f15\u3001\u8c37\u6b4c\u5730\u7403\u3001\u8c37\u6b4c\u91d1\u878d\u7b49\u9879\u76ee\u63d0\u4f9b\u6570\u636e\u5b58\u50a8\u670d\u52a1\u3002 LevelDB\u7684\u5b9e\u73b0\u57fa\u4e8eLSMT\uff0c\u4e3b\u9898\u601d\u60f3\u662f\uff1a \u5c06\u6570\u636e\u9996\u5148\u66f4\u65b0\u5728\u5185\u5b58\u4e2d\uff0c\u5f53\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8fbe\u5230\u4e00\u5b9a\u7684\u9608\u503c\uff0c\u5c06\u8fd9\u90e8\u5206\u6570\u636e\u771f\u6b63\u5237\u65b0\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d \uff0c\u56e0\u800c\u83b7\u5f97\u6781\u9ad8\u7684\u5199\u6027\u80fd\u3002 LevelDB\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u57fa\u4e8eLSMT\uff0c\u653e\u5f03\u90e8\u5206\u8bfb\u7684\u6027\u80fd\uff0c\u6362\u53d6\u6700\u5927\u7684\u5199\u5165\u80fd\u529b\uff1b \u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u6307\u5b9a\u7684key\u662f\u5426\u5728SSTable\u4e2d\uff0c\u52a0\u901f\u67e5\u627e\uff1b \u5185\u5b58\u6570\u636e\u5e93\u7528\u8df3\u8868\u5b9e\u73b0\uff1b \u7528LRUCache\u505a\u7f13\u5b58\u3002 LevelDB\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a memtable immutable memtable log sstable manifest current \u80cc\u666f\u548c\u7814\u53d1\u52a8\u673a \u80cc\u666f \u4ece\u786c\u4ef6\u89d2\u5ea6\u51fa\u53d1\uff0c\u51e0\u4e4e\u5bf9\u4e8e\u6240\u6709\u5b58\u50a8\u4ecb\u8d28\uff0c \u987a\u5e8f\u5b58\u50a8\u7684\u6548\u7387\u4e00\u5b9a\u6bd4\u968f\u673a\u5b58\u50a8\u66f4\u9ad8 \uff0c\u5e76\u4e14\u8981\u9ad8\u5f88\u591a\u3002\u4e0b\u56fe\u53ef\u4ee5\u76f4\u89c2\u9610\u8ff0\u4e86\u4e24\u8005\u7684\u6548\u7387\u5dee\uff0c\u5176\u4e2d\u7ea2\u8272\u90e8\u5206\u548c\u7eff\u8272\u90e8\u5206\u5206\u522b\u8868\u793a\u786c\u76d8\u968f\u673a\u8bfb\u53d6\u548c\u987a\u5e8f\u8bfb\u53d6\u7684\u541e\u5410\u91cf\uff1a \u4ece\u7eb5\u5750\u6807\u53ef\u4ee5\u770b\u51fa\u4e8c\u8005\u5dee\u7684\u4e0d\u662f\u4e00\u70b9\u534a\u70b9\uff0c\u800c\u662f\u5df2\u7ecf\u6709\u6570\u91cf\u7ea7\u7684\u5dee\u8ddd\u4e86\uff0c\u800c\u4e14 \u51e0\u4e4e\u8fbe\u5230\u4e86\u4e09\u4e2a\u6570\u91cf\u7ea7 \u3002 \u52a8\u673a \u5982\u679c\u80fd\u591f\u53d1\u660e\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5145\u5206\u4f7f\u7528\u987a\u5e8f\u8bfb\u5199\u7684\u6027\u80fd\u4f18\u52bf\uff0c\u81ea\u7136\u4f1a\u5927\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684 IO\u80fd\u529b \u3002\u5bf9\u4e8e\u8bb8\u591a\u79d1\u6280\u516c\u53f8\u800c\u8a00\uff0c\u5c24\u5176\u662f\u5927\u6570\u636e\u516c\u53f8\uff0c\u56e0\u4e3a\u6570\u636e\u91cf\u5e26\u6765\u7684\u673a\u5668\u5f00\u9500\u7684\u8d39\u7528\u5360\u636e\u4e86\u65e5\u5e38\u652f\u51fa\u7684\u5927\u5934\u3002\u5982\u679c\u80fd\u591f\u4f18\u5316\u8fd9\u4e2a\u95ee\u9898\uff0c\u663e\u7136\u53ef\u4ee5 \u8282\u7ea6\u5927\u91cf\u7684\u8d44\u6e90 \u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u5c06\u6240\u6709\u7684\u8bfb\u5199\u90fd\u8bbe\u8ba1\u6210 \u987a\u5e8f\u8bfb\u5199 \uff0c\u6bd4\u5982 \u65e5\u5fd7\u7cfb\u7edf \u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u518d\u8bb0\u5f55\u65e5\u5fd7\u7684\u65f6\u5019\u603b\u662f\u6dfb\u52a0\u5728\u6587\u4ef6\u672b\u5c3e\uff0c\u800c\u4e0d\u4f1a\u63d2\u5165\u5728\u6587\u4ef6\u4e2d\u95f4\u3002\u663e\u7136\u5199\u7684\u64cd\u4f5c\u662f\u987a\u5e8f\u7684\uff0c\u4f46\u5f53\u6211\u4eec\u9700\u8981\u67e5\u627e\u7684\u5185\u5bb9\u5728\u6587\u4ef6\u4e2d\u95f4\u7684\u65f6\u5019\uff0c\u987a\u5e8f\u8bfb\u9700\u8981\u8bfb\u5165\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002 \u65e5\u5fd7\u7cfb\u7edf\u7684\u4e3b\u8981\u5e94\u7528\u6709\u4e24\u4e2a\uff1a \u6570\u636e\u5e93\u7684\u65e5\u5fd7 - \u5f53\u6211\u4eec\u7528\u6570\u636e\u5e93\u6267\u884c\u5199\u5165\u6216\u8005\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6570\u636e\u5e93\u4f1a\u5c06\u6240\u6709\u53d8\u66f4\u5199\u6210log\u8bb0\u5f55\u4e0b\u4fe9\uff1b \u6d88\u606f\u7cfb\u7edf\u7684\u4e2d\u95f4\u4ef6 - \u6bd4\u5982 kafka \u5728\u590d\u6742\u7684\u589e\u5220\u6539\u67e5\u573a\u666f\u4e2d\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u5230 \u6279\u91cf\u8bfb\u5199 \u7684\u573a\u666f\uff0c\u7b80\u5355\u7684\u6587\u4ef6\u987a\u5e8f\u8bfb\u5199\u5c31\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\u4e86\u3002B+\u6811\u548c\u54c8\u5e0c\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u90fd\u4f1a\u5f15\u5165\u6bd4\u8f83\u6162\u7684\u968f\u673a\u8bfb\u5199\u64cd\u4f5c\u3002\u6211\u4eec\u9700\u8981 \u5c3d\u91cf\u5c11\u7684\u968f\u673a\u8bfb\u5199 \uff0cLSMT\u727a\u7272\u4e86\u4e00\u4e9b\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u4fdd\u8bc1\u4e86\u5199\u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u80fd\u591f\u8ba9\u6240\u6709\u64cd\u4f5c\u987a\u5e8f\u5316\uff0c\u51e0\u4e4e\u5b8c\u5168\u907f\u514d\u4e86\u968f\u673a\u8bfb\u5199\u3002 LevelDB\u6b63\u662f\u57fa\u4e8eLSMT\u5b9e\u73b0\u7684\u3002 LSMT LSMT\u5199\u5165\u6027\u80fd\u6781\u9ad8\u7684\u539f\u7406\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c3d\u91cf\u51cf\u5c11\u968f\u673a\u5199\u7684\u6b21\u6570\u3002\u5bf9\u4e8e\u6bcf\u6b21\u5199\u5165\u64cd\u4f5c\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u5c06\u6700\u65b0\u7684\u6570\u636e\u9a7b\u7559\u5728\u78c1\u76d8\u4e2d\uff0c\u800c\u662f\u5c06\u5176\u62c6\u5206\u6210\uff1a \u4e00\u6b21\u65e5\u5fd7\u6587\u4ef6\u7684\u987a\u5e8f\u5199 \u4e00\u6b21\u5185\u5b58\u4e2d\u6570\u636e\u7684\u63d2\u5165 SSTable SSTable\u7684\u5168\u79f0\u662fSorted String Table\uff0c\u672c\u8d28\u662f\u4e00\u4e2aKV\u7ed3\u6784\u987a\u5e8f\u6392\u5217\u7684\u6587\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u57fa\u672c\u7684SSTable\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684\u53f3\u4fa7\u90e8\u5206\uff0c\u5373\u952e\u503c\u5bf9\u6309\u7167\u952e\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u5e76\u5b58\u50a8\u5728\u6587\u4ef6\u5f53\u4e2d\u3002\u5f53\u9700\u8981\u67e5\u627e\u67d0\u4e2a\u952e\u5bf9\u5e94\u7684\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5c06 \u6574\u4e2a\u6587\u4ef6\u8bfb\u5165\u5185\u5b58 \uff0c\u8fdb\u884c\u67e5\u627e\u3002\u540c\u6837\uff0c\u5199\u5165\u4e5f\u662f\u5982\u6b64\uff0c\u6211\u4eec\u4f1a\u5c06\u63d2\u5165\u7684\u64cd\u4f5c\u5728\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u5f97\u5230\u7ed3\u679c\u4e4b\u540e\u76f4\u63a5\u8986\u76d6\u539f\u6765\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u4f1a\u5728\u6587\u4ef6\u5f53\u4e2d\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7275\u626f\u5230\u5927\u91cf\u7684\u6570\u636e\u79fb\u52a8\u3002 \u5982\u679c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u6211\u4eec\u9700\u8981\u53e6\u5916\u5efa\u7acb\u4e00\u4e2a \u7d22\u5f15\u6587\u4ef6 \uff0c\u5b58\u50a8\u4e0d\u540c\u7684\u952e\u5bf9\u5e94\u7684\u504f\u79fb\u91cf\uff0c\u65b9\u4fbf\u6211\u4eec\u5728\u8bfb\u53d6\u6587\u4ef6\u7684\u65f6\u5019\u5feb\u901f\u67e5\u627e\u5230\u6211\u4eec\u60f3\u8981\u67e5\u627e\u7684\u6587\u4ef6\u3002\u7d22\u5f15\u6587\u4ef6\u5373\u4e0a\u56fe\u4e2d\u7684\u5de6\u4fa7\u90e8\u5206\u3002 \u6ce8\u610f\uff1aSSTable\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff0c\u6211\u4eec\u53ea\u4f1a\u7528\u65b0\u7684SSTable\u53bb\u8986\u76d6\u5c31\u5f97\uff0c\u800c\u4e0d\u4f1a\u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u56e0\u4e3a\u4fee\u6539\u4f1a\u6d89\u53ca\u5230\u968f\u673a\u8bfb\u5199\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684\u3002 LSMT LSMT\u7684\u5168\u79f0\u662fLog-structed Merge-tree\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5728SSTable\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2aMemtable\uff0cMemtable\u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a \u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u8868\u7ed3\u6784 \u3002\u5f53\u7136\u4e5f\u4e0d\u4e00\u5b9a\u662f\u8868\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u662f\u6811\u7ed3\u6784\uff0c\u53ea\u8981\u662f\u4e00\u4e2a\u652f\u6301\u5feb\u901f\u589e\u5220\u6539\u67e5\u7684\u6570\u636e\u7ed3\u6784\u5373\u53ef\uff0c\u6bd4\u5982\u7ea2\u9ed1\u6811\u3001\u8df3\u8868\u90fd\u53ef\u4ee5\u3002 \u5728\u5176\u57fa\u7840\u4e0a\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2alog\u6587\u4ef6\uff0c\u548c\u6570\u636e\u5e93\u5f53\u4e2d\u7684log\u4e00\u6837\uff0c\u8bb0\u5f55\u6570\u636e\u53d1\u751f\u7684\u53d8\u5316\u3002\u65b9\u4fbf\u7cfb\u7edf\u6545\u969c\u6216\u6570\u636e\u4e22\u5931\u7684\u65f6\u5019\u8fdb\u884c\u627e\u56de\u3002 \u67e5\u627e \u5f53\u9700\u8981\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5148\u67e5\u627eMemtable\uff0c\u5982\u679cMemtable\u4e2d\u6ca1\u6709\u627e\u5230\uff0c\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u67e5\u627eSSTable\uff0c\u7531\u4e8eSSTable\u5f53\u4e2d\u7684\u6570\u636e\u4e5f\u662f\u987a\u5e8f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u6574\u4e2a\u67e5\u627e\u7684\u8fc7\u7a0b\u4f1a\u5f88\u5feb\u3002 \u6709\u4e00\u4e2a\u95ee\u9898 \u2014\u2014 \u7531\u4e8e SSTable\u7684\u6570\u91cf\u53ef\u80fd\u4f1a\u5f88\u591a \uff0c\u800c\u4e14\u6211\u4eec\u5fc5\u987b\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u6240\u4ee5\u5f53SSTable\u6570\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5f71\u54cd\u67e5\u627e\u901f\u5ea6\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165 \u5e03\u9686\u8fc7\u6ee4\u5668 \u8fdb\u884c\u4f18\u5316\u3002\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2aSSTable\u5efa\u7acb\u4e00\u4e2a\u5e03\u9686\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u67d0\u4e00\u4e2aSSTable\u5f53\u4e2d\u3002\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u5143\u7d20\u4e0d\u5b58\u5728\u4e00\u5b9a\u662f\u51c6\u786e\u7684\uff0c\u4f46\u5224\u65ad\u5b58\u5728\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u5931\u8d25\u6982\u7387\uff0c\u4f46\u8fd9\u4e2a\u6982\u7387\u662f\u53ef\u4ee5\u63a7\u5236\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u5408\u7406\u7684\u53c2\u6570\uff0c\u662f\u7684\u5931\u8bef\u7387\u8db3\u591f\u4f4e\u3002 \u52a0\u4e0a\u4e86\u5e03\u9686\u8fc7\u6ee4\u5668\u4e4b\u540e\u7684\u67e5\u627e\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a \u5982\u56fe\u6240\u793a\uff0c\u90e8\u5206SSTable\u5148\u901a\u8fc7\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e4b\u540e\uff0c\u5728\u8fdb\u884c\u67e5\u627e\u3002 \u589e\u3001\u5220\u3001\u6539 \u9664\u4e86\u67e5\u627e\u4e4b\u5916\u7684\u5176\u4ed6\u64cd\u4f5c\u90fd\u53d1\u751f\u5728Memtable\u4e2d\uff0c\u6bd4\u5982\u5f53\u6211\u4eec\u8981\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5728Memtable\u4e2d\u589e\u52a0\uff0c\u800c\u4e0d\u662f\u5199\u5165\u6587\u4ef6\u3002\u8fd9\u4e5f\u4fdd\u8bc1\u4e86\u589e\u52a0\u7684\u901f\u5ea6\u53ef\u4ee5\u975e\u5e38\u5feb\u3002 \u4fee\u6539\u3001\u5220\u9664\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u7684\u5143\u7d20\u521a\u597d\u5728Memtable\u5f53\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u5373\u53ef\uff1b\u5982\u679c\u4e0d\u5728Memtable\u5f53\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u8981\u5148\u67e5\u627e\u518d\u53bb\u4fee\u6539\u514d\u4e0d\u4e86\u78c1\u76d8IO\uff0c\u8fd9\u4f1a\u6d88\u8017\u5927\u91cf\u8d44\u6e90\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u5728Memtable\u4e2d\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u63d2\u5165\u8fd9\u4e2a\u5143\u7d20\uff0c\u6807\u8bb0\u6210\u4fee\u6539\u6216\u662f\u5220\u9664\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec \u53ef\u4ee5\u628a\u589e\u3001\u5220\u3001\u6539\u4e09\u4e2a\u64cd\u4f5c\u90fd\u770b\u6210\u662f\u6dfb\u52a0 \uff0c\u4f46\u8fd9\u4e48\u505a\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898 \u2014\u2014 Memtable\u5f53\u4e2d\u5f88\u5feb\u5c31\u4f1a\u79ef\u7d2f\u5927\u91cf\u6570\u636e \uff0c\u5185\u5b58\u8d44\u6e90\u5f88\u5bb9\u6613\u7206\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u671f\u5c06Memtable\u5f53\u4e2d\u7684\u5185\u5bb9\u5b58\u50a8\u5230\u78c1\u76d8\uff0c\u5b58\u50a8\u6210\u4e00\u4e2aSSTable\u3002\u8fd9\u4e5f\u662fSSTable\u7684\u6765\u6e90 \u2014\u2014 \u7531Memtable\u4e2d\u7684\u6570\u636e\u843d\u76d8\u4ea7\u751f\u3002 \u540c\u6837\uff0c\u5927\u91cf\u7684\u843d\u76d8\u64cd\u4f5c\u4e5f\u4f1a\u5bfc\u81f4 SSTable\u7684\u6570\u91cf\u66b4\u589e \uff0c\u6839\u636e\u4e0a\u8ff0\u5206\u6790\uff0cSSTable\u7684\u6570\u91cf\u589e\u52a0\u4f1a\u5f71\u54cd\u6211\u4eec\u67e5\u627e\u7684\u6548\u7387\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u50a8\u5b58\u4e86\u8bb8\u591a\u4fee\u6539\u548c\u5220\u9664\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u9700\u8981\u5427\u8fd9\u4e9b\u4fe1\u606f\u843d\u5b9e\u3002\u4e3a\u4e86\u8fbe\u6210\u8fd9\u70b9\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u671f\u5c06\u6240\u6709SSTable \u5408\u5e76\uff0c\u5e76\u5728\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u6570\u636e\u7684\u5220\u9664\u3001\u4fee\u6539\u5de5\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e4b\u524d\u7684\u5220\u9664\u3001\u4fee\u6539\u64cd\u4f5c\u53ea\u662f\u88ab\u8bb0\u5f55\u4e86\u4e0b\u6765\uff0c\u77e5\u9053\u5408\u5e76\u7684\u65f6\u5019\u624d\u771f\u6b63\u6267\u884c\u3002 \u6574\u4e2a\u5f52\u5e76\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u4e2d\u7684\u5f52\u5e76\u64cd\u4f5c\uff0c\u4f46\u9700\u8981\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e0a\u72b6\u6001\u7684\u5224\u65ad\u3002 \u9002\u7528\u573a\u666f \u603b\u7ed3\u6765\u8bf4LSMT\u9002\u7528\u4e8e \u5927\u91cf\u5199\u3001\u5c11\u91cf\u8bfb \u7684\u573a\u666f\u3002 \u5bf9\u6bd4B+\u6811\uff0c\u5728B+\u6811\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e86\u80fd\u591f\u5feb\u901f\u8bfb\u53d6\u800c\u4f7f\u7528\u4e86\u591a\u8def\u5e73\u8861\u6811\uff0c\u8fd9\u6837\u53ef\u4ee5\u8fc5\u901f\u627e\u5230\u5bf9\u5e94key\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u53ea\u9700\u8981\u8bfb\u5165\u8282\u70b9\u4e2d\u7684\u5185\u5bb9\u5373\u53ef\u3002\u4f46\u5e73\u8861\u6811\u9700\u8981\u4fdd\u6301\u5176\u7279\u6709\u7684\u6027\u8d28\uff0c\u5bfc\u81f4\u6211\u4eec\u5728\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\u9700\u8981 \u5bf9\u6811\u7684\u7ed3\u6784\u8fdb\u884c\u8c03\u6574\u548c\u53d8\u52a8 \uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u5230\u591a\u6b21\u6587\u4ef6\u7684\u968f\u673a\u8bfb\u5199\u3002\u5f53\u6570\u636e\u91cf\u5f88\u5927\u7684\u65f6\u5019\u4f1a\u5e26\u6765\u5de8\u5927\u5f00\u9500\u3002 LSMT\u7684\u8bfb\u53d6\u901f\u5ea6\u76f8\u6bd4B+\u6811\u8981\u4f4e\uff0c\u4f46\u5bf9\u4e8e\u5927\u6570\u636e\u7684\u5199\u5165\u652f\u6301\u66f4\u597d\u3002\u8bb8\u591a\u5927\u6570\u636e\u573a\u666f\u5bf9\u7cfb\u7edfIO\u6709\u7740\u5f88\u9ad8\u7684\u8981\u6c42\uff0c\u6bd4\u5982\u6d88\u606f\u7cfb\u7edf\u3001\u5206\u5e03\u5f0f\u5b58\u50a8\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019B+\u6811\u5c31\u6709\u4e9b\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u76f8\u53cd\u5730\uff0c\u5728\u5bf9\u67e5\u627e\u6548\u7387\u8981\u6c42\u5f88\u9ad8\u7684\u573a\u666f\u4e0b\uff0cLSMT\u5c31\u4e0d\u5408\u9002\u4e86\u3002 \u4e3b\u4f53\u67b6\u6784 \u8bbe\u8ba1\u4eae\u70b9 \u53c2\u8003\u6587\u732e [1] leveldb-handbook [2] TechFlow\u8bb2\u89e3LSMT","title":"LevelDB"},{"location":"open_source/database/leveldb/#leveldb","text":"Github Handbook Authors: Sanjay Ghemawat ( sanjay@google.com ) and Jeff Dean ( jeff@google.com )","title":"LevelDB"},{"location":"open_source/database/leveldb/#_1","text":"LevelDB\u662fGoogle\u7684\u5206\u5e03\u5f0f\u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8\u7cfb\u7edf BigTable \u7684\u5355\u673a\u7248\u672c\u3002BigTable\u5728 \u6570\u5343\u53f0 \u5546\u7528\u670d\u52a1\u5668\u4e0a\u7ba1\u7406 PB \u91cf\u7ea7\u6570\u636e\uff0c\u4e3aGoogle\u7f51\u9875\u7d22\u5f15\u3001\u8c37\u6b4c\u5730\u7403\u3001\u8c37\u6b4c\u91d1\u878d\u7b49\u9879\u76ee\u63d0\u4f9b\u6570\u636e\u5b58\u50a8\u670d\u52a1\u3002 LevelDB\u7684\u5b9e\u73b0\u57fa\u4e8eLSMT\uff0c\u4e3b\u9898\u601d\u60f3\u662f\uff1a \u5c06\u6570\u636e\u9996\u5148\u66f4\u65b0\u5728\u5185\u5b58\u4e2d\uff0c\u5f53\u5185\u5b58\u4e2d\u7684\u6570\u636e\u8fbe\u5230\u4e00\u5b9a\u7684\u9608\u503c\uff0c\u5c06\u8fd9\u90e8\u5206\u6570\u636e\u771f\u6b63\u5237\u65b0\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d \uff0c\u56e0\u800c\u83b7\u5f97\u6781\u9ad8\u7684\u5199\u6027\u80fd\u3002 LevelDB\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u57fa\u4e8eLSMT\uff0c\u653e\u5f03\u90e8\u5206\u8bfb\u7684\u6027\u80fd\uff0c\u6362\u53d6\u6700\u5927\u7684\u5199\u5165\u80fd\u529b\uff1b \u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u6307\u5b9a\u7684key\u662f\u5426\u5728SSTable\u4e2d\uff0c\u52a0\u901f\u67e5\u627e\uff1b \u5185\u5b58\u6570\u636e\u5e93\u7528\u8df3\u8868\u5b9e\u73b0\uff1b \u7528LRUCache\u505a\u7f13\u5b58\u3002 LevelDB\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a memtable immutable memtable log sstable manifest current","title":"\u6982\u8ff0"},{"location":"open_source/database/leveldb/#_2","text":"","title":"\u80cc\u666f\u548c\u7814\u53d1\u52a8\u673a"},{"location":"open_source/database/leveldb/#_3","text":"\u4ece\u786c\u4ef6\u89d2\u5ea6\u51fa\u53d1\uff0c\u51e0\u4e4e\u5bf9\u4e8e\u6240\u6709\u5b58\u50a8\u4ecb\u8d28\uff0c \u987a\u5e8f\u5b58\u50a8\u7684\u6548\u7387\u4e00\u5b9a\u6bd4\u968f\u673a\u5b58\u50a8\u66f4\u9ad8 \uff0c\u5e76\u4e14\u8981\u9ad8\u5f88\u591a\u3002\u4e0b\u56fe\u53ef\u4ee5\u76f4\u89c2\u9610\u8ff0\u4e86\u4e24\u8005\u7684\u6548\u7387\u5dee\uff0c\u5176\u4e2d\u7ea2\u8272\u90e8\u5206\u548c\u7eff\u8272\u90e8\u5206\u5206\u522b\u8868\u793a\u786c\u76d8\u968f\u673a\u8bfb\u53d6\u548c\u987a\u5e8f\u8bfb\u53d6\u7684\u541e\u5410\u91cf\uff1a \u4ece\u7eb5\u5750\u6807\u53ef\u4ee5\u770b\u51fa\u4e8c\u8005\u5dee\u7684\u4e0d\u662f\u4e00\u70b9\u534a\u70b9\uff0c\u800c\u662f\u5df2\u7ecf\u6709\u6570\u91cf\u7ea7\u7684\u5dee\u8ddd\u4e86\uff0c\u800c\u4e14 \u51e0\u4e4e\u8fbe\u5230\u4e86\u4e09\u4e2a\u6570\u91cf\u7ea7 \u3002","title":"\u80cc\u666f"},{"location":"open_source/database/leveldb/#_4","text":"\u5982\u679c\u80fd\u591f\u53d1\u660e\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5145\u5206\u4f7f\u7528\u987a\u5e8f\u8bfb\u5199\u7684\u6027\u80fd\u4f18\u52bf\uff0c\u81ea\u7136\u4f1a\u5927\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684 IO\u80fd\u529b \u3002\u5bf9\u4e8e\u8bb8\u591a\u79d1\u6280\u516c\u53f8\u800c\u8a00\uff0c\u5c24\u5176\u662f\u5927\u6570\u636e\u516c\u53f8\uff0c\u56e0\u4e3a\u6570\u636e\u91cf\u5e26\u6765\u7684\u673a\u5668\u5f00\u9500\u7684\u8d39\u7528\u5360\u636e\u4e86\u65e5\u5e38\u652f\u51fa\u7684\u5927\u5934\u3002\u5982\u679c\u80fd\u591f\u4f18\u5316\u8fd9\u4e2a\u95ee\u9898\uff0c\u663e\u7136\u53ef\u4ee5 \u8282\u7ea6\u5927\u91cf\u7684\u8d44\u6e90 \u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u5c06\u6240\u6709\u7684\u8bfb\u5199\u90fd\u8bbe\u8ba1\u6210 \u987a\u5e8f\u8bfb\u5199 \uff0c\u6bd4\u5982 \u65e5\u5fd7\u7cfb\u7edf \u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u518d\u8bb0\u5f55\u65e5\u5fd7\u7684\u65f6\u5019\u603b\u662f\u6dfb\u52a0\u5728\u6587\u4ef6\u672b\u5c3e\uff0c\u800c\u4e0d\u4f1a\u63d2\u5165\u5728\u6587\u4ef6\u4e2d\u95f4\u3002\u663e\u7136\u5199\u7684\u64cd\u4f5c\u662f\u987a\u5e8f\u7684\uff0c\u4f46\u5f53\u6211\u4eec\u9700\u8981\u67e5\u627e\u7684\u5185\u5bb9\u5728\u6587\u4ef6\u4e2d\u95f4\u7684\u65f6\u5019\uff0c\u987a\u5e8f\u8bfb\u9700\u8981\u8bfb\u5165\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002 \u65e5\u5fd7\u7cfb\u7edf\u7684\u4e3b\u8981\u5e94\u7528\u6709\u4e24\u4e2a\uff1a \u6570\u636e\u5e93\u7684\u65e5\u5fd7 - \u5f53\u6211\u4eec\u7528\u6570\u636e\u5e93\u6267\u884c\u5199\u5165\u6216\u8005\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6570\u636e\u5e93\u4f1a\u5c06\u6240\u6709\u53d8\u66f4\u5199\u6210log\u8bb0\u5f55\u4e0b\u4fe9\uff1b \u6d88\u606f\u7cfb\u7edf\u7684\u4e2d\u95f4\u4ef6 - \u6bd4\u5982 kafka \u5728\u590d\u6742\u7684\u589e\u5220\u6539\u67e5\u573a\u666f\u4e2d\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u5230 \u6279\u91cf\u8bfb\u5199 \u7684\u573a\u666f\uff0c\u7b80\u5355\u7684\u6587\u4ef6\u987a\u5e8f\u8bfb\u5199\u5c31\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\u4e86\u3002B+\u6811\u548c\u54c8\u5e0c\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u90fd\u4f1a\u5f15\u5165\u6bd4\u8f83\u6162\u7684\u968f\u673a\u8bfb\u5199\u64cd\u4f5c\u3002\u6211\u4eec\u9700\u8981 \u5c3d\u91cf\u5c11\u7684\u968f\u673a\u8bfb\u5199 \uff0cLSMT\u727a\u7272\u4e86\u4e00\u4e9b\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u4fdd\u8bc1\u4e86\u5199\u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u80fd\u591f\u8ba9\u6240\u6709\u64cd\u4f5c\u987a\u5e8f\u5316\uff0c\u51e0\u4e4e\u5b8c\u5168\u907f\u514d\u4e86\u968f\u673a\u8bfb\u5199\u3002 LevelDB\u6b63\u662f\u57fa\u4e8eLSMT\u5b9e\u73b0\u7684\u3002","title":"\u52a8\u673a"},{"location":"open_source/database/leveldb/#lsmt","text":"LSMT\u5199\u5165\u6027\u80fd\u6781\u9ad8\u7684\u539f\u7406\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c3d\u91cf\u51cf\u5c11\u968f\u673a\u5199\u7684\u6b21\u6570\u3002\u5bf9\u4e8e\u6bcf\u6b21\u5199\u5165\u64cd\u4f5c\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u5c06\u6700\u65b0\u7684\u6570\u636e\u9a7b\u7559\u5728\u78c1\u76d8\u4e2d\uff0c\u800c\u662f\u5c06\u5176\u62c6\u5206\u6210\uff1a \u4e00\u6b21\u65e5\u5fd7\u6587\u4ef6\u7684\u987a\u5e8f\u5199 \u4e00\u6b21\u5185\u5b58\u4e2d\u6570\u636e\u7684\u63d2\u5165","title":"LSMT"},{"location":"open_source/database/leveldb/#sstable","text":"SSTable\u7684\u5168\u79f0\u662fSorted String Table\uff0c\u672c\u8d28\u662f\u4e00\u4e2aKV\u7ed3\u6784\u987a\u5e8f\u6392\u5217\u7684\u6587\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u57fa\u672c\u7684SSTable\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684\u53f3\u4fa7\u90e8\u5206\uff0c\u5373\u952e\u503c\u5bf9\u6309\u7167\u952e\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u5e76\u5b58\u50a8\u5728\u6587\u4ef6\u5f53\u4e2d\u3002\u5f53\u9700\u8981\u67e5\u627e\u67d0\u4e2a\u952e\u5bf9\u5e94\u7684\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5c06 \u6574\u4e2a\u6587\u4ef6\u8bfb\u5165\u5185\u5b58 \uff0c\u8fdb\u884c\u67e5\u627e\u3002\u540c\u6837\uff0c\u5199\u5165\u4e5f\u662f\u5982\u6b64\uff0c\u6211\u4eec\u4f1a\u5c06\u63d2\u5165\u7684\u64cd\u4f5c\u5728\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u5f97\u5230\u7ed3\u679c\u4e4b\u540e\u76f4\u63a5\u8986\u76d6\u539f\u6765\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u4f1a\u5728\u6587\u4ef6\u5f53\u4e2d\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7275\u626f\u5230\u5927\u91cf\u7684\u6570\u636e\u79fb\u52a8\u3002 \u5982\u679c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u6211\u4eec\u9700\u8981\u53e6\u5916\u5efa\u7acb\u4e00\u4e2a \u7d22\u5f15\u6587\u4ef6 \uff0c\u5b58\u50a8\u4e0d\u540c\u7684\u952e\u5bf9\u5e94\u7684\u504f\u79fb\u91cf\uff0c\u65b9\u4fbf\u6211\u4eec\u5728\u8bfb\u53d6\u6587\u4ef6\u7684\u65f6\u5019\u5feb\u901f\u67e5\u627e\u5230\u6211\u4eec\u60f3\u8981\u67e5\u627e\u7684\u6587\u4ef6\u3002\u7d22\u5f15\u6587\u4ef6\u5373\u4e0a\u56fe\u4e2d\u7684\u5de6\u4fa7\u90e8\u5206\u3002 \u6ce8\u610f\uff1aSSTable\u662f\u4e0d\u53ef\u4fee\u6539\u7684\uff0c\u6211\u4eec\u53ea\u4f1a\u7528\u65b0\u7684SSTable\u53bb\u8986\u76d6\u5c31\u5f97\uff0c\u800c\u4e0d\u4f1a\u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u56e0\u4e3a\u4fee\u6539\u4f1a\u6d89\u53ca\u5230\u968f\u673a\u8bfb\u5199\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684\u3002","title":"SSTable"},{"location":"open_source/database/leveldb/#lsmt_1","text":"LSMT\u7684\u5168\u79f0\u662fLog-structed Merge-tree\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5728SSTable\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2aMemtable\uff0cMemtable\u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a \u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u8868\u7ed3\u6784 \u3002\u5f53\u7136\u4e5f\u4e0d\u4e00\u5b9a\u662f\u8868\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u662f\u6811\u7ed3\u6784\uff0c\u53ea\u8981\u662f\u4e00\u4e2a\u652f\u6301\u5feb\u901f\u589e\u5220\u6539\u67e5\u7684\u6570\u636e\u7ed3\u6784\u5373\u53ef\uff0c\u6bd4\u5982\u7ea2\u9ed1\u6811\u3001\u8df3\u8868\u90fd\u53ef\u4ee5\u3002 \u5728\u5176\u57fa\u7840\u4e0a\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2alog\u6587\u4ef6\uff0c\u548c\u6570\u636e\u5e93\u5f53\u4e2d\u7684log\u4e00\u6837\uff0c\u8bb0\u5f55\u6570\u636e\u53d1\u751f\u7684\u53d8\u5316\u3002\u65b9\u4fbf\u7cfb\u7edf\u6545\u969c\u6216\u6570\u636e\u4e22\u5931\u7684\u65f6\u5019\u8fdb\u884c\u627e\u56de\u3002","title":"LSMT"},{"location":"open_source/database/leveldb/#_5","text":"\u5f53\u9700\u8981\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5148\u67e5\u627eMemtable\uff0c\u5982\u679cMemtable\u4e2d\u6ca1\u6709\u627e\u5230\uff0c\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u67e5\u627eSSTable\uff0c\u7531\u4e8eSSTable\u5f53\u4e2d\u7684\u6570\u636e\u4e5f\u662f\u987a\u5e8f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u6574\u4e2a\u67e5\u627e\u7684\u8fc7\u7a0b\u4f1a\u5f88\u5feb\u3002 \u6709\u4e00\u4e2a\u95ee\u9898 \u2014\u2014 \u7531\u4e8e SSTable\u7684\u6570\u91cf\u53ef\u80fd\u4f1a\u5f88\u591a \uff0c\u800c\u4e14\u6211\u4eec\u5fc5\u987b\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u6240\u4ee5\u5f53SSTable\u6570\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5f71\u54cd\u67e5\u627e\u901f\u5ea6\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165 \u5e03\u9686\u8fc7\u6ee4\u5668 \u8fdb\u884c\u4f18\u5316\u3002\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2aSSTable\u5efa\u7acb\u4e00\u4e2a\u5e03\u9686\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u67d0\u4e00\u4e2aSSTable\u5f53\u4e2d\u3002\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u5143\u7d20\u4e0d\u5b58\u5728\u4e00\u5b9a\u662f\u51c6\u786e\u7684\uff0c\u4f46\u5224\u65ad\u5b58\u5728\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u5931\u8d25\u6982\u7387\uff0c\u4f46\u8fd9\u4e2a\u6982\u7387\u662f\u53ef\u4ee5\u63a7\u5236\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u5408\u7406\u7684\u53c2\u6570\uff0c\u662f\u7684\u5931\u8bef\u7387\u8db3\u591f\u4f4e\u3002 \u52a0\u4e0a\u4e86\u5e03\u9686\u8fc7\u6ee4\u5668\u4e4b\u540e\u7684\u67e5\u627e\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff1a \u5982\u56fe\u6240\u793a\uff0c\u90e8\u5206SSTable\u5148\u901a\u8fc7\u5e03\u9686\u8fc7\u6ee4\u5668\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e4b\u540e\uff0c\u5728\u8fdb\u884c\u67e5\u627e\u3002","title":"\u67e5\u627e"},{"location":"open_source/database/leveldb/#_6","text":"\u9664\u4e86\u67e5\u627e\u4e4b\u5916\u7684\u5176\u4ed6\u64cd\u4f5c\u90fd\u53d1\u751f\u5728Memtable\u4e2d\uff0c\u6bd4\u5982\u5f53\u6211\u4eec\u8981\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5728Memtable\u4e2d\u589e\u52a0\uff0c\u800c\u4e0d\u662f\u5199\u5165\u6587\u4ef6\u3002\u8fd9\u4e5f\u4fdd\u8bc1\u4e86\u589e\u52a0\u7684\u901f\u5ea6\u53ef\u4ee5\u975e\u5e38\u5feb\u3002 \u4fee\u6539\u3001\u5220\u9664\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u7684\u5143\u7d20\u521a\u597d\u5728Memtable\u5f53\u4e2d\uff0c\u76f4\u63a5\u4fee\u6539\u5373\u53ef\uff1b\u5982\u679c\u4e0d\u5728Memtable\u5f53\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u8981\u5148\u67e5\u627e\u518d\u53bb\u4fee\u6539\u514d\u4e0d\u4e86\u78c1\u76d8IO\uff0c\u8fd9\u4f1a\u6d88\u8017\u5927\u91cf\u8d44\u6e90\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u5728Memtable\u4e2d\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u63d2\u5165\u8fd9\u4e2a\u5143\u7d20\uff0c\u6807\u8bb0\u6210\u4fee\u6539\u6216\u662f\u5220\u9664\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec \u53ef\u4ee5\u628a\u589e\u3001\u5220\u3001\u6539\u4e09\u4e2a\u64cd\u4f5c\u90fd\u770b\u6210\u662f\u6dfb\u52a0 \uff0c\u4f46\u8fd9\u4e48\u505a\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898 \u2014\u2014 Memtable\u5f53\u4e2d\u5f88\u5feb\u5c31\u4f1a\u79ef\u7d2f\u5927\u91cf\u6570\u636e \uff0c\u5185\u5b58\u8d44\u6e90\u5f88\u5bb9\u6613\u7206\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u671f\u5c06Memtable\u5f53\u4e2d\u7684\u5185\u5bb9\u5b58\u50a8\u5230\u78c1\u76d8\uff0c\u5b58\u50a8\u6210\u4e00\u4e2aSSTable\u3002\u8fd9\u4e5f\u662fSSTable\u7684\u6765\u6e90 \u2014\u2014 \u7531Memtable\u4e2d\u7684\u6570\u636e\u843d\u76d8\u4ea7\u751f\u3002 \u540c\u6837\uff0c\u5927\u91cf\u7684\u843d\u76d8\u64cd\u4f5c\u4e5f\u4f1a\u5bfc\u81f4 SSTable\u7684\u6570\u91cf\u66b4\u589e \uff0c\u6839\u636e\u4e0a\u8ff0\u5206\u6790\uff0cSSTable\u7684\u6570\u91cf\u589e\u52a0\u4f1a\u5f71\u54cd\u6211\u4eec\u67e5\u627e\u7684\u6548\u7387\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u50a8\u5b58\u4e86\u8bb8\u591a\u4fee\u6539\u548c\u5220\u9664\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u9700\u8981\u5427\u8fd9\u4e9b\u4fe1\u606f\u843d\u5b9e\u3002\u4e3a\u4e86\u8fbe\u6210\u8fd9\u70b9\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u671f\u5c06\u6240\u6709SSTable \u5408\u5e76\uff0c\u5e76\u5728\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u6570\u636e\u7684\u5220\u9664\u3001\u4fee\u6539\u5de5\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e4b\u524d\u7684\u5220\u9664\u3001\u4fee\u6539\u64cd\u4f5c\u53ea\u662f\u88ab\u8bb0\u5f55\u4e86\u4e0b\u6765\uff0c\u77e5\u9053\u5408\u5e76\u7684\u65f6\u5019\u624d\u771f\u6b63\u6267\u884c\u3002 \u6574\u4e2a\u5f52\u5e76\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u4e2d\u7684\u5f52\u5e76\u64cd\u4f5c\uff0c\u4f46\u9700\u8981\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e0a\u72b6\u6001\u7684\u5224\u65ad\u3002","title":"\u589e\u3001\u5220\u3001\u6539"},{"location":"open_source/database/leveldb/#_7","text":"\u603b\u7ed3\u6765\u8bf4LSMT\u9002\u7528\u4e8e \u5927\u91cf\u5199\u3001\u5c11\u91cf\u8bfb \u7684\u573a\u666f\u3002 \u5bf9\u6bd4B+\u6811\uff0c\u5728B+\u6811\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e86\u80fd\u591f\u5feb\u901f\u8bfb\u53d6\u800c\u4f7f\u7528\u4e86\u591a\u8def\u5e73\u8861\u6811\uff0c\u8fd9\u6837\u53ef\u4ee5\u8fc5\u901f\u627e\u5230\u5bf9\u5e94key\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u53ea\u9700\u8981\u8bfb\u5165\u8282\u70b9\u4e2d\u7684\u5185\u5bb9\u5373\u53ef\u3002\u4f46\u5e73\u8861\u6811\u9700\u8981\u4fdd\u6301\u5176\u7279\u6709\u7684\u6027\u8d28\uff0c\u5bfc\u81f4\u6211\u4eec\u5728\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\u9700\u8981 \u5bf9\u6811\u7684\u7ed3\u6784\u8fdb\u884c\u8c03\u6574\u548c\u53d8\u52a8 \uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u5230\u591a\u6b21\u6587\u4ef6\u7684\u968f\u673a\u8bfb\u5199\u3002\u5f53\u6570\u636e\u91cf\u5f88\u5927\u7684\u65f6\u5019\u4f1a\u5e26\u6765\u5de8\u5927\u5f00\u9500\u3002 LSMT\u7684\u8bfb\u53d6\u901f\u5ea6\u76f8\u6bd4B+\u6811\u8981\u4f4e\uff0c\u4f46\u5bf9\u4e8e\u5927\u6570\u636e\u7684\u5199\u5165\u652f\u6301\u66f4\u597d\u3002\u8bb8\u591a\u5927\u6570\u636e\u573a\u666f\u5bf9\u7cfb\u7edfIO\u6709\u7740\u5f88\u9ad8\u7684\u8981\u6c42\uff0c\u6bd4\u5982\u6d88\u606f\u7cfb\u7edf\u3001\u5206\u5e03\u5f0f\u5b58\u50a8\u7b49\u3002\u8fd9\u4e2a\u65f6\u5019B+\u6811\u5c31\u6709\u4e9b\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u76f8\u53cd\u5730\uff0c\u5728\u5bf9\u67e5\u627e\u6548\u7387\u8981\u6c42\u5f88\u9ad8\u7684\u573a\u666f\u4e0b\uff0cLSMT\u5c31\u4e0d\u5408\u9002\u4e86\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"open_source/database/leveldb/#_8","text":"","title":"\u4e3b\u4f53\u67b6\u6784"},{"location":"open_source/database/leveldb/#_9","text":"","title":"\u8bbe\u8ba1\u4eae\u70b9"},{"location":"open_source/database/leveldb/#_10","text":"[1] leveldb-handbook [2] TechFlow\u8bb2\u89e3LSMT","title":"\u53c2\u8003\u6587\u732e"},{"location":"open_source/database/redius/","text":"Redius Home page Github","title":"Redius"},{"location":"open_source/database/redius/#redius","text":"Home page Github","title":"Redius"},{"location":"open_source/message_system/kafka/","text":"Kafka Github","title":"kafka"},{"location":"open_source/message_system/kafka/#kafka","text":"Github","title":"Kafka"},{"location":"open_source/rpc/dubbo/","text":"Dubbo Github","title":"Dubbo"},{"location":"open_source/rpc/dubbo/#dubbo","text":"Github","title":"Dubbo"},{"location":"open_source/stream_computing/flink/","text":"Flink Home: https://flink.apache.org/ Github: https://github.com/apache/flink","title":"Flink"},{"location":"open_source/stream_computing/flink/#flink","text":"Home: https://flink.apache.org/ Github: https://github.com/apache/flink","title":"Flink"},{"location":"open_source/stream_computing/spark/","text":"Spark Home: https://spark.apache.org/ Github: https://github.com/apache/spark","title":"Spark"},{"location":"open_source/stream_computing/spark/#spark","text":"Home: https://spark.apache.org/ Github: https://github.com/apache/spark","title":"Spark"},{"location":"open_source/stream_computing/storm/","text":"Strom Home: https://storm.apache.org/ Github: https://github.com/apache/storm","title":"Storm"},{"location":"open_source/stream_computing/storm/#strom","text":"Home: https://storm.apache.org/ Github: https://github.com/apache/storm","title":"Strom"},{"location":"open_source/traffic_control/sentinel/","text":"Sentinel Java \u4e3b\u9879\u76ee C++ \u539f\u751f\u7248\u672c \u662f\u4ec0\u4e48 \u968f\u7740\u5fae\u670d\u52a1\u7684\u6d41\u884c\uff0c\u670d\u52a1\u548c\u670d\u52a1\u4e4b\u95f4\u7684\u7a33\u5b9a\u6027\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002Sentinel \u662f\u9762\u5411\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u7684\u6d41\u91cf\u63a7\u5236\u7ec4\u4ef6\uff0c\u4e3b\u8981\u4ee5\u6d41\u91cf\u4e3a\u5207\u5165\u70b9\uff0c\u4ece\u9650\u6d41\u3001\u6d41\u91cf\u6574\u5f62\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u3001\u70ed\u70b9\u9632\u62a4\u7b49\u591a\u4e2a\u7ef4\u5ea6\u6765\u5e2e\u52a9\u5f00\u53d1\u8005\u4fdd\u969c\u5fae\u670d\u52a1\u7684\u7a33\u5b9a\u6027\u3002","title":"Sentinel"},{"location":"open_source/traffic_control/sentinel/#sentinel","text":"Java \u4e3b\u9879\u76ee C++ \u539f\u751f\u7248\u672c","title":"Sentinel"},{"location":"open_source/traffic_control/sentinel/#_1","text":"\u968f\u7740\u5fae\u670d\u52a1\u7684\u6d41\u884c\uff0c\u670d\u52a1\u548c\u670d\u52a1\u4e4b\u95f4\u7684\u7a33\u5b9a\u6027\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002Sentinel \u662f\u9762\u5411\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u7684\u6d41\u91cf\u63a7\u5236\u7ec4\u4ef6\uff0c\u4e3b\u8981\u4ee5\u6d41\u91cf\u4e3a\u5207\u5165\u70b9\uff0c\u4ece\u9650\u6d41\u3001\u6d41\u91cf\u6574\u5f62\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u3001\u70ed\u70b9\u9632\u62a4\u7b49\u591a\u4e2a\u7ef4\u5ea6\u6765\u5e2e\u52a9\u5f00\u53d1\u8005\u4fdd\u969c\u5fae\u670d\u52a1\u7684\u7a33\u5b9a\u6027\u3002","title":"\u662f\u4ec0\u4e48"},{"location":"operating_system/","text":"\u6982\u8ff0 \u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u7684\u76ee\u7684 \u4ece\u670d\u52a1\u7aef\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u4ece\u5b9e\u7528\u4e3b\u4e49\uff08pragmatic\uff09\u7684\u7acb\u573a\u51fa\u53d1\u3002 \u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u7684\u76ee\u7684 \uff0c\u4e0d\u662f\u8ba9\u4f60\u53bb\u53d1\u660e\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u6253\u8d25Linux\uff1b\u4e5f\u4e0d\u662f\u6210\u4e3a\u5185\u6838\u5f00\u53d1\u4eba\u5458\uff1b\u800c\u662f\u7406\u89e3\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u7528\u6237\u6001\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u600e\u6837\u7684\u8fd0\u884c\u73af\u5883\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u5e94\u8be5\u5982\u4f55\u624d\u80fd\u5145\u5206\u5229\u7528\u597d\u8fd9\u4e2a\u73af\u5883\uff0c\u54ea\u4e9b\u505a\u6cd5\u662f\u6709\u76ca\u7684\uff0c\u54ea\u4e9b\u505a\u6cd5\u662f\u65e0\u7528\u529f\uff0c\u54ea\u4e9b\u5219\u662f\u5e2e\u5012\u5fd9\u3002 \u2014\u2014\u9648\u7855","title":"\u6982\u8ff0"},{"location":"operating_system/#_1","text":"","title":"\u6982\u8ff0"},{"location":"operating_system/#_2","text":"\u4ece\u670d\u52a1\u7aef\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff0c\u4ece\u5b9e\u7528\u4e3b\u4e49\uff08pragmatic\uff09\u7684\u7acb\u573a\u51fa\u53d1\u3002 \u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u7684\u76ee\u7684 \uff0c\u4e0d\u662f\u8ba9\u4f60\u53bb\u53d1\u660e\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u6253\u8d25Linux\uff1b\u4e5f\u4e0d\u662f\u6210\u4e3a\u5185\u6838\u5f00\u53d1\u4eba\u5458\uff1b\u800c\u662f\u7406\u89e3\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u7528\u6237\u6001\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u600e\u6837\u7684\u8fd0\u884c\u73af\u5883\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u5e94\u8be5\u5982\u4f55\u624d\u80fd\u5145\u5206\u5229\u7528\u597d\u8fd9\u4e2a\u73af\u5883\uff0c\u54ea\u4e9b\u505a\u6cd5\u662f\u6709\u76ca\u7684\uff0c\u54ea\u4e9b\u505a\u6cd5\u662f\u65e0\u7528\u529f\uff0c\u54ea\u4e9b\u5219\u662f\u5e2e\u5012\u5fd9\u3002 \u2014\u2014\u9648\u7855","title":"\u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u7684\u76ee\u7684"},{"location":"operating_system/basic/memory_management/","text":"\u5185\u5b58\u7ba1\u7406 \u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u8981\u76ee\u7684\u662f\u6267\u884c\u7a0b\u5e8f\u3002\u5728\u6267\u884c\u65f6\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u673a\u5668\u8bbf\u95ee\u6570\u636e\u5e94\u8be5\u81f3\u5c11\u90e8\u5206\u5728\u5185\u5b58\u91cc\u3002 \u4e3a\u4e86\u63d0\u9ad8CPU\u7684\u5229\u7528\u7387\u548c\u54cd\u5e94\u7528\u6237\u7684\u901f\u5ea6\uff0c\u901a\u7528\u8ba1\u7b97\u673a\u5728\u5185\u5b58\u91cc\u5fc5\u987b\u4fdd\u7559\u591a\u4e2a\u8fdb\u7a0b\u3002\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u6709\u5f88\u591a\uff0c\u91c7\u7528\u7684\u65b9\u6cd5\u4e5f\u4e0d\u540c\uff1b\u6bcf\u4e2a\u7b97\u6cd5\u7684\u6709\u6548\u6027\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u60c5\u51b5\u3002\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u5f88\u591a\u56e0\u7d20\uff0c\u7279\u522b\u662f\u7cfb\u7edf\u7684\u786c\u4ef6\u8bbe\u8ba1\u3002\u5927\u591a\u6570\u7b97\u6cd5\u90fd\u9700\u8981\u786c\u4ef6\u652f\u6301\u3002 \u5185\u5b58\u7ba1\u7406\u7b56\u7565 \u4e00\u7ec4\u8fdb\u7a0b\u53ef\u4ee5\u5171\u4eab\u4e00\u4e2aCPU\u3002\u6b63\u662f\u7531\u4e8eCPU\u8c03\u5ea6\uff0c\u63d0\u9ad8\u4e86CPU\u7684\u5229\u7528\u7387\u548c\u8ba1\u7b97\u673a\u54cd\u5e94\u7528\u6237\u7684\u901f\u5ea6\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6027\u80fd\u7684\u6539\u8fdb\uff0c\u5e94\u5c06\u591a\u4e2a\u7a0b\u5e8f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u5171\u4eab\u5185\u5b58\u3002 \u8fd9\u4e00\u90e8\u5206\u8ba8\u8bba\u5185\u5b58\u7684\u5404\u79cd\u7ba1\u7406\u65b9\u6cd5\u3002\u5185\u5b58\u7ba1\u7406\u7b97\u6cd5\u6709\u5f88\u591a\uff1a\u4ece\u539f\u59cb\u7684\u88f8\u673a\u65b9\u6cd5\uff0c\u5230\u5206\u9875\u548c\u5206\u6bb5\u7684\u65b9\u6cd5\u3002\u6bcf\u79cd\u65b9\u6cd5\u90fd\u6709\u5404\u81ea\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\u4e3a\u7279\u5b9a\u7cfb\u7edf\u9009\u62e9\u5185\u5b58\u7ba1\u7406\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5f88\u591a\u56e0\u7d20\uff0c\u7279\u522b\u662f\u7cfb\u7edf\u7684\u786c\u4ef6\u8bbe\u8ba1\u3002\u6b63\u5982\u5c06\u4f1a\u770b\u5230\uff0c\u8bb8\u591a\u7b97\u6cd5\u90fd\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5bfc\u81f4\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u548c\u786c\u4ef6\u7684\u7d27\u5bc6\u7ed3\u5408\u3002 \u80cc\u666f \u5185\u5b58\u662f\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u3002\u5185\u5b58\u7531\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u5404\u81ea\u7684\u5730\u5740\u3002CPU\u6839\u636e\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u6307\u4ee4\uff0c\u8fd9\u4e9b\u6307\u4ee4\u53ef\u80fd\u5f15\u8d77\u5bf9\u7279\u5b9a\u5185\u5b58\u5730\u5740\u7684\u989d\u5916\u52a0\u8f7d\u4e0e\u5b58\u50a8\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u6307\u4ee4\u6267\u884c\u5468\u671f\uff0c\u9996\u5148\u4ece\u5185\u5b58\u8bfb\u53d6\u6307\u4ee4\u3002\u63a5\u7740\uff0c\u8be5\u6307\u4ee4\u4f1a\u88ab\u89e3\u7801\uff0c\u4e5f\u53ef\u80fd\u9700\u8981\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u64cd\u4f5c\u6570\u3002\u5728\u6307\u4ee4\u5bf9\u64cd\u4f5c\u6570\u6267\u884c\u540e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u5b58\u56de\u5230\u5185\u5b58\u3002\u5185\u5b58\u5355\u5143\u53ea\u770b\u5230\u5730\u5740\u6d41\uff0c\u800c\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5730\u5740\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff08\u7531\u6307\u4ee4\u8ba1\u6570\u5668\u3001\u7d22\u5f15\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u5e38\u4eae\u5730\u5740\u7b49\uff09\u6216\u5b83\u4eec\u662f\u4ec0\u4e48\uff08\u6307\u4ee4\u6216\u6570\u636e\uff09\u7684\u5730\u5740\u3002\u76f8\u5e94\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u5185\u5b58\u5730\u5740\u662f\u5982\u4f55\u7531\u7a0b\u5e8f\u4ea7\u751f\u7684\uff0c\u800c\u53ea\u662f\u5bf9\u8fd0\u884c\u7a0b\u5e8f\u4ea7\u751f\u7684\u7684\u5185\u5b58\u5730\u5740\u5e8f\u5217\u611f\u5174\u8da3\u3002 \u57fa\u672c\u786c\u4ef6 CPU\u5185\u7f6e\u5bc4\u5b58\u5668\u901a\u5e38\u53ef\u4ee5\u5728\u4e00\u4e2aCPU\u65f6\u949f\u5468\u671f\u5185\u5b8c\u6210\u8bbf\u95ee\u3002\u4f46\u5185\u5b58\u8bbf\u95ee\u53ef\u80fd\u9700\u8981\u591a\u4e2aCPU\u65f6\u949f\u5468\u671f\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u6ca1\u6709\u6570\u636e\u4ee5\u4fbf\u5b8c\u6210\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\uff0cCPU\u901a\u5e38\u9700\u8981 \u6682\u505c \uff08stall\uff09\u3002\u8865\u6551\u63aa\u65bd\u662f\u5728CPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u2014\u2014\u901a\u5e38\u662f\u5728CPU\u82af\u7247\u4e0a\u2014\u2014\u589e\u52a0 \u9ad8\u901f\u7f13\u5b58 \uff08cache\uff09\u3002\u4e3a\u7ba1\u7406CPU\u5185\u7f6e\u7684\u7f13\u5b58\uff0c\u786c\u4ef6\u52a0\u5feb\u5185\u5b58\u8bbf\u95ee\uff0c\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a7\u5236\u3002 \u51fa\u4e8e\u4fdd\u62a4\uff0c\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c \u57fa\u5730\u5740\u5bc4\u5b58\u5668 \uff08base register\uff09\u542b\u6709\u6700\u5c0f\u7684\u5408\u6cd5\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u754c\u5730\u5740\u5bc4\u5b58\u5668 \uff08limit register\uff09\u6307\u5b9a\u4e86\u8303\u56f4\u7684\u5927\u5c0f\u3002\u5982\u4e0b\u5982\u6240\u793a\uff1a \u57fa\u5730\u5740\u5bc4\u5b58\u5668\u548c\u63a5\u7ebf\u5730\u5740\u5bc4\u5b58\u5668\u5b9a\u4e49\u903b\u8f91\u5730\u5740\u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4\u4fdd\u62a4\u7684\u5b9e\u73b0\u662f\u901a\u8fc7CPU\u786c\u4ef6\u5bf9\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4ea7\u751f\u7684\u5730\u5740\u4e0e\u5bc4\u5b58\u5668\u7684\u5730\u5740\u8fdb\u884c\u6bd4\u8f83\u6765\u5b8c\u6210\u7684\u3002\u5f53\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u6267\u884c\u7684\u7a0b\u5e8f\u8bd5\u56fe\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u6216\u5176\u4ed6\u7528\u6237\u5185\u5b58\u65f6\uff0c\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\uff0c\u800c\u64cd\u4f5c\u7cfb\u7edf\u5219\u5c06\u5176\u4f5c\u4e3a\u81f4\u547d\u9519\u8bef\u6765\u5904\u7406\uff0c\u5982\u4e0b\u5982\u6240\u793a\u3002\u8fd9\u79cd\u65b9\u6848\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u65e0\u610f\u6216\u6545\u610f\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u6216\u5176\u4ed6\u7528\u6237\u7684\u4ee3\u7801\u6216\u6570\u636e\u7ed3\u6784\u3002 \u91c7\u7528\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u548c\u63a5\u7ebf\u5730\u5740\u5bc4\u5b58\u5668\u7684\u786c\u4ef6\u5730\u5740\u4fdd\u62a4 \u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u6267\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u53ca\u7528\u6237\u7684\u5185\u5b58\u3002\u8fd9\u9879\u89c4\u5b9a\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\uff1a\u52a0\u8f7d\u7528\u6237\u7a0b\u5e8f\u5230\u7528\u6237\u5185\u5b58\uff0c\u8f6c\u50a8\u51fa\u73b0\u9519\u8bef\u7684\u7a0b\u5e8f\uff0c\u8bbf\u95ee\u548c\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\uff0c\u6267\u884c\u7528\u6237\u5185\u5b58\u7684I/O\uff0c\u4ee5\u53ca\u63d0\u4f9b\u8bb8\u591a\u5176\u4ed6\u670d\u52a1\u7b49\u3002\u4f8b\u5982\uff0c\u591a\u4efb\u52a1\u7cfb\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u5e94\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u5b58\u8d37\u5185\u5b58\uff0c\u518d\u4ece\u5185\u5b58\u4e2d\u8c03\u5165\u4e0b\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5230\u5bc4\u5b58\u5668\u3002 \u5730\u5740\u7ed1\u5b9a \u5728\u78c1\u76d8\u4e0a\u7b49\u5f85\u8c03\u5230\u5185\u5b58\u4ee5\u4fbf\u6267\u884c\u7684\u8fdb\u7a0b\u5f62\u6210 \u8f93\u5165\u961f\u5217 \uff08input queue\uff09\u3002 \u7528\u6237\u7a0b\u5e8f\u5728\u6267\u884c\u524d\u4e00\u822c\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u6b65\u9aa4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e00\u4e2a\u7528\u6237\u7a0b\u5e8f\u7684\u591a\u6b65\u9aa4\u5904\u7406 \u901a\u5e38\uff0c\u6570\u636e \u7ed1\u5b9a \uff08bind\uff09\u5230\u5b58\u50a8\u5668\u5730\u5740\u53ef\u5728\u6cbf\u9014\u7684\u7684\u4efb\u4f55\u4e00\u6b65\u8fdb\u884c\uff1a \u7f16\u8bd1\u65f6 \uff08compile time\uff09\uff1a\u5982\u679c\u5728\u7f16\u8bd1\u65f6\u5c31\u53ef\u4ee5\u77e5\u9053\u8fdb\u7a0b\u5728\u5185\u5b58\u4e2d\u7684\u9a7b\u7559\u5730\u5740\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u751f\u6210 \u7edd\u5bf9\u4ee3\u7801 \uff08absolute code\uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e8b\u5148\u77e5\u9053\u7528\u6237\u8fdb\u7a0b\u9a7b\u7559\u5728\u5185\u5b58\u5730\u5740 R R \u5904\uff0c\u90a3\u4e48\u751f\u6210\u7684\u7f16\u8bd1\u4ee3\u7801\u5c31\u53ef\u4ee5\u4ece\u8be5\u4f4d\u7f6e\u5f00\u59cb\u5e76\u5411\u540e\u5ef6\u4f38\u3002\u5982\u679c\u5c06\u6765\u5f00\u59cb\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801\u3002MS-DOS\u7684.COM\u683c\u5f0f\u7684\u7a0b\u5e8f\u5c31\u662f\u5728\u7f16\u8bd1\u65f6\u7ed1\u5b9a\u6210\u7edd\u5bf9\u4ee3\u7801\u7684\u3002 \u52a0\u8f7d\u65f6 \uff08load time\uff09\uff1a\u5982\u679c\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u8fdb\u7a0b\u5c06\u9a7b\u7559\u5728\u4f55\u5904\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u5e94\u8be5\u751f\u6210 \u53ef\u91cd\u5b9a\u4f4d\u4ee3\u7801 \uff08relocatable code\uff09\u3002\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6700\u540e\u7ed1\u5b9a\u4f1a\u5ef6\u8fdf\u5230\u52a0\u8f7d\u65f6\u624d\u8fdb\u884c\u3002\u5982\u679c\u5f00\u59cb\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u7528\u6237\u4ee3\u7801\u5df2\u5408\u5e76\u66f4\u6539\u7684\u503c\u3002 \u6267\u884c\u65f6 \uff08runtime time\uff09\u5982\u679c\u8fdb\u7a0b\u5728\u6267\u884c\u65f6\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5185\u5b58\u6bb5\u79fb\u5230\u53e6\u4e00\u4e2a\u5185\u5b58\u6bb5\uff0c\u90a3\u4e48\u7ed1\u5b9a\u5e94\u5ef6\u8fdf\u5230\u6267\u884c\u65f6\u624d\u8fdb\u884c\u3002\u5982\u4e0b\u8282\u6240\u5c5e\uff0c\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\u9700\u8981\u7279\u5b9a\u786c\u4ef6\u652f\u6301\u3002\u5927\u591a\u6570\u7684\u901a\u7528\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002 \u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4 CPU\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a \u903b\u8f91\u5730\u5740 \uff08logical address\uff09\uff0c\u800c\u5185\u5b58\u5355\u5143\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230 \u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668 \uff08memory-address register\uff09\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a \u7269\u7406\u5730\u5740 \uff08physical address\uff09\u3002 \u7f16\u8bd1\u65f6\u548c\u52a0\u8f7d\u65f6\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6cd5\u751f\u6210\u76f8\u540c\u7684\u903b\u8f91\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u3002\u7136\u800c\uff0c\u6267\u884c\u65f6\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u751f\u6210\u4e0d\u540c\u7684\u903b\u8f91\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u79f0\u903b\u8f91\u5730\u5740\u4e3a \u865a\u62df\u5730\u5740 \uff08virtual address\uff09\u3002\u5728 \u57fa\u7840\u68b3\u7406 \u90e8\u5206\u6211\u4eec\u5bf9 \u903b\u8f91\u5730\u5740 \u548c \u865a\u62df\u5730\u5740 \u4e0d\u52a0\u533a\u5206\u3002\u6709\u7a0b\u5e8f\u751f\u6210\u7684\u903b\u8f91\u5730\u5740\u96c6\u5408\u79f0\u4e3a \u903b\u8f91\u5730\u5740\u7a7a\u95f4 \uff08logical address space\uff09\uff0c\u8fd9\u4e9b\u903b\u8f91\u5730\u5740\u5bf9\u5e94\u7684\u6240\u6709\u7269\u7406\u5730\u5740\u96c6\u5408\u79f0\u4e3a \u7269\u7406\u5730\u5740\u7a7a\u95f4 \uff08physical address space\uff09\u3002 \u4ece\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8fd0\u884c\u65f6\u6620\u5c04\u662f\u7531 \u5185\u5b58\u7ba1\u7406\u5355\u5143 \uff08Memory-Management Unit\uff0cMMU\uff09\u7684\u786c\u4ef6\u8bbe\u5907\u6765\u5b8c\u6210\u3002\u6709\u591a\u79cd\u65b9\u6848\u6765\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\uff0c\u8fd9\u91cc\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6848\u4e3a\u4f8b\uff08\u4e5f\u662f\u524d\u8ff0\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u65b9\u6848\u7684\u63a8\u5e7f\uff09\u3002\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u8fd9\u91cc\u79f0\u4e3a \u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668 \uff08relocation register\uff09\u3002 \u4f7f\u7528\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u7684\u52a8\u6001\u91cd\u5b9a\u4f4d \u52a8\u6001\u52a0\u8f7d \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6240\u6709\u6570\u636e\u90fd\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u5219\u8fdb\u7a0b\u7684\u5927\u5c0f\u5c06\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u5185\u5b58\u7a7a\u95f4\u5229\u7528\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 \u52a8\u6001\u52a0\u8f7d \uff08dynamic loading\uff09\u3002 \u52a8\u6001\u94fe\u63a5\u4e0e\u5171\u4eab\u5e93 \u52a8\u6001\u94fe\u63a5\u5e93 \uff08dynamically linked library\uff09\u4e3a\u7cfb\u7edf\u5e93\uff0c\u53ef\u94fe\u63a5\u5230\u7528\u6237\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u8fd0\u884c\u3002\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ea\u652f\u6301 \u9759\u6001\u94fe\u63a5 \uff08static linking\uff09\uff0c\u5b83\u7684\u7cfb\u7edf\u5e93\u4e0e\u5176\u4ed6\u76ee\u6807\u6a21\u5757\u4e00\u6837\uff0c\u901a\u8fc7\u52a0\u8f7d\u7a0b\u9700\uff0c\u88ab\u5408\u5e76\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6620\u50cf\u3002\u52a8\u6001\u94fe\u63a5\u7c7b\u4f3c\u4e8e\u52a8\u6001\u52a0\u8f7d\u3002\u8fd9\u91cc\uff0c\u4e0d\u662f\u52a0\u8f7d\u800c\u662f\u8fde\u63a5\uff0c\u4f1a\u5ef6\u8fdf\u5230\u8fd0\u884c\u65f6\u3002\u8fd9\u79cd\u529f\u80fd\u901a\u5e38\u7528\u4e8e\u7cfb\u7edf\u5e93\uff0c\u5982\u8bed\u8a00\u7684\u5b50\u7a0b\u5e8f\u5e93\u3002\u6ca1\u6709\u8fd9\u79cd\u529f\u80fd\uff0c\u7cfb\u7edf\u5185\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u9700\u8981\u4e00\u4efd\u8bed\u8a00\u5e93\u7684\u526f\u672c\uff08\u6216\u81f3\u5c11\u90a3\u4e9b\u88ab\u7a0b\u5e8f\u6240\u5f15\u7528\u7684\u5b50\u7a0b\u5e8f\uff09\u3002\u8fd9\u79cd\u8981\u6c42\u6d6a\u8d39\u4e86\u78c1\u76d8\u7a7a\u95f4\u548c\u5185\u5b58\u7a7a\u95f4\u3002 \u5982\u679c\u6709\u52a8\u6001\u94fe\u63a5\uff0c\u5728\u4e8c\u8fdb\u5236\u6620\u50cf\u5185\uff0c\u6bcf\u4e2a\u5e93\u7a0b\u5e8f\u7684\u5f15\u7528\u90fd\u6709\u4e00\u4e2a \u5b58\u6839 \uff08stub\uff09\u3002\u5b58\u6839\u662f\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u7528\u6765\u6307\u51fa\u5982\u4f55\u5b9a\u4f4d\u9002\u5f53\u7684\u5185\u5b58\u9a7b\u7559\u5e93\u7a0b\u5e8f\uff0c\u6216\u8005\u5728\u7a0b\u5e8f\u4e0d\u5728\u5185\u5b58\u65f6\u5e94\u5982\u4f55\u52a0\u8f7d\u5e93\u3002 \u52a8\u6001\u94fe\u63a5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5e93\u7684\u66f4\u65b0\uff08\u5982\u4fee\u6539bug\uff09\u3002\u7248\u672c\u4fe1\u606f\u5305\u542b\u5728\u7a0b\u5e8f\u548c\u5e93\u4e2d\u3002\u4e00\u4e2a\u54ed\u7684\u591a\u4e2a\u7248\u672c\u90fd\u53ef\u4ee5\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u7a0b\u5e8f\u5c06\u901a\u8fc7\u7248\u672c\u4fe1\u606f\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5e93\u7684\u526f\u672c\u3002\u6b21\u8981\u66f4\u6539\u4fdd\u7559\u76f8\u540c\u7684\u7248\u672c\u53f7\uff0c\u800c\u4e3b\u8981\u66f4\u6539\u5219\u589e\u52a0\u7248\u672c\u53f7\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u91c7\u7528\u65b0\u5e93\u7f16\u8bd1\u7684\u7a0b\u5e8f\u624d\u4f1a\u53d7\u65b0\u5e93\u7684\u4e0d\u517c\u5bb9\u6539\u52a8\u7684\u5f71\u54cd\u3002\u5728\u65b0\u5e93\u5b89\u88c5\u4e4b\u524d\u94fe\u63a5\u7684\u5176\u4ed6\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u4f7f\u7528\u8f83\u65e7\u7684\u5e93\u3002\u8fd9\u79cd\u7cfb\u7edf\u4e5f\u79f0\u4e3a \u5171\u4eab\u5e93 \uff08shared library\uff09\u3002 \u4e0e\u52a8\u6001\u52a0\u8f7d\u4e0d\u540c\uff0c\u52a8\u6001\u94fe\u63a5\u901a\u5e38\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e2e\u52a9\u3002\u5982\u679c\u5185\u5b58\u4e2d\u7684\u8fdb\u7a0b\u662f\u5f7c\u6b64\u4fdd\u62a4\u7684\uff0c\u90a3\u4e48\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u624d\u53ef\u4ee5\u68c0\u67e5\u6240\u9700\u7a0b\u5e8f\u662f\u5426\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u5185\uff0c\u6216\u662f\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u8bbf\u95ee\u540c\u6837\u7684\u5185\u5b58\u5730\u5740\u3002\u8fd9\u4e2a\u6982\u5ff5\u5c06\u5728 \u5206\u9875 \u90e8\u5206\u88ab\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u3002 \u4ea4\u6362 \u8fdb\u7a0b\u5fc5\u987b\u5728\u5185\u5b58\u4e2d\u4ee5\u4fbf\u6267\u884c\u3002\u4e0d\u8fc7\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u6682\u65f6\u4ece\u5185\u5b58 \u4ea4\u6362 \uff08swap\uff09\u5230 \u5907\u4efd\u5b58\u50a8 \uff08backing store\uff09\uff0c\u5f53\u518d\u6b21\u6267\u884c\u65f6\u5728\u8c03\u56de\u5230\u5185\u5b58\u4e2d\uff0c\u5982\u4e0b\u56fe\uff1a \u4f7f\u7528\u78c1\u76d8\u4f5c\u4e3a\u5b58\u50a8\u4ed3\u5e93\u7684\u4e24\u4e2a\u8fdb\u7a0b\u7684\u4ea4\u6362 \u4ea4\u6362\u6709\u53ef\u80fd\u8ba9\u6240\u6709\u8fdb\u7a0b\u7684\u603b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u8d85\u8fc7\u771f\u5b9e\u7cfb\u7edf\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u7cfb\u7edf\u7684\u591a\u9053\u7a0b\u5e8f\u7a0b\u5ea6\u3002 \u6807\u51c6\u4ea4\u6362 \u6807\u51c6\u4ea4\u6362\u5728\u5185\u5b58\u548c\u5907\u4efd\u5b58\u50a8\u4e4b\u95f4\u79fb\u52a8\u8fdb\u7a0b\u3002\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u53ef\u8fd0\u884c\u7684\u6240\u6709\u8fdb\u7a0b\u7684 \u5c31\u7eea\u961f\u5217 \uff08ready queue\uff09\uff0c\u5b83\u4eec\u7684\u6620\u50cf\u5728\u5907\u4efd\u5b58\u50a8\u6216\u5185\u5b58\u4e2d\u3002\u5f53CPU\u51b3\u5b9a\u8981\u6267\u884c\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u4ed6\u8c03\u7528\u5206\u6d3e\u5668\u3002\u5206\u914d\u5668\u68c0\u67e5\u961f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u662f\u5426\u5728\u5185\u5b58\u4e2d\u3002\u5982\u679c\u4e0d\u5728\uff0c\u5e76\u4e14\u6ca1\u6709\u7a7a\u95f2\u5185\u5b58\u533a\u57df\uff0c\u90a3\u4e48\u5206\u6d3e\u5668\u4f1a\u6362\u51fa\uff08swap out\uff09\u5f53\u524d\u4f4d\u4e8e\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u6362\u5165\uff08swap in\uff09\u6240\u9700\u8fdb\u7a0b\u3002\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u5bc4\u5b58\u5668\uff0c\u5e76\u5c06\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u6240\u9009\u8fdb\u7a0b\u3002 \u8fd9\u79cd\u4ea4\u6362\u7cfb\u7edf\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u95f4\u76f8\u5f53\u9ad8\u3002\u56e0\u6b64\u77e5\u9053\u4e00\u4e2a\u8fdb\u7a0b\u771f\u6b63\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4\u800c\u4e0d\u662f\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u7528\u6237\u9700\u8981\u544a\u8bc9\u7cfb\u7edf\u5b83\u7684\u5185\u5b58\u9700\u6c42\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u5177\u6709\u52a8\u6001\u5185\u5b58\u9700\u6c42\u7684\u8fdb\u7a0b\u9700\u8981\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\uff08 request_memory() \u548c release_memory() \uff09\u6765\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf\u5b83\u7684\u5185\u5b58\u9700\u6c42\u53d8\u5316\u60c5\u51b5\u3002 \u8003\u8651\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u6362\u51fa\u8fdb\u7a0b P_1 P_1 \u800c\u6362\u5165\u8fdb\u7a0b P_2 P_2 \uff0c\u663e\u7136 P_1 P_1 \u5e94\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u7136\u800c\u5982\u679c\u5982\u679cI/O\u5f02\u6b65\u8bbf\u95ee\u7528\u6237\u5185\u5b58\u7684I/O\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u8be5\u8fdb\u7a0b\u5c31\u4e0d\u80fd\u6362\u51fa\u3002I/O\u64cd\u4f5c\u53ef\u80fd\u8bd5\u56fe\u4f7f\u7528\u73b0\u5728\u5df2\u5c5e\u4e8e\u8fdb\u7a0b P_2 P_2 \u7684\u5185\u5b58\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u79cd\u4e3b\u8981\u65b9\u6cd5\uff1a \u4e0d\u80fd\u6362\u51fa\u7b49\u5f85\u5904\u7406I/O\u7684\u8fdb\u7a0b\uff1b I/O\u64cd\u4f5c\u7684\u6267\u884c\u53ea\u80fd\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u51b2\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ea\u6709\u5728\u8fdb\u7a0b\u6362\u5165\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7f13\u51b2\u4e0e\u8fdb\u7a0b\u5185\u5b58\u4e4b\u95f4\u624d\u80fd\u8fdb\u884c\u6570\u636e\u8f6c\u79fb\u3002\u8fd9\u79cd \u53cc\u7f13\u51b2 \uff08double buffering\uff09\u672c\u8eab\u589e\u52a0\u4e86\u5f00\u9500\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u518d\u6b21\u590d\u5236\u6570\u636e\uff0c\u4ece\u5185\u6838\u5185\u5b58\u5230\u7528\u6237\u5185\u5b58\uff0c\u7136\u540e\u7528\u6237\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5b83\u3002 \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u5e76\u4e0d\u9002\u7528\u6807\u51c6\u4ea4\u6362\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u53d8\u79cd\uff1a \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7981\u6b62\u4ea4\u6362\uff1b\u5f53\u7a7a\u95f2\u5185\u5b58\uff08\u672a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6216\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\uff09\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c\u65f6\uff0c\u542f\u7528\u4ea4\u6362\u3002\u5f53\u7a7a\u95f2\u5185\u5b58\u6570\u91cf\u589e\u52a0\u4e86\uff0c\u5c31\u505c\u6b62\u4ea4\u6362\u3002 \u4ea4\u6362\u8fdb\u7a0b\u7684\u90e8\u5206\uff08\u800c\u4e0d\u662f\u6574\u4e2a\u8fdb\u7a0b\uff09\uff0c\u4ee5\u964d\u4f4e\u4ea4\u6362\u65f6\u95f4\u3002 \u901a\u5e38\u8fd9\u4e9b\u4ea4\u6362\u7684\u53d8\u79cd\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u8d77\u5de5\u4f5c\u3002 \u79fb\u52a8\u7cfb\u7edf\u7684\u4ea4\u6362 \u79fb\u52a8\u7cfb\u7edf\u901a\u5e38\u4e0d\u652f\u6301\u4efb\u4f55\u5f62\u5f0f\u7684\u4ea4\u6362\u3002\u79fb\u52a8\u8bbe\u5907\u901a\u5e38\u91c7\u7528\u95ea\u5b58\uff0c\u5bfc\u81f4\u7684\u7a7a\u95f4\u7ea6\u675f\u662f\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u8005\u907f\u514d\u4ea4\u6362\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u53e6\u5916\u5176\u4ed6\u7684\u539f\u56e0\uff1a \u95ea\u5b58\u5199\u5165\u6b21\u6570\u7684\u9650\u5236 \u5185\u5b58\u95ea\u5b58\u4e4b\u95f4\u541e\u5410\u91cf\u7684\u5dee\u5f02 \u8fde\u7eed\u5185\u5b58\u5206\u914d \u5185\u5b58\u901a\u5e38\u5206\u4e3a\u4e24\u4e2a\u533a\u57df\uff1a\u4e00\u4e2a\u7528\u4e8e \u9a7b\u7559\u64cd\u4f5c\u7cfb\u7edf \uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e \u7528\u6237\u8fdb\u7a0b \u3002\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u653e\u5728\u4f4e\u5185\u5b58\u6216\u9ad8\u5185\u5b58\u3002\u5f71\u54cd\u8fd9\u4e00\u51b3\u5b9a\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u4e2d\u65ad\u5411\u91cf\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u4e2d\u65ad\u5411\u91cf\u901a\u5e38\u4f4d\u4e8e\u4f4e\u5185\u5b58\u3002\u56e0\u6b64\u5de5\u7a0b\u5e08\u4e00\u822c\u5c06\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u653e\u5728\u4f4e\u5185\u5b58\u3002 \u9700\u8981\u8003\u8651\uff0c\u5982\u4f55\u5c06\u8f93\u5165\u961f\u5217\u4e2d\u9700\u8981\u8c03\u5165\u5185\u5b58\u7684\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002\u5728\u91c7\u7528 \u8fde\u7eed\u5185\u5b58\u5206\u914d \uff08contiguous memory allocation\uff09\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4f4d\u4e8e\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u4e0e\u5305\u542b\u4e0b\u4e00\u8fdb\u57ce\u7684\u5185\u5b58\u76f8\u8fde\u3002 \u5185\u5b58\u4fdd\u62a4 \u524d\u9762\u8ba8\u8bba\u8fc7\u57fa\u4e8e\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u548c\u754c\u9650\u5bc4\u5b58\u5668\u7684\u5185\u5b58\u5730\u5740\u4fdd\u62a4\u673a\u5236\u3002\u540c\u65f6\u91cd\u5b9a\u4f4d\u65b9\u6848\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u4ee5\u4fbf \u64cd\u4f5c\u7cfb\u7edf\u52a8\u6001\u6539\u53d8\u5176\u5927\u5c0f \u3002\u8fd9\u4e00\u7075\u6d3b\u6027\u7528\u9014\u5e7f\u6cdb\u3002\u4f8b\u5982\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u9a71\u52a8\u7a0b\u5e8f\u9700\u8981\u4ee3\u7801\u548c\u7f13\u51b2\u7a7a\u95f4\u3002\u5982\u679c\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\uff08\u6216\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u670d\u52a1\uff09\u4e0d\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u5728\u5185\u5b58\u4e2d\u4fdd\u7559\u5b83\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u7a7a\u95f4\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\u3002\u8fd9\u7c7b\u4ee3\u7801\u6709\u65f6\u79f0\u4e3a \u6682\u65f6 \uff08transient\uff09\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\uff1b\u5b83\u4eec\u6839\u636e\u9700\u8981\u8c03\u5165\u8c03\u51fa\u3002 \u5185\u5b58\u5206\u914d \u6700\u7b80\u5355\u7684\u5206\u914d\u65b9\u6cd5\u4e4b\u4e00\uff0c\u5c31\u662f\u5c06\u5185\u5b58\u5206\u4e3a\u591a\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684 \u5206\u533a \uff08partition\uff09\u3002\u6bcf\u4e2a\u5206\u533a\u53ef\u4ee5\u53ea\u5305\u542b\u4e00\u4e2a\u8fdb\u7a0b\u3002\u56e0\u6b64\uff0c\u591a\u9053\u7a0b\u5e8f\u7684\u7a0b\u5e8f\u53d7\u9650\u4e8e\u5206\u533a\u6570\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd \u591a\u5206\u533a\u65b9\u6cd5 \uff08multiple-partition method\uff09\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u5206\u533a\u7a7a\u95f2\u65f6\uff0c\u5b83\u7684\u5206\u533a\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u3002 \u5bf9\u4e8e \u53ef\u53d8\u5206\u533a \uff08variable-partition\uff09\u65b9\u6848\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e00\u4e2a\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u54ea\u4e9b\u5185\u5b58\u53ef\u7528\u548c\u54ea\u4e9b\u5185\u5b58\u5df2\u7528\u3002\u5f00\u59cb\uff0c\u6240\u6709\u5185\u5b58\u90fd\u53ef\u7528\u4e8e\u7528\u6237\u8fdb\u7a0b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u5927\u5757\u7684\u53ef\u7528\u5185\u5b58\uff0c\u79f0\u4e3a \u5b54 \uff08hole\uff09\u3002\u6700\u7ec8\uff0c\u5185\u5b58\u662f\u4e00\u4e2a\u5305\u62ec\u5404\u79cd\u5927\u5c0f\u7684\u5b54\u7684\u96c6\u5408\u3002 \u8fd9\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7 \u52a8\u6001\u5b58\u50a8\u5206\u914d\u95ee\u9898 \uff08dynamic storage-allocation problem\uff09\uff08\u6839\u636e\u4e00\u7ec4\u7a7a\u95f2\u5b54\u6765\u5206\u914d\u5927\u5c0f\u4e3a n n \u7684\u8bf7\u6c42\uff09\u7684\u4e00\u4e2a\u7279\u4f8b\u3002\u8fd9\u4e2a\u95ee\u9898\u6709\u8bb8\u591a\u89e3\u51b3\u65b9\u6848\u3002\u4ece\u4e00\u7ec4\u53ef\u7528\u5b54\u4e2d\u9009\u62e9\u4e00\u4e2a\u7a7a\u95f2\u5b54\u7684\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u6cd5\u5305\u62ec\uff1a \u9996\u6b21\u9002\u5e94 \uff08first-fit\uff09\uff1a\u5206\u914d\u9996\u4e2a\u8db3\u591f\u5927\u7684\u5b54\u3002\u67e5\u627e\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\uff0c\u4e5f\u53ef\u4ee5\u4ece\u4e0a\u6b21\u9996\u6b21\u9002\u5e94\u7ed3\u675f\u65f6\u5f00\u59cb\u3002\u4e00\u65e6\u627e\u5230\u8db3\u591f\u5927\u7684\u7a7a\u95f2\u5b54\uff0c\u5c31\u53ef\u4ee5\u505c\u6b62\u3002 \u6700\u4f18\u9002\u5e94 \uff08best-fit\uff09\uff1a\u5206\u914d\u6700\u5c0f\u7684\u8db3\u591f\u5927\u7684\u5b54\u3002\u5e94\u67e5\u627e\u6574\u4e2a\u8868\uff0c\u9664\u975e\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u6700\u5c0f\u5269\u4f59\u5b54\u3002 \u6700\u5dee\u9002\u5e94 \uff08worst-fit\uff09\uff1a\u5206\u914d\u6700\u5927\u7684\u5b54\u3002\u540c\u6837\uff0c\u5e94\u8be5\u67e5\u627e\u6574\u4e2a\u5217\u8868\uff0c\u9664\u975e\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u6700\u5927\u5269\u4f59\u5b54\uff0c\u8be5\u5b54\u53ef\u80fd\u6bd4\u6700\u4f18\u9002\u5e94\u4ea7\u751f\u7684\u8f83\u5c0f\u5269\u4f59\u5b54\u66f4\u4e3a\u9002\u7528\u3002 \u6a21\u62df\u7ed3\u679c\u663e\u793a\uff0c\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u5728\u6267\u884c\u65f6\u95f4\u548c\u5229\u7528\u7a7a\u95f4\u65b9\u9762\u90fd\u597d\u4e8e\u6700\u5dee\u9002\u5e94\u3002\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u5728\u5229\u7528\u7a7a\u95f4\u65b9\u9762\u96be\u5206\u4f2f\u4ef2\uff0c\u4f46\u662f\u9996\u6b21\u9002\u5e94\u66f4\u5feb\u4e00\u4e9b\u3002 \u788e\u7247 \u5185\u5b58\u5206\u914d\u7684\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u7b97\u6cd5\u90fd\u6709 \u5916\u90e8\u788e\u7247 \uff08external fragmentation\uff09\u7684\u95ee\u9898\u3002\u91c7\u7528\u9996\u6b21\u9002\u5e94\u65b9\u6cd5\u7684\u7edf\u8ba1\u8bf4\u660e\uff0c\u4e0d\u7ba1\u4f7f\u7528\u4ec0\u4e48\u4f18\u5316\uff0c\u5047\u5b9a\u6709 N N \u4e2a\u53ef\u5206\u914d\u5757\uff0c\u90a3\u4e48\u53ef\u80fd\u6709 0.5N 0.5N \u4e2a\u5757\u4e3a\u5916\u90e8\u788e\u7247\u3002\u5373 \\frac{1}{3} \\frac{1}{3} \u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u80fd\u4f7f\u7528\u3002\u8fd9\u4e00\u7279\u6027\u79f0\u4e3a 50%\u89c4\u5219 50%\u89c4\u5219 \uff0850-percent rule\uff09\u3002 \u5185\u5b58\u788e\u7247\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5185\u90e8\u7684\u3002\u5047\u8bbe\u6709\u4e00\u4e2a 18464 18464 \u5b57\u8282\u5927\u5c0f\u7684\u5b54\uff0c\u5e76\u91c7\u7528\u591a\u5206\u533a\u5206\u914d\u65b9\u6848\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981 18462 18462 \u5b57\u8282\u3002\u5982\u679c\u53ea\u80fd\u5206\u914d\u6240\u8981\u6c42\u7684\u5757\uff0c\u90a3\u4e48\u8fd8\u5269\u4e0b\u4e00\u4e2a 2 2 \u4e2a\u5b57\u8282\u7684\u5b54\u3002\u7ef4\u62a4\u8fd9\u4e2a\u5b54\u7684\u5f00\u9500\u8981\u6bd4\u5b54\u672c\u8eab\u5927\u5f88\u591a\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u6309\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\u4e3a\u5355\u4f4d\uff08\u800c\u4e0d\u662f\u5b57\u8282\uff09\u6765\u5206\u914d\u5185\u5b58\u3002\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\uff0c\u8fdb\u7a0b\u6240\u5206\u914d\u7684\u5185\u5b58\u53ef\u80fd\u6bd4\u6240\u9700\u8981\u7684\u8981\u5927\u3002\u8fd9\u4e24\u4e2a\u6570\u5b57\u53ea\u5dee\u79f0\u4e3a \u5185\u90e8\u788e\u7247 \uff08internal fragmentation\uff09\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5728\u5206\u533a\u5185\u90e8\uff0c\u4f46\u53c8\u4e0d\u80fd\u7528\u3002 \u5916\u90e8\u788e\u7247\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f \u7d27\u7f29 \uff08compaction\uff09\uff0c\u5b83\u7684\u76ee\u7684\u662f\u79fb\u52a8\u5185\u5b58\u5185\u5bb9\uff0c\u4ee5\u4fbf\u5c06\u6240\u6709\u7a7a\u95f2\u7a7a\u95f4\u5408\u5e76\u6210\u4e00\u6574\u5757\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u5f00\u9500\u6602\u8d35\u3002 \u5916\u90e8\u788e\u7247\u95ee\u9898\u7684\u53e6\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\u5141\u8bb8\u8fdb\u7a0b\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u662f\u4e0d\u8fde\u7eed\u7684\uff1b\u8fd9\u6837\uff0c\u53ea\u8981\u6709\u7269\u7406\u5185\u5b58\u53ef\u7528\uff0c\u5c31\u5141\u8bb8\u4e3a\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u3002\u6709\u4e24\u79cd\u4e92\u8865\u7684\u6280\u672f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\u5206\u6bb5\u548c\u5206\u9875\u3002\u8fd9\u4e24\u4e2a\u6280\u672f\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u3002 \u788e\u7247\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\uff1b\u5f53\u9700\u8981\u7ba1\u7406\u6570\u636e\u5757\u65f6\u5b83\u5c31\u53ef\u80fd\u51fa\u73b0\u3002\u5728\u5b58\u50a8\u7ba1\u7406\u90e8\u5206\u4e5f\u4f1a=\u6709\u8ba8\u8bba\u3002 \u5206\u6bb5 \u6b63\u5982\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u7528\u6237\u7684\u5185\u5b58\u89c6\u56fe\u548c\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u4e0d\u4e00\u6837\u3002\u8fd9\u540c\u6837\u9002\u7528\u4e8e\u7a0b\u5e8f\u5458\u7684\u5185\u5b58\u89c6\u56fe\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u6309\u7269\u7406\u6027\u8d28\u6765\u5904\u7406\u5185\u5b58\u662f\u4e0d\u65b9\u4fbf\u7684\u3002\u5982\u679c\u786c\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u5185\u5b58\u673a\u5236\uff0c\u4ee5\u4fbf\u5c06\u7a0b\u5e8f\u5458\u7684\u5185\u5b58\u89c6\u56fe\u6620\u5c04\u5230\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u4f1a\u5982\u4f55\uff1f\u8fd9\u6837\uff0c\u7cfb\u7edf\u5c06\u6709\u66f4\u591a\u7684\u81ea\u7531\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u800c\u7a0b\u5e8f\u5458\u5c06\u6709\u4e00\u4e2a\u66f4\u81ea\u7136\u7684\u7f16\u7a0b\u73af\u5883\u3002\u5206\u6bb5\u63d0\u4f9b\u4e86\u8fd9\u79cd\u673a\u5236\u3002 \u57fa\u672c\u65b9\u6cd5 \u5728\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u773c\u4e2d\uff0c\u5185\u5b58\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u7684\u7ebf\u6027\u6570\u7ec4\uff0c\u6709\u7684\u5305\u542b\u6307\u4ee4\u800c\u5176\u4ed6\u7684\u5305\u542b\u6570\u636e\u3002\u4ed6\u4eec\u773c\u4e2d\u7684\u5185\u5b58\u901a\u5e38\u662f\u4e00\u7ec4\u4e0d\u540c\u957f\u5ea6\u7684\u6bb5\uff0c\u8fd9\u4e9b\u6bb5\u4e4b\u95f4\u5e76\u6ca1\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u3002 \u7a0b\u5e8f\u5458\u773c\u4e2d\u7684\u7a0b\u5e8f \u7a0b\u5e8f\u5458\u773c\u4e2d\u7684\u7a0b\u5e8f\u662f\u7531\u4e3b\u7a0b\u5e8f\u52a0\u4e0a\u4e00\u7ec4\u65b9\u6cd5\u3001\u8fc7\u7a0b\u6216\u51fd\u6570\u6240\u6784\u6210\u7684\u3002\u5b83\u8fd8\u53ef\u4ee5\u5305\u62ec\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u5bf9\u8c61\u3001\u6570\u7ec4\u3001\u5806\u6808\u3001\u53d8\u91cf\u7b49\u3002\u6bcf\u4e2a\u6a21\u5757\u6216\u6570\u636e\u5143\u7d20\u901a\u8fc7\u540d\u79f0\u6765\u5f15\u7528\u3002\u7a0b\u5e8f\u5458\u4f1a\u8bf4\u201c\u5806\u6808\u201d\u3001\u201c\u6570\u5b66\u5e93\u201d \u548c \u201c\u4e3b\u7a0b\u5e8f\u201d \u7b49\uff0c\u800c\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u5143\u7d20\u6240\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\u3002\u5979\u4e0d\u5173\u5fc3\u5806\u6808\u5f0f\u653e\u5728\u51fd\u6570 Sqrt() \u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u3002\u8fd9\u4e9b\u6bb5\u7684\u957f\u5ea6\u662f\u4e0d\u540c\u7684\uff0c\u5176\u957f\u5ea6\u662f\u6709\u8fd9\u4e9b\u6bb5\u5728\u7a0b\u5e8f\u4e2d\u7684\u76ee\u7684\u51b3\u5b9a\u7684\u3002\u6bb5\u5185\u7684\u5143\u7d20\u662f\u901a\u8fc7\u5b83\u4eec\u8ddd\u79bb\u6bb5\u9996\u7684\u504f\u79fb\u6765\u6307\u5b9a\uff1a\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u3001\u5728\u5806\u6808\u91cc\u7684\u7b2c 7 7 \u4e2a\u6808\u5e27\u3001\u51fd\u6570 Sqrt() \u7684\u7b2c\u4e94\u6761\u6307\u4ee4\u3002 \u5206\u6bb5 \uff08segmentation\uff09\u5c31\u662f\u652f\u6301\u8fd9\u79cd\u7528\u6237\u89c6\u56fe\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u662f\u7531\u4e00\u7ec4\u6bb5\u6784\u6210\u3002\u6bcf\u4e2a\u6bb5\u90fd\u6709\u540d\u79f0\u548c\u957f\u5ea6\u3002\u5730\u5740\u6307\u5b9a\u4e86\u6bb5\u540d\u79f0\u548c\u6bb5\u5185\u504f\u79fb\u3002\u56e0\u6b64\u7528\u6237\u901a\u8fc7\u4e24\u4e2a\u91cf\u6765\u6307\u5b9a\u5730\u5740\uff1a\u6bb5\u540d\u79f0\u548c\u6bb5\u504f\u79fb\u3002 \u4e3a\u4e86\u5b9e\u73b0\u7b80\u5355\u8d77\u89c1\uff0c\u6bb5\u662f\u7f16\u53f7\u7684\uff0c\u662f\u901a\u8fc7\u77ed\u53f7\u800c\u4e0d\u662f\u6bb5\u540d\u79f0\u6765\u5f15\u7528\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u7531\u6709\u5e8f\u5bf9\uff08two tuple\uff09\u7ec4\u6210\uff1a <\u6bb5\u53f7\uff0c\u504f\u79fb> \u901a\u5e38\uff0c\u5728\u7f16\u8bd1\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8f93\u5165\u7a0b\u5e8f\u6765\u81ea\u52a8\u6784\u9020\u6bb5\u3002 \u4e00\u4e2a C \u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u521b\u5efa\u5982\u4e0b\u6bb5\uff1a \u4ee3\u7801 \u5168\u5c40\u53d8\u91cf \u5806\uff08\u5185\u5b58\u4ece\u5806\u4e0a\u5206\u914d\uff09 \u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808 \u6807\u51c6\u7684 C \u5e93 \u5728\u7f16\u8bd1\u65f6\u94fe\u63a5\u7684\u5e93\u53ef\u80fd\u5206\u914d\u4e0d\u540c\u7684\u6bb5\u3002\u52a0\u8f7d\u7a0b\u5e8f\u4f1a\u88c5\u5165\u6240\u6709\u8fd9\u4e9b\u6bb5\uff0c\u5e76\u4e3a\u5b83\u4eec\u5206\u914d\u6bb5\u53f7\u3002 \u5206\u6bb5\u786c\u4ef6 \u867d\u7136\u7528\u6237\u73b0\u5728\u80fd\u901a\u8fc7\u4e8c\u4f4d\u5730\u5740\u6765\u5f15\u7528\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u5b9e\u9645\u7269\u7406\u5185\u5b58\u4ecd\u7136\u662f\u4e00\u7ef4\u7684\u5b57\u8282\u5e8f\u5217\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u6620\u5c04\u7528\u6237\u5b9a\u4e49\u7684\u4e8c\u7ef4\u5730\u5740\u5230\u4e00\u7ef4\u7269\u7406\u5730\u5740\u3002\u8fd9\u4e2a\u5730\u5740\u662f\u901a\u8fc7 \u6bb5\u8868 \uff08segment table\uff09\u6765\u5b9e\u73b0\u7684\u3002\u6bb5\u8868\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u6709 \u6bb5\u57fa\u5730\u5740 \uff08segment base\uff09\u548c \u6bb5\u754c\u9650 \uff08segment limit\uff09\u3002\u6bb5\u57fa\u5730\u5740\u5305\u542b\u8be5\u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u5f00\u59cb\u7269\u7406\u5730\u5740\uff0c\u800c\u6bb5\u754c\u9650\u6307\u5b9a\u8be5\u6bb5\u7684\u957f\u5ea6\u3002 \u5206\u6bb5\u786c\u4ef6 \u6bb5\u8868\u7684\u4f7f\u7528\u5982\u4e0a\u56fe\u6240\u793a\u3002\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u6bb5\u53f7 s s \u548c\u6bb5\u504f\u79fb d d \u3002\u6bb5\u53f7\u7528\u4f5c\u6bb5\u8868\u7684\u7d22\u5f15\uff0c\u903b\u8f91\u5730\u5740\u7684\u504f\u79fb d d \u5e94\u4f4d\u4e8e 0 0 \u548c\u6bb5\u754c\u9650\u4e4b\u95f4\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff08\u903b\u8f91\u5730\u5740\u8bd5\u56fe\u8bbf\u95ee\u6bb5\u7684\u5916\u9762\uff09\u3002\u5982\u679c\u504f\u79fb d d \u5408\u6cd5\uff0c\u90a3\u4e48\u5c31\u4e0e\u57fa\u5740\u76f8\u52a0\u5f97\u5230\u6240\u9700\u5b57\u8282\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002\u56e0\u6b64\uff0c\u6bb5\u8868\u5b9e\u9645\u4e0a\u4e8c\u5143\u7ec4 \uff08 \u57fa\u5740\u5bc4\u5b58\u5668\u503c \uff0c \u754c\u9650\u5bc4\u5b58\u5668\u503c \uff09 \u7684\u6570\u7ec4\u3002 \u5206\u6bb5\u7684\u4f8b\u5b50 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u524d\u8ff0\u4f8b\u5b50\u4e2d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5185\u5b58\u4e4b\u95f4\u901a\u8fc7\u6bb5\u8868\u6620\u5c04\u3002 \u5206\u9875 \u5206\u6bb5\u5141\u8bb8\u8fdb\u7a0b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u662f\u975e\u8fde\u7eed\u7684\u3002 \u5206\u9875 \uff08paging\uff09\u662f\u63d0\u4f9b\u8fd9\u79cd\u4f18\u52bf\u7684\u53e6\u4e00\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u7136\u800c\uff0c\u5206\u9875\u907f\u514d\u4e86\u5916\u90e8\u788e\u7247\u548c\u7d27\u7f29\uff0c\u800c\u5206\u6bb5\u4e0d\u53ef\u4ee5\u3002\u5206\u9875\u4e5f\u907f\u514d\u4e86 \u5c06\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5339\u914d\u5230\u4ea4\u6362\u7a7a\u95f4 \u7684\u9ebb\u70e6\u95ee\u9898\u3002\u5728\u5206\u9875\u5f15\u5165\u4e4b\u524d\u91c7\u7528\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\u662f\uff1a\u5f53\u4f4d\u4e8e\u5185\u5b58\u7684\u4ee3\u7801\u548c\u6570\u636e\u6bb5\u9700\u8981\u6362\u51fa\u65f6\uff0c\u5e94\u5728\u5907\u4efd\u5b58\u50a8\u4e0a\u627e\u5230\u7a7a\u95f4\u3002\u5907\u4efd\u5b58\u50a8\u4e5f\u6709\u540c\u6837\u7684\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u788e\u7247\u95ee\u9898\uff0c\u4f46\u662f\u8bbf\u95ee\u66f4\u6162\uff0c\u56e0\u6b64\u7d27\u7f29\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7531\u4e8e\u6bd4\u65e9\u8d77\u65b9\u6cd5\u66f4\u4f18\u8d8a\uff0c\u5404\u79cd\u5f62\u5f0f\u7684\u5206\u9875\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\uff0c\u5305\u62ec\u5927\u578b\u673a\u548c\u667a\u80fd\u624b\u673a\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u5b9e\u73b0\u5206\u9875\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u548c\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u534f\u4f5c\u3002 \u57fa\u672c\u65b9\u6cd5 \u5b9e\u73b0\u5206\u9875\u7684\u57fa\u672c\u65b9\u6cd5\u6d89\u53ca\u5c06\u7269\u7406\u5185\u5b58\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a \u5e27 \u6216 \u9875\u5e27 \uff08frame\uff09\uff1b\u800c\u5c06\u903b\u8f91\u5185\u5b58\u4e5f\u5206\u4e3a\u540c\u6837\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a \u9875 \u6216 \u9875\u9762 \uff08page\uff09\u3002\u5f53\u9700\u8981\u6267\u884c\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u5b83\u7684\u9875\u4ece\u6587\u4ef6\u7cfb\u7edf\u6216\u5907\u4efd\u5b58\u50a8\u7b49\u6e90\u5904\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u53ef\u7528\u5e27\u3002\u5907\u4efd\u5b58\u50a8\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u5b83\u4e0e\u5355\u4e2a\u5185\u5b58\u4e2d\u6216\u591a\u4e2a\u5185\u5b58\u5e27\uff08\u7c07\uff09\u7684\u5927\u5c0f\u4e00\u6837\u3002\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u65b9\u6cd5\u529f\u80fd\u5f3a\u4e14\u53d8\u5316\u591a\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u4e00\u4e2a 64 64 \u4f4d\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u7cfb\u7edf\u7684\u7269\u7406\u5185\u5b58\u5c0f\u4e8e 2^{64} 2^{64} \u5b57\u8282\u3002 \u5206\u9875\u7684\u786c\u4ef6\u652f\u6301 \u5206\u9875\u7684\u786c\u4ef6\u652f\u6301\u5982\u4e0a\u56fe\u6240\u793a\u3002\u7531CPU\u751f\u6210\u7684\u6bcf\u4e2a\u5730\u5740\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u9875\u7801 \uff08page number\uff09( p p )\u548c \u9875\u504f\u79fb \uff08page offset\uff09( d d )\u3002\u9875\u7801\u4f5c\u4e3a \u9875\u8868 \u7684\u7d22\u5f15\u3002\u9875\u8868\u5305\u542b\u6bcf\u9875\u6240\u5728\u7269\u7406\u5185\u5b58\u7684\u57fa\u5730\u5740\u3002\u8fd9\u4e2a\u57fa\u5730\u5740\u4e0e\u9875\u504f\u79fb\u7684\u7ec4\u5408\u5c31\u5f62\u6210\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u53ef\u53d1\u9001\u5230\u7269\u7406\u5355\u5143\u3002\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b\u5982\u4e0b\u5982\u6240\u793a\uff1a \u903b\u8f91\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b \u9875\u5927\u5c0f\uff08\u4e0e\u5e27\u5927\u5c0f\u4e00\u6837\uff09\u662f\u7531\u786c\u4ef6\u6765\u51b3\u5b9a\u7684\u3002\u4e5f\u5f97\u5927\u5c0f\u4e3a 2 2 \u7684\u5e42\uff1b\u6839\u636e\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0c\u9875\u5927\u5c0f\u53ef\u4ee5\u4ece 512 512 \u5b57\u8282\u5230 1 1 GB\u4e0d\u7b49\u3002\u5982\u679c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4e3a 2^m 2^m \uff0c\u9875\u5927\u5c0f\u4e3a 2^n 2^n \u5b57\u8282\uff0c\u90a3\u4e48\u903b\u8f91\u5730\u5740\u7684\u9ad8 m - n m - n \u4f4d\u8868\u793a\u9875\u7801\uff0c\u800c\u4f4e n n \u4f4d\u8868\u793a\u9875\u504f\u79fb\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d p p \u662f\u9875\u8868\u7d22\u5f15\uff08\u9875\u7801\uff09\uff0c d d \u4e3a\u9875\u5185\u504f\u79fb\u3002 \u83b7\u53d6 Linux \u7cfb\u7edf\u7684\u9875\u7684\u5927\u5c0f \u5728 Linux \u7cfb\u7edf\u4e0a\uff0c\u9875\u5927\u5c0f\u6839\u636e\u67b6\u6784\u800c\u53d8\u5316\uff0c\u6709\u591a\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u9875\u5927\u5c0f\u3002\u4e00\u79cd\u65b9\u6cd5\u91c7\u7528\u7cfb\u7edf\u8c03\u7528 getpagesize() \u3002\u53e6\u4e00\u4e2a\u7b56\u7565\u662f\u7ec8\u7aef\u547d\u4ee4 getconf PAGESIZE \u8fd9\u4e9b\u65b9\u6cd5\u90fd\u8fd4\u56de\u6309\u5b57\u8282\u8ba1\u6570\u7684\u9875\u5927\u5c0f\u3002 \u4e0d\u96be\u6ce8\u610f\u5230\uff0c\u5206\u9875\u672c\u8eab\u662f\u4e00\u79cd\u52a8\u6001\u7684\u91cd\u5b9a\u4f4d\u3002\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u7531\u5206\u9875\u786c\u4ef6\u7ed1\u5b9a\u7ed1\u5b9a\u4e3a\u67d0\u4e2a\u7269\u7406\u5730\u5740\u3002\u91c7\u7528\u5206\u9875\u7c7b\u4f3c\u4e8e\u91c7\u7528\u4e00\u7ec4\u57fa\u5740\uff08\u91cd\u5b9a\u4f4d\uff09\u5bc4\u5b58\u5668\uff0c\u6bcf\u4e2a\u57fa\u5740\u5bf9\u5e94\u7740\u4e00\u4e2a\u5185\u5b58\u5e27\u3002 \u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7269\u7406\u5185\u5b58\uff0c\u5854\u5f71\u4e4b\u9053\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u7ec6\u8282\uff1a\u54ea\u4e9b\u5e27\u5df2\u5206\u914d\uff0c\u54ea\u4e9b\u5e27\u7a7a\u7740\uff0c\u603b\u5171\u6709\u591a\u5c11\u9488\uff0c\u7b49\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u901a\u5e38\u4fdd\u5b58\u5728\u79f0\u4e3a \u5e27\u8868 \uff08frame table\uff09\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u5728\u5e27\u8868\u4e2d\uff0c\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u7740\u4e00\u4e2a\u5e27\uff0c\u4ee5\u8868\u793a\u8be5\u5e27\u662f\u7a7a\u95f2\u8fd8\u662f\u5df2\u5360\u7528\uff1b\u5982\u679c\u5360\u7528\uff0c\u662f\u88ab\u54ea\u4e2a\uff08\u6216\u54ea\u4e9b\uff09\u8fdb\u7a0b\u7684\u54ea\u4e2a\u9875\u6240\u5360\u7528\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u9875\u8868\u7684\u526f\u672c\uff0c\u5982\u540c\u9700\u8981\u7ef4\u62a4\u6307\u4ee4\u8ba1\u6570\u5668\u548c\u5bc4\u5b58\u5668\u5185\u5bb9\u4e00\u6837\u3002\u6bcf\u5f53\u64cd\u4f5c\u7cfb\u7edf\u81ea\u5df1\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u6210\u7269\u7406\u5730\u5740\uff0c\u8fd9\u4e2a\u526f\u672c\u53ef\u7528\u4e8e\u8f6c\u6362\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u5206\u914d\u5230CPU\u65f6\uff0cCPU\u5206\u6d3e\u5668\u4e5f\u6839\u636e\u8be5\u526f\u672c\u6765\u5b9a\u4e49\u786c\u4ef6\u4e5f\u8868\u3002\u56e0\u6b64\uff0c \u5206\u9875\u589e\u52a0\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500 \u3002 \u786c\u4ef6\u652f\u6301 \u6bcf\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u6709\u81ea\u5df1\u4fdd\u5b58\u9875\u8868\u7684\u65b9\u6cd5\u3002\u6709\u7684\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u9875\u8868\u3002\u9875\u8868\u7684\u6307\u9488\uff0c\u4e0e\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\uff08\u5982\u6307\u4ee4\u8ba1\u6570\u5668\uff09\uff0c\u4e00\u8d77\u88ab\u5b58\u5165 PCB\u3002\u5f53\u5206\u6d3e\u5668\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u4ed6\u9996\u5148\u52a0\u8f7d\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u4fdd\u5b58\u7684\u7528\u6237\u9875\u8868\u6765\u5b9a\u4e49\u6b63\u786e\u7684\u9875\u8868\u503c\u3002\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u6216\u591a\u4e2a\u9875\u8868\uff0c\u4ee5\u4fbf\u51cf\u5c11\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u3002 \u7531\u4e8e\u6bcf\u6b21\u8bbf\u95ee\u5185\u5b58\u90fd\u9700\u8981\u7ecf\u8fc7\u5206\u9875\u6620\u5c04\uff0c\u56e0\u6b64\u6548\u7387\u662f\u4e00\u4e2a\u91cd\u8981\u800c\u8003\u8651\u56e0\u7d20\u3002 \u9875\u8868\u7684\u786c\u4ef6\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u3002\u6700\u7b80\u5355\u7684\u4e00\u79cd\u662f\uff1a\u5c06\u591c\u8868\u4f5c\u4e3a\u4e00\u7ec4\u4e13\u7528\u7684 \u5bc4\u5b58\u5668 \u6765\u5b9e\u73b0\u3002 \u5982\u679c\u9875\u8868\u8f83\u5c0f\uff08\u4f8b\u5982 256 256 \u4e2a\u6761\u76ee\uff09\uff0c\u90a3\u4e48\u5c1a\u4e14\u53ef\u4ee5\u7528\u5bc4\u5b58\u5668\u5b9e\u73b0\u3002\u4f46\u662f\uff0c\u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u9875\u8868\u5f88\u5927\uff08\u4f8b\u5982 100 100 \u4e07\u4e2a\u6761\u76ee\uff09\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u673a\u5668\uff0c\u9700\u8981\u5c06\u591c\u8868\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06 \u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668 \uff08Page-Table Base Register, PTBR\uff09\u6307\u5411\u9875\u8868\u3002\u6539\u53d8\u9875\u8868\u53ea\u9700\u6539\u53d8\u8fd9\u4e00\u5bc4\u5b58\u5668\u5c31\u53ef\u4ee5\uff0c\u8fd9\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u3002 \u7136\u800c\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u9700\u8981 \u4e24\u6b21 \u8bbf\u95ee\u5185\u5b58\uff08\u4e00\u6b21\u7528\u4e8e\u9875\u8868\u6761\u76ee\uff0c\u4e00\u6b21\u7528\u4e8e\u5b57\u8282\uff09\uff0c\u76f8\u5f53\u4e8e\u5185\u5b58\u8bbf\u95ee\u901f\u5ea6\u51cf\u534a\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u91c7\u7528\u4e13\u7528\u7684\u3001\u8f83\u5c0f\u7684\u3001\u67e5\u627e\u5feb\u8bfb\u7684\u9ad8\u901f\u786c\u4ef6\u7f13\u51b2\uff0c\u5b83\u79f0\u4e3a \u8f6c\u6362\u8868\u7f13\u51b2\u533a \uff08Translation Look-aside Buffer, TLB\uff09\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u903b\u8f91\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b \u6709\u7684CPU\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u53c2\u4e0e\u7f13\u5b58\u4e2d LRU \u6761\u76ee\u7684\u66ff\u6362\u3002\u53e6\u5916\uff0c\u6709\u7684 TLB \u5141\u8bb8\u56fa\u6709\u6761\u76ee\u3002\u901a\u5e38\uff0c\u91cd\u8981\u7684\u5185\u6838\u4ee3\u7801\u6761\u76ee\u662f\u56fa\u5b9a\u4e0b\u6765\u7684\u3002 \u6709\u7684TLB\u5728\u6bcf\u4e2a\u6761\u76ee\u4e2d\u8fd8\u4fdd\u5b58 \u5730\u5740\u7a7a\u95f4\u6807\u8bc6\u7b26 \uff08Address-Space Identifierm, ASID\uff09\u3002ASID\u552f\u4e00\u6807\u8bc6\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u5730\u5740\u7a7a\u95f4\u7684\u4fdd\u62a4\u3002 \u547d\u4e2d\u7387 \uff08hit ratio\uff09\u53ef\u4ee5\u8861\u91cf TLB \u6761\u76ee\u547d\u4e2d\u7684\u6bd4\u7387\u3002\u5bf9\u4e8e\u4efb\u610f\u5185\u5b58\u5b57\u8282\uff0cTLB \u547d\u4e2d\u610f\u5473\u7740\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\uff0c\u672a\u547d\u4e2d\u5219\u610f\u5473\u7740\u4e24\u6b21\u5185\u5b58\u8bbf\u95ee\u3002\u57fa\u4e8eCPU\u8bbf\u5b58\u65f6\u95f4\uff08\u5982 100 100 ns\uff09\uff0c\u53ef\u4ee5\u6c42\u5f97 \u6709\u6548\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4 \uff08effective memory-access time\uff09\u3002 Intel Core i7 \u7684\u4e24\u7ea7 TLB Intel Core i7 CPU \u6709\u4e00\u4e2a 128 128 \u6307\u4ee4\u6761\u76ee\u7684 L1 TLB \u548c 64 64 \u6570\u636e\u6761\u76ee\u7684 L1 TLB\u3002\u5f53 L1 \u672a\u547d\u4e2d\u65f6\uff0cCPU \u82b1\u8d39 6 6 \u4e2a\u5468\u671f\u6765\u68c0\u67e5 L2 TLB \u7684 512 512 \u6761\u76ee\u3002L2 \u672a\u547d\u4e2d\u610f\u5473\u7740\uff0cCPU \u9700\u8981\u901a\u8fc7\u5185\u5b58\u7684\u9875\u8868\u6761\u4ef6\u6765\u67e5\u627e\u76f8\u5173\u7684\u5e27\u5730\u5740\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u6570\u767e\u4e2a\u5468\u671f\uff0c\u6216\u8005\u901a\u8fc7\u4e2d\u65ad\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u3002 \u4fdd\u62a4 \u5206\u9875\u73af\u5883\u4e0b\u7684\u5185\u5b58\u4fdd\u62a4\u662f\u901a\u8fc7\u4e0e\u6bcf\u4e2a\u5e27\u5173\u8054\u4fdd\u62a4\u4f4d\u6765\u5b9e\u73b0\u7684\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u4f4d\u4fdd\u5b58\u5728\u9875\u8868\u4e2d\u3002 \u53ef\u4ee5\u7528\u4e00\u4e2a\u4f4d\u5b9a\u4e49\u4e00\u4e2a\u9875\u662f\u53ef\u8bfb\u53ef\u5199\u6216\u53ea\u8bfb\u3002\u975e\u6cd5\u8bbf\u95ee\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\u3002 \u8fd8\u6709\u4e00\u4e2a\u4f4d\u901a\u5e38\u4e0e\u9875\u8868\u603b\u7684\u6bcf\u4e00\u6761\u6728\u76f8\u5173\u8054\uff1a \u6709\u6548-\u65e0\u6548\u4f4d \uff08valid-invalie bit\uff09\u3002\u8868\u793a\u76f8\u5173\u7684\u9875\u662f\u5426\u5728\u8fdb\u7a0b\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5185\u3002\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u5bf9\u8be5\u4f4d\u7684\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u5141\u8bb8\u6216\u4e0d\u5141\u8bb8\u5bf9\u67d0\u9875\u7684\u8bbf\u95ee\u3002 \u9875\u8868\u7684\u6709\u6548\u4f4d\uff08v\uff09\u6216\u65e0\u6548\u4f4d\uff08i\uff09 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5982\u679c\u8bd5\u56fe\u4ea7\u751f\u9875\u8868 6 6 \u6216 7 7 \u7684\u5730\u5740\u65f6\uff0c\u5219\u4f1a\u53d1\u73b0\u6709\u6548-\u65e0\u6548\u4f4d\u4e3a\u65e0\u6548\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6355\u6349\u5230\u8fd9\u4e00\u975e\u6cd5\u64cd\u4f5c\uff08 \u65e0\u6548\u4f4d\u5f15\u7528 \uff09\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u5f88\u5c11\u4f1a\u4f7f\u7528\u5b83\u7684\u5168\u90e8\u5730\u5740\u7a7a\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8bb8\u591a\u8fdb\u7a0b\u53ea\u7528\u5230\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5982\u679c\u4e3a\u5730\u5740\u8303\u56f4\u5185\u7684\u6240\u6709\u9875\u90fd\u5728\u9875\u8868\u4e2d\u5efa\u7acb\u4e00\u4e2a\u6761\u76ee\u662f\u975e\u5e38\u6d6a\u8d39\u7684\uff01\u4e3a\u6b64\u6709\u7684\u7cfb\u7edf\u63d0\u4f9b\u786c\u4ef6\uff0c\u5982 \u9875\u8868\u957f\u5ea6\u5bc4\u5b58\u5668 \uff08Page-Table Length Register, PTLR\uff09\u6765\u8868\u793a\u9875\u8868\u7684\u5927\u5c0f\uff0c\u8be5\u5bc4\u5b58\u5668\u7684\u503c\u53ef\u7528\u4e8e\u68c0\u67e5\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u4ee5\u9a8c\u8bc1\u5176\u662f\u5426\u4f4d\u4e8e\u8fdb\u7a0b\u7684\u6709\u6548\u8303\u56f4\u5185\u3002\u5982\u679c\u68c0\u6d4b\u65e0\u6cd5\u901a\u8fc7\uff0c\u5219\u4f1a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6355\u6349\u5230\u3002 \u5171\u4eab\u9875 \u5206\u9875\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u53ef\u4ee5 \u5171\u4eab \u516c\u5171\u4ee3\u7801\u3002\u5bf9\u4e8e\u5206\u65f6\u73af\u5883\uff0c\u8fd9\u79cd\u8003\u8651\u5c24\u5176\u91cd\u8981\u3002\u5047\u8bbe\u4e00\u4e2a\u652f\u6301 40 40 \u4e2a\u7528\u6237\u7684\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u90fd\u6267\u884c\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u3002\u5982\u679c\u8be5\u6587\u672c\u7f16\u8f91\u5668\u5305\u62ec 150 150 KB \u7684\u4ee3\u7801\u53ca 50 50 KB \u7684\u6570\u636e\u7a7a\u95f4\uff0c\u5219\u9700\u8981 8000 8000 KB \u6765\u652f\u6301\u8fd9 40 40 \u4e2a\u7528\u6237\u3002\u5982\u679c\u4ee3\u7801\u662f \u53ef\u91cd\u5165\u4ee3\u7801 \uff08reentrant code\uff09\u6216 \u7eaf\u4ee3\u7801 \uff08pure code\uff09\uff0c\u5219\u53ef\u4ee5\u5171\u4eab\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5206\u9875\u73af\u5883\u7684\u4ee3\u7801\u5171\u4eab \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u6709 3 3 \u4e2a\u8fdb\u7a0b\uff0c\u5b83\u4eec\u5171\u4eab 3 3 \u9875\u7684\u7f16\u8f91\u5668\uff0c\u8fd9\u91cc\u6bcf\u9875\u5927\u5c0f\u4e3a 50 50 KB \uff08\u4e3a\u4e86\u7b80\u5316\u56fe\u793a\u8fd9\u91cc\u91c7\u7528\u5927\u9875\u9762\uff09\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u5f97\u6570\u636e\u9875\u3002 \u53ef\u91cd\u5165\u4ee3\u7801 \u662f\u4e0d\u80fd\u81ea\u6211\u4fee\u6539\u7684\u4ee3\u7801\uff1a\u5b83\u5728\u6267\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u76f8\u540c\u4ee3\u7801\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u526f\u672c\u548c\u6570\u636e\u5b58\u50a8\uff0c\u4ee5\u4fbf\u4fdd\u5b58\u8fdb\u7a0b\u6267\u884c\u7684\u6570\u636e\u3002\u5f53\u7136\uff0c\u4e0d\u540c\u8fdb\u7a0b\u7684\u6570\u636e\u4e0d\u540c\u3002 \u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u79e9\u5e8f\u4fdd\u5b58\u4e00\u4e2a\u7f16\u8f91\u5668\u526f\u672c\u3002\u6bcf\u4e2a\u7528\u6237\u7684\u9875\u8868\u6620\u5c04\u5230\u7f16\u8f91\u5668\u7684\u540c\u4e00\u4e2a\u7269\u7406\u526f\u672c\uff0c\u4f46\u662f\u6570\u636e\u9875\u6620\u5c04\u5230\u4e0d\u540c\u7684\u5e27\u3002\u56e0\u6b64\uff0c\u4e3a\u652f\u6301 40 40 \u4e2a\u7528\u6237\uff0c\u53ea\u9700\u4e00\u4e2a\u7f16\u8f91\u5668\u526f\u672c\uff08 150 150 KB\uff09\uff0c\u5728\u52a0\u4e0a 40 40 \u4e2a\u7528\u6237\u6570\u636e\u7684\u7a7a\u95f4 50 50 KB\uff0c\u603b\u7684\u9700\u6c42\u7a7a\u95f4\u4e3a 2150 2150 KB \u800c\u975e 8000 8000 KB\uff0c\u8fd9\u4e2a\u8282\u7701\u8fd8\u662f\u5f88\u5927\u7684\u3002 \u5176\u4ed6\u5927\u91cf\u4f7f\u7528\u7684\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u5171\u4eab\uff0c\u5982\u7f16\u8f91\u5668\u3001\u7a97\u53e3\u7cfb\u7edf\u3001\u8fd0\u884c\u65f6\u5e93\u3001\u6570\u636e\u5e93\u7cfb\u7edf\u7b49\u3002\u4e3a\u4e86\u5171\u4eab\uff0c\u4ee3\u7801\u5e94\u53ef\u91cd\u5165\u3002\u5171\u4eab\u4ee3\u7801\u7684\u53ea\u8bfb\u5c5e\u6027\u4e0d\u5e94\u7531\u4ee3\u7801\u7684\u6b63\u786e\u6027\u6765\u4fdd\u8bc1\uff1b\u800c\u5e94\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u5f3a\u5236\u5b9e\u73b0\u3002 \u7cfb\u7edf\u5185\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5171\u4eab\u5185\u5b58\uff0c\u7c7b\u4f3c\u4e8e\u901a\u8fc7\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u4efb\u52a1\u7684\u5730\u5740\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u5bf9\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5171\u4eab\u5185\u5b58\uff0c\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u5171\u4eab\u9875\u6765\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\u3002 \u9875\u8868\u7ed3\u6784 \u8fd9\u90e8\u5206\u63a2\u8ba8\u7ec4\u7ec7\u4e5f\u8868\u7684\u4e00\u4e9b\u6700\u5e38\u7528\u6280\u672f\u3002 \u5206\u5c42\u9875\u8868 \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u5927\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff08 2^{32} ~ 2^{64} 2^{32} ~ 2^{64} \uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9875\u8868\u672c\u8eab\u53ef\u4ee5\u975e\u5e38\u5927\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5177\u6709 32 32 \u4f4d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u3002\u5982\u679c\u7cfb\u7edf\u7684\u9875\u5927\u5c0f\u4e3a 4 4 KB\uff08 2^{12} 2^{12} \uff09\u3002\u5047\u8bbe\u6bcf\u4e2a\u6761\u76ee\u6709 4 4 \u5b57\u8282\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u9700\u8981 4 4 MB \u7269\u7406\u5730\u5740\u7a7a\u95f4\u6765\u5b58\u50a8\u9875\u8868\u672c\u8eab\u3002\u5728\u5185\u5b58\u4e2d\u4e3a\u8fd9\u4e2a\u9875\u8868\u5f00\u8f9f\u8fde\u7eed\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e24\u5c42\u5206\u9875\u7b97\u6cd5\uff0c\u5c06\u9875\u8868\u518d\u5206\u9875\u3002 \u5982\u4e0b\u56fe\u4f8b\u5b50\uff0c\u5047\u8bbe\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5177\u6709 32 32 \u4f4d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c 4 4 K \u5927\u5c0f\u7684\u9875\u3002\u4e00\u4e2a\u903b\u8f91\u5730\u5740\u88ab\u5206\u4e3a 20 20 \u4f4d\u7684\u9875\u7801\u548c 12 12 \u4f4d\u7684\u9875\u504f\u79fb\u3002\u56e0\u4e3a\u8981\u5bf9\u9875\u8868\u8fdb\u884c\u518d\u5206\u9875\uff0c\u6240\u4ee5\u8be5\u9875\u7801\u53ef\u5206\u4e3a 10 10 \u4f4d\u7684\u9875\u7801\u548c 10 10 \u4f4d\u7684\u9875\u504f\u79fb\u3002\u8fd9\u6837\uff0c\u4e00\u4e2a\u903b\u8f91\u5730\u5740\u5c31\u5206\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a \u5206\u9875\u73af\u5883\u7684\u4ee3\u7801\u5171\u4eab \u54c8\u5e0c\u9875\u8868 \u5012\u7f6e\u9875\u8868 Intel 32\u4f4d\u548c64\u4f4d\u4f53\u7cfb\u7ed3\u6784 ARM\u67b6\u6784 \u865a\u5b58\u7ba1\u7406 \u4e0a\u4e00\u90e8\u5206\u8ba8\u8bba\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5404\u79cd\u5185\u5b58\u7ba1\u7406\u7b56\u7565\u3002\u641c\u6709\u8fd9\u4e9b\u7b56\u7565\u90fd\u6709\u5171\u540c\u7684\u76ee\u6807\uff1a\u540c\u65f6\u5c06\u591a\u4e2a\u8fdb\u7a0b\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u5141\u8bb8\u591a\u9053\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7b56\u7565\u90fd\u503e\u5411\u4e8e\u8981\u6c42\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c\u4e4b\u524d\u5e94\u5b8c\u5168\u5904\u4e8e\u5185\u5b58\u4e2d\u3002 \u865a\u62df\u5185\u5b58\u6280\u672f\u5141\u8bb8\u6267\u884c\u8fdb\u7a0b\u4e0d\u5fc5\u5b8c\u5168\u5904\u4e8e\u5185\u5b58\u3002\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4e3b\u8981\u4f18\u70b9\u662f\uff1a\u7a0b\u5e8f\u53ef\u4ee5\u5927\u4e8e\u7269\u7406\u5185\u5b58\u3002\u6b64\u5916\uff0c\u865a\u62df\u5185\u5b58\u5c06\u5185\u5b58\u62bd\u8c61\u6210\u4e00\u4e2a\u5de8\u5927\u7684\u3001\u7edf\u4e00\u7684\u5b58\u50a8\u6570\u7ec4\uff0c\u8fdb\u800c\u5b9e\u73b0\u4e86\u7528\u6237\u770b\u5230\u7684\u903b\u8f91\u5185\u5b58\u4e0e\u7269\u7406\u5185\u5b58\u7684\u5206\u79bb\u3002\u8fd9\u79cd\u6280\u672f\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u4e0d\u518d\u4f46\u62c5\u5fe7\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236\u3002\u865a\u62df\u5185\u5b58\u8fd8\u5141\u8bb8\u8fdb\u7a0b\u8f7b\u677e\u5171\u4eab\u6587\u4ef6\u548c\u5b9e\u73b0\u5185\u5b58\u5171\u4eab\u3002\u6b64\u5916\uff0c\u5b83\u4e3a\u521b\u5efa\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u673a\u5236\u3002\u7136\u800c\uff0c\u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\u5e76\u4e0d\u5bb9\u6613\uff0c\u5e76\u4e14\u4f7f\u7528\u4e0d\u5f53\u8fd8\u53ef\u80fd\u4f1a\u5927\u5927\u964d\u4f4e\u6027\u80fd\u3002\u8fd9\u4e00\u90e8\u5206\u4ee5\u8bf7\u6c42\u8c03\u9875\u4e3a\u4f8b\u8ba8\u8bba\u865a\u62df\u5185\u5b58\uff0c\u5e76\u8ba8\u8bba\u5176\u590d\u6742\u6027\u548c\u5f00\u9500\u3002 \u80cc\u666f \u8bf7\u6c42\u8c03\u9875 \u5199\u65f6\u590d\u5236 \u9875\u9762\u7f6e\u6362 \u5e27\u5206\u914d \u7cfb\u7edf\u6296\u52a8 \u5185\u5b58\u6620\u5c04\u6587\u4ef6 \u5206\u914d\u5185\u6838\u5185\u5b58 \u5176\u4ed6\u6ce8\u610f\u4e8b\u9879 \u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50 \u672c\u8282\u8ba8\u8bba Windows \u548c Solaris \u5982\u4f55\u5b9e\u73b0\u865a\u62df\u5185\u5b58\u3002 Windows Solaris","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"operating_system/basic/memory_management/#_1","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u8981\u76ee\u7684\u662f\u6267\u884c\u7a0b\u5e8f\u3002\u5728\u6267\u884c\u65f6\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u673a\u5668\u8bbf\u95ee\u6570\u636e\u5e94\u8be5\u81f3\u5c11\u90e8\u5206\u5728\u5185\u5b58\u91cc\u3002 \u4e3a\u4e86\u63d0\u9ad8CPU\u7684\u5229\u7528\u7387\u548c\u54cd\u5e94\u7528\u6237\u7684\u901f\u5ea6\uff0c\u901a\u7528\u8ba1\u7b97\u673a\u5728\u5185\u5b58\u91cc\u5fc5\u987b\u4fdd\u7559\u591a\u4e2a\u8fdb\u7a0b\u3002\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u6709\u5f88\u591a\uff0c\u91c7\u7528\u7684\u65b9\u6cd5\u4e5f\u4e0d\u540c\uff1b\u6bcf\u4e2a\u7b97\u6cd5\u7684\u6709\u6548\u6027\u53d6\u51b3\u4e8e\u7279\u5b9a\u7684\u60c5\u51b5\u3002\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u5f88\u591a\u56e0\u7d20\uff0c\u7279\u522b\u662f\u7cfb\u7edf\u7684\u786c\u4ef6\u8bbe\u8ba1\u3002\u5927\u591a\u6570\u7b97\u6cd5\u90fd\u9700\u8981\u786c\u4ef6\u652f\u6301\u3002","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"operating_system/basic/memory_management/#_2","text":"\u4e00\u7ec4\u8fdb\u7a0b\u53ef\u4ee5\u5171\u4eab\u4e00\u4e2aCPU\u3002\u6b63\u662f\u7531\u4e8eCPU\u8c03\u5ea6\uff0c\u63d0\u9ad8\u4e86CPU\u7684\u5229\u7528\u7387\u548c\u8ba1\u7b97\u673a\u54cd\u5e94\u7528\u6237\u7684\u901f\u5ea6\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6027\u80fd\u7684\u6539\u8fdb\uff0c\u5e94\u5c06\u591a\u4e2a\u7a0b\u5e8f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u5171\u4eab\u5185\u5b58\u3002 \u8fd9\u4e00\u90e8\u5206\u8ba8\u8bba\u5185\u5b58\u7684\u5404\u79cd\u7ba1\u7406\u65b9\u6cd5\u3002\u5185\u5b58\u7ba1\u7406\u7b97\u6cd5\u6709\u5f88\u591a\uff1a\u4ece\u539f\u59cb\u7684\u88f8\u673a\u65b9\u6cd5\uff0c\u5230\u5206\u9875\u548c\u5206\u6bb5\u7684\u65b9\u6cd5\u3002\u6bcf\u79cd\u65b9\u6cd5\u90fd\u6709\u5404\u81ea\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\u4e3a\u7279\u5b9a\u7cfb\u7edf\u9009\u62e9\u5185\u5b58\u7ba1\u7406\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5f88\u591a\u56e0\u7d20\uff0c\u7279\u522b\u662f\u7cfb\u7edf\u7684\u786c\u4ef6\u8bbe\u8ba1\u3002\u6b63\u5982\u5c06\u4f1a\u770b\u5230\uff0c\u8bb8\u591a\u7b97\u6cd5\u90fd\u9700\u8981\u786c\u4ef6\u652f\u6301\uff0c\u5bfc\u81f4\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u7ba1\u7406\u548c\u786c\u4ef6\u7684\u7d27\u5bc6\u7ed3\u5408\u3002","title":"\u5185\u5b58\u7ba1\u7406\u7b56\u7565"},{"location":"operating_system/basic/memory_management/#_3","text":"\u5185\u5b58\u662f\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u3002\u5185\u5b58\u7531\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u5404\u81ea\u7684\u5730\u5740\u3002CPU\u6839\u636e\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u6307\u4ee4\uff0c\u8fd9\u4e9b\u6307\u4ee4\u53ef\u80fd\u5f15\u8d77\u5bf9\u7279\u5b9a\u5185\u5b58\u5730\u5740\u7684\u989d\u5916\u52a0\u8f7d\u4e0e\u5b58\u50a8\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u6307\u4ee4\u6267\u884c\u5468\u671f\uff0c\u9996\u5148\u4ece\u5185\u5b58\u8bfb\u53d6\u6307\u4ee4\u3002\u63a5\u7740\uff0c\u8be5\u6307\u4ee4\u4f1a\u88ab\u89e3\u7801\uff0c\u4e5f\u53ef\u80fd\u9700\u8981\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u64cd\u4f5c\u6570\u3002\u5728\u6307\u4ee4\u5bf9\u64cd\u4f5c\u6570\u6267\u884c\u540e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u5b58\u56de\u5230\u5185\u5b58\u3002\u5185\u5b58\u5355\u5143\u53ea\u770b\u5230\u5730\u5740\u6d41\uff0c\u800c\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5730\u5740\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff08\u7531\u6307\u4ee4\u8ba1\u6570\u5668\u3001\u7d22\u5f15\u3001\u95f4\u63a5\u5bfb\u5740\u3001\u5e38\u4eae\u5730\u5740\u7b49\uff09\u6216\u5b83\u4eec\u662f\u4ec0\u4e48\uff08\u6307\u4ee4\u6216\u6570\u636e\uff09\u7684\u5730\u5740\u3002\u76f8\u5e94\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u5185\u5b58\u5730\u5740\u662f\u5982\u4f55\u7531\u7a0b\u5e8f\u4ea7\u751f\u7684\uff0c\u800c\u53ea\u662f\u5bf9\u8fd0\u884c\u7a0b\u5e8f\u4ea7\u751f\u7684\u7684\u5185\u5b58\u5730\u5740\u5e8f\u5217\u611f\u5174\u8da3\u3002","title":"\u80cc\u666f"},{"location":"operating_system/basic/memory_management/#_4","text":"CPU\u5185\u7f6e\u5bc4\u5b58\u5668\u901a\u5e38\u53ef\u4ee5\u5728\u4e00\u4e2aCPU\u65f6\u949f\u5468\u671f\u5185\u5b8c\u6210\u8bbf\u95ee\u3002\u4f46\u5185\u5b58\u8bbf\u95ee\u53ef\u80fd\u9700\u8981\u591a\u4e2aCPU\u65f6\u949f\u5468\u671f\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u6ca1\u6709\u6570\u636e\u4ee5\u4fbf\u5b8c\u6210\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\uff0cCPU\u901a\u5e38\u9700\u8981 \u6682\u505c \uff08stall\uff09\u3002\u8865\u6551\u63aa\u65bd\u662f\u5728CPU\u4e0e\u5185\u5b58\u4e4b\u95f4\u2014\u2014\u901a\u5e38\u662f\u5728CPU\u82af\u7247\u4e0a\u2014\u2014\u589e\u52a0 \u9ad8\u901f\u7f13\u5b58 \uff08cache\uff09\u3002\u4e3a\u7ba1\u7406CPU\u5185\u7f6e\u7684\u7f13\u5b58\uff0c\u786c\u4ef6\u52a0\u5feb\u5185\u5b58\u8bbf\u95ee\uff0c\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a7\u5236\u3002 \u51fa\u4e8e\u4fdd\u62a4\uff0c\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\uff0c \u57fa\u5730\u5740\u5bc4\u5b58\u5668 \uff08base register\uff09\u542b\u6709\u6700\u5c0f\u7684\u5408\u6cd5\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002 \u754c\u5730\u5740\u5bc4\u5b58\u5668 \uff08limit register\uff09\u6307\u5b9a\u4e86\u8303\u56f4\u7684\u5927\u5c0f\u3002\u5982\u4e0b\u5982\u6240\u793a\uff1a \u57fa\u5730\u5740\u5bc4\u5b58\u5668\u548c\u63a5\u7ebf\u5730\u5740\u5bc4\u5b58\u5668\u5b9a\u4e49\u903b\u8f91\u5730\u5740\u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4\u4fdd\u62a4\u7684\u5b9e\u73b0\u662f\u901a\u8fc7CPU\u786c\u4ef6\u5bf9\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4ea7\u751f\u7684\u5730\u5740\u4e0e\u5bc4\u5b58\u5668\u7684\u5730\u5740\u8fdb\u884c\u6bd4\u8f83\u6765\u5b8c\u6210\u7684\u3002\u5f53\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u6267\u884c\u7684\u7a0b\u5e8f\u8bd5\u56fe\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u6216\u5176\u4ed6\u7528\u6237\u5185\u5b58\u65f6\uff0c\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\uff0c\u800c\u64cd\u4f5c\u7cfb\u7edf\u5219\u5c06\u5176\u4f5c\u4e3a\u81f4\u547d\u9519\u8bef\u6765\u5904\u7406\uff0c\u5982\u4e0b\u5982\u6240\u793a\u3002\u8fd9\u79cd\u65b9\u6848\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u65e0\u610f\u6216\u6545\u610f\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u6216\u5176\u4ed6\u7528\u6237\u7684\u4ee3\u7801\u6216\u6570\u636e\u7ed3\u6784\u3002 \u91c7\u7528\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u548c\u63a5\u7ebf\u5730\u5740\u5bc4\u5b58\u5668\u7684\u786c\u4ef6\u5730\u5740\u4fdd\u62a4 \u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u6267\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u53ca\u7528\u6237\u7684\u5185\u5b58\u3002\u8fd9\u9879\u89c4\u5b9a\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\uff1a\u52a0\u8f7d\u7528\u6237\u7a0b\u5e8f\u5230\u7528\u6237\u5185\u5b58\uff0c\u8f6c\u50a8\u51fa\u73b0\u9519\u8bef\u7684\u7a0b\u5e8f\uff0c\u8bbf\u95ee\u548c\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\uff0c\u6267\u884c\u7528\u6237\u5185\u5b58\u7684I/O\uff0c\u4ee5\u53ca\u63d0\u4f9b\u8bb8\u591a\u5176\u4ed6\u670d\u52a1\u7b49\u3002\u4f8b\u5982\uff0c\u591a\u4efb\u52a1\u7cfb\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u5728\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u5e94\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u5b58\u8d37\u5185\u5b58\uff0c\u518d\u4ece\u5185\u5b58\u4e2d\u8c03\u5165\u4e0b\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5230\u5bc4\u5b58\u5668\u3002","title":"\u57fa\u672c\u786c\u4ef6"},{"location":"operating_system/basic/memory_management/#_5","text":"\u5728\u78c1\u76d8\u4e0a\u7b49\u5f85\u8c03\u5230\u5185\u5b58\u4ee5\u4fbf\u6267\u884c\u7684\u8fdb\u7a0b\u5f62\u6210 \u8f93\u5165\u961f\u5217 \uff08input queue\uff09\u3002 \u7528\u6237\u7a0b\u5e8f\u5728\u6267\u884c\u524d\u4e00\u822c\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u6b65\u9aa4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e00\u4e2a\u7528\u6237\u7a0b\u5e8f\u7684\u591a\u6b65\u9aa4\u5904\u7406 \u901a\u5e38\uff0c\u6570\u636e \u7ed1\u5b9a \uff08bind\uff09\u5230\u5b58\u50a8\u5668\u5730\u5740\u53ef\u5728\u6cbf\u9014\u7684\u7684\u4efb\u4f55\u4e00\u6b65\u8fdb\u884c\uff1a \u7f16\u8bd1\u65f6 \uff08compile time\uff09\uff1a\u5982\u679c\u5728\u7f16\u8bd1\u65f6\u5c31\u53ef\u4ee5\u77e5\u9053\u8fdb\u7a0b\u5728\u5185\u5b58\u4e2d\u7684\u9a7b\u7559\u5730\u5740\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u751f\u6210 \u7edd\u5bf9\u4ee3\u7801 \uff08absolute code\uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e8b\u5148\u77e5\u9053\u7528\u6237\u8fdb\u7a0b\u9a7b\u7559\u5728\u5185\u5b58\u5730\u5740 R R \u5904\uff0c\u90a3\u4e48\u751f\u6210\u7684\u7f16\u8bd1\u4ee3\u7801\u5c31\u53ef\u4ee5\u4ece\u8be5\u4f4d\u7f6e\u5f00\u59cb\u5e76\u5411\u540e\u5ef6\u4f38\u3002\u5982\u679c\u5c06\u6765\u5f00\u59cb\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801\u3002MS-DOS\u7684.COM\u683c\u5f0f\u7684\u7a0b\u5e8f\u5c31\u662f\u5728\u7f16\u8bd1\u65f6\u7ed1\u5b9a\u6210\u7edd\u5bf9\u4ee3\u7801\u7684\u3002 \u52a0\u8f7d\u65f6 \uff08load time\uff09\uff1a\u5982\u679c\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u8fdb\u7a0b\u5c06\u9a7b\u7559\u5728\u4f55\u5904\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u5e94\u8be5\u751f\u6210 \u53ef\u91cd\u5b9a\u4f4d\u4ee3\u7801 \uff08relocatable code\uff09\u3002\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6700\u540e\u7ed1\u5b9a\u4f1a\u5ef6\u8fdf\u5230\u52a0\u8f7d\u65f6\u624d\u8fdb\u884c\u3002\u5982\u679c\u5f00\u59cb\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u7528\u6237\u4ee3\u7801\u5df2\u5408\u5e76\u66f4\u6539\u7684\u503c\u3002 \u6267\u884c\u65f6 \uff08runtime time\uff09\u5982\u679c\u8fdb\u7a0b\u5728\u6267\u884c\u65f6\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5185\u5b58\u6bb5\u79fb\u5230\u53e6\u4e00\u4e2a\u5185\u5b58\u6bb5\uff0c\u90a3\u4e48\u7ed1\u5b9a\u5e94\u5ef6\u8fdf\u5230\u6267\u884c\u65f6\u624d\u8fdb\u884c\u3002\u5982\u4e0b\u8282\u6240\u5c5e\uff0c\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\u9700\u8981\u7279\u5b9a\u786c\u4ef6\u652f\u6301\u3002\u5927\u591a\u6570\u7684\u901a\u7528\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002","title":"\u5730\u5740\u7ed1\u5b9a"},{"location":"operating_system/basic/memory_management/#_6","text":"CPU\u751f\u6210\u7684\u5730\u5740\u901a\u5e38\u79f0\u4e3a \u903b\u8f91\u5730\u5740 \uff08logical address\uff09\uff0c\u800c\u5185\u5b58\u5355\u5143\u770b\u5230\u7684\u5730\u5740\uff08\u5373\u52a0\u8f7d\u5230 \u5185\u5b58\u5730\u5740\u5bc4\u5b58\u5668 \uff08memory-address register\uff09\u7684\u5730\u5740\uff09\u901a\u5e38\u79f0\u4e3a \u7269\u7406\u5730\u5740 \uff08physical address\uff09\u3002 \u7f16\u8bd1\u65f6\u548c\u52a0\u8f7d\u65f6\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6cd5\u751f\u6210\u76f8\u540c\u7684\u903b\u8f91\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u3002\u7136\u800c\uff0c\u6267\u884c\u65f6\u7684\u5730\u5740\u7ed1\u5b9a\u65b9\u6848\u751f\u6210\u4e0d\u540c\u7684\u903b\u8f91\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u79f0\u903b\u8f91\u5730\u5740\u4e3a \u865a\u62df\u5730\u5740 \uff08virtual address\uff09\u3002\u5728 \u57fa\u7840\u68b3\u7406 \u90e8\u5206\u6211\u4eec\u5bf9 \u903b\u8f91\u5730\u5740 \u548c \u865a\u62df\u5730\u5740 \u4e0d\u52a0\u533a\u5206\u3002\u6709\u7a0b\u5e8f\u751f\u6210\u7684\u903b\u8f91\u5730\u5740\u96c6\u5408\u79f0\u4e3a \u903b\u8f91\u5730\u5740\u7a7a\u95f4 \uff08logical address space\uff09\uff0c\u8fd9\u4e9b\u903b\u8f91\u5730\u5740\u5bf9\u5e94\u7684\u6240\u6709\u7269\u7406\u5730\u5740\u96c6\u5408\u79f0\u4e3a \u7269\u7406\u5730\u5740\u7a7a\u95f4 \uff08physical address space\uff09\u3002 \u4ece\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u8fd0\u884c\u65f6\u6620\u5c04\u662f\u7531 \u5185\u5b58\u7ba1\u7406\u5355\u5143 \uff08Memory-Management Unit\uff0cMMU\uff09\u7684\u786c\u4ef6\u8bbe\u5907\u6765\u5b8c\u6210\u3002\u6709\u591a\u79cd\u65b9\u6848\u6765\u5b8c\u6210\u8fd9\u79cd\u6620\u5c04\uff0c\u8fd9\u91cc\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6848\u4e3a\u4f8b\uff08\u4e5f\u662f\u524d\u8ff0\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u65b9\u6848\u7684\u63a8\u5e7f\uff09\u3002\u57fa\u5730\u5740\u5bc4\u5b58\u5668\u8fd9\u91cc\u79f0\u4e3a \u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668 \uff08relocation register\uff09\u3002 \u4f7f\u7528\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u7684\u52a8\u6001\u91cd\u5b9a\u4f4d","title":"\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4"},{"location":"operating_system/basic/memory_management/#_7","text":"\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6240\u6709\u6570\u636e\u90fd\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u5219\u8fdb\u7a0b\u7684\u5927\u5c0f\u5c06\u53d7\u9650\u4e8e\u5185\u5b58\u7684\u5927\u5c0f\u3002\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u5185\u5b58\u7a7a\u95f4\u5229\u7528\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 \u52a8\u6001\u52a0\u8f7d \uff08dynamic loading\uff09\u3002","title":"\u52a8\u6001\u52a0\u8f7d"},{"location":"operating_system/basic/memory_management/#_8","text":"\u52a8\u6001\u94fe\u63a5\u5e93 \uff08dynamically linked library\uff09\u4e3a\u7cfb\u7edf\u5e93\uff0c\u53ef\u94fe\u63a5\u5230\u7528\u6237\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u8fd0\u884c\u3002\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ea\u652f\u6301 \u9759\u6001\u94fe\u63a5 \uff08static linking\uff09\uff0c\u5b83\u7684\u7cfb\u7edf\u5e93\u4e0e\u5176\u4ed6\u76ee\u6807\u6a21\u5757\u4e00\u6837\uff0c\u901a\u8fc7\u52a0\u8f7d\u7a0b\u9700\uff0c\u88ab\u5408\u5e76\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6620\u50cf\u3002\u52a8\u6001\u94fe\u63a5\u7c7b\u4f3c\u4e8e\u52a8\u6001\u52a0\u8f7d\u3002\u8fd9\u91cc\uff0c\u4e0d\u662f\u52a0\u8f7d\u800c\u662f\u8fde\u63a5\uff0c\u4f1a\u5ef6\u8fdf\u5230\u8fd0\u884c\u65f6\u3002\u8fd9\u79cd\u529f\u80fd\u901a\u5e38\u7528\u4e8e\u7cfb\u7edf\u5e93\uff0c\u5982\u8bed\u8a00\u7684\u5b50\u7a0b\u5e8f\u5e93\u3002\u6ca1\u6709\u8fd9\u79cd\u529f\u80fd\uff0c\u7cfb\u7edf\u5185\u7684\u6240\u6709\u7a0b\u5e8f\u90fd\u9700\u8981\u4e00\u4efd\u8bed\u8a00\u5e93\u7684\u526f\u672c\uff08\u6216\u81f3\u5c11\u90a3\u4e9b\u88ab\u7a0b\u5e8f\u6240\u5f15\u7528\u7684\u5b50\u7a0b\u5e8f\uff09\u3002\u8fd9\u79cd\u8981\u6c42\u6d6a\u8d39\u4e86\u78c1\u76d8\u7a7a\u95f4\u548c\u5185\u5b58\u7a7a\u95f4\u3002 \u5982\u679c\u6709\u52a8\u6001\u94fe\u63a5\uff0c\u5728\u4e8c\u8fdb\u5236\u6620\u50cf\u5185\uff0c\u6bcf\u4e2a\u5e93\u7a0b\u5e8f\u7684\u5f15\u7528\u90fd\u6709\u4e00\u4e2a \u5b58\u6839 \uff08stub\uff09\u3002\u5b58\u6839\u662f\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u7528\u6765\u6307\u51fa\u5982\u4f55\u5b9a\u4f4d\u9002\u5f53\u7684\u5185\u5b58\u9a7b\u7559\u5e93\u7a0b\u5e8f\uff0c\u6216\u8005\u5728\u7a0b\u5e8f\u4e0d\u5728\u5185\u5b58\u65f6\u5e94\u5982\u4f55\u52a0\u8f7d\u5e93\u3002 \u52a8\u6001\u94fe\u63a5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5e93\u7684\u66f4\u65b0\uff08\u5982\u4fee\u6539bug\uff09\u3002\u7248\u672c\u4fe1\u606f\u5305\u542b\u5728\u7a0b\u5e8f\u548c\u5e93\u4e2d\u3002\u4e00\u4e2a\u54ed\u7684\u591a\u4e2a\u7248\u672c\u90fd\u53ef\u4ee5\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u7a0b\u5e8f\u5c06\u901a\u8fc7\u7248\u672c\u4fe1\u606f\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5e93\u7684\u526f\u672c\u3002\u6b21\u8981\u66f4\u6539\u4fdd\u7559\u76f8\u540c\u7684\u7248\u672c\u53f7\uff0c\u800c\u4e3b\u8981\u66f4\u6539\u5219\u589e\u52a0\u7248\u672c\u53f7\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u91c7\u7528\u65b0\u5e93\u7f16\u8bd1\u7684\u7a0b\u5e8f\u624d\u4f1a\u53d7\u65b0\u5e93\u7684\u4e0d\u517c\u5bb9\u6539\u52a8\u7684\u5f71\u54cd\u3002\u5728\u65b0\u5e93\u5b89\u88c5\u4e4b\u524d\u94fe\u63a5\u7684\u5176\u4ed6\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u4f7f\u7528\u8f83\u65e7\u7684\u5e93\u3002\u8fd9\u79cd\u7cfb\u7edf\u4e5f\u79f0\u4e3a \u5171\u4eab\u5e93 \uff08shared library\uff09\u3002 \u4e0e\u52a8\u6001\u52a0\u8f7d\u4e0d\u540c\uff0c\u52a8\u6001\u94fe\u63a5\u901a\u5e38\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e2e\u52a9\u3002\u5982\u679c\u5185\u5b58\u4e2d\u7684\u8fdb\u7a0b\u662f\u5f7c\u6b64\u4fdd\u62a4\u7684\uff0c\u90a3\u4e48\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u624d\u53ef\u4ee5\u68c0\u67e5\u6240\u9700\u7a0b\u5e8f\u662f\u5426\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u5185\uff0c\u6216\u662f\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u8bbf\u95ee\u540c\u6837\u7684\u5185\u5b58\u5730\u5740\u3002\u8fd9\u4e2a\u6982\u5ff5\u5c06\u5728 \u5206\u9875 \u90e8\u5206\u88ab\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u3002","title":"\u52a8\u6001\u94fe\u63a5\u4e0e\u5171\u4eab\u5e93"},{"location":"operating_system/basic/memory_management/#_9","text":"\u8fdb\u7a0b\u5fc5\u987b\u5728\u5185\u5b58\u4e2d\u4ee5\u4fbf\u6267\u884c\u3002\u4e0d\u8fc7\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u6682\u65f6\u4ece\u5185\u5b58 \u4ea4\u6362 \uff08swap\uff09\u5230 \u5907\u4efd\u5b58\u50a8 \uff08backing store\uff09\uff0c\u5f53\u518d\u6b21\u6267\u884c\u65f6\u5728\u8c03\u56de\u5230\u5185\u5b58\u4e2d\uff0c\u5982\u4e0b\u56fe\uff1a \u4f7f\u7528\u78c1\u76d8\u4f5c\u4e3a\u5b58\u50a8\u4ed3\u5e93\u7684\u4e24\u4e2a\u8fdb\u7a0b\u7684\u4ea4\u6362 \u4ea4\u6362\u6709\u53ef\u80fd\u8ba9\u6240\u6709\u8fdb\u7a0b\u7684\u603b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u8d85\u8fc7\u771f\u5b9e\u7cfb\u7edf\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u7cfb\u7edf\u7684\u591a\u9053\u7a0b\u5e8f\u7a0b\u5ea6\u3002","title":"\u4ea4\u6362"},{"location":"operating_system/basic/memory_management/#_10","text":"\u6807\u51c6\u4ea4\u6362\u5728\u5185\u5b58\u548c\u5907\u4efd\u5b58\u50a8\u4e4b\u95f4\u79fb\u52a8\u8fdb\u7a0b\u3002\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u53ef\u8fd0\u884c\u7684\u6240\u6709\u8fdb\u7a0b\u7684 \u5c31\u7eea\u961f\u5217 \uff08ready queue\uff09\uff0c\u5b83\u4eec\u7684\u6620\u50cf\u5728\u5907\u4efd\u5b58\u50a8\u6216\u5185\u5b58\u4e2d\u3002\u5f53CPU\u51b3\u5b9a\u8981\u6267\u884c\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u4ed6\u8c03\u7528\u5206\u6d3e\u5668\u3002\u5206\u914d\u5668\u68c0\u67e5\u961f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u662f\u5426\u5728\u5185\u5b58\u4e2d\u3002\u5982\u679c\u4e0d\u5728\uff0c\u5e76\u4e14\u6ca1\u6709\u7a7a\u95f2\u5185\u5b58\u533a\u57df\uff0c\u90a3\u4e48\u5206\u6d3e\u5668\u4f1a\u6362\u51fa\uff08swap out\uff09\u5f53\u524d\u4f4d\u4e8e\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u6362\u5165\uff08swap in\uff09\u6240\u9700\u8fdb\u7a0b\u3002\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u5bc4\u5b58\u5668\uff0c\u5e76\u5c06\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u6240\u9009\u8fdb\u7a0b\u3002 \u8fd9\u79cd\u4ea4\u6362\u7cfb\u7edf\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u95f4\u76f8\u5f53\u9ad8\u3002\u56e0\u6b64\u77e5\u9053\u4e00\u4e2a\u8fdb\u7a0b\u771f\u6b63\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4\u800c\u4e0d\u662f\u53ef\u80fd\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u7528\u6237\u9700\u8981\u544a\u8bc9\u7cfb\u7edf\u5b83\u7684\u5185\u5b58\u9700\u6c42\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u5177\u6709\u52a8\u6001\u5185\u5b58\u9700\u6c42\u7684\u8fdb\u7a0b\u9700\u8981\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\uff08 request_memory() \u548c release_memory() \uff09\u6765\u901a\u77e5\u64cd\u4f5c\u7cfb\u7edf\u5b83\u7684\u5185\u5b58\u9700\u6c42\u53d8\u5316\u60c5\u51b5\u3002 \u8003\u8651\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u6362\u51fa\u8fdb\u7a0b P_1 P_1 \u800c\u6362\u5165\u8fdb\u7a0b P_2 P_2 \uff0c\u663e\u7136 P_1 P_1 \u5e94\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u7136\u800c\u5982\u679c\u5982\u679cI/O\u5f02\u6b65\u8bbf\u95ee\u7528\u6237\u5185\u5b58\u7684I/O\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u8be5\u8fdb\u7a0b\u5c31\u4e0d\u80fd\u6362\u51fa\u3002I/O\u64cd\u4f5c\u53ef\u80fd\u8bd5\u56fe\u4f7f\u7528\u73b0\u5728\u5df2\u5c5e\u4e8e\u8fdb\u7a0b P_2 P_2 \u7684\u5185\u5b58\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u4e24\u79cd\u4e3b\u8981\u65b9\u6cd5\uff1a \u4e0d\u80fd\u6362\u51fa\u7b49\u5f85\u5904\u7406I/O\u7684\u8fdb\u7a0b\uff1b I/O\u64cd\u4f5c\u7684\u6267\u884c\u53ea\u80fd\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u51b2\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ea\u6709\u5728\u8fdb\u7a0b\u6362\u5165\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7f13\u51b2\u4e0e\u8fdb\u7a0b\u5185\u5b58\u4e4b\u95f4\u624d\u80fd\u8fdb\u884c\u6570\u636e\u8f6c\u79fb\u3002\u8fd9\u79cd \u53cc\u7f13\u51b2 \uff08double buffering\uff09\u672c\u8eab\u589e\u52a0\u4e86\u5f00\u9500\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u518d\u6b21\u590d\u5236\u6570\u636e\uff0c\u4ece\u5185\u6838\u5185\u5b58\u5230\u7528\u6237\u5185\u5b58\uff0c\u7136\u540e\u7528\u6237\u8fdb\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5b83\u3002 \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u5e76\u4e0d\u9002\u7528\u6807\u51c6\u4ea4\u6362\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e9b\u5e38\u89c1\u53d8\u79cd\uff1a \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7981\u6b62\u4ea4\u6362\uff1b\u5f53\u7a7a\u95f2\u5185\u5b58\uff08\u672a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6216\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\uff09\u4f4e\u4e8e\u67d0\u4e2a\u9608\u503c\u65f6\uff0c\u542f\u7528\u4ea4\u6362\u3002\u5f53\u7a7a\u95f2\u5185\u5b58\u6570\u91cf\u589e\u52a0\u4e86\uff0c\u5c31\u505c\u6b62\u4ea4\u6362\u3002 \u4ea4\u6362\u8fdb\u7a0b\u7684\u90e8\u5206\uff08\u800c\u4e0d\u662f\u6574\u4e2a\u8fdb\u7a0b\uff09\uff0c\u4ee5\u964d\u4f4e\u4ea4\u6362\u65f6\u95f4\u3002 \u901a\u5e38\u8fd9\u4e9b\u4ea4\u6362\u7684\u53d8\u79cd\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u8d77\u5de5\u4f5c\u3002","title":"\u6807\u51c6\u4ea4\u6362"},{"location":"operating_system/basic/memory_management/#_11","text":"\u79fb\u52a8\u7cfb\u7edf\u901a\u5e38\u4e0d\u652f\u6301\u4efb\u4f55\u5f62\u5f0f\u7684\u4ea4\u6362\u3002\u79fb\u52a8\u8bbe\u5907\u901a\u5e38\u91c7\u7528\u95ea\u5b58\uff0c\u5bfc\u81f4\u7684\u7a7a\u95f4\u7ea6\u675f\u662f\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u8005\u907f\u514d\u4ea4\u6362\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u53e6\u5916\u5176\u4ed6\u7684\u539f\u56e0\uff1a \u95ea\u5b58\u5199\u5165\u6b21\u6570\u7684\u9650\u5236 \u5185\u5b58\u95ea\u5b58\u4e4b\u95f4\u541e\u5410\u91cf\u7684\u5dee\u5f02","title":"\u79fb\u52a8\u7cfb\u7edf\u7684\u4ea4\u6362"},{"location":"operating_system/basic/memory_management/#_12","text":"\u5185\u5b58\u901a\u5e38\u5206\u4e3a\u4e24\u4e2a\u533a\u57df\uff1a\u4e00\u4e2a\u7528\u4e8e \u9a7b\u7559\u64cd\u4f5c\u7cfb\u7edf \uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e \u7528\u6237\u8fdb\u7a0b \u3002\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u653e\u5728\u4f4e\u5185\u5b58\u6216\u9ad8\u5185\u5b58\u3002\u5f71\u54cd\u8fd9\u4e00\u51b3\u5b9a\u7684\u4e3b\u8981\u56e0\u7d20\u662f\u4e2d\u65ad\u5411\u91cf\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u4e2d\u65ad\u5411\u91cf\u901a\u5e38\u4f4d\u4e8e\u4f4e\u5185\u5b58\u3002\u56e0\u6b64\u5de5\u7a0b\u5e08\u4e00\u822c\u5c06\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u653e\u5728\u4f4e\u5185\u5b58\u3002 \u9700\u8981\u8003\u8651\uff0c\u5982\u4f55\u5c06\u8f93\u5165\u961f\u5217\u4e2d\u9700\u8981\u8c03\u5165\u5185\u5b58\u7684\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002\u5728\u91c7\u7528 \u8fde\u7eed\u5185\u5b58\u5206\u914d \uff08contiguous memory allocation\uff09\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4f4d\u4e8e\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\uff0c\u4e0e\u5305\u542b\u4e0b\u4e00\u8fdb\u57ce\u7684\u5185\u5b58\u76f8\u8fde\u3002","title":"\u8fde\u7eed\u5185\u5b58\u5206\u914d"},{"location":"operating_system/basic/memory_management/#_13","text":"\u524d\u9762\u8ba8\u8bba\u8fc7\u57fa\u4e8e\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u548c\u754c\u9650\u5bc4\u5b58\u5668\u7684\u5185\u5b58\u5730\u5740\u4fdd\u62a4\u673a\u5236\u3002\u540c\u65f6\u91cd\u5b9a\u4f4d\u65b9\u6848\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u4ee5\u4fbf \u64cd\u4f5c\u7cfb\u7edf\u52a8\u6001\u6539\u53d8\u5176\u5927\u5c0f \u3002\u8fd9\u4e00\u7075\u6d3b\u6027\u7528\u9014\u5e7f\u6cdb\u3002\u4f8b\u5982\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u9a71\u52a8\u7a0b\u5e8f\u9700\u8981\u4ee3\u7801\u548c\u7f13\u51b2\u7a7a\u95f4\u3002\u5982\u679c\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\uff08\u6216\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u670d\u52a1\uff09\u4e0d\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u5728\u5185\u5b58\u4e2d\u4fdd\u7559\u5b83\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u7a7a\u95f4\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u76ee\u7684\u3002\u8fd9\u7c7b\u4ee3\u7801\u6709\u65f6\u79f0\u4e3a \u6682\u65f6 \uff08transient\uff09\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\uff1b\u5b83\u4eec\u6839\u636e\u9700\u8981\u8c03\u5165\u8c03\u51fa\u3002","title":"\u5185\u5b58\u4fdd\u62a4"},{"location":"operating_system/basic/memory_management/#_14","text":"\u6700\u7b80\u5355\u7684\u5206\u914d\u65b9\u6cd5\u4e4b\u4e00\uff0c\u5c31\u662f\u5c06\u5185\u5b58\u5206\u4e3a\u591a\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684 \u5206\u533a \uff08partition\uff09\u3002\u6bcf\u4e2a\u5206\u533a\u53ef\u4ee5\u53ea\u5305\u542b\u4e00\u4e2a\u8fdb\u7a0b\u3002\u56e0\u6b64\uff0c\u591a\u9053\u7a0b\u5e8f\u7684\u7a0b\u5e8f\u53d7\u9650\u4e8e\u5206\u533a\u6570\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd \u591a\u5206\u533a\u65b9\u6cd5 \uff08multiple-partition method\uff09\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u5206\u533a\u7a7a\u95f2\u65f6\uff0c\u5b83\u7684\u5206\u533a\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u3002 \u5bf9\u4e8e \u53ef\u53d8\u5206\u533a \uff08variable-partition\uff09\u65b9\u6848\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e00\u4e2a\u8868\uff0c\u7528\u4e8e\u8bb0\u5f55\u54ea\u4e9b\u5185\u5b58\u53ef\u7528\u548c\u54ea\u4e9b\u5185\u5b58\u5df2\u7528\u3002\u5f00\u59cb\uff0c\u6240\u6709\u5185\u5b58\u90fd\u53ef\u7528\u4e8e\u7528\u6237\u8fdb\u7a0b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u5927\u5757\u7684\u53ef\u7528\u5185\u5b58\uff0c\u79f0\u4e3a \u5b54 \uff08hole\uff09\u3002\u6700\u7ec8\uff0c\u5185\u5b58\u662f\u4e00\u4e2a\u5305\u62ec\u5404\u79cd\u5927\u5c0f\u7684\u5b54\u7684\u96c6\u5408\u3002 \u8fd9\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7 \u52a8\u6001\u5b58\u50a8\u5206\u914d\u95ee\u9898 \uff08dynamic storage-allocation problem\uff09\uff08\u6839\u636e\u4e00\u7ec4\u7a7a\u95f2\u5b54\u6765\u5206\u914d\u5927\u5c0f\u4e3a n n \u7684\u8bf7\u6c42\uff09\u7684\u4e00\u4e2a\u7279\u4f8b\u3002\u8fd9\u4e2a\u95ee\u9898\u6709\u8bb8\u591a\u89e3\u51b3\u65b9\u6848\u3002\u4ece\u4e00\u7ec4\u53ef\u7528\u5b54\u4e2d\u9009\u62e9\u4e00\u4e2a\u7a7a\u95f2\u5b54\u7684\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u6cd5\u5305\u62ec\uff1a \u9996\u6b21\u9002\u5e94 \uff08first-fit\uff09\uff1a\u5206\u914d\u9996\u4e2a\u8db3\u591f\u5927\u7684\u5b54\u3002\u67e5\u627e\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\uff0c\u4e5f\u53ef\u4ee5\u4ece\u4e0a\u6b21\u9996\u6b21\u9002\u5e94\u7ed3\u675f\u65f6\u5f00\u59cb\u3002\u4e00\u65e6\u627e\u5230\u8db3\u591f\u5927\u7684\u7a7a\u95f2\u5b54\uff0c\u5c31\u53ef\u4ee5\u505c\u6b62\u3002 \u6700\u4f18\u9002\u5e94 \uff08best-fit\uff09\uff1a\u5206\u914d\u6700\u5c0f\u7684\u8db3\u591f\u5927\u7684\u5b54\u3002\u5e94\u67e5\u627e\u6574\u4e2a\u8868\uff0c\u9664\u975e\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u6700\u5c0f\u5269\u4f59\u5b54\u3002 \u6700\u5dee\u9002\u5e94 \uff08worst-fit\uff09\uff1a\u5206\u914d\u6700\u5927\u7684\u5b54\u3002\u540c\u6837\uff0c\u5e94\u8be5\u67e5\u627e\u6574\u4e2a\u5217\u8868\uff0c\u9664\u975e\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u6700\u5927\u5269\u4f59\u5b54\uff0c\u8be5\u5b54\u53ef\u80fd\u6bd4\u6700\u4f18\u9002\u5e94\u4ea7\u751f\u7684\u8f83\u5c0f\u5269\u4f59\u5b54\u66f4\u4e3a\u9002\u7528\u3002 \u6a21\u62df\u7ed3\u679c\u663e\u793a\uff0c\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u5728\u6267\u884c\u65f6\u95f4\u548c\u5229\u7528\u7a7a\u95f4\u65b9\u9762\u90fd\u597d\u4e8e\u6700\u5dee\u9002\u5e94\u3002\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u5728\u5229\u7528\u7a7a\u95f4\u65b9\u9762\u96be\u5206\u4f2f\u4ef2\uff0c\u4f46\u662f\u9996\u6b21\u9002\u5e94\u66f4\u5feb\u4e00\u4e9b\u3002","title":"\u5185\u5b58\u5206\u914d"},{"location":"operating_system/basic/memory_management/#_15","text":"\u5185\u5b58\u5206\u914d\u7684\u9996\u6b21\u9002\u5e94\u548c\u6700\u4f18\u9002\u5e94\u7b97\u6cd5\u90fd\u6709 \u5916\u90e8\u788e\u7247 \uff08external fragmentation\uff09\u7684\u95ee\u9898\u3002\u91c7\u7528\u9996\u6b21\u9002\u5e94\u65b9\u6cd5\u7684\u7edf\u8ba1\u8bf4\u660e\uff0c\u4e0d\u7ba1\u4f7f\u7528\u4ec0\u4e48\u4f18\u5316\uff0c\u5047\u5b9a\u6709 N N \u4e2a\u53ef\u5206\u914d\u5757\uff0c\u90a3\u4e48\u53ef\u80fd\u6709 0.5N 0.5N \u4e2a\u5757\u4e3a\u5916\u90e8\u788e\u7247\u3002\u5373 \\frac{1}{3} \\frac{1}{3} \u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u80fd\u4f7f\u7528\u3002\u8fd9\u4e00\u7279\u6027\u79f0\u4e3a 50%\u89c4\u5219 50%\u89c4\u5219 \uff0850-percent rule\uff09\u3002 \u5185\u5b58\u788e\u7247\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5185\u90e8\u7684\u3002\u5047\u8bbe\u6709\u4e00\u4e2a 18464 18464 \u5b57\u8282\u5927\u5c0f\u7684\u5b54\uff0c\u5e76\u91c7\u7528\u591a\u5206\u533a\u5206\u914d\u65b9\u6848\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981 18462 18462 \u5b57\u8282\u3002\u5982\u679c\u53ea\u80fd\u5206\u914d\u6240\u8981\u6c42\u7684\u5757\uff0c\u90a3\u4e48\u8fd8\u5269\u4e0b\u4e00\u4e2a 2 2 \u4e2a\u5b57\u8282\u7684\u5b54\u3002\u7ef4\u62a4\u8fd9\u4e2a\u5b54\u7684\u5f00\u9500\u8981\u6bd4\u5b54\u672c\u8eab\u5927\u5f88\u591a\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u6309\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\u4e3a\u5355\u4f4d\uff08\u800c\u4e0d\u662f\u5b57\u8282\uff09\u6765\u5206\u914d\u5185\u5b58\u3002\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\uff0c\u8fdb\u7a0b\u6240\u5206\u914d\u7684\u5185\u5b58\u53ef\u80fd\u6bd4\u6240\u9700\u8981\u7684\u8981\u5927\u3002\u8fd9\u4e24\u4e2a\u6570\u5b57\u53ea\u5dee\u79f0\u4e3a \u5185\u90e8\u788e\u7247 \uff08internal fragmentation\uff09\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u5728\u5206\u533a\u5185\u90e8\uff0c\u4f46\u53c8\u4e0d\u80fd\u7528\u3002 \u5916\u90e8\u788e\u7247\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f \u7d27\u7f29 \uff08compaction\uff09\uff0c\u5b83\u7684\u76ee\u7684\u662f\u79fb\u52a8\u5185\u5b58\u5185\u5bb9\uff0c\u4ee5\u4fbf\u5c06\u6240\u6709\u7a7a\u95f2\u7a7a\u95f4\u5408\u5e76\u6210\u4e00\u6574\u5757\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u5f00\u9500\u6602\u8d35\u3002 \u5916\u90e8\u788e\u7247\u95ee\u9898\u7684\u53e6\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\u5141\u8bb8\u8fdb\u7a0b\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u662f\u4e0d\u8fde\u7eed\u7684\uff1b\u8fd9\u6837\uff0c\u53ea\u8981\u6709\u7269\u7406\u5185\u5b58\u53ef\u7528\uff0c\u5c31\u5141\u8bb8\u4e3a\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u3002\u6709\u4e24\u79cd\u4e92\u8865\u7684\u6280\u672f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\u5206\u6bb5\u548c\u5206\u9875\u3002\u8fd9\u4e24\u4e2a\u6280\u672f\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u3002 \u788e\u7247\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898\uff1b\u5f53\u9700\u8981\u7ba1\u7406\u6570\u636e\u5757\u65f6\u5b83\u5c31\u53ef\u80fd\u51fa\u73b0\u3002\u5728\u5b58\u50a8\u7ba1\u7406\u90e8\u5206\u4e5f\u4f1a=\u6709\u8ba8\u8bba\u3002","title":"\u788e\u7247"},{"location":"operating_system/basic/memory_management/#_16","text":"\u6b63\u5982\u5df2\u7ecf\u770b\u5230\u7684\uff0c\u7528\u6237\u7684\u5185\u5b58\u89c6\u56fe\u548c\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u4e0d\u4e00\u6837\u3002\u8fd9\u540c\u6837\u9002\u7528\u4e8e\u7a0b\u5e8f\u5458\u7684\u5185\u5b58\u89c6\u56fe\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u6309\u7269\u7406\u6027\u8d28\u6765\u5904\u7406\u5185\u5b58\u662f\u4e0d\u65b9\u4fbf\u7684\u3002\u5982\u679c\u786c\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u5185\u5b58\u673a\u5236\uff0c\u4ee5\u4fbf\u5c06\u7a0b\u5e8f\u5458\u7684\u5185\u5b58\u89c6\u56fe\u6620\u5c04\u5230\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u4f1a\u5982\u4f55\uff1f\u8fd9\u6837\uff0c\u7cfb\u7edf\u5c06\u6709\u66f4\u591a\u7684\u81ea\u7531\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u800c\u7a0b\u5e8f\u5458\u5c06\u6709\u4e00\u4e2a\u66f4\u81ea\u7136\u7684\u7f16\u7a0b\u73af\u5883\u3002\u5206\u6bb5\u63d0\u4f9b\u4e86\u8fd9\u79cd\u673a\u5236\u3002","title":"\u5206\u6bb5"},{"location":"operating_system/basic/memory_management/#_17","text":"\u5728\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u773c\u4e2d\uff0c\u5185\u5b58\u4e0d\u662f\u4e00\u4e2a\u5b57\u8282\u7684\u7ebf\u6027\u6570\u7ec4\uff0c\u6709\u7684\u5305\u542b\u6307\u4ee4\u800c\u5176\u4ed6\u7684\u5305\u542b\u6570\u636e\u3002\u4ed6\u4eec\u773c\u4e2d\u7684\u5185\u5b58\u901a\u5e38\u662f\u4e00\u7ec4\u4e0d\u540c\u957f\u5ea6\u7684\u6bb5\uff0c\u8fd9\u4e9b\u6bb5\u4e4b\u95f4\u5e76\u6ca1\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u3002 \u7a0b\u5e8f\u5458\u773c\u4e2d\u7684\u7a0b\u5e8f \u7a0b\u5e8f\u5458\u773c\u4e2d\u7684\u7a0b\u5e8f\u662f\u7531\u4e3b\u7a0b\u5e8f\u52a0\u4e0a\u4e00\u7ec4\u65b9\u6cd5\u3001\u8fc7\u7a0b\u6216\u51fd\u6570\u6240\u6784\u6210\u7684\u3002\u5b83\u8fd8\u53ef\u4ee5\u5305\u62ec\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff1a\u5bf9\u8c61\u3001\u6570\u7ec4\u3001\u5806\u6808\u3001\u53d8\u91cf\u7b49\u3002\u6bcf\u4e2a\u6a21\u5757\u6216\u6570\u636e\u5143\u7d20\u901a\u8fc7\u540d\u79f0\u6765\u5f15\u7528\u3002\u7a0b\u5e8f\u5458\u4f1a\u8bf4\u201c\u5806\u6808\u201d\u3001\u201c\u6570\u5b66\u5e93\u201d \u548c \u201c\u4e3b\u7a0b\u5e8f\u201d \u7b49\uff0c\u800c\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u5143\u7d20\u6240\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\u3002\u5979\u4e0d\u5173\u5fc3\u5806\u6808\u5f0f\u653e\u5728\u51fd\u6570 Sqrt() \u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u3002\u8fd9\u4e9b\u6bb5\u7684\u957f\u5ea6\u662f\u4e0d\u540c\u7684\uff0c\u5176\u957f\u5ea6\u662f\u6709\u8fd9\u4e9b\u6bb5\u5728\u7a0b\u5e8f\u4e2d\u7684\u76ee\u7684\u51b3\u5b9a\u7684\u3002\u6bb5\u5185\u7684\u5143\u7d20\u662f\u901a\u8fc7\u5b83\u4eec\u8ddd\u79bb\u6bb5\u9996\u7684\u504f\u79fb\u6765\u6307\u5b9a\uff1a\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u3001\u5728\u5806\u6808\u91cc\u7684\u7b2c 7 7 \u4e2a\u6808\u5e27\u3001\u51fd\u6570 Sqrt() \u7684\u7b2c\u4e94\u6761\u6307\u4ee4\u3002 \u5206\u6bb5 \uff08segmentation\uff09\u5c31\u662f\u652f\u6301\u8fd9\u79cd\u7528\u6237\u89c6\u56fe\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u662f\u7531\u4e00\u7ec4\u6bb5\u6784\u6210\u3002\u6bcf\u4e2a\u6bb5\u90fd\u6709\u540d\u79f0\u548c\u957f\u5ea6\u3002\u5730\u5740\u6307\u5b9a\u4e86\u6bb5\u540d\u79f0\u548c\u6bb5\u5185\u504f\u79fb\u3002\u56e0\u6b64\u7528\u6237\u901a\u8fc7\u4e24\u4e2a\u91cf\u6765\u6307\u5b9a\u5730\u5740\uff1a\u6bb5\u540d\u79f0\u548c\u6bb5\u504f\u79fb\u3002 \u4e3a\u4e86\u5b9e\u73b0\u7b80\u5355\u8d77\u89c1\uff0c\u6bb5\u662f\u7f16\u53f7\u7684\uff0c\u662f\u901a\u8fc7\u77ed\u53f7\u800c\u4e0d\u662f\u6bb5\u540d\u79f0\u6765\u5f15\u7528\u3002\u56e0\u6b64\uff0c\u903b\u8f91\u5730\u5740\u7531\u6709\u5e8f\u5bf9\uff08two tuple\uff09\u7ec4\u6210\uff1a <\u6bb5\u53f7\uff0c\u504f\u79fb> \u901a\u5e38\uff0c\u5728\u7f16\u8bd1\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8f93\u5165\u7a0b\u5e8f\u6765\u81ea\u52a8\u6784\u9020\u6bb5\u3002 \u4e00\u4e2a C \u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u521b\u5efa\u5982\u4e0b\u6bb5\uff1a \u4ee3\u7801 \u5168\u5c40\u53d8\u91cf \u5806\uff08\u5185\u5b58\u4ece\u5806\u4e0a\u5206\u914d\uff09 \u6bcf\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808 \u6807\u51c6\u7684 C \u5e93 \u5728\u7f16\u8bd1\u65f6\u94fe\u63a5\u7684\u5e93\u53ef\u80fd\u5206\u914d\u4e0d\u540c\u7684\u6bb5\u3002\u52a0\u8f7d\u7a0b\u5e8f\u4f1a\u88c5\u5165\u6240\u6709\u8fd9\u4e9b\u6bb5\uff0c\u5e76\u4e3a\u5b83\u4eec\u5206\u914d\u6bb5\u53f7\u3002","title":"\u57fa\u672c\u65b9\u6cd5"},{"location":"operating_system/basic/memory_management/#_18","text":"\u867d\u7136\u7528\u6237\u73b0\u5728\u80fd\u901a\u8fc7\u4e8c\u4f4d\u5730\u5740\u6765\u5f15\u7528\u7a0b\u5e8f\u5185\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u5b9e\u9645\u7269\u7406\u5185\u5b58\u4ecd\u7136\u662f\u4e00\u7ef4\u7684\u5b57\u8282\u5e8f\u5217\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u6620\u5c04\u7528\u6237\u5b9a\u4e49\u7684\u4e8c\u7ef4\u5730\u5740\u5230\u4e00\u7ef4\u7269\u7406\u5730\u5740\u3002\u8fd9\u4e2a\u5730\u5740\u662f\u901a\u8fc7 \u6bb5\u8868 \uff08segment table\uff09\u6765\u5b9e\u73b0\u7684\u3002\u6bb5\u8868\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u6709 \u6bb5\u57fa\u5730\u5740 \uff08segment base\uff09\u548c \u6bb5\u754c\u9650 \uff08segment limit\uff09\u3002\u6bb5\u57fa\u5730\u5740\u5305\u542b\u8be5\u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u5f00\u59cb\u7269\u7406\u5730\u5740\uff0c\u800c\u6bb5\u754c\u9650\u6307\u5b9a\u8be5\u6bb5\u7684\u957f\u5ea6\u3002 \u5206\u6bb5\u786c\u4ef6 \u6bb5\u8868\u7684\u4f7f\u7528\u5982\u4e0a\u56fe\u6240\u793a\u3002\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u6bb5\u53f7 s s \u548c\u6bb5\u504f\u79fb d d \u3002\u6bb5\u53f7\u7528\u4f5c\u6bb5\u8868\u7684\u7d22\u5f15\uff0c\u903b\u8f91\u5730\u5740\u7684\u504f\u79fb d d \u5e94\u4f4d\u4e8e 0 0 \u548c\u6bb5\u754c\u9650\u4e4b\u95f4\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff08\u903b\u8f91\u5730\u5740\u8bd5\u56fe\u8bbf\u95ee\u6bb5\u7684\u5916\u9762\uff09\u3002\u5982\u679c\u504f\u79fb d d \u5408\u6cd5\uff0c\u90a3\u4e48\u5c31\u4e0e\u57fa\u5740\u76f8\u52a0\u5f97\u5230\u6240\u9700\u5b57\u8282\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002\u56e0\u6b64\uff0c\u6bb5\u8868\u5b9e\u9645\u4e0a\u4e8c\u5143\u7ec4 \uff08 \u57fa\u5740\u5bc4\u5b58\u5668\u503c \uff0c \u754c\u9650\u5bc4\u5b58\u5668\u503c \uff09 \u7684\u6570\u7ec4\u3002 \u5206\u6bb5\u7684\u4f8b\u5b50 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u524d\u8ff0\u4f8b\u5b50\u4e2d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5185\u5b58\u4e4b\u95f4\u901a\u8fc7\u6bb5\u8868\u6620\u5c04\u3002","title":"\u5206\u6bb5\u786c\u4ef6"},{"location":"operating_system/basic/memory_management/#_19","text":"\u5206\u6bb5\u5141\u8bb8\u8fdb\u7a0b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u662f\u975e\u8fde\u7eed\u7684\u3002 \u5206\u9875 \uff08paging\uff09\u662f\u63d0\u4f9b\u8fd9\u79cd\u4f18\u52bf\u7684\u53e6\u4e00\u79cd\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u7136\u800c\uff0c\u5206\u9875\u907f\u514d\u4e86\u5916\u90e8\u788e\u7247\u548c\u7d27\u7f29\uff0c\u800c\u5206\u6bb5\u4e0d\u53ef\u4ee5\u3002\u5206\u9875\u4e5f\u907f\u514d\u4e86 \u5c06\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5339\u914d\u5230\u4ea4\u6362\u7a7a\u95f4 \u7684\u9ebb\u70e6\u95ee\u9898\u3002\u5728\u5206\u9875\u5f15\u5165\u4e4b\u524d\u91c7\u7528\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u51fa\u73b0\u7684\u539f\u56e0\u662f\uff1a\u5f53\u4f4d\u4e8e\u5185\u5b58\u7684\u4ee3\u7801\u548c\u6570\u636e\u6bb5\u9700\u8981\u6362\u51fa\u65f6\uff0c\u5e94\u5728\u5907\u4efd\u5b58\u50a8\u4e0a\u627e\u5230\u7a7a\u95f4\u3002\u5907\u4efd\u5b58\u50a8\u4e5f\u6709\u540c\u6837\u7684\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u788e\u7247\u95ee\u9898\uff0c\u4f46\u662f\u8bbf\u95ee\u66f4\u6162\uff0c\u56e0\u6b64\u7d27\u7f29\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7531\u4e8e\u6bd4\u65e9\u8d77\u65b9\u6cd5\u66f4\u4f18\u8d8a\uff0c\u5404\u79cd\u5f62\u5f0f\u7684\u5206\u9875\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\uff0c\u5305\u62ec\u5927\u578b\u673a\u548c\u667a\u80fd\u624b\u673a\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u5b9e\u73b0\u5206\u9875\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u548c\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u534f\u4f5c\u3002","title":"\u5206\u9875"},{"location":"operating_system/basic/memory_management/#_20","text":"\u5b9e\u73b0\u5206\u9875\u7684\u57fa\u672c\u65b9\u6cd5\u6d89\u53ca\u5c06\u7269\u7406\u5185\u5b58\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a \u5e27 \u6216 \u9875\u5e27 \uff08frame\uff09\uff1b\u800c\u5c06\u903b\u8f91\u5185\u5b58\u4e5f\u5206\u4e3a\u540c\u6837\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a \u9875 \u6216 \u9875\u9762 \uff08page\uff09\u3002\u5f53\u9700\u8981\u6267\u884c\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u5b83\u7684\u9875\u4ece\u6587\u4ef6\u7cfb\u7edf\u6216\u5907\u4efd\u5b58\u50a8\u7b49\u6e90\u5904\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u53ef\u7528\u5e27\u3002\u5907\u4efd\u5b58\u50a8\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u5b83\u4e0e\u5355\u4e2a\u5185\u5b58\u4e2d\u6216\u591a\u4e2a\u5185\u5b58\u5e27\uff08\u7c07\uff09\u7684\u5927\u5c0f\u4e00\u6837\u3002\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u65b9\u6cd5\u529f\u80fd\u5f3a\u4e14\u53d8\u5316\u591a\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u4e00\u4e2a 64 64 \u4f4d\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u7cfb\u7edf\u7684\u7269\u7406\u5185\u5b58\u5c0f\u4e8e 2^{64} 2^{64} \u5b57\u8282\u3002 \u5206\u9875\u7684\u786c\u4ef6\u652f\u6301 \u5206\u9875\u7684\u786c\u4ef6\u652f\u6301\u5982\u4e0a\u56fe\u6240\u793a\u3002\u7531CPU\u751f\u6210\u7684\u6bcf\u4e2a\u5730\u5740\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u9875\u7801 \uff08page number\uff09( p p )\u548c \u9875\u504f\u79fb \uff08page offset\uff09( d d )\u3002\u9875\u7801\u4f5c\u4e3a \u9875\u8868 \u7684\u7d22\u5f15\u3002\u9875\u8868\u5305\u542b\u6bcf\u9875\u6240\u5728\u7269\u7406\u5185\u5b58\u7684\u57fa\u5730\u5740\u3002\u8fd9\u4e2a\u57fa\u5730\u5740\u4e0e\u9875\u504f\u79fb\u7684\u7ec4\u5408\u5c31\u5f62\u6210\u4e86\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u53ef\u53d1\u9001\u5230\u7269\u7406\u5355\u5143\u3002\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b\u5982\u4e0b\u5982\u6240\u793a\uff1a \u903b\u8f91\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b \u9875\u5927\u5c0f\uff08\u4e0e\u5e27\u5927\u5c0f\u4e00\u6837\uff09\u662f\u7531\u786c\u4ef6\u6765\u51b3\u5b9a\u7684\u3002\u4e5f\u5f97\u5927\u5c0f\u4e3a 2 2 \u7684\u5e42\uff1b\u6839\u636e\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\uff0c\u9875\u5927\u5c0f\u53ef\u4ee5\u4ece 512 512 \u5b57\u8282\u5230 1 1 GB\u4e0d\u7b49\u3002\u5982\u679c\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4e3a 2^m 2^m \uff0c\u9875\u5927\u5c0f\u4e3a 2^n 2^n \u5b57\u8282\uff0c\u90a3\u4e48\u903b\u8f91\u5730\u5740\u7684\u9ad8 m - n m - n \u4f4d\u8868\u793a\u9875\u7801\uff0c\u800c\u4f4e n n \u4f4d\u8868\u793a\u9875\u504f\u79fb\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d p p \u662f\u9875\u8868\u7d22\u5f15\uff08\u9875\u7801\uff09\uff0c d d \u4e3a\u9875\u5185\u504f\u79fb\u3002 \u83b7\u53d6 Linux \u7cfb\u7edf\u7684\u9875\u7684\u5927\u5c0f \u5728 Linux \u7cfb\u7edf\u4e0a\uff0c\u9875\u5927\u5c0f\u6839\u636e\u67b6\u6784\u800c\u53d8\u5316\uff0c\u6709\u591a\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u9875\u5927\u5c0f\u3002\u4e00\u79cd\u65b9\u6cd5\u91c7\u7528\u7cfb\u7edf\u8c03\u7528 getpagesize() \u3002\u53e6\u4e00\u4e2a\u7b56\u7565\u662f\u7ec8\u7aef\u547d\u4ee4 getconf PAGESIZE \u8fd9\u4e9b\u65b9\u6cd5\u90fd\u8fd4\u56de\u6309\u5b57\u8282\u8ba1\u6570\u7684\u9875\u5927\u5c0f\u3002 \u4e0d\u96be\u6ce8\u610f\u5230\uff0c\u5206\u9875\u672c\u8eab\u662f\u4e00\u79cd\u52a8\u6001\u7684\u91cd\u5b9a\u4f4d\u3002\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u7531\u5206\u9875\u786c\u4ef6\u7ed1\u5b9a\u7ed1\u5b9a\u4e3a\u67d0\u4e2a\u7269\u7406\u5730\u5740\u3002\u91c7\u7528\u5206\u9875\u7c7b\u4f3c\u4e8e\u91c7\u7528\u4e00\u7ec4\u57fa\u5740\uff08\u91cd\u5b9a\u4f4d\uff09\u5bc4\u5b58\u5668\uff0c\u6bcf\u4e2a\u57fa\u5740\u5bf9\u5e94\u7740\u4e00\u4e2a\u5185\u5b58\u5e27\u3002 \u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7269\u7406\u5185\u5b58\uff0c\u5854\u5f71\u4e4b\u9053\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u7ec6\u8282\uff1a\u54ea\u4e9b\u5e27\u5df2\u5206\u914d\uff0c\u54ea\u4e9b\u5e27\u7a7a\u7740\uff0c\u603b\u5171\u6709\u591a\u5c11\u9488\uff0c\u7b49\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u901a\u5e38\u4fdd\u5b58\u5728\u79f0\u4e3a \u5e27\u8868 \uff08frame table\uff09\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u5728\u5e27\u8868\u4e2d\uff0c\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u7740\u4e00\u4e2a\u5e27\uff0c\u4ee5\u8868\u793a\u8be5\u5e27\u662f\u7a7a\u95f2\u8fd8\u662f\u5df2\u5360\u7528\uff1b\u5982\u679c\u5360\u7528\uff0c\u662f\u88ab\u54ea\u4e2a\uff08\u6216\u54ea\u4e9b\uff09\u8fdb\u7a0b\u7684\u54ea\u4e2a\u9875\u6240\u5360\u7528\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u9875\u8868\u7684\u526f\u672c\uff0c\u5982\u540c\u9700\u8981\u7ef4\u62a4\u6307\u4ee4\u8ba1\u6570\u5668\u548c\u5bc4\u5b58\u5668\u5185\u5bb9\u4e00\u6837\u3002\u6bcf\u5f53\u64cd\u4f5c\u7cfb\u7edf\u81ea\u5df1\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u6210\u7269\u7406\u5730\u5740\uff0c\u8fd9\u4e2a\u526f\u672c\u53ef\u7528\u4e8e\u8f6c\u6362\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u5206\u914d\u5230CPU\u65f6\uff0cCPU\u5206\u6d3e\u5668\u4e5f\u6839\u636e\u8be5\u526f\u672c\u6765\u5b9a\u4e49\u786c\u4ef6\u4e5f\u8868\u3002\u56e0\u6b64\uff0c \u5206\u9875\u589e\u52a0\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500 \u3002","title":"\u57fa\u672c\u65b9\u6cd5"},{"location":"operating_system/basic/memory_management/#_21","text":"\u6bcf\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u6709\u81ea\u5df1\u4fdd\u5b58\u9875\u8868\u7684\u65b9\u6cd5\u3002\u6709\u7684\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u9875\u8868\u3002\u9875\u8868\u7684\u6307\u9488\uff0c\u4e0e\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\uff08\u5982\u6307\u4ee4\u8ba1\u6570\u5668\uff09\uff0c\u4e00\u8d77\u88ab\u5b58\u5165 PCB\u3002\u5f53\u5206\u6d3e\u5668\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u4ed6\u9996\u5148\u52a0\u8f7d\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u5e76\u6839\u636e\u4fdd\u5b58\u7684\u7528\u6237\u9875\u8868\u6765\u5b9a\u4e49\u6b63\u786e\u7684\u9875\u8868\u503c\u3002\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u6216\u591a\u4e2a\u9875\u8868\uff0c\u4ee5\u4fbf\u51cf\u5c11\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u3002 \u7531\u4e8e\u6bcf\u6b21\u8bbf\u95ee\u5185\u5b58\u90fd\u9700\u8981\u7ecf\u8fc7\u5206\u9875\u6620\u5c04\uff0c\u56e0\u6b64\u6548\u7387\u662f\u4e00\u4e2a\u91cd\u8981\u800c\u8003\u8651\u56e0\u7d20\u3002 \u9875\u8868\u7684\u786c\u4ef6\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u3002\u6700\u7b80\u5355\u7684\u4e00\u79cd\u662f\uff1a\u5c06\u591c\u8868\u4f5c\u4e3a\u4e00\u7ec4\u4e13\u7528\u7684 \u5bc4\u5b58\u5668 \u6765\u5b9e\u73b0\u3002 \u5982\u679c\u9875\u8868\u8f83\u5c0f\uff08\u4f8b\u5982 256 256 \u4e2a\u6761\u76ee\uff09\uff0c\u90a3\u4e48\u5c1a\u4e14\u53ef\u4ee5\u7528\u5bc4\u5b58\u5668\u5b9e\u73b0\u3002\u4f46\u662f\uff0c\u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u7684\u9875\u8868\u5f88\u5927\uff08\u4f8b\u5982 100 100 \u4e07\u4e2a\u6761\u76ee\uff09\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u673a\u5668\uff0c\u9700\u8981\u5c06\u591c\u8868\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06 \u9875\u8868\u57fa\u5730\u5740\u5bc4\u5b58\u5668 \uff08Page-Table Base Register, PTBR\uff09\u6307\u5411\u9875\u8868\u3002\u6539\u53d8\u9875\u8868\u53ea\u9700\u6539\u53d8\u8fd9\u4e00\u5bc4\u5b58\u5668\u5c31\u53ef\u4ee5\uff0c\u8fd9\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u3002 \u7136\u800c\u91c7\u7528\u8fd9\u79cd\u65b9\u6848\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u9700\u8981 \u4e24\u6b21 \u8bbf\u95ee\u5185\u5b58\uff08\u4e00\u6b21\u7528\u4e8e\u9875\u8868\u6761\u76ee\uff0c\u4e00\u6b21\u7528\u4e8e\u5b57\u8282\uff09\uff0c\u76f8\u5f53\u4e8e\u5185\u5b58\u8bbf\u95ee\u901f\u5ea6\u51cf\u534a\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u91c7\u7528\u4e13\u7528\u7684\u3001\u8f83\u5c0f\u7684\u3001\u67e5\u627e\u5feb\u8bfb\u7684\u9ad8\u901f\u786c\u4ef6\u7f13\u51b2\uff0c\u5b83\u79f0\u4e3a \u8f6c\u6362\u8868\u7f13\u51b2\u533a \uff08Translation Look-aside Buffer, TLB\uff09\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u903b\u8f91\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u7684\u5206\u9875\u6a21\u578b \u6709\u7684CPU\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u53c2\u4e0e\u7f13\u5b58\u4e2d LRU \u6761\u76ee\u7684\u66ff\u6362\u3002\u53e6\u5916\uff0c\u6709\u7684 TLB \u5141\u8bb8\u56fa\u6709\u6761\u76ee\u3002\u901a\u5e38\uff0c\u91cd\u8981\u7684\u5185\u6838\u4ee3\u7801\u6761\u76ee\u662f\u56fa\u5b9a\u4e0b\u6765\u7684\u3002 \u6709\u7684TLB\u5728\u6bcf\u4e2a\u6761\u76ee\u4e2d\u8fd8\u4fdd\u5b58 \u5730\u5740\u7a7a\u95f4\u6807\u8bc6\u7b26 \uff08Address-Space Identifierm, ASID\uff09\u3002ASID\u552f\u4e00\u6807\u8bc6\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u5730\u5740\u7a7a\u95f4\u7684\u4fdd\u62a4\u3002 \u547d\u4e2d\u7387 \uff08hit ratio\uff09\u53ef\u4ee5\u8861\u91cf TLB \u6761\u76ee\u547d\u4e2d\u7684\u6bd4\u7387\u3002\u5bf9\u4e8e\u4efb\u610f\u5185\u5b58\u5b57\u8282\uff0cTLB \u547d\u4e2d\u610f\u5473\u7740\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\uff0c\u672a\u547d\u4e2d\u5219\u610f\u5473\u7740\u4e24\u6b21\u5185\u5b58\u8bbf\u95ee\u3002\u57fa\u4e8eCPU\u8bbf\u5b58\u65f6\u95f4\uff08\u5982 100 100 ns\uff09\uff0c\u53ef\u4ee5\u6c42\u5f97 \u6709\u6548\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4 \uff08effective memory-access time\uff09\u3002 Intel Core i7 \u7684\u4e24\u7ea7 TLB Intel Core i7 CPU \u6709\u4e00\u4e2a 128 128 \u6307\u4ee4\u6761\u76ee\u7684 L1 TLB \u548c 64 64 \u6570\u636e\u6761\u76ee\u7684 L1 TLB\u3002\u5f53 L1 \u672a\u547d\u4e2d\u65f6\uff0cCPU \u82b1\u8d39 6 6 \u4e2a\u5468\u671f\u6765\u68c0\u67e5 L2 TLB \u7684 512 512 \u6761\u76ee\u3002L2 \u672a\u547d\u4e2d\u610f\u5473\u7740\uff0cCPU \u9700\u8981\u901a\u8fc7\u5185\u5b58\u7684\u9875\u8868\u6761\u4ef6\u6765\u67e5\u627e\u76f8\u5173\u7684\u5e27\u5730\u5740\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u6570\u767e\u4e2a\u5468\u671f\uff0c\u6216\u8005\u901a\u8fc7\u4e2d\u65ad\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u3002","title":"\u786c\u4ef6\u652f\u6301"},{"location":"operating_system/basic/memory_management/#_22","text":"\u5206\u9875\u73af\u5883\u4e0b\u7684\u5185\u5b58\u4fdd\u62a4\u662f\u901a\u8fc7\u4e0e\u6bcf\u4e2a\u5e27\u5173\u8054\u4fdd\u62a4\u4f4d\u6765\u5b9e\u73b0\u7684\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u4f4d\u4fdd\u5b58\u5728\u9875\u8868\u4e2d\u3002 \u53ef\u4ee5\u7528\u4e00\u4e2a\u4f4d\u5b9a\u4e49\u4e00\u4e2a\u9875\u662f\u53ef\u8bfb\u53ef\u5199\u6216\u53ea\u8bfb\u3002\u975e\u6cd5\u8bbf\u95ee\u4f1a\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\u3002 \u8fd8\u6709\u4e00\u4e2a\u4f4d\u901a\u5e38\u4e0e\u9875\u8868\u603b\u7684\u6bcf\u4e00\u6761\u6728\u76f8\u5173\u8054\uff1a \u6709\u6548-\u65e0\u6548\u4f4d \uff08valid-invalie bit\uff09\u3002\u8868\u793a\u76f8\u5173\u7684\u9875\u662f\u5426\u5728\u8fdb\u7a0b\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u5185\u3002\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u5bf9\u8be5\u4f4d\u7684\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u5141\u8bb8\u6216\u4e0d\u5141\u8bb8\u5bf9\u67d0\u9875\u7684\u8bbf\u95ee\u3002 \u9875\u8868\u7684\u6709\u6548\u4f4d\uff08v\uff09\u6216\u65e0\u6548\u4f4d\uff08i\uff09 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5982\u679c\u8bd5\u56fe\u4ea7\u751f\u9875\u8868 6 6 \u6216 7 7 \u7684\u5730\u5740\u65f6\uff0c\u5219\u4f1a\u53d1\u73b0\u6709\u6548-\u65e0\u6548\u4f4d\u4e3a\u65e0\u6548\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6355\u6349\u5230\u8fd9\u4e00\u975e\u6cd5\u64cd\u4f5c\uff08 \u65e0\u6548\u4f4d\u5f15\u7528 \uff09\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u5f88\u5c11\u4f1a\u4f7f\u7528\u5b83\u7684\u5168\u90e8\u5730\u5740\u7a7a\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8bb8\u591a\u8fdb\u7a0b\u53ea\u7528\u5230\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5982\u679c\u4e3a\u5730\u5740\u8303\u56f4\u5185\u7684\u6240\u6709\u9875\u90fd\u5728\u9875\u8868\u4e2d\u5efa\u7acb\u4e00\u4e2a\u6761\u76ee\u662f\u975e\u5e38\u6d6a\u8d39\u7684\uff01\u4e3a\u6b64\u6709\u7684\u7cfb\u7edf\u63d0\u4f9b\u786c\u4ef6\uff0c\u5982 \u9875\u8868\u957f\u5ea6\u5bc4\u5b58\u5668 \uff08Page-Table Length Register, PTLR\uff09\u6765\u8868\u793a\u9875\u8868\u7684\u5927\u5c0f\uff0c\u8be5\u5bc4\u5b58\u5668\u7684\u503c\u53ef\u7528\u4e8e\u68c0\u67e5\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u4ee5\u9a8c\u8bc1\u5176\u662f\u5426\u4f4d\u4e8e\u8fdb\u7a0b\u7684\u6709\u6548\u8303\u56f4\u5185\u3002\u5982\u679c\u68c0\u6d4b\u65e0\u6cd5\u901a\u8fc7\uff0c\u5219\u4f1a\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6355\u6349\u5230\u3002","title":"\u4fdd\u62a4"},{"location":"operating_system/basic/memory_management/#_23","text":"\u5206\u9875\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u53ef\u4ee5 \u5171\u4eab \u516c\u5171\u4ee3\u7801\u3002\u5bf9\u4e8e\u5206\u65f6\u73af\u5883\uff0c\u8fd9\u79cd\u8003\u8651\u5c24\u5176\u91cd\u8981\u3002\u5047\u8bbe\u4e00\u4e2a\u652f\u6301 40 40 \u4e2a\u7528\u6237\u7684\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u90fd\u6267\u884c\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u3002\u5982\u679c\u8be5\u6587\u672c\u7f16\u8f91\u5668\u5305\u62ec 150 150 KB \u7684\u4ee3\u7801\u53ca 50 50 KB \u7684\u6570\u636e\u7a7a\u95f4\uff0c\u5219\u9700\u8981 8000 8000 KB \u6765\u652f\u6301\u8fd9 40 40 \u4e2a\u7528\u6237\u3002\u5982\u679c\u4ee3\u7801\u662f \u53ef\u91cd\u5165\u4ee3\u7801 \uff08reentrant code\uff09\u6216 \u7eaf\u4ee3\u7801 \uff08pure code\uff09\uff0c\u5219\u53ef\u4ee5\u5171\u4eab\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5206\u9875\u73af\u5883\u7684\u4ee3\u7801\u5171\u4eab \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u6709 3 3 \u4e2a\u8fdb\u7a0b\uff0c\u5b83\u4eec\u5171\u4eab 3 3 \u9875\u7684\u7f16\u8f91\u5668\uff0c\u8fd9\u91cc\u6bcf\u9875\u5927\u5c0f\u4e3a 50 50 KB \uff08\u4e3a\u4e86\u7b80\u5316\u56fe\u793a\u8fd9\u91cc\u91c7\u7528\u5927\u9875\u9762\uff09\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u5f97\u6570\u636e\u9875\u3002 \u53ef\u91cd\u5165\u4ee3\u7801 \u662f\u4e0d\u80fd\u81ea\u6211\u4fee\u6539\u7684\u4ee3\u7801\uff1a\u5b83\u5728\u6267\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u76f8\u540c\u4ee3\u7801\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u526f\u672c\u548c\u6570\u636e\u5b58\u50a8\uff0c\u4ee5\u4fbf\u4fdd\u5b58\u8fdb\u7a0b\u6267\u884c\u7684\u6570\u636e\u3002\u5f53\u7136\uff0c\u4e0d\u540c\u8fdb\u7a0b\u7684\u6570\u636e\u4e0d\u540c\u3002 \u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u79e9\u5e8f\u4fdd\u5b58\u4e00\u4e2a\u7f16\u8f91\u5668\u526f\u672c\u3002\u6bcf\u4e2a\u7528\u6237\u7684\u9875\u8868\u6620\u5c04\u5230\u7f16\u8f91\u5668\u7684\u540c\u4e00\u4e2a\u7269\u7406\u526f\u672c\uff0c\u4f46\u662f\u6570\u636e\u9875\u6620\u5c04\u5230\u4e0d\u540c\u7684\u5e27\u3002\u56e0\u6b64\uff0c\u4e3a\u652f\u6301 40 40 \u4e2a\u7528\u6237\uff0c\u53ea\u9700\u4e00\u4e2a\u7f16\u8f91\u5668\u526f\u672c\uff08 150 150 KB\uff09\uff0c\u5728\u52a0\u4e0a 40 40 \u4e2a\u7528\u6237\u6570\u636e\u7684\u7a7a\u95f4 50 50 KB\uff0c\u603b\u7684\u9700\u6c42\u7a7a\u95f4\u4e3a 2150 2150 KB \u800c\u975e 8000 8000 KB\uff0c\u8fd9\u4e2a\u8282\u7701\u8fd8\u662f\u5f88\u5927\u7684\u3002 \u5176\u4ed6\u5927\u91cf\u4f7f\u7528\u7684\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u5171\u4eab\uff0c\u5982\u7f16\u8f91\u5668\u3001\u7a97\u53e3\u7cfb\u7edf\u3001\u8fd0\u884c\u65f6\u5e93\u3001\u6570\u636e\u5e93\u7cfb\u7edf\u7b49\u3002\u4e3a\u4e86\u5171\u4eab\uff0c\u4ee3\u7801\u5e94\u53ef\u91cd\u5165\u3002\u5171\u4eab\u4ee3\u7801\u7684\u53ea\u8bfb\u5c5e\u6027\u4e0d\u5e94\u7531\u4ee3\u7801\u7684\u6b63\u786e\u6027\u6765\u4fdd\u8bc1\uff1b\u800c\u5e94\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u5f3a\u5236\u5b9e\u73b0\u3002 \u7cfb\u7edf\u5185\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5171\u4eab\u5185\u5b58\uff0c\u7c7b\u4f3c\u4e8e\u901a\u8fc7\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u4efb\u52a1\u7684\u5730\u5740\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u5bf9\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5171\u4eab\u5185\u5b58\uff0c\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u5171\u4eab\u9875\u6765\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\u3002","title":"\u5171\u4eab\u9875"},{"location":"operating_system/basic/memory_management/#_24","text":"\u8fd9\u90e8\u5206\u63a2\u8ba8\u7ec4\u7ec7\u4e5f\u8868\u7684\u4e00\u4e9b\u6700\u5e38\u7528\u6280\u672f\u3002","title":"\u9875\u8868\u7ed3\u6784"},{"location":"operating_system/basic/memory_management/#_25","text":"\u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u5927\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff08 2^{32} ~ 2^{64} 2^{32} ~ 2^{64} \uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9875\u8868\u672c\u8eab\u53ef\u4ee5\u975e\u5e38\u5927\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5177\u6709 32 32 \u4f4d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u3002\u5982\u679c\u7cfb\u7edf\u7684\u9875\u5927\u5c0f\u4e3a 4 4 KB\uff08 2^{12} 2^{12} \uff09\u3002\u5047\u8bbe\u6bcf\u4e2a\u6761\u76ee\u6709 4 4 \u5b57\u8282\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fdb\u7a0b\u9700\u8981 4 4 MB \u7269\u7406\u5730\u5740\u7a7a\u95f4\u6765\u5b58\u50a8\u9875\u8868\u672c\u8eab\u3002\u5728\u5185\u5b58\u4e2d\u4e3a\u8fd9\u4e2a\u9875\u8868\u5f00\u8f9f\u8fde\u7eed\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e24\u5c42\u5206\u9875\u7b97\u6cd5\uff0c\u5c06\u9875\u8868\u518d\u5206\u9875\u3002 \u5982\u4e0b\u56fe\u4f8b\u5b50\uff0c\u5047\u8bbe\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5177\u6709 32 32 \u4f4d\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u548c 4 4 K \u5927\u5c0f\u7684\u9875\u3002\u4e00\u4e2a\u903b\u8f91\u5730\u5740\u88ab\u5206\u4e3a 20 20 \u4f4d\u7684\u9875\u7801\u548c 12 12 \u4f4d\u7684\u9875\u504f\u79fb\u3002\u56e0\u4e3a\u8981\u5bf9\u9875\u8868\u8fdb\u884c\u518d\u5206\u9875\uff0c\u6240\u4ee5\u8be5\u9875\u7801\u53ef\u5206\u4e3a 10 10 \u4f4d\u7684\u9875\u7801\u548c 10 10 \u4f4d\u7684\u9875\u504f\u79fb\u3002\u8fd9\u6837\uff0c\u4e00\u4e2a\u903b\u8f91\u5730\u5740\u5c31\u5206\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a \u5206\u9875\u73af\u5883\u7684\u4ee3\u7801\u5171\u4eab","title":"\u5206\u5c42\u9875\u8868"},{"location":"operating_system/basic/memory_management/#_26","text":"","title":"\u54c8\u5e0c\u9875\u8868"},{"location":"operating_system/basic/memory_management/#_27","text":"","title":"\u5012\u7f6e\u9875\u8868"},{"location":"operating_system/basic/memory_management/#intel-3264","text":"","title":"Intel 32\u4f4d\u548c64\u4f4d\u4f53\u7cfb\u7ed3\u6784"},{"location":"operating_system/basic/memory_management/#arm","text":"","title":"ARM\u67b6\u6784"},{"location":"operating_system/basic/memory_management/#_28","text":"\u4e0a\u4e00\u90e8\u5206\u8ba8\u8bba\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5404\u79cd\u5185\u5b58\u7ba1\u7406\u7b56\u7565\u3002\u641c\u6709\u8fd9\u4e9b\u7b56\u7565\u90fd\u6709\u5171\u540c\u7684\u76ee\u6807\uff1a\u540c\u65f6\u5c06\u591a\u4e2a\u8fdb\u7a0b\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u5141\u8bb8\u591a\u9053\u7a0b\u5e8f\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7b56\u7565\u90fd\u503e\u5411\u4e8e\u8981\u6c42\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c\u4e4b\u524d\u5e94\u5b8c\u5168\u5904\u4e8e\u5185\u5b58\u4e2d\u3002 \u865a\u62df\u5185\u5b58\u6280\u672f\u5141\u8bb8\u6267\u884c\u8fdb\u7a0b\u4e0d\u5fc5\u5b8c\u5168\u5904\u4e8e\u5185\u5b58\u3002\u8fd9\u79cd\u65b9\u6848\u7684\u4e00\u4e2a\u4e3b\u8981\u4f18\u70b9\u662f\uff1a\u7a0b\u5e8f\u53ef\u4ee5\u5927\u4e8e\u7269\u7406\u5185\u5b58\u3002\u6b64\u5916\uff0c\u865a\u62df\u5185\u5b58\u5c06\u5185\u5b58\u62bd\u8c61\u6210\u4e00\u4e2a\u5de8\u5927\u7684\u3001\u7edf\u4e00\u7684\u5b58\u50a8\u6570\u7ec4\uff0c\u8fdb\u800c\u5b9e\u73b0\u4e86\u7528\u6237\u770b\u5230\u7684\u903b\u8f91\u5185\u5b58\u4e0e\u7269\u7406\u5185\u5b58\u7684\u5206\u79bb\u3002\u8fd9\u79cd\u6280\u672f\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u4e0d\u518d\u4f46\u62c5\u5fe7\u5185\u5b58\u5bb9\u91cf\u7684\u9650\u5236\u3002\u865a\u62df\u5185\u5b58\u8fd8\u5141\u8bb8\u8fdb\u7a0b\u8f7b\u677e\u5171\u4eab\u6587\u4ef6\u548c\u5b9e\u73b0\u5185\u5b58\u5171\u4eab\u3002\u6b64\u5916\uff0c\u5b83\u4e3a\u521b\u5efa\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u673a\u5236\u3002\u7136\u800c\uff0c\u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\u5e76\u4e0d\u5bb9\u6613\uff0c\u5e76\u4e14\u4f7f\u7528\u4e0d\u5f53\u8fd8\u53ef\u80fd\u4f1a\u5927\u5927\u964d\u4f4e\u6027\u80fd\u3002\u8fd9\u4e00\u90e8\u5206\u4ee5\u8bf7\u6c42\u8c03\u9875\u4e3a\u4f8b\u8ba8\u8bba\u865a\u62df\u5185\u5b58\uff0c\u5e76\u8ba8\u8bba\u5176\u590d\u6742\u6027\u548c\u5f00\u9500\u3002","title":"\u865a\u5b58\u7ba1\u7406"},{"location":"operating_system/basic/memory_management/#_29","text":"","title":"\u80cc\u666f"},{"location":"operating_system/basic/memory_management/#_30","text":"","title":"\u8bf7\u6c42\u8c03\u9875"},{"location":"operating_system/basic/memory_management/#_31","text":"","title":"\u5199\u65f6\u590d\u5236"},{"location":"operating_system/basic/memory_management/#_32","text":"","title":"\u9875\u9762\u7f6e\u6362"},{"location":"operating_system/basic/memory_management/#_33","text":"","title":"\u5e27\u5206\u914d"},{"location":"operating_system/basic/memory_management/#_34","text":"","title":"\u7cfb\u7edf\u6296\u52a8"},{"location":"operating_system/basic/memory_management/#_35","text":"","title":"\u5185\u5b58\u6620\u5c04\u6587\u4ef6"},{"location":"operating_system/basic/memory_management/#_36","text":"","title":"\u5206\u914d\u5185\u6838\u5185\u5b58"},{"location":"operating_system/basic/memory_management/#_37","text":"","title":"\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879"},{"location":"operating_system/basic/memory_management/#_38","text":"\u672c\u8282\u8ba8\u8bba Windows \u548c Solaris \u5982\u4f55\u5b9e\u73b0\u865a\u62df\u5185\u5b58\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50"},{"location":"operating_system/basic/memory_management/#windows","text":"","title":"Windows"},{"location":"operating_system/basic/memory_management/#solaris","text":"","title":"Solaris"},{"location":"operating_system/basic/process_management/","text":"\u8fdb\u7a0b\u7ba1\u7406 \u53ef\u4ee5\u5c06\u8fdb\u7a0b\uff08process\uff09\u770b\u505a\u6267\u884c\u7684\u7a0b\u5e8f\u3002\u8fdb\u7a0b\u9700\u8981\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c\u5982CPU\u65f6\u95f4\u3001\u5185\u5b58\u3001\u6587\u4ef6\u548cI/O\u8bbe\u5907\uff0c\u4ee5\u4fbf\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u4e9b\u8d44\u6e90\u5728\u521b\u5efa\u8fdb\u7a0b\u6216\u6267\u884c\u8fdb\u7a0b\u65f6\u5f97\u4ee5\u5206\u914d\u3002 \u8fdb\u7a0b\u662f\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u7684\u5de5\u4f5c\u5355\u5143\u3002\u8fd9\u7c7b\u7cfb\u7edf\u5305\u542b\u4e00\u7ec4\u8fdb\u7a0b\uff1a\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u4ee3\u7801\uff0c\u800c\u7528\u6237\u8fdb\u7a0b\u6267\u884c\u7528\u6237\u4ee3\u7801\u3002\u6240\u6709\u8fd9\u4e9b\u8fdb\u7a0b\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u3002 \u867d\u7136\u4f20\u7edf\u8fdb\u7a0b\u5728\u8fd0\u884c\u65f6\u4ec5\u4ec5\u5305\u62ec\u5355\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff08thread\uff09\uff0c\u4f46\u662f\u76ee\u524d\u5927\u591a\u6570\u7684\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u5177\u6709\u591a\u7ebf\u7a0b\u7684\u8fdb\u7a0b\u3002 \u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7ba1\u7406\u7684\u591a\u4e2a\u65b9\u9762\uff1a\u7528\u6237\u8fdb\u7a0b\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u7684\u521b\u5efa\u4e0e\u5220\u9664\uff0c\u8fdb\u7a0b\u8c03\u5ea6\uff0c\u7528\u4e8e\u8fdb\u7a0b\u540c\u6b65\u3001\u8fdb\u7a0b\u901a\u4fe1\u4e0e\u8fdb\u7a0b\u6b7b\u9501\u5904\u7406\u7684\u673a\u5236\u7b49\u3002 \u8fdb\u7a0b \u8fdb\u7a0b\u6982\u5ff5 \u8fdb\u7a0b\u662f\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u968f\u7740\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u5b83\u6539\u53d8\u72b6\u6001\u3002\u8fdb\u7a0b\u72b6\u6001\u662f\u7531\u8fdb\u7a0b\u5f53\u524d\u6d3b\u52a8\u5b9a\u4e49\u7684\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5904\u4e8e\u5982\u4e0b\u72b6\u6001\uff1a \u65b0\u7684 \u3001 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u7b49\u5f85 \u3001 \u7ec8\u6b62 \u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u901a\u8fc7\u5b83\u7684 \u8fdb\u7a0b\u63a7\u5236\u5757\uff08PCB\uff09 \u6765\u8868\u793a\u3002 \u8fdb\u7a0b\u8c03\u5ea6 \u8fdb\u7a0b\uff0c\u5f53\u4e0d\u6267\u884c\u65f6\uff0c\u4f4d\u4e8e\u67d0\u4e2a\u7b49\u5f85\u961f\u5217\u3002\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e24\u79cd\u4e3b\u8981\u961f\u5217\uff1a IO\u8bf7\u6c42\u961f\u5217 \u3001 \u5c31\u7eea\u961f\u5217 \u3002\u5c31\u7eea\u961f\u5217\u5305\u62ec\u6240\u6709\u7b49\u5f85\u6267\u884c\u5e76\u7b49\u5f85CPU\u7684\u8fdb\u7a0b\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7528PCB\u6765\u8868\u793a\u3002 \u64cd\u4f5c\u7cfb\u7edf\u5e94\u4ece\u5404\u4e2a\u8c03\u5ea6\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u3002 \u957f\u671f\u8c03\u5ea6 \uff08\u7528\u4e8e\u4f5c\u4e1a\uff09\u9009\u62e9\u8fdb\u7a0b\u4ee5\u4fbf\u7ade\u4e89CPU\u3002\u901a\u5e38\uff0c\u957f\u671f\u8c03\u5ea6\u5145\u5206\u8003\u8651\u8d44\u6e90\u5206\u914d\uff0c\u5c24\u5176\u5185\u5b58\u7ba1\u7406\u3002 \u77ed\u671f\u8c03\u5ea6 \u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u3002 \u8fdb\u7a0b\u8fd0\u884c \u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u4ee5\u4fbf\u7236\u8fdb\u7a0b\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002\u7236\u8fdb\u7a0b\u5728\u7ee7\u7eed\u4e4b\u524d\u53ef\u4ee5\u7b49\u5f85\u5176\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c\u3002\u5141\u8bb8\u5e76\u53d1\u6709\u591a\u4e2a\u539f\u56e0\uff1a\u4fe1\u606f\u5171\u4eab\u3001\u8ba1\u7b97\u52a0\u901f\u3001\u6a21\u5757\u5316\u3001\u65b9\u4fbf\u3002 \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u64cd\u4f5c\u7cfb\u7edf\u5185\u7684\u6267\u884c\u8fdb\u7a0b\u53ef\u4ee5\u662f\u72ec\u7acb\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u534f\u4f5c\u7684\u3002\u534f\u4f5c\u8fdb\u7a0b\u9700\u8981\u8fdb\u7a0b\u95f4\u5177\u6709\u76f8\u4e92\u901a\u4fe1\u7684\u673a\u5236\u3002\u901a\u4fe1\u4e3b\u8981\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u5171\u4eab\u5185\u5b58 \u548c \u6d88\u606f\u7cfb\u7edf \u3002 \u5171\u4eab\u5185\u5b58 \uff1a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e9b\u53d8\u91cf\uff0c\u8fdb\u7a0b\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e9b\u5171\u4eab\u53d8\u91cf\u6765\u4ea4\u6362\u4fe1\u606f\u3002\u5bf9\u4e8e\u5171\u4eab\u5185\u5b58\u7cfb\u7edf\uff0c\u63d0\u4f9b\u901a\u4fe1\u7684\u8d23\u4efb\u4e3b\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u5458\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ea\u9700\u8981\u63d0\u4f9b\u5171\u4eab\u5185\u5b58\u3002 \u6d88\u606f\u7cfb\u7edf \uff1a\u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u63d0\u4f9b\u901a\u4fe1\u673a\u5236\u3002 \u4e24\u79cd\u65b9\u6cd5\u76f8\u4e92\u4e0d\u6392\u65a5\uff0c\u53ef\u4ee5\u5728\u7edf\u4e00\u64cd\u4f5c\u7cfb\u7edf\u5185\u540c\u65f6\u5b9e\u73b0\u3002 IPC\u7cfb\u7edf\u4f8b\u5b50 POSIX\u5171\u4eab\u5185\u5b58\u3001Mach\u7684\u6d88\u606f\u4f20\u9012\u3001Windows\u7684ALPC\uff08\u9ad8\u7ea7\u672c\u5730\u7a0b\u5e8f\u8c03\u7528\uff09\u5de5\u5177\u3002 \u5ba2\u6237\u673a/\u670d\u52a1\u5668\u901a\u4fe1 \u5957\u63a5\u5b57 \u3001 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08PRC\uff09 \u3001 \u7ba1\u9053 \u5957\u63a5\u5b57 \uff1a\u5957\u63a5\u5b57\u5b9a\u4e49\u4e3a\u901a\u4fe1\u7684\u7aef\u70b9\u3002\u4e00\u5bf9\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8fde\u63a5\u7531\u4e00\u5bf9\u5957\u63a5\u5b57\u7ec4\u6210\uff0c\u901a\u4fe1\u7684\u4e24\u7aef\u5404\u6709\u4e00\u4e2a\u5957\u63a5\u5b57\u3002 RPC \uff1a\u662f\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u5206\u5e03\u5f0f\u901a\u4fe1\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u8c03\u7528\u4e00\u4e2a\u8fdc\u7a0b\u5e94\u7528\u7684\u8fc7\u7a0b\u65f6\uff0c\u5c31\u6709\u4e86RPC\u3002 \u7ba1\u9053 \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u8fdb\u7a0b\u95f4\u76f8\u4e92\u901a\u4fe1\uff0c\u666e\u901a\u7ba1\u9053\u5141\u8bb8\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u547d\u540d\u7ba1\u9053\u5141\u8bb8\u4e0d\u76f8\u5173\u8fdb\u7a0b\u7684\u901a\u4fe1\u3002 \u591a\u7ebf\u7a0b\u7f16\u7a0b \u6982\u8ff0 \u7ebf\u7a0b\u662f\u8fdb\u7a0b\u5185\u7684\u63a7\u5236\u6d41\u3002\u591a\u7ebf\u7a0b\u8fdb\u7a0b\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u5185\u5305\u62ec\u591a\u4e2a\u4e0d\u540c\u7684\u63a7\u5236\u6d41\u3002\u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u5305\u62ec\uff1a\u7528\u6237\u54cd\u5e94\u7684\u6539\u8fdb\u3001\u8fdb\u7a0b\u5185\u8d44\u6e90\u7684\u5171\u4eab\u3001\u7ecf\u6d4e\u548c\u53ef\u6269\u5c55\u6027\u7684\u56e0\u7d20\uff08\u5982\u66f4\u6709\u6548\u7684\u4f7f\u7528\u591a\u4e2a\u5904\u7406\u6838\uff09\u3002 \u591a\u6838\u7f16\u7a0b \u591a\u6838\u7cfb\u7edf\u7684\u5f15\u5165\u4f7f\u5f97 \u5e76\u53d1 \u8868\u793a\u7ebf\u7a0b\u80fd\u591f \u5e76\u884c \u6267\u884c\uff0c\u56e0\u4e3a\u7cfb\u7edf\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u6838\u5206\u914d\u4e00\u4e2a\u5355\u72ec\u7ebf\u7a0b\u3002 \u591a\u6838\u673a\u5236\u5f15\u5165\u7684\u7f16\u7a0b\u6311\u6218\uff1a \u4efb\u52a1\u8bc6\u522b \uff1a\u8fd9\u6d89\u53ca\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\uff0c\u67e5\u627e\u533a\u57df\u4ee5\u4fbf\u5206\u4e3a\u72ec\u7acb\u7684\u3001\u5e76\u53d1\u7684\u4efb\u52a1\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4efb\u52a1\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u591a\u6838\u4e0a\u5e76\u884c\u8fd0\u884c\u3002 \u5e73\u8861 \uff1a\u5728\u8bc6\u522b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u7684\u4efb\u52a1\u65f6\uff0c\u7a0b\u5e8f\u5458\u8fd8\u9700\u786e\u4fdd\u4efb\u52a1\u6267\u884c\u540c\u7b49\u4ef7\u503c\u7684\u5de5\u4f5c\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6709\u7684\u4efb\u52a1\u4e0e\u5176\u4ed6\u4efb\u52a1\u76f8\u6bd4\uff0c\u53ef\u80fd\u5bf9\u6574\u4e2a\u4efb\u52a1\u7684\u8d21\u732e\u5e76\u4e0d\u591a\uff1b\u91c7\u7528\u5355\u72ec\u6838\u6765\u6267\u884c\u6574\u4e2a\u4efb\u52a1\u5c31\u4e0d\u503c\u5f97\u4e86\u3002 \u6570\u636e\u5206\u5272 \uff1a\u6b63\u5982\u5e94\u7528\u7a0b\u5e8f\u8981\u5206\u4e3a\u5355\u72ec\u4efb\u52a1\uff0c\u6709\u4efb\u52a1\u8bbf\u95ee\u548c\u64cd\u4f5c\u7684\u6570\u636e\u4e5f\u5e94\u5212\u5206\u4ee5\u4fbf\u8fd0\u884c\u5728\u5355\u72ec\u7684\u6838\u4e0a\u3002 \u6570\u636e\u4f9d\u8d56 \uff1a\u4efb\u52a1\u8bbf\u95ee\u7684\u6570\u636e\u5fc5\u987b\u5206\u6790\u591a\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5f53\u4e00\u4e2a\u4efb\u52a1\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u6570\u636e\u65f6\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u786e\u4fdd\u4efb\u52a1\u6267\u884c\u662f\u540c\u6b65\u7684\uff0c\u4ee5\u9002\u5e94\u6570\u636e\u4f9d\u8d56\u6027\u3002 \u6d4b\u8bd5\u4e0e\u8c03\u8bd5 \uff1a\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5e76\u884c\u8fd0\u884c\u4e8e\u591a\u6838\u65f6\uff0c\u53ef\u80fd\u4ea7\u751f\u8bb8\u591a\u4e0d\u540c\u7684\u6267\u884c\u8def\u5f84\u3002\u6d4b\u8bd5\u4e0e\u8c03\u8bd5\u8fd9\u6837\u7684\u5e76\u53d1\u7a0b\u5e8f\u6bd4\u6d4b\u8bd5\u548c\u8c03\u8bd5\u5355\u7ebf\u7a0b\u7684\u5e94\u7528\u7a0b\u5e8f\u96be\u5ea6\u5927\u5f97\u591a\u3002 \u901a\u5e38\uff0c\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5e76\u884c\uff1a \u6570\u636e\u5e76\u884c \u548c \u4efb\u52a1\u5e76\u884c \u3002 \u6570\u636e\u5e76\u884c \uff1a\u5c06\u6570\u636e\u5206\u5e03\u5728\u76f8\u540c\u7684\u8ba1\u7b97\u6838\u4e0a\uff0c\u5e76\u5728\u6bcf\u4e2a\u6838\u4e0a\u6267\u884c\u76f8\u540c\u64cd\u4f5c\uff1b \u4efb\u52a1\u5e76\u884c \uff1a\u5c06\u4efb\u52a1\uff08\u7ebf\u7a0b\uff09\u800c\u4e0d\u662f\u6570\u636e\u5206\u914d\u5230\u591a\u4e2a\u8ba1\u7b97\u6838\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u4e00\u4e2a\u72ec\u7279\u7684\u64cd\u4f5c\u3002 \u591a\u7ebf\u7a0b\u6a21\u578b \u7528\u6237\u7ebf\u7a0b \uff08user thread\uff09\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u53ef\u89c1\u7684\uff0c\u5bf9\u5185\u6838\u5219\u662f\u672a\u77e5\u7684\u3002\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u548c\u7ba1\u7406 \u5185\u6838\u7ea7\u7ebf\u7a0b \uff08kernel thread\uff09\u3002\u901a\u5e38\uff0c\u7528\u6237\u7ebf\u7a0b\u4e0e\u5185\u6838\u7ebf\u7a0b\u76f8\u6bd4\uff0c\u521b\u5efa\u548c\u7ba1\u7406\u8981\u66f4\u5feb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u5185\u6838\u5e72\u9884\u3002 \u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\u5173\u8054\u7528\u6237\u7ebf\u7a0b\u548c\u5185\u6838\u7ebf\u7a0b \u591a\u5bf9\u4e00\u6a21\u578b \uff1a\u5c06\u591a\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b \u4e00\u5bf9\u4e00\u6a21\u578b \uff1a\u5c06\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5bf9\u5e94\u7684\u5185\u6838\u7ebf\u7a0b \u591a\u5bf9\u591a\u6a21\u578b \uff1a\u5c06\u591a\u4e2a\u7528\u6237\u7ebf\u7a0b\u5728\u540c\u6837\uff08\u6216\u66f4\u5c11\uff09\u6570\u91cf\u7684\u5185\u6838\u7ebf\u7a0b\u4e4b\u95f4\u5207\u6362 \u4ee5\u4e0a\u8bbe\u8ba1\u5bf9\u5e76\u53d1\u6027\u7684\u5f71\u54cd \u867d\u7136\u591a\u5bf9\u4e00\u6a21\u578b\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\uff0c\u4f46\u7531\u4e8e\u5185\u6838\u53ea\u80fd\u4e00\u6b21\u8c03\u5ea6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u5e76\u672a\u589e\u52a0\u5e76\u53d1\u6027\u3002\u867d\u7136\u4e00\u5bf9\u4e00\u6a21\u578b\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u5e76\u53d1\u6027\uff0c\u4f46\u662f\u5f00\u53d1\u4eba\u5458\u4e0d\u5b9c\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u521b\u5efa\u592a\u591a\u7ebf\u7a0b\uff08\u6709\u65f6\u7cfb\u7edf\u53ef\u80fd\u4f1a\u9650\u5236\u521b\u5efa\u7ebf\u7a0b\u7684\u6570\u91cf\uff09\u3002\u591a\u5bf9\u591a\u6a21\u578b\u6ca1\u6709\u8fd9\u4e24\u4e2a\u7f3a\u70b9\uff1a\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\uff0c\u5e76\u4e14\u76f8\u5e94\u5185\u6838\u7ebf\u7a0b\u80fd\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u5e76\u53d1\u6267\u884c\u3002\u800c\u4e14\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5185\u6838\u53ef\u4ee5\u8c03\u5ea6\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u3002 \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982Windows\u3001Mac OS X\u3001Linux\u548cSolaris\u7b49\uff0c\u90fd\u5bf9\u7ebf\u7a0b\u63d0\u4f9b\u5185\u6838\u652f\u6301\u3002 \u7ebf\u7a0b\u5e93 \u7ebf\u7a0b\u5e93\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u521b\u5efa\u548c\u7ba1\u7406\u7ebf\u7a0b\u7684API\u3002\u5e38\u7528\u7684\u4e3b\u8981\u7ebf\u7a0b\u5e93\u6709\u4e09\u4e2a\uff1a POSIX Pthreads \u3001 Windows\u7ebf\u7a0b \u548c Java\u7ebf\u7a0b \u3002 \u9690\u5f0f\u591a\u7ebf\u7a0b \u9664\u4e86\u91c7\u7528\u7ebf\u7a0b\u5e93API\u6765\u663e\u5f0f\u521b\u5efa\u7ebf\u7a0b\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u7ebf\u7a0b\uff0c\u8fd9\u79cd\u7ebf\u7a0b\u7684\u521b\u5efa\u548c\u7ba1\u7406\u4ea4\u7531\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u5e93\u6765\u5b8c\u6210\u3002\u9690\u5f0f\u7ebf\u7a0b\u65b9\u6cd5\u5305\u62ec\uff1a \u7ebf\u7a0b\u6c60 \u3001 OpenMP \u548c Grand Central Dispatch \u7b49\u3002 \u591a\u7ebf\u7a0b\u95ee\u9898 \u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e3a\u7a0b\u5e8f\u5458\u5e26\u6765\u4e86\u8bb8\u591a\u6311\u6218\uff0c\u5305\u62ec fork() \u548c exec() \u7cfb\u7edf\u8c03\u7528\u7684\u8bed\u4e49\u3002\u5176\u4ed6\u95ee\u9898\u5305\u62ec \u4fe1\u53f7\u5904\u7406 \u3001 \u7ebf\u7a0b\u64a4\u9500 \u3001 \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 \u548c \u8c03\u5ea6\u6fc0\u6d3b \u7b49 \u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50 Windows\u7ebf\u7a0b \u6bcf\u4e2aWindows\u5e94\u7528\u7a0b\u5e8f\u6309\u5355\u72ec\u8fdb\u7a0b\u6765\u8fd0\u884c\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u62ec\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u3002Windows\u4f7f\u7528\u4e00\u5bf9\u4e00\u6620\u5c04\uff0c\u5373\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u76f8\u5173\u7684\u5185\u6838\u7ebf\u7a0b\u3002 \u7ebf\u7a0b\u4e00\u822c\u5305\u62ec\u5982\u4e0b\u90e8\u4ef6\uff1a \u7ebf\u7a0bID - \u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u7ebf\u7a0b\u3002 \u5bc4\u5b58\u5668\u7ec4 - \u7528\u4e8e\u8868\u793a\u5904\u7406\u5668\u72b6\u6001\u3002 \u5806\u6808 - \u7528\u6237\u5806\u6808 \uff0c\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff1b \u5185\u6838\u5806\u6808 \uff0c\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002 \u79c1\u6709\u5b58\u50a8\u533a\u57df - \u7528\u4e8e\u5404\u79cd\u8fd0\u884c\u65f6\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u5e93\uff08DLL\uff09\u3002 \u5bc4\u5b58\u5668\u7ec4\u3001\u5806\u6808\u548c\u79c1\u6709\u5b58\u50a8\u533a\u57df\uff0c\u901a\u5e38\u79f0\u4e3a \u7ebf\u7a0b\u4e0a\u4e0b\u6587 \uff08context\uff09 \u7ebf\u7a0b\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784\uff1a ETHREAD \uff1a\u6267\u884c\u7ebf\u7a0b\u5feb\u3002\u5305\u62ec\u6240\u5c5e\u8fdb\u7a0b\u6307\u9488\u3001\u7ebf\u7a0b\u63a7\u5236\u5f00\u59cb\u7684\u7a0b\u5e8f\u7684\u5730\u5740\u4ee5\u53ca\u5bf9\u5e94\u7684KTHREAD\u7684\u6307\u9488\u7b49\u3002 KTHREAD \uff1a\u5185\u6838\u7ebf\u7a0b\u5feb\u3002\u5305\u62ec\u7ebf\u7a0b\u7684\u8c03\u5ea6\u548c\u540c\u6b65\u4fe1\u606f\u3002\u53e6\u5916\uff0cKTHREAD\u4e5f\u5305\u62ec\u5185\u6838\u5806\u6808\uff08\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff09\u548cTEB\u7684\u6307\u9488\u3002 TEB \uff1a\u7ebf\u7a0b\u73af\u5883\u5757 Linux\u7ebf\u7a0b \u7cfb\u7edf\u8c03\u7528 fork() \uff1a\u8fdb\u7a0b\u590d\u5236\u7684\u4f20\u7edf\u529f\u80fd \u7cfb\u7edf\u8c03\u7528 clone() \uff1a\u521b\u5efa\u7ebf\u7a0b Linux\u5728\u8ba8\u8bba\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u65f6\uff0c\u5e38\u91c7\u7528\u4efb\u52a1\uff08task\uff09\u4e00\u8bcd\uff0c\u800c\u975e\u8fdb\u7a0b\uff08process\uff09\u6216\u7ebf\u7a0b\uff08thread\uff09\u3002 \u8fdb\u7a0b\u8c03\u5ea6 \u57fa\u672c\u6982\u5ff5 CPU\u8c03\u5ea6\u7684\u4efb\u52a1\u662f\uff0c\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b49\u5f85\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u5176\u5206\u914dCPU\u3002\u8c03\u5ea6\u7a0b\u5e8f\u5206\u914dCPU\u5230\u9009\u4e2d\u7684\u8fdb\u7a0b\u3002 \u8c03\u5ea6\u51c6\u5219 CPU\u4f7f\u7528\u7387 \uff1a\u5e94\u4f7fCPU\u5c3d\u53ef\u80fd\u5730\u5fd9\u788c\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0cCPU\u4f7f\u7528\u7387\u4ece 0% 0% \u5230 100% 100% \u3002\u5bf9\u4e8e\u4e00\u4e2a\u5b9e\u9645\u7cfb\u7edf\uff0c\u4ed6\u7684\u8303\u56f4\u5e94\u4ece\u548c 40% 40% \uff08\u8f7b\u590d\u6838\u7cfb\u7edf\uff09\u5230 90% 90% \uff08\u91cd\u7b26\u5408\u7cfb\u7edf\uff09\u3002 \u541e\u5410\u91cf \uff1a\u5982\u679cCPU\u5fd9\u4e8e\u6267\u884c\u8fdb\u7a0b\uff0c\u90a3\u4e48\u5de5\u4f5c\u5c31\u5728\u5b8c\u6210\u3002\u4e00\u79cd\u6d4b\u91cf\u5de5\u4f5c\u7684\u65b9\u6cd5\u79f0\u4e3a \u541e\u5410\u91cf \uff08throughput\uff09\uff0c\u5b83\u662f\u5728\u4e00\u4e2a\u65f6\u95f4\u5355\u5143\u5185\u8fdb\u57ce\u5b8c\u6210\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u957f\u8fdb\u7a0b\uff0c\u541e\u5410\u91cf\u53ef\u80fd\u4e3a\u6bcf\u5c0f\u65f6\u4e00\u4e2a\u8fdb\u7a0b\uff1b\u5bf9\u4e8e\u77ed\u8fdb\u7a0b\uff0c\u541e\u571f\u91cf\u53ef\u80fd\u4e3a\u6bcf\u79d2\u662f\u4e2a\u8fdb\u7a0b\u3002 \u5468\u8f6c\u65f6\u95f4 \uff1a\u4ece\u4e00\u4e2a\u7279\u5b9a\u8fdb\u7a0b\u7684\u89d2\u5ea6\u770b\uff0c\u4e00\u4e2a\u91cd\u8981\u51c6\u5219\u662f\u8fd0\u884c\u8fd9\u4e2a\u8fdb\u7a0b\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u4ece\u8fdb\u7a0b\u63d0\u4ea4\u5230\u8fdb\u57ce\u5b8c\u6210\u7684\u65f6\u95f4\u6bb5\u79f0\u4e3a\u5468\u8f6c\u65f6\u95f4\uff08turnaround time\uff09\u3002\u5468\u8f6c\u65f6\u95f4\u4e3a\u6240\u6709\u65f6\u95f4\u6bb5\u4e4b\u548c\uff0c\u5305\u62ec\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u5185\u5b58\u3001\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u7b49\u5f85\u3001\u5728CPU\u4e0a\u6267\u884c\u548cI/O\u6267\u884c\u3002 \u7b49\u5f85\u65f6\u95f4 \uff1aCPU\u8c03\u5ea6\u7b97\u6cd5\u5e76\u4e0d\u5f71\u54cd\u8fdb\u7a0b\u8fd0\u884c\u548c\u6267\u884cI/O\u7684\u65f6\u95f4\uff0c\u5b83\u53ea\u5f71\u54cd\u8fdb\u7a0b\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u56e0\u7b49\u5f85\u6240\u9700\u7684\u65f6\u95f4\u3002\u7b49\u5f85\u65f6\u95f4\u4e3a\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u7b49\u5f85\u6240\u82b1\u65f6\u95f4\u4e4b\u548c\u3002 \u54cd\u5e94\u65f6\u95f4 \uff1a\u5bf9\u4e8e\u4ea4\u4e92\u7cfb\u7edf\uff0c\u5468\u8f6c\u65f6\u95f4\u4e0d\u662f\u6700\u4f73\u51c6\u5219\u3002\u901a\u5e38\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u76f8\u5f53\u65e9\u5730\u4ea7\u751f\u8f93\u51fa\uff0c\u5e76\u4e14\u7ee7\u7eed\u8ba1\u7b97\u65b0\u7684\u7ed3\u679c\u540c\u65f6\u8f93\u51fa\u4ee5\u524d\u7684\u7ed3\u679c\u7ed9\u7528\u6237\u3002\u56e0\u6b64\uff0c\u53e6\u4e00\u65f6\u95f4\u662f\u4ece\u63d0\u4ea4\u8bf7\u6c42\u5230\u4ea7\u751f\u7b2c\u4e00\u54cd\u5e94\u7684\u65f6\u95f4\u3002\u8fd9\u79cd\u65f6\u95f4\u79f0\u4e3a\u54cd\u5e94\u65f6\u95f4\uff0c\u662f\u5f00\u59cb\u76f8\u5e94\u6240\u9700\u7684\u65f6\u95f4\uff0c\u800c\u975e\u8f93\u51fa\u76f8\u5e94\u6240\u9700\u7684\u65f6\u95f4\u3002\u5468\u8f6c\u65f6\u95f4\u901a\u5e38\u53d7\u8f93\u51fa\u8bbe\u5907\u901f\u5ea6\u7684\u9650\u5236\u3002 \u8c03\u5ea6\u7b97\u6cd5 CPU\u8c03\u5ea6\u5904\u7406\u7684\u95ee\u9898\u662f\uff1a\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u4ee5\u4fbf\u4e3a\u5176\u5206\u914dCPU\u3002 \u5148\u5230\u5148\u670d\u52a1 First-Come First-Served, FCFS\uff0c\u6700\u7b80\u5355\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u4f46\u5b83\u4f1a\u8ba9\u6bb5\u8fdb\u57ce\u7b49\u5f85\u5f88\u957f\u7684\u8fdb\u7a0b\u3002 \u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6 Shortest-Job-First, SJF\uff0c\u5728\u6700\u77ed\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u610f\u4e49\u4e0a\u662f\u6700\u4f73\u7684\u3002 \u7136\u800c\uff0cSJF\u8c03\u5ea6\u5b9e\u73b0\u7684\u96be\u70b9\u5728\u4e8e\u9884\u6d4b\u4e0b\u4e00\u4e2aCPU\u6267\u884c\u7684\u957f\u5ea6\u3002 \u4f18\u5148\u7ea7\u8c03\u5ea6 Priority-Scheduling\uff0cSJF\u7b97\u6cd5\u662f\u901a\u7528\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\uff08\u7b80\u5355\u5206\u914dCPU\u5230\u5177\u6709\u6700\u4f18\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\uff09\u7684\u4e00\u4e2a\u7279\u4f8b\u3002 \u4f18\u5148\u7ea7\u548cSJF\u7684\u8c03\u5ea6\u53ef\u80fd\u4ea7\u751f\u9965\u997f\uff0c\u8001\u5316\u6280\u672f\u963b\u6b62\u9965\u997f\u3002 \u8f6e\u8f6c\u8c03\u5ea6 Round-Robin, RR\uff0c\u66f4\u9002\u5408\u4e8e\u5206\u65f6\uff08\u4ea4\u4e92\uff09\u7cfb\u7edf\u3002RR\u8c03\u5ea6\u4e3a\u5c31\u7eea\u961f\u5217\u7684\u9996\u4e2a\u8fdb\u7a0b\uff0c\u5206\u914d q q \u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u8fd9\u91cc q q \u662f\u65f6\u95f4\u7247\u3002\u5728 q q \u4e2a\u65f6\u95f4\u5355\u4f4d\u4e4b\u540e\uff0c\u5982\u679c\u8be5\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u91ca\u653eCPU\uff0c\u90a3\u4e48\u5b83\u88ab\u5f3a\u5360\u5e76\u6dfb\u52a0\u5230\u5c31\u7eea\u961f\u5217\u5c3e\u90e8\u3002 \u8be5\u7b97\u6cd5\u7684\u4e3b\u8981\u95ee\u9898\u662f\u9009\u62e9\u65f6\u95f4\u7247\u3002\u5982\u679c\u65f6\u95f4\u7247\u592a\u5927\uff0c\u90a3\u4e48RR\u7b97\u6cd5\u5c31\u53d8\u6210\u4e86FCFS\u7b97\u6cd5\uff1b\u5982\u679c\u65f6\u95f4\u7247\u592a\u5c0f\uff0c\u90a3\u4e48\u6709\u4e0a\u4e0b\u6587\u5207\u6362\u5f15\u8d77\u7684\u8c03\u5ea6\u5f00\u9500\u5c31\u8fc7\u5927\u3002 FCFS\u7b97\u6cd5\u662f\u975e\u62a2\u5360\u7684\uff0c\u800cRR\u7b97\u6cd5\u662f\u62a2\u5360\u7684\u3002SJF\u548c\u4f18\u5148\u7ea7\u7b97\u6cd5\u53ef\u4ee5\u662f\u62a2\u5360\u7684\u4e5f\u53ef\u4ee5\u662f\u975e\u62a2\u5360\u7684\u3002 \u591a\u7ea7\u961f\u5217\u8c03\u5ea6 Multilevel queue scheduling\uff0c\u5141\u8bb8\u591a\u4e2a\u4e0d\u540c\u7b97\u6cd5\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u8fdb\u7a0b\u3002\u6700\u5e38\u7528\u6a21\u578b\u5305\u62ec\uff1a\u4f7f\u7528RR\u8c03\u5ea6\u7684 \u524d\u53f0\u4ea4\u4e92\u961f\u5217 \u4e0e\u4f7f\u7528FCFS\u8c03\u5ea6\u7684 \u540e\u53f0\u6279\u5904\u7406\u961f\u5217 \u3002 \u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6 Multilevel feedback queue scheduling\uff0c\u591a\u53ca\u53cd\u9988\u961f\u5217\u5141\u8bb8\u8fdb\u7a0b\u5728\u961f\u5217\u4e4b\u95f4\u8fc1\u79fb\u3002 \u7ebf\u7a0b\u8c03\u5ea6 \u5728\u652f\u6301\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5185\u6838\u7ea7\u7ebf\u7a0b\uff08\u800c\u4e0d\u662f\u8fdb\u7a0b\uff09\u624d\u662f\u64cd\u4f5c\u7cfb\u7edf\u6240\u8c03\u5ea6\u7684\u3002\u7528\u6237\u7ea7\u7ebf\u7a0b\u662f\u7531\u7ebf\u7a0b\u5e93\u6765\u7ba1\u7406\u7684\uff0c\u800c\u5185\u6838\u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u3002\u7528\u6237\u7ebf\u7a0b\u4e3a\u4e86\u8fd0\u884c\u5728CPU\u4e0a\uff0c\u6700\u7ec8\u5e94\u6620\u5c04\u5230\u76f8\u5173\u7684\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u4f46\u8fd9\u79cd\u6620\u5c04\u53ef\u80fd\u4e0d\u662f\u76f4\u63a5\u7684\uff0c\u53ef\u80fd\u91c7\u7528 \u8f7b\u91cf\u7ea7\u8fdb\u7a0b\uff08LWP\uff09 \u3002 \u591a\u5904\u7406\u5668\u8c03\u5ea6 \u8bb8\u591a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u591a\u5904\u7406\u5668\uff0c\u5e76\u5141\u8bb8\u6bcf\u4e2a\u5904\u7406\u5668\u72ec\u7acb\u8c03\u5ea6\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u7ef4\u62a4\u5404\u81ea\u7684\u3001\u79c1\u6709\u7684\u3001\u53ef\u8fd0\u884c\u7684\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u961f\u5217\u3002\u4e0e\u591a\u5904\u7406\u5668\u8c03\u5ea6\u76f8\u5173\u7684\u95ee\u9898\u5305\u62ec\u5904\u7406\u5668\u4eb2\u548c\u6027\u3001\u8d1f\u8f7d\u5e73\u8861\u548c\u591a\u6838\u5904\u7406\u7b49\u3002 \u5b9e\u65f6CPU\u8c03\u5ea6 \u5b9e\u65f6\u8ba1\u7b97\u673a\u7cfb\u7edf\u8981\u6c42\u5728\u622a\u6b62\u671f\u9650\u4e4b\u524d\u5f97\u5230\u7ed3\u679c\uff1b\u5728\u622a\u6b62\u671f\u9650\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662f\u65e0\u7528\u7684\u3002 \u786c\u5b9e\u65f6\u7cfb\u7edf \uff08hard read-time system\uff09\u5e94\u4fdd\u8bc1\uff0c\u5b9e\u65f6\u4efb\u52a1\u5728\u622a\u6b62\u671f\u9650\u5185\u5f97\u5230\u670d\u52a1\u3002 \u8f6f\u5b9e\u65f6\u7cfb\u7edf \uff08soft read-time system\uff09\u7684\u9650\u5236\u8f83\u5c11\uff0c\u5206\u914d\u7ed9\u5b9e\u65f6\u4efb\u52a1\u7684\u8c03\u5ea6\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5176\u4ed6\u670d\u52a1\u3002 \u5b9e\u65f6\u8c03\u5ea6\u7b97\u6cd5\u5305\u62ec \u5355\u8c03\u901f\u7387 \uff08rate-monotonic\uff09\u548c \u6700\u65e9\u622a\u6b62\u4f18\u5148 \uff08Earliest-Deadline-First, EDF\uff09\u8c03\u5ea6\u3002\u5355\u8c03\u901f\u7387\u8c03\u5ea6\u901a\u5e38\u4e3a\u9700\u8981\u66f4\u591aCPU\u7684\u4efb\u52a1\uff0c\u5206\u914d\u66f4\u9ad8\u4f18\u5148\u7ea7\u3002\u6700\u65e9\u622a\u6b62\u4f18\u5148\u961f\u5217\u6839\u636e\u5373\u5c06\u5230\u6765\u7684\u622a\u6b62\u671f\u9650\u6765\u5206\u914d\u4f18\u5148\u7ea7\uff1b\u622a\u6b62\u671f\u9650\u8d8a\u65e9\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002 \u6bd4\u4f8b\u5206\u4eab\u8c03\u5ea6 \uff08proportional share\uff09\u5c06\u5904\u7406\u5668\u65f6\u95f4\u5212\u5206\u4e3a\u80a1\u4efd\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u6570\u91cf\u7684\u4efd\u989d\uff0c\u4ece\u800c\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u5177\u6709\u6309\u6bd4\u4f8b\u7684CPU\u65f6\u95f4\u4efd\u989d\u3002 POSIX\u548cPthreads API\u4e3a\u5b9e\u65f6\u8c03\u5ea6\u7ebf\u7a0b\uff0c\u4e5f\u63d0\u4f9b\u5404\u79cd\u7279\u5f81\u3002 \u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50 \u652f\u6301\u5185\u6838\u7ea7\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e94\u8c03\u5ea6\u6267\u884c\u7ebf\u7a0b\uff08\u800c\u4e0d\u662f\u8fdb\u7a0b\uff09\u3002Solaris\u548cWindows\u5c31\u662f\u8fd9\u6837\u7684\u7cfb\u7edf\u3002\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u90fd\u901a\u8fc7\u57fa\u4e8e\u62a2\u5360\u7684\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u6765\u8c03\u5ea6\u7ebf\u7a0b\uff0c\u5305\u62ec\u652f\u6301\u5b9e\u65f6\u7ebf\u7a0b\u3002Linux\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f\u4f7f\u7528\u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u7b97\u6cd5\uff0c\u4e5f\u63d0\u4f9b\u5b9e\u65f6\u652f\u6301\u3002\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u7b97\u6cd5\u901a\u5e38\u504f\u5411\u652f\u6301\u4ea4\u4e92\u5f0f\u8fdb\u7a0b\uff08\u800c\u975eCPU\u5bc6\u96c6\u578b\u7ee7\u627f\uff09\u3002 \u7b97\u6cd5\u8bc4\u4f30 \u5404\u79cd\u5404\u6837\u7684\u8c03\u5ea6\u7b97\u6cd5\u8981\u6c42\u6709\u9009\u62e9\u7b97\u6cd5\u7684\u65b9\u6cd5\u3002\u5206\u6790\u65b9\u6cd5\u4f7f\u7528 \u6570\u5b66\u5206\u6790 \u6cd5\u4ee5\u786e\u5b9a\u7b97\u6cd5\u6027\u80fd\u3002 \u4eff\u771f \u65b9\u6cd5\u5bf9\u4ee3\u8868\u6027\u7684\u8fdb\u7a0b\uff0c\u91c7\u7528\u8c03\u5ea6\u7b97\u6cd5\u4eff\u771f\uff0c\u5e76\u8ba1\u7b97\u6027\u80fd\uff0c\u8fdb\u800c\u786e\u5b9a\u4f18\u52a3\u3002\u7136\u800c\uff0c\u4eff\u771f\u6700\u591a\u53ea\u80fd\u63d0\u4f9b\u771f\u5b9e\u7cfb\u7edf\u6027\u80fd\u7684\u8fd1\u4f3c\u503c\u3002\u8bc4\u4f30\u8c03\u5ea6\u7b97\u6cd5\u7684\u552f\u4e00\u53ef\u9760\u6280\u672f\u662f\uff1a\u5728\u5b9e\u9645\u7cfb\u7edf\u4e0a\u5b9e\u73b0\u7b97\u6cd5\uff0c\u5e76\u5728\u201c\u73b0\u5b9e\u4e16\u754c\u201d\u73af\u5883\u4e2d\u76d1\u89c6\u6027\u80fd\u3002 \u540c\u6b65 \u534f\u4f5c\u8fdb\u7a0b \uff08cooperating process\uff09\u80fd\u4e0e\u7cfb\u7edf\u5185\u7684\u5176\u4ed6\u8fdb\u7a0b\u76f8\u4e92\u5f71\u54cd\u3002\u534f\u4f5c\u8fdb\u7a0b\u6216\u80fd\u76f4\u63a5\u5171\u4eab\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff08\u5373\u4ee3\u7801\u548c\u6570\u636e\uff09\uff0c\u6216\u80fd\u901a\u8fc7\u6587\u4ef6\u6216\u6d88\u606f\u6765\u5171\u4eab\u6570\u636e\u3002\u524d\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7\u7ebf\u7a0b\u6765\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u5171\u4eab\u6570\u636e\u7684\u5e76\u53d1\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u3002\u8fd9\u4e00\u8282\u8ba8\u8bba\u591a\u79cd\u673a\u5236\uff0c\u4ee5\u4fbf\u786e\u4fdd\u540c\u4e00\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u534f\u4f5c\u8fdb\u7a0b\u7684\u6709\u5e8f\u6267\u884c\uff0c\u4ece\u800c\u7ef4\u62a4\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 \u80cc\u666f \u7ade\u4e89\u6761\u4ef6 \uff08race condition\uff09\uff1a\u591a\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8bbf\u95ee\u548c\u64cd\u4f5c\u540c\u4e00\u6570\u636e\u5e76\u4e14\u6267\u884c\u7ed3\u679c\u4e0e\u7279\u5b9a\u8bbf\u95ee\u987a\u5e8f\u6709\u5173\u3002 \u7531\u4e8e\u7ade\u4e89\u6761\u4ef6\u7684\u5b58\u5728\uff0c\u6211\u4eec\u5206\u6790 \u8fdb\u7a0b\u540c\u6b65 \uff08process synchronization\uff09\u548c \u8fdb\u7a0b\u534f\u8c03 \uff08process coordination\uff09\u3002 \u4e34\u754c\u533a\u95ee\u9898 \u5047\u8bbe\u67d0\u4e2a\u7cfb\u7edf\u6709 n n \u4e2a\u8fdb\u7a0b {P_0, P_1, ..., P_{n-1}} {P_0, P_1, ..., P_{n-1}} \u3002\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u6bb5\u4ee3\u7801\uff0c\u79f0\u4e3a \u4e34\u754c\u533a \uff08critical section\uff09\uff0c\u8fdb\u7a0b\u5728\u6267\u884c\u8be5\u533a\u65f6\u53ef\u80fd\u4fee\u6539\u516c\u5171\u53d8\u91cf\u3001\u66f4\u65b0\u4e00\u4e2a\u8868\u3001\u5199\u4e00\u4e2a\u6587\u4ef6\u7b49\u3002\u8be5\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u5185\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u5728\u5404\u81ea\u7684\u4e34\u754c\u533a\u6267\u884c\u3002 \u4e34\u754c\u533a\u95ee\u9898 \uff08ciritical-section problem\uff09\u662f\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u534f\u8bae\u4ee5\u4fbf\u534f\u4f5c\u8fdb\u7a0b\u3002\u5728\u8fdb\u5165\u4e34\u754c\u533a\u524d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5e94\u8bf7\u6c42\u8bb8\u53ef\u3002\u5b9e\u73b0\u8fd9\u4e00\u8bf7\u6c42\u7684\u4ee3\u7801\u6bb5\u79f0\u4e3a \u8fdb\u5165\u533a \uff08entry section\uff09\u3002\u4e34\u754c\u533a\u4e4b\u540e\u53ef\u4ee5\u6709 \u9000\u51fa\u533a \uff08exit-section\uff09\uff0c\u5176\u4ed6\u4ee3\u7801\u4e3a \u5269\u4f59\u533a \uff08remainder section\uff09\u3002\u4e00\u4e2a\u5178\u578b\u8fdb\u7a0b P_i P_i \u7684\u901a\u7528\u7ed3\u6784\u5982\u4e0b\u5982\u6240\u793a\uff1a \u4e34\u754c\u533a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5e94\u6ee1\u8db3\u5982\u4e0b\u4e09\u6761\u8981\u6c42\uff1a \u4e92\u65a5 \uff08mutual exclusion\uff09\uff1a\u5982\u679c\u8fdb\u7a0b P_i P_i \u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\uff0c\u90a3\u4e48\u5176\u5b83\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\u3002 \u8fdb\u6b65 \uff08progress\uff09\uff1a\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\u5e76\u4e14\u6709\u8fdb\u7a0b\u9700\u8981\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u90a3\u4e48\u53ea\u6709\u90a3\u4e9b\u4e0d\u5728\u5269\u4f59\u533a\u5185\u6267\u884c\u7684\u8fdb\u7a0b\u53ef\u4f5c\u5907\u9009\uff0c\u4ee5\u4fbf\u786e\u5b9a\u8c01\u80fd\u4e0b\u6b21\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u800c\u4e14\u8fd9\u79cd\u9009\u62e9\u4e0d\u80fd\u65e0\u9650\u63a8\u8fdf\u3002 \u6709\u9650\u7b49\u5f85 \uff08bounded waiting\uff09\uff1a\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u505a\u51fa\u8fdb\u5165\u4e34\u754c\u533a\u7684\u8bf7\u6c42\u76f4\u5230\u8fd9\u4e2a\u8bf7\u6c42\u5141\u8bb8\u4e3a\u6b62\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5141\u8bb8\u8fdb\u5165\u4e34\u754c\u533a\u7684\u6b21\u6570\u5177\u6709\u4e0a\u9650\u3002 Peterson\u89e3\u51b3\u65b9\u6848 \u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u57fa\u4e8e\u8f6f\u4ef6\u7684\u4e34\u754c\u533a\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u3002\u6ee1\u8db3\u4e92\u65a5\u3001\u8fdb\u6b65\u3001\u6709\u9650\u7b49\u5f85\u7b49\u8981\u6c42\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u590d\u6742\u6027\u8981\u6c42\u3002 \u786c\u4ef6\u540c\u6b65 \u5bf9\u4e8e\u4e34\u754c\u533a\u95ee\u9898\uff0c\u57fa\u4e8e\u8f6f\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\uff08\u5982Peterson\u89e3\u7b54\uff09\u5e76\u4e0d\u4fdd\u8bc1\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0a\u6b63\u786e\u5de5\u4f5c\u3002 \u4e0b\u9762\u63a2\u8ba8\u4e00\u4e9b\u5176\u4ed6\u89e3\u7b54\uff0c\u5305\u62ec\u5185\u6838\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5458\u91c7\u7528\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6API\u6280\u672f\u3002\u6240\u6709\u8fd9\u4e9b\u7686\u5927\u90fd\u662f\u57fa\u4e8e \u52a0\u9501 \uff08locking\uff09\u4e3a\u524d\u63d0\u7684\uff0c\u5373\u901a\u8fc7\u9501\u6765\u4fdd\u62a4\u4e34\u754c\u533a\u3002 \u7b80\u5355\u5730 \u7981\u6b62\u4e2d\u65ad \u53ef\u4ee5\u7528\u4e8e\u5355\u5904\u7406\u5668\u73af\u5883\uff1a\u5728\u4fee\u6539\u5171\u4eab\u53d8\u91cf\u65f6\u7981\u6b62\u4e2d\u65ad\u51fa\u73b0\u3002 \u7136\u800c\uff0c\u591a\u5904\u7406\u5176\u73af\u5883\u4e0b\u6d88\u606f\u8981\u4f20\u9012\u5230\u6240\u6709\u5904\u7406\u5668\uff0c\u8be5\u8fc7\u7a0b\u5bfc\u81f4\u7684\u5ef6\u65f6\u4f1a\u964d\u4f4e\u7cfb\u7edf\u6548\u7387\uff1b\u53e6\u5916\uff0c\u5982\u679c\u7cfb\u7edf\u65f6\u949f\u662f\u901a\u8fc7\u4e2d\u65ad\u66f4\u65b0\u7684\uff0c\u5219\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u56e0\u6b64\uff0c\u5728\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u7279\u6b8a\u786c\u4ef6\u6307\u4ee4\uff0c\u7528\u4e8e\u76d1\u6d4b\u548c\u4fee\u6539\u5b57\u7684\u5185\u5bb9\uff0c\u6216\u8005\u7528\u4e8e \u539f\u5b50\u5730 \uff08atomically\uff09\u4ea4\u6362\u4e24\u4e2a\u5b57\uff08\u4f5c\u4e3a\u4e0d\u53ef\u4e2d\u65ad\u7684\u6307\u4ee4\uff09\u3002 \u4e92\u65a5\u9501 \u4e34\u754c\u533a\u95ee\u9898\u57fa\u4e8e\u786c\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u4f46\u590d\u6742\uff0c\u800c\u4e14\u4e0d\u80fd\u4e3a\u7a0b\u5e8f\u5458\u76f4\u63a5\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u4eba\u5458\u6784\u5efa\u8f6f\u4ef6\u5de5\u5177\uff0c\u4ee5\u89e3\u51b3\u4e34\u754c\u533a\u95ee\u9898\u3002\u6700\u7b80\u5355\u7684\u5de5\u5177\u5c31\u662f \u4e92\u65a5\u9501 \uff08mutex lock\uff09\u3002\u6211\u4eec\u4f7f\u7528\u4e92\u65a5\u9501\u6765\u4e2a\u4fdd\u62a4\u4e34\u754c\u533a\uff0c\u4ece\u800c\u9632\u6b62\u7ade\u4e89\u6761\u4ef6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5e94\u5f97\u5230\u9501\uff1b\u5b83\u5728\u9000\u51fa\u4e34\u754c\u533a\u65f6\u91ca\u653e\u9501\u3002\u51fd\u6570 acquire() \u83b7\u53d6\u6240\uff0c\u800c\u51fd\u6570 release() \u91ca\u653e\u9501\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6bcf\u4e2a\u4e92\u65a5\u9501\u6709\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf available \uff0c\u5b83\u7684\u503c\u8868\u793a\u9501\u662f\u5426\u53ef\u7528\u3002\u5982\u679c\u9501\u662f\u53ef\u7528\u7684\uff0c\u90a3\u4e48\u8c03\u7528 acquire() \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u9501\u4e0d\u518d\u53ef\u7528\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u83b7\u53d6\u4e0d\u53ef\u7528\u7684\u9501\u65f6\uff0c\u5b83\u4f1a\u963b\u585e\uff0c\u77e5\u9053\u9501\u88ab\u91ca\u653e\u3002 \u6309\u5982\u4e0b\u5b9a\u4e49 acquire() \uff1a acquire() { while (!available) ; /* busy wait */ available = false; } \u6309\u5982\u4e0b\u5b9a\u4e49 release() \uff1a release() { available = true; } \u5bf9 acquire() \u548c release() \u7684\u8c03\u7528\u5fc5\u987b\u539f\u5b50\u5730\u6267\u884c\u3002\u56e0\u6b64\uff0c\u4e92\u65a5\u9501\u901a\u5e38\u91c7\u7528\u786c\u4ef6\u673a\u5236\u6765\u5b9e\u73b0\u3002 \u8fd9\u91cc\u6240\u7ed9\u5b9e\u73b0\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff1a\u5b83\u9700\u8981 \u5fd9\u7b49\u5f85 \uff08busy waiting\uff09\u3002\u5f53\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\uff0c\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5fc5\u987b\u8fde\u7eed\u5faa\u73af\u5730\u8c03\u7528 acquire() \u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u4e92\u65a5\u9501\u4e5f\u88ab\u79f0\u4e3a \u81ea\u65cb\u9501 \uff08spinlock\uff09\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u4e0d\u505c\u5730\u65cb\u8f6c\uff0c\u4ee5\u7b49\u5f85\u9501\u53d8\u5f97\u53ef\u7528\u3002\u5728\u5b9e\u9645\u591a\u9053\u7a0b\u5e8f\u7cfb\u7edf\u4e2d\uff0c\u5373\u5f53\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00CPU\u65f6\uff0c\u8fd9\u79cd\u8fde\u7eed\u5faa\u73af\u663e\u7136\u662f\u4e2a\u95ee\u9898\u3002\u5fd9\u7b49\u5f85\u6d6a\u8d39CPU\u5468\u671f\uff0c\u800c\u8fd9\u539f\u672c\u53ef\u4ee5\u6709\u6548\u7528\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u3002 \u81ea\u65cb\u9501\u7684\u4f18\u70b9\uff1a \u5f53\u8fdb\u7a0b\u5728\u7b49\u5f85\u9501\u65f6\uff0c\u6ca1\u6709\u4e0a\u4e0b\u6587\u5207\u6362\uff08\u4e0a\u4e0b\u6587\u5207\u6362\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u4f7f\u7528\u9501\u7684\u65f6\u95f4\u8f83\u77ed\u65f6\uff0c\u81ea\u65cb\u9501\u8fd8\u662f\u6709\u7528\u7684\u3002\u81ea\u65cb\u9501\u901a\u5e38\u7528\u4e8e\u591a\u5904\u7406\u5668\u7cfb\u7edf\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5728\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u201c\u65cb\u8f6c\u201d\uff0c\u800c\u5176\u4ed6\u7ebf\u7a0b\u5728\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u6267\u884c\u4e34\u754c\u533a\u3002 \u4fe1\u53f7\u91cf \u4e92\u65a5\u9501\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u6700\u7b80\u5355\u7684\u540c\u6b65\u5de5\u5177\u3002\u672c\u8282\u8ba8\u8bba\u4e00\u4e2a\u66f4\u9c81\u68d2\u7684\u5de5\u5177\uff0c\u5b83\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\uff0c\u4f46\u5b83\u80fd\u63d0\u4f9b\u66f4\u4e3a\u9ad8\u7ea7\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u8fdb\u7a0b\u80fd\u591f\u540c\u6b65\u6d3b\u52a8\u3002 \u4e00\u4e2a \u4fe1\u53f7\u91cf \uff08semaphore\uff09 S S \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5b83\u9664\u4e86\u521d\u59cb\u5316\u5916\u80fd\u901a\u8fc7\u4e24\u4e2a\u6807\u51c6\u539f\u5b50\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u8bbf\u95ee\u3002 \u53ef\u6309\u5982\u4e0b\u5b9a\u4e49 wait() : wait(S) { while (S <= 0) ; // busy wait S--; } \u53ef\u6309\u5982\u4e0b\u5b9a\u4e49 signal() \uff1a signal(S) { S++; } \u4fe1\u53f7\u91cf\u7684\u4f7f\u7528 \u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u533a\u5206\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf \uff08counting semaphore\uff09\u7684\u503c\u4e0d\u53d7\u9650\u5236\uff0c\u800c \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf \uff08binary semaphore\uff09\u7684\u503c\u53ea\u80fd\u4e3a 0 0 \u6216 1 1 \u3002\u56e0\u6b64\uff0c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6ca1\u6709\u63d0\u4f9b\u4e92\u65a5\u9501\u7684\u7cfb\u7edf\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u6765\u5b9e\u73b0\u4e92\u65a5\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf\u53ef\u4ee5\u7528\u4e8e\u63a7\u5236\u8bbf\u95ee\u5177\u6709\u591a\u4e2a\u5b9e\u4f8b\u7684\u67d0\u79cd\u8d44\u6e90\u3002\u4fe1\u53f7\u91cf\u7684\u521d\u503c\u4e3a\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5f53\u8fdb\u7a0b\u9700\u8981\u4f7f\u7528\u8d44\u6e90\u65f6\uff0c\u9700\u8981\u5bf9\u8be5\u4fe1\u53f7\u91cf\u6267\u884c wait() \u64cd\u4f5c\uff08\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\uff09\u3002\u5f53\u8fdb\u884c\u8d44\u6e90\u91ca\u653e\u65f6\uff0c\u9700\u8981\u5bf9\u8be5\u4fe1\u53f7\u91cf\u6267\u884c signal() \u64cd\u4f5c\uff08\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\uff09\u3002\u5f53\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\u4e3a 0 0 \u65f6\uff0c\u6240\u6709\u8d44\u6e90\u90fd\u5728\u4f7f\u7528\u4e2d\u3002\u4e4b\u540e\uff0c\u9700\u8981\u4f7f\u7528\u8d44\u6e90\u7684\u8fdb\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u8ba1\u6570\u5927\u4e8e 0 0 \u3002 \u4f7f\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u4f8b\u5b50\uff1a \u73b0\u6709\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u7684\u8fdb\u7a0b\uff1aP1\u6709\u8bed\u53e5 S1 \u800cP2\u6709\u8bed\u53e5 S2 \u3002\u5047\u8bbe\u8981\u6c42\u53ea\u6709\u5728 S1 \u6267\u884c\u540e\u624d\u80fd\u6267\u884c S2 \uff0c\u5219\u53ef\u4ee5\u7528\u4fe1\u53f7\u91cf\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e00\u8981\u6c42\uff1a\u8ba9P1\u548cP2\u5171\u4eab\u540c\u4e00\u4fe1\u53f7\u91cf synch \uff0c\u5e76\u4e14\u521d\u59cb\u5316\u4e3a 0 0 \u3002\u5728\u8fdb\u7a0bP1\u4e2d\uff0c\u63d2\u5165\u8bed\u53e5\uff1a S1; signal(synch); \u5728\u8fdb\u7a0bP2\u4e2d\uff0c\u63d2\u5165\u8bed\u53e5\uff1a wait(synch); S2; \u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0 \u4e0e\u81ea\u65cb\u9501\u7684\u5b9e\u73b0\u5177\u6709\u5fd9\u7b49\u5f85\u76f8\u540c\uff0c\u4e0a\u8ff0\u4fe1\u53f7\u91cf\u64cd\u4f5c wait() \u548c signal() \u4e5f\u6709\u540c\u6837\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u514b\u670d\u5fd9\u7b49\u5f85\u9700\u8981\uff0c\u53ef\u4ee5\u8fd9\u6837\u4fee\u6539\u5fd9\u7b49\u5f85\u64cd\u4f5c wait() \u548c signal() \u7684\u5b9a\u4e49\uff1a\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u64cd\u4f5c wait() \u5e76\u4e14\u53d1\u73b0\u4fe1\u53f7\u91cf\u503c\u4e0d\u4e3a\u6b63\u65f6\uff0c\u5b83\u5fc5\u987b\u7b49\u5f85\u3002\u7136\u800c\uff0c\u8be5\u8fdb\u7a0b\u4e0d\u662f\u5fd9\u7b49\u5f85\u800c\u662f\u963b\u585e\u81ea\u5df1\u3002\u963b\u585e\u64cd\u4f5c\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u653e\u5230\u4e0e\u4fe1\u53f7\u91cf\u6709\u5173\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u5c06\u8be5\u8fdb\u7a0b\u72b6\u6001\u5207\u6362\u6210\u7b49\u5f85\u72b6\u6001\u3002\u7136\u540e\uff0c\u8f6c\u5230CPU\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u4e00\u8fb9\u9009\u62e9\u6267\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u7b49\u5f85\u4fe1\u53f7\u91cf S S \u800c\u963b\u585e\u7684\u8fdb\u7a0b\uff0c\u5728\u5176\u5b83\u8fdb\u7a0b\u6267\u884c signal() \u540e\uff0c\u5e94\u88ab\u91cd\u65b0\u6267\u884c\u3002\u8fdb\u7a0b\u7684\u91cd\u65b0\u6267\u884c\u662f\u901a\u8fc7\u64cd\u4f5c wakeup() \u6765\u8fdb\u884c\u7684\uff0c\u5b83\u5c06\u8fdb\u7a0b\u4ece\u7b49\u5f85\u72b6\u6001\u6539\u4e3a\u5c31\u7eea\u72b6\u6001\u3002\u7136\u800c\uff0c\u8fdb\u7a0b\u88ab\u6dfb\u52a0\u5230\u5c31\u7eea\u961f\u5217\u3002\uff08\u53d6\u51b3\u4e8eCPU\u8c03\u5ea6\u7b97\u6cd5\uff0cCPU\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u4ece\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u5207\u6362\u5230\u65b0\u7684\u5c31\u7eea\u8fdb\u7a0b\u3002\uff09 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6837\u5b9a\u4e49\u7684\u4fe1\u53f7\u91cf\uff0c\u6309\u5982\u4e0b\u5b9a\u4e49\u4fe1\u53f7\u91cf\uff1a typedef struct { int value ; struct process * list ; } semaphore ; \u6bcf\u4e2a\u4fe1\u53f7\u91cf\u90fd\u6709\u4e00\u4e2a\u6574\u6570 value \u548c\u4e00\u4e2a\u8fdb\u7a0b\u94fe\u8868 list \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5fc5\u987b\u7b49\u5f85\u4fe1\u53f7\u91cf\u65f6\uff0c\u5c31\u88ab\u6dfb\u52a0\u5230\u8fdb\u7a0b\u94fe\u8868\u3002\u64cd\u4f5c signal() \u4ece\u7b49\u5f85\u8fdb\u7a0b\u94fe\u8868\u4e0a\u53d6\u8d70\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u52a0\u4ee5\u5524\u9192\u3002 \u73b0\u5728\uff0c\u4fe1\u53f7\u91cf\u64cd\u4f5c wait() \u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0bL\uff1a wait ( semaphore * S ) { S -> value -- ; if ( S -> value < 0 ) { add this process to S -> list ; block (); } } \u800c\u4fe1\u53f7\u91cf\u64cd\u4f5c signal() \u53ef\u5b9a\u4e49\u5982\u4e0b\uff1a signal ( semaphore * S ) { S -> value ++ ; if ( S -> value <= 0 ) { remove a process P from S -> list ; wakeup ( P ); } } \u64cd\u4f5c block() \u6302\u8d77\u8c03\u7528\u5b83\u7684\u8fdb\u7a0b\u3002\u64cd\u4f5c wakeup(P) \u91cd\u65b0\u542f\u52a8\u963b\u585e\u8fdb\u7a0b P P \u7684\u6267\u884c\u3002\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e3a\u57fa\u672c\u662f\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4f9b\u7684\u3002 \u7ecf\u5178\u540c\u6b65\u95ee\u9898 \u6709\u9650\u7f13\u51b2\u95ee\u9898 \u8bfb\u8005-\u4f5c\u8005\u95ee\u9898 \u5047\u8bbe\u4e00\u4e2a\u6570\u636e\u5e93\u4e3a\u591a\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u6240\u5171\u4eab\u3002\u6709\u7684\u8fdb\u7a0b\u53ef\u80fd\u53ea\u9700\u8981\u8bfb\u6570\u636e\u5e93\uff0c\u800c\u5176\u4ed6\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u66f4\u65b0\uff08\u8bfb\u548c\u5199\uff09\u6570\u636e\u5e93\u3002\u4e3a\u533a\u5206\u8fd9\u4e24\u7c7b\u8fdb\u7a0b\uff0c\u79f0\u524d\u8005\u4e3a \u8bfb\u8005 \uff08reader\uff09\uff0c\u540e\u8005\u4e3a \u4f5c\u8005 \uff08writer\uff09\u3002\u5982\u679c \u4ee5\u6570\u636e\u5e93\u4e3a\u4f8b\uff0c\u6211\u4eec\u8981\u6c42\u4f5c\u8005\u5728\u5199\u5165\u6570\u636e\u5e93\u65f6\u5177\u6709\u5171\u4eab\u6570\u636e\u5e93\u72ec\u5360\u7684\u8bbf\u95ee\u6743\u3002\u8fd9\u4e00\u540c\u6b65\u95ee\u9898\u5373 \u8bfb\u8005-\u4f5c\u8005\u95ee\u9898 \uff08reader-writer problem\uff09\u3002\u8be5\u95ee\u9898\u81ea\u4ece\u88ab\u63d0\u51fa\u5c31\u4e00\u76f4\u7528\u4e8e\u6d4b\u8bd5\u51e0\u4e4e\u6240\u6709\u65b0\u7684\u540c\u6b65\u539f\u8bed\u3002 \u7b2c\u4e00\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\uff1a\u8bfb\u8005\u4e0d\u5e94\u4fdd\u6301\u7b49\u5f85\uff0c\u9664\u975e\u4f5c\u8005\u5df2\u7ecf\u83b7\u5f97\u6743\u9650\u4f7f\u7528\u5171\u4eab\u5bf9\u8c61\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6ca1\u6709\u8bfb\u8005\uff0c\u7531\u4e8e\u67d0\u4e2a\u4f5c\u8005\u7b49\u5f85\uff0c\u800c\u7b49\u5f85\u5176\u4ed6\u8bfb\u8005\u7684\u5b8c\u6210\u3002 \u7b2c\u4e8c\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\uff1a\u4e00\u65e6\u4f5c\u8005\u5c31\u7eea\uff0c\u90a3\u4e48\u4f5c\u8005\u4f1a\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u4f5c\u8005\u7b49\u5f85\u8bbf\u95ee\u5bf9\u8c61\uff0c\u90a3\u4e48\u4e0d\u4f1a\u6709\u8bfb\u8005\u53ef\u4ee5\u5f00\u59cb\u8bfb\u3002 \u6709\u4e9b\u7cfb\u7edf\u5c06\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4ece\u800c\u63d0\u4f9b \u8bfb\u5199\u9501 \uff08read-writer lock\uff09\uff0c\u5728\u83b7\u53d6\u8bfb\u5199\u9501\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u9501\u7684\u6a21\u5f0f\uff1a \u8bfb\u8bbf\u95ee \u548c \u5199\u8bbf\u95ee \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u9700\u8981\u8bfb\u5171\u4eab\u6570\u636e\u65f6\uff0c\u53ef\u7533\u8bf7\u8bfb\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff1b\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5e0c\u671b\u4fee\u6539\u5171\u4eab\u6570\u636e\u65f6\uff0c\u5e94\u7533\u8bf7\u5199\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\u3002\u591a\u4e2a\u8fdb\u7a0b\u53ef\u5141\u8bb8\u5e76\u53d1\u83b7\u53d6\u8bfb\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u83b7\u53d6\u5199\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff0c\u4f5c\u8005\u8fdb\u7a0b\u9700\u8981\u4e92\u65a5\u8bbf\u95ee\u3002 \u8bfb\u5199\u9501\u7684\u9002\u7528\u573a\u666f\uff1a \u5bb9\u6613\u8bc6\u522b\u54ea\u4e9b\u8fdb\u7a0b\u53ea\u8bfb\u5171\u4eab\u6570\u636e\u548c\u54ea\u4e9b\u8fdb\u7a0b\u53ea\u5199\u5171\u4eab\u6570\u636e\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u8bfb\u8005\u8fdb\u7a0b\u6570\u6bd4\u5750\u7740\u8fdb\u7a0b\u6570\u591a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u56e0\u4e3a\u8bfb\u5199\u9501\u7684\u5efa\u7acb\u5f00\u9500\u901a\u5e38\u5927\u4e8e\u4fe1\u53f7\u91cf\u6216\u4e92\u65a5\u9501\u7684\uff0c\u4f46\u662f\u8fd9\u4e00\u5f00\u9500\u53ef\u4ee5\u901a\u8fc7\u5141\u8bb8\u591a\u4e2a\u8bfb\u8005\u7684\u5e76\u53d1\u7a0b\u5e8f\u7684\u589e\u52a0\u6765\u5f25\u8865\u3002 \u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898 \u7ba1\u7a0b \u64cd\u4f5c\u7cfb\u7edf\u5e94\u63d0\u4f9b\u673a\u5236\u4ee5\u9632\u6b62\u65f6\u5e8f\u51fa\u9519\uff0c\u5df2\u6709\u591a\u4e2a\u8bed\u8a00\u7ed3\u6784\u53ef\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002\u7ba1\u7a0b\u4e3a\u5171\u4eab\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63d0\u4f9b\u4e86\u540c\u6b65\u673a\u5236\u3002\u6761\u4ef6\u53d8\u91cf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u7ba1\u7a0b\u51fd\u6570\u963b\u585e\u6267\u884c\u76f4\u5230\u88ab\u901a\u77e5\u53ef\u7ee7\u7eed\u4e3a\u6b62\u3002 \u540c\u6b65\u4f8b\u5b50 \u64cd\u4f5c\u7cfb\u7edf\u4e5f\u63d0\u4f9b\u540c\u6b65\u652f\u6301\u3002\u4f8b\u5982\uff0cWindows\u3001Linux\u548cSolaris\u90fd\u63d0\u4f9b\u673a\u5236\uff0c\u5982\u4fe1\u53f7\u91cf\u3001\u4e92\u65a5\u9501\u3001\u81ea\u65cb\u9501\u53ca\u6761\u4ef6\u53d8\u91cf\uff0c\u4ee5\u4fbf\u63d0\u4f9b\u8bbf\u95ee\u5171\u4eab\u6570\u636e\u3002Pthread API\u652f\u6301\u4e92\u65a5\u9501\u3001\u4fe1\u53f7\u91cf\u4ee5\u53ca\u6761\u4ef6\u53d8\u91cf\u3002 Windows\u540c\u6b65 Linux\u540c\u6b65 Solaris\u540c\u6b65 Pthreads\u540c\u6b65 \u66ff\u4ee3\u65b9\u6cd5 \u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4f1a\u589e\u52a0\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u7684\u98ce\u9669\u3002\u4f20\u7edf\u4e0a\uff0c\u8bf8\u5982\u4e92\u65a5\u9501\u3001\u4fe1\u53f7\u91cf\u548c\u7ba1\u7a0b\u7b49\u6280\u672f\u7528\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u662f\u968f\u7740\u5904\u7406\u6838\u6570\u91cf\u7684\u589e\u52a0\uff0c\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u5e76\u4e14\u907f\u514d\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002 \u6709\u591a\u4e2a\u66ff\u4ee3\u65b9\u6cd5\u91cd\u70b9\u5173\u6ce8\u591a\u6838\u7cfb\u7edf\u7684\u540c\u6b65\u3002\u4e00\u4e2a\u65b9\u6cd5\u91c7\u7528 \u4e8b\u7269\u5185\u5b58 \uff0c\u5b83\u901a\u8fc7\u8f6f\u4ef6\u6216\u786c\u4ef6\u6280\u672f\u6765\u5904\u7406\u540c\u6b65\u95ee\u9898\u3002\u53e6\u4e00\u4e2a\u65b9\u6cd5\u91c7\u7528\u7531 OpenMP \u63d0\u4f9b\u7684\u7f16\u8bd1\u5668\u6269\u5c55\u3002\u6700\u540e\uff0c \u51fd\u6570\u662f\u7f16\u7a0b\u8bed\u8a00 \u901a\u8fc7\u4e0d\u5141\u8bb8\u53ef\u53d8\u6027\u6765\u5904\u7406\u540c\u6b65\u95ee\u9898\u3002 \u6b7b\u9501 \u591a\u9053\u7a0b\u5e8f\u73af\u5883\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u7ade\u4e89\u6709\u9650\u6570\u91cf\u7684\u8d44\u6e90\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7533\u8bf7\u8d44\u6e90\u65f6\uff0c\u5982\u679c\u8fd9\u65f6\u6ca1\u6709\u53ef\u7528\u8d44\u6e90\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u3002\u6709\u65f6\uff0c\u5982\u679c\u7533\u8bf7\u7684\u8d44\u6e90\u88ab\u5176\u4ed6\u7b49\u5f85\u8fdb\u7a0b\u5360\u6709\uff0c\u90a3\u4e48\u8be5\u7b49\u5f85\u8fdb\u7a0b\u6709\u53ef\u80fd\u518d\u4e5f\u65e0\u6cd5\u6539\u53d8\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a \u6b7b\u9501 \uff08deadlock\uff09\u3002 \u7cfb\u7edf\u6a21\u578b \u6b7b\u9501\u7279\u5f81 \u5fc5\u8981\u6761\u4ef6 \u5982\u679c\u5728\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4ee5\u4e0b\u56db\u4e2a\u6761\u4ef6\u540c\u65f6\u6210\u7acb\uff0c\u90a3\u4e48\u5c31\u80fd\u5f15\u8d77\u6b7b\u9501\uff1a \u4e92\u65a5 \uff08mutual exclusion\uff09\uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u8d44\u6e90\u5fc5\u987b\u5904\u4e8e\u975e\u5171\u4eab\u6a21\u5f0f\uff0c\u8bb0\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4f7f\u7528\u3002\u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7533\u8bf7\u8be5\u8d44\u6e90\uff0c\u90a3\u4e48\u7533\u8bf7\u8fdb\u7a0b\u5e94\u8be5\u7b49\u5230\u8be5\u8d44\u6e90\u91ca\u653e\u4e3a\u6b62\u3002 \u5360\u6709\u5e76\u7b49\u5f85 \uff08hold and wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u5e94\u5360\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u4e24\u4e00\u4e2a\u8d44\u6e90\uff0c\u8be5\u8d44\u6e90\u4e3a\u5176\u5b83\u8fdb\u7a0b\u6240\u5360\u6709\u3002 \u975e\u62a2\u5360 \uff08no preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5360\uff0c\u5373\u8d44\u6e90\u53ea\u80fd\u88ab\u8fdb\u7a0b\u5728\u5b8c\u6210\u4efb\u52a1\u540e\u81ea\u613f\u91ca\u653e\u3002 \u5faa\u73af\u7b49\u5f85 \uff08circular wait\uff09\uff1a\u6709\u4e00\u7ec4\u7b49\u5f85\u8fdb\u7a0b {P_0, P_1, ..., P_n} {P_0, P_1, ..., P_n} \uff0c P_0 P_0 \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_1 P_1 \u5360\u6709\uff0c P_1 P_1 \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_2 P_2 \u5360\u6709\uff0c......\uff0c P_{n - 1} P_{n - 1} \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_n P_n \u5360\u6709\uff0c P_n P_n \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_0 P_0 \u5360\u6709\u3002 \u9700\u8981\u5f3a\u8c03\uff0c\u6240\u6709\u56db\u4e2a\u6761\u4ef6\u5fc5\u987b\u540c\u65f6\u6210\u7acb\u624d\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u6ce8\u610f\u5230\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\u610f\u5473\u7740\u5360\u6709\u5e76\u7b49\u5f85\u6761\u4ef6\uff0c\u6545\u56db\u4e2a\u6761\u4ef6\u5e76\u4e0d\u662f\u5b8c\u5168\u72ec\u7acb\u3002\u4f46\u53ea\u8981\u786e\u4fdd\u5176\u4e2d\u4e00\u4e2a\u4e0d\u6210\u7acb\u5373\u53ef\u9884\u9632\u6b7b\u9501\u3002 \u8d44\u6e90\u5206\u914d\u56fe \u603b\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u8d44\u6e90\u5206\u914d\u56fe\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4e0d\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002\u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf \u53ef\u80fd\u4f1a \u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002 \u6b7b\u9501\u5904\u7406\u65b9\u6cd5 \u4e00\u822c\u6765\u8bf4\uff0c\u5904\u7406\u6b7b\u9501\u95ee\u9898\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u901a\u8fc7\u534f\u8bae\u6765\u9884\u9632\u6216\u907f\u514d\u6b7b\u9501\uff0c\u786e\u4fdd\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\u3002 \u5141\u8bb8\u7cfb\u7edf\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\uff0c\u7136\u540e\u68c0\u6d4b\u5b83\uff0c\u5e76\u52a0\u4ee5\u6062\u590d\u3002 \u5ffd\u89c6\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba4\u4e3a\u6b7b\u9501\u4e0d\u53ef\u80fd\u5728\u7cfb\u7edf\u5185\u53d1\u751f\u3002 \u7b2c\u4e09\u79cd\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\uff0c\u5305\u62ecLinux\u548cWindows\u3002\u56e0\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5904\u7406\u6b7b\u9501\u3002 \u4e3a\u4e86\u786e\u4fdd\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u91c7\u7528\u6b7b\u9501\u9884\u9632\u548c\u6b7b\u9501\u907f\u514d\u65b9\u6848\u3002 \u6b7b\u9501\u9884\u9632 \uff08deadlock prevention\uff09\u65b9\u6cd5\u786e\u4fdd\u81f3\u5c11\u6709\u4e00\u4e2a\u4fbf\u8981\u6761\u4ef6\u4e0d\u6210\u7acb\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u9650\u5236\u5982\u4f55\u7533\u8bf7\u8d44\u6e90\u7684\u65b9\u6cd5\u6765\u9884\u9632\u6b7b\u9501\u3002 \u6b7b\u9501\u907f\u514d \uff08deadlock avoidance\uff09\u8981\u6c42\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e8b\u5148\u5f97\u5230\u6709\u5173\u8fdb\u7a0b\u7533\u8bf7\u8d44\u6e90\u548c\u4f7f\u7528\u8d44\u6e90\u7684\u989d\u5916\u4fe1\u606f\u3002\u6709\u4e86\u8fd9\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u7cfb\u7edf\u53ef\u4ee5\u786e\u5b9a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7533\u8bf7\uff0c\u8fdb\u7a0b\u662f\u5426\u5e94\u7b49\u5f85\u3002\u4e3a\u4e86\u786e\u5b9a\u5f53\u524d\u7533\u8bf7\u662f\u786e\u5b9a\u8fd8\u662f\u5ef6\u8fdf\uff0c\u7cfb\u7edf\u5e94\u8003\u8651\uff1a\u73b0\u6709\u7684\u53ef\u7528\u8d44\u6e90\u3001\u5df2\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4ee5\u53ca\u6bcf\u4e2a\u8fdb\u7a0b\u5c06\u6765\u7533\u8bf7\u548c\u91ca\u653e\u7684\u8d44\u6e90\u3002 \u5982\u679c\u7cfb\u7edf\u4e0d\u63d0\u4f9b\u6b7b\u9501\u9884\u9632\u6216\u6b7b\u9501\u907f\u514d\u7684\u7b97\u6cd5\uff0c\u5219\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7b97\u6cd5\u6765 \u68c0\u6d4b \u7cfb\u7edf\u72b6\u6001\u4ee5\u786e\u5b9a\u6b7b\u9501\u662f\u5426\u53d1\u751f\uff0c\u63d0\u4f9b\u96f6\u4e00\u4e2a\u7b97\u6cd5\u6765\u4ece\u6b7b\u9501\u4e2d \u6062\u590d \u3002 \u5f53\u6ca1\u6709\u7b97\u6cd5\u7528\u4e8e\u68c0\u6d4b\u548c\u6062\u590d\u6b7b\u9501\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\uff0c\u800c\u53c8\u6ca1\u6709\u65b9\u6cd5\u68c0\u6d4b\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u672a\u88ab\u53d1\u73b0\u7684\u6b7b\u9501\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u4e0b\u964d\uff0c\u56e0\u4e3a\u8d44\u6e90\u88ab\u4e0d\u80fd\u8fd0\u884c\u7684\u8fdb\u7a0b\u5360\u6709\uff0c\u800c\u8d8a\u6765\u8d8a\u591a\u7684\u8d44\u6e90\u4f1a\u56e0\u7533\u8bf7\u8d44\u6e90\u800c\u9677\u5165\u6b7b\u9501\u3002\u6700\u540e\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f1a\u505c\u6b62\u5de5\u4f5c\uff0c\u9700\u8981 \u4eba\u5de5\u91cd\u542f \u3002\u867d\u7136\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u4e0d\u80fd\u81ea\u52a8\u5316\u89e3\u51b3\u6b7b\u9501\u95ee\u9898\uff0c\u4f46\u5374\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\u3002\u56e0\u4e3a\u5bf9\u4e8e\u5927\u591a\u6570\u7cfb\u7edf\uff0c\u6b7b\u9501\u5f88\u5c11\u53d1\u751f\uff08\u5982\u4e00\u5e74\u4e00\u6b21\uff09\uff0c\u4e0e\u9891\u7e41\u4f7f\u7528\u7684\u5e76\u4e14\u5f00\u9500\u6602\u8d35\u7684\u6b7b\u9501\u9884\u9632\u3001\u6b7b\u9501\u907f\u514d\u548c\u6b7b\u9501\u68c0\u6d4b\u4e0e\u6062\u590d\u7b97\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6210\u672c\u66f4\u4f4e\u3002 \u6b64\u5916\uff0c\u7528\u4e8e\u5176\u4ed6\u6761\u4ef6\u7684\u6062\u590d\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6b7b\u9501\u6062\u590d\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u5904\u4e8e\u51bb\u7ed3\u72b6\u6001\u800c\u4e0d\u662f\u601d\u7d22\u72b6\u6001\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u5b9e\u65f6\u8fdb\u7a0b\u6309\u6700\u9ad8\u4f18\u5148\u7ea7\u6765\u8fd0\u884c\uff08\u6216\u5176\u5b83\u8fdb\u7a0b\u5728\u975e\u62a2\u5360\u8c03\u5ea6\u7a0b\u5e8f\u4e0b\u8fd0\u884c\uff09\uff0c\u5e76\u4e14\u4e0d\u5c06\u63a7\u5236\u8fd4\u56de\u5230\u64cd\u4f5c\u7cfb\u7edf\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u5e94\u6709\u4eba\u5de5\u65b9\u6cd5\u53ef\u4ece\u8fd9\u4e9b\u72b6\u6001\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u53ef\u7528\u4e8e\u6b7b\u9501\u3002 \u6b7b\u9501\u9884\u9632 \u6839\u636e\u4e0a\u8ff0\u6b7b\u9501\u53d1\u751f\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff0c\u53ea\u8981\u786e\u4fdd\u5176\u4e2d\u4e00\u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\uff0c\u5c31\u80fd\u9884\u9632\u6b7b\u9501\u53d1\u751f\u3002 \u4e92\u65a5 \u901a\u5e38\u4e0d\u80fd\u901a\u8fc7\u7834\u574f\u4e92\u65a5\u6761\u4ef6\u6765\u9884\u9632\u6b7b\u9501\u3002\u56e0\u4e3a\u6709\u4e9b\u8d44\u6e90\u672c\u8eab\u5c31\u662f\u975e\u5171\u4eab\u7684\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u4e92\u65a5\u9501\u4e0d\u80fd\u540c\u4e8b\u88ab\u591a\u4e2a\u8fdb\u7a0b\u6240\u5171\u4eab\u3002 \u6301\u6709\u4e14\u7b49\u5f85 \u65e0\u62a2\u5360 \u5faa\u73af\u7b49\u5f85 \u6b7b\u9501\u907f\u514d \u6b7b\u9501\u907f\u514d\u7b97\u6cd5\uff0c\u4e0d\u662f\u9884\u9632\u6b7b\u9501\uff0c\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u62e5\u6709\u6bcf\u4e2a\u8fdb\u7a0b\u5982\u4f55\u5229\u7528\u8d44\u6e90\u7684\u5148\u9a8c\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u94f6\u884c\u5bb6\u7b97\u6cd5\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u7684\u5404\u79cd\u8d44\u6e90\u7684\u6700\u5927\u6570\u91cf\u3002\u901a\u8fc7\u8fd9\u79cd\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u6b7b\u9501\u907f\u514d\u7b97\u6cd5\u3002 \u6b7b\u9501\u68c0\u6d4b \u5982\u679c\u4e0d\u91c7\u7528\u534f\u8bae\u4ee5\u786e\u4fdd\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u4f7f\u7528\u68c0\u6d4b\u5e76\u6062\u590d\u7684\u65b9\u6848\u3002\u5e94\u8c03\u7528\u68c0\u6d4b\u7b97\u6cd5\uff0c\u786e\u5b9a\u662f\u5426\u51fa\u73b0\u4e86\u6b7b\u9501\u3002\u5982\u679c\u68c0\u6d4b\u5230\u6b7b\u9501\uff0c\u90a3\u4e48\u7cfb\u7edf\u5e94\u901a\u8fc7\u7ec8\u6b62\u67d0\u4e9b\u6b7b\u9501\u8fdb\u7a0b\u6216\u901a\u8fc7\u62a2\u5360\u67d0\u4e9b\u6b7b\u9501\u8fdb\u7a0b\u7684\u8d44\u6e90\u6765\u6062\u590d\u3002 \u6b7b\u9501\u6062\u590d \u5f53\u901a\u8fc7\u62a2\u5360\u6765\u5904\u7406\u6b7b\u9501\u65f6\uff0c\u5e94\u8003\u8651\u4e09\u4e2a\u95ee\u9898\uff1a\u9009\u62e9\u4e00\u4e2a\u727a\u7272\u8fdb\u7a0b\u3001\u56de\u6eda\u53ca\u9965\u997f\u3002\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u6839\u636e\u4ee3\u4ef7\u6765\u9009\u62e9\u727a\u7272\u8fdb\u7a0b\u56de\u6eda\uff0c\u90a3\u4e48\u53ef\u80fd\u51fa\u73b0\u9965\u997f\uff0c\u5bfc\u81f4\u6240\u9009\u8fdb\u7a0b\u6c38\u8fdc\u4e0d\u80fd\u5b8c\u6210\u6307\u5b9a\u4efb\u52a1\u3002 \u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u6ca1\u6709\u5355\u72ec\u7684\u57fa\u672c\u65b9\u6cd5\u80fd\u591f\u5904\u7406\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u7684\u6240\u6709\u95ee\u9898\u3002\u7136\u800c\uff0c\u901a\u8fc7\u5408\u5e76\u57fa\u672c\u65b9\u6cd5\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u4e3a\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u7c7b\u8d44\u6e90\u7b97\u5219\u6700\u4f73\u65b9\u6cd5\u3002","title":"\u8fdb\u7a0b\u7ba1\u7406"},{"location":"operating_system/basic/process_management/#_1","text":"\u53ef\u4ee5\u5c06\u8fdb\u7a0b\uff08process\uff09\u770b\u505a\u6267\u884c\u7684\u7a0b\u5e8f\u3002\u8fdb\u7a0b\u9700\u8981\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c\u5982CPU\u65f6\u95f4\u3001\u5185\u5b58\u3001\u6587\u4ef6\u548cI/O\u8bbe\u5907\uff0c\u4ee5\u4fbf\u6267\u884c\u4efb\u52a1\u3002\u8fd9\u4e9b\u8d44\u6e90\u5728\u521b\u5efa\u8fdb\u7a0b\u6216\u6267\u884c\u8fdb\u7a0b\u65f6\u5f97\u4ee5\u5206\u914d\u3002 \u8fdb\u7a0b\u662f\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u7684\u5de5\u4f5c\u5355\u5143\u3002\u8fd9\u7c7b\u7cfb\u7edf\u5305\u542b\u4e00\u7ec4\u8fdb\u7a0b\uff1a\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u4ee3\u7801\uff0c\u800c\u7528\u6237\u8fdb\u7a0b\u6267\u884c\u7528\u6237\u4ee3\u7801\u3002\u6240\u6709\u8fd9\u4e9b\u8fdb\u7a0b\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u3002 \u867d\u7136\u4f20\u7edf\u8fdb\u7a0b\u5728\u8fd0\u884c\u65f6\u4ec5\u4ec5\u5305\u62ec\u5355\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff08thread\uff09\uff0c\u4f46\u662f\u76ee\u524d\u5927\u591a\u6570\u7684\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u5177\u6709\u591a\u7ebf\u7a0b\u7684\u8fdb\u7a0b\u3002 \u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7ba1\u7406\u7684\u591a\u4e2a\u65b9\u9762\uff1a\u7528\u6237\u8fdb\u7a0b\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u7684\u521b\u5efa\u4e0e\u5220\u9664\uff0c\u8fdb\u7a0b\u8c03\u5ea6\uff0c\u7528\u4e8e\u8fdb\u7a0b\u540c\u6b65\u3001\u8fdb\u7a0b\u901a\u4fe1\u4e0e\u8fdb\u7a0b\u6b7b\u9501\u5904\u7406\u7684\u673a\u5236\u7b49\u3002","title":"\u8fdb\u7a0b\u7ba1\u7406"},{"location":"operating_system/basic/process_management/#_2","text":"","title":"\u8fdb\u7a0b"},{"location":"operating_system/basic/process_management/#_3","text":"\u8fdb\u7a0b\u662f\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u968f\u7740\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u5b83\u6539\u53d8\u72b6\u6001\u3002\u8fdb\u7a0b\u72b6\u6001\u662f\u7531\u8fdb\u7a0b\u5f53\u524d\u6d3b\u52a8\u5b9a\u4e49\u7684\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5904\u4e8e\u5982\u4e0b\u72b6\u6001\uff1a \u65b0\u7684 \u3001 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u7b49\u5f85 \u3001 \u7ec8\u6b62 \u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u901a\u8fc7\u5b83\u7684 \u8fdb\u7a0b\u63a7\u5236\u5757\uff08PCB\uff09 \u6765\u8868\u793a\u3002","title":"\u8fdb\u7a0b\u6982\u5ff5"},{"location":"operating_system/basic/process_management/#_4","text":"\u8fdb\u7a0b\uff0c\u5f53\u4e0d\u6267\u884c\u65f6\uff0c\u4f4d\u4e8e\u67d0\u4e2a\u7b49\u5f85\u961f\u5217\u3002\u64cd\u4f5c\u7cfb\u7edf\u6709\u4e24\u79cd\u4e3b\u8981\u961f\u5217\uff1a IO\u8bf7\u6c42\u961f\u5217 \u3001 \u5c31\u7eea\u961f\u5217 \u3002\u5c31\u7eea\u961f\u5217\u5305\u62ec\u6240\u6709\u7b49\u5f85\u6267\u884c\u5e76\u7b49\u5f85CPU\u7684\u8fdb\u7a0b\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7528PCB\u6765\u8868\u793a\u3002 \u64cd\u4f5c\u7cfb\u7edf\u5e94\u4ece\u5404\u4e2a\u8c03\u5ea6\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u3002 \u957f\u671f\u8c03\u5ea6 \uff08\u7528\u4e8e\u4f5c\u4e1a\uff09\u9009\u62e9\u8fdb\u7a0b\u4ee5\u4fbf\u7ade\u4e89CPU\u3002\u901a\u5e38\uff0c\u957f\u671f\u8c03\u5ea6\u5145\u5206\u8003\u8651\u8d44\u6e90\u5206\u914d\uff0c\u5c24\u5176\u5185\u5b58\u7ba1\u7406\u3002 \u77ed\u671f\u8c03\u5ea6 \u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u3002","title":"\u8fdb\u7a0b\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_5","text":"\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u4ee5\u4fbf\u7236\u8fdb\u7a0b\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002\u7236\u8fdb\u7a0b\u5728\u7ee7\u7eed\u4e4b\u524d\u53ef\u4ee5\u7b49\u5f85\u5176\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c\u3002\u5141\u8bb8\u5e76\u53d1\u6709\u591a\u4e2a\u539f\u56e0\uff1a\u4fe1\u606f\u5171\u4eab\u3001\u8ba1\u7b97\u52a0\u901f\u3001\u6a21\u5757\u5316\u3001\u65b9\u4fbf\u3002","title":"\u8fdb\u7a0b\u8fd0\u884c"},{"location":"operating_system/basic/process_management/#_6","text":"\u64cd\u4f5c\u7cfb\u7edf\u5185\u7684\u6267\u884c\u8fdb\u7a0b\u53ef\u4ee5\u662f\u72ec\u7acb\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u534f\u4f5c\u7684\u3002\u534f\u4f5c\u8fdb\u7a0b\u9700\u8981\u8fdb\u7a0b\u95f4\u5177\u6709\u76f8\u4e92\u901a\u4fe1\u7684\u673a\u5236\u3002\u901a\u4fe1\u4e3b\u8981\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u5171\u4eab\u5185\u5b58 \u548c \u6d88\u606f\u7cfb\u7edf \u3002 \u5171\u4eab\u5185\u5b58 \uff1a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e9b\u53d8\u91cf\uff0c\u8fdb\u7a0b\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e9b\u5171\u4eab\u53d8\u91cf\u6765\u4ea4\u6362\u4fe1\u606f\u3002\u5bf9\u4e8e\u5171\u4eab\u5185\u5b58\u7cfb\u7edf\uff0c\u63d0\u4f9b\u901a\u4fe1\u7684\u8d23\u4efb\u4e3b\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u5458\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ea\u9700\u8981\u63d0\u4f9b\u5171\u4eab\u5185\u5b58\u3002 \u6d88\u606f\u7cfb\u7edf \uff1a\u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u63d0\u4f9b\u901a\u4fe1\u673a\u5236\u3002 \u4e24\u79cd\u65b9\u6cd5\u76f8\u4e92\u4e0d\u6392\u65a5\uff0c\u53ef\u4ee5\u5728\u7edf\u4e00\u64cd\u4f5c\u7cfb\u7edf\u5185\u540c\u65f6\u5b9e\u73b0\u3002","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1"},{"location":"operating_system/basic/process_management/#ipc","text":"POSIX\u5171\u4eab\u5185\u5b58\u3001Mach\u7684\u6d88\u606f\u4f20\u9012\u3001Windows\u7684ALPC\uff08\u9ad8\u7ea7\u672c\u5730\u7a0b\u5e8f\u8c03\u7528\uff09\u5de5\u5177\u3002","title":"IPC\u7cfb\u7edf\u4f8b\u5b50"},{"location":"operating_system/basic/process_management/#_7","text":"\u5957\u63a5\u5b57 \u3001 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08PRC\uff09 \u3001 \u7ba1\u9053 \u5957\u63a5\u5b57 \uff1a\u5957\u63a5\u5b57\u5b9a\u4e49\u4e3a\u901a\u4fe1\u7684\u7aef\u70b9\u3002\u4e00\u5bf9\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u8fde\u63a5\u7531\u4e00\u5bf9\u5957\u63a5\u5b57\u7ec4\u6210\uff0c\u901a\u4fe1\u7684\u4e24\u7aef\u5404\u6709\u4e00\u4e2a\u5957\u63a5\u5b57\u3002 RPC \uff1a\u662f\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u5206\u5e03\u5f0f\u901a\u4fe1\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u8c03\u7528\u4e00\u4e2a\u8fdc\u7a0b\u5e94\u7528\u7684\u8fc7\u7a0b\u65f6\uff0c\u5c31\u6709\u4e86RPC\u3002 \u7ba1\u9053 \uff1a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u8fdb\u7a0b\u95f4\u76f8\u4e92\u901a\u4fe1\uff0c\u666e\u901a\u7ba1\u9053\u5141\u8bb8\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u547d\u540d\u7ba1\u9053\u5141\u8bb8\u4e0d\u76f8\u5173\u8fdb\u7a0b\u7684\u901a\u4fe1\u3002","title":"\u5ba2\u6237\u673a/\u670d\u52a1\u5668\u901a\u4fe1"},{"location":"operating_system/basic/process_management/#_8","text":"","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b"},{"location":"operating_system/basic/process_management/#_9","text":"\u7ebf\u7a0b\u662f\u8fdb\u7a0b\u5185\u7684\u63a7\u5236\u6d41\u3002\u591a\u7ebf\u7a0b\u8fdb\u7a0b\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u5185\u5305\u62ec\u591a\u4e2a\u4e0d\u540c\u7684\u63a7\u5236\u6d41\u3002\u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u5305\u62ec\uff1a\u7528\u6237\u54cd\u5e94\u7684\u6539\u8fdb\u3001\u8fdb\u7a0b\u5185\u8d44\u6e90\u7684\u5171\u4eab\u3001\u7ecf\u6d4e\u548c\u53ef\u6269\u5c55\u6027\u7684\u56e0\u7d20\uff08\u5982\u66f4\u6709\u6548\u7684\u4f7f\u7528\u591a\u4e2a\u5904\u7406\u6838\uff09\u3002","title":"\u6982\u8ff0"},{"location":"operating_system/basic/process_management/#_10","text":"\u591a\u6838\u7cfb\u7edf\u7684\u5f15\u5165\u4f7f\u5f97 \u5e76\u53d1 \u8868\u793a\u7ebf\u7a0b\u80fd\u591f \u5e76\u884c \u6267\u884c\uff0c\u56e0\u4e3a\u7cfb\u7edf\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u6838\u5206\u914d\u4e00\u4e2a\u5355\u72ec\u7ebf\u7a0b\u3002 \u591a\u6838\u673a\u5236\u5f15\u5165\u7684\u7f16\u7a0b\u6311\u6218\uff1a \u4efb\u52a1\u8bc6\u522b \uff1a\u8fd9\u6d89\u53ca\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\uff0c\u67e5\u627e\u533a\u57df\u4ee5\u4fbf\u5206\u4e3a\u72ec\u7acb\u7684\u3001\u5e76\u53d1\u7684\u4efb\u52a1\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4efb\u52a1\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u591a\u6838\u4e0a\u5e76\u884c\u8fd0\u884c\u3002 \u5e73\u8861 \uff1a\u5728\u8bc6\u522b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u7684\u4efb\u52a1\u65f6\uff0c\u7a0b\u5e8f\u5458\u8fd8\u9700\u786e\u4fdd\u4efb\u52a1\u6267\u884c\u540c\u7b49\u4ef7\u503c\u7684\u5de5\u4f5c\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6709\u7684\u4efb\u52a1\u4e0e\u5176\u4ed6\u4efb\u52a1\u76f8\u6bd4\uff0c\u53ef\u80fd\u5bf9\u6574\u4e2a\u4efb\u52a1\u7684\u8d21\u732e\u5e76\u4e0d\u591a\uff1b\u91c7\u7528\u5355\u72ec\u6838\u6765\u6267\u884c\u6574\u4e2a\u4efb\u52a1\u5c31\u4e0d\u503c\u5f97\u4e86\u3002 \u6570\u636e\u5206\u5272 \uff1a\u6b63\u5982\u5e94\u7528\u7a0b\u5e8f\u8981\u5206\u4e3a\u5355\u72ec\u4efb\u52a1\uff0c\u6709\u4efb\u52a1\u8bbf\u95ee\u548c\u64cd\u4f5c\u7684\u6570\u636e\u4e5f\u5e94\u5212\u5206\u4ee5\u4fbf\u8fd0\u884c\u5728\u5355\u72ec\u7684\u6838\u4e0a\u3002 \u6570\u636e\u4f9d\u8d56 \uff1a\u4efb\u52a1\u8bbf\u95ee\u7684\u6570\u636e\u5fc5\u987b\u5206\u6790\u591a\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5f53\u4e00\u4e2a\u4efb\u52a1\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u6570\u636e\u65f6\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u786e\u4fdd\u4efb\u52a1\u6267\u884c\u662f\u540c\u6b65\u7684\uff0c\u4ee5\u9002\u5e94\u6570\u636e\u4f9d\u8d56\u6027\u3002 \u6d4b\u8bd5\u4e0e\u8c03\u8bd5 \uff1a\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5e76\u884c\u8fd0\u884c\u4e8e\u591a\u6838\u65f6\uff0c\u53ef\u80fd\u4ea7\u751f\u8bb8\u591a\u4e0d\u540c\u7684\u6267\u884c\u8def\u5f84\u3002\u6d4b\u8bd5\u4e0e\u8c03\u8bd5\u8fd9\u6837\u7684\u5e76\u53d1\u7a0b\u5e8f\u6bd4\u6d4b\u8bd5\u548c\u8c03\u8bd5\u5355\u7ebf\u7a0b\u7684\u5e94\u7528\u7a0b\u5e8f\u96be\u5ea6\u5927\u5f97\u591a\u3002 \u901a\u5e38\uff0c\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5e76\u884c\uff1a \u6570\u636e\u5e76\u884c \u548c \u4efb\u52a1\u5e76\u884c \u3002 \u6570\u636e\u5e76\u884c \uff1a\u5c06\u6570\u636e\u5206\u5e03\u5728\u76f8\u540c\u7684\u8ba1\u7b97\u6838\u4e0a\uff0c\u5e76\u5728\u6bcf\u4e2a\u6838\u4e0a\u6267\u884c\u76f8\u540c\u64cd\u4f5c\uff1b \u4efb\u52a1\u5e76\u884c \uff1a\u5c06\u4efb\u52a1\uff08\u7ebf\u7a0b\uff09\u800c\u4e0d\u662f\u6570\u636e\u5206\u914d\u5230\u591a\u4e2a\u8ba1\u7b97\u6838\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u4e00\u4e2a\u72ec\u7279\u7684\u64cd\u4f5c\u3002","title":"\u591a\u6838\u7f16\u7a0b"},{"location":"operating_system/basic/process_management/#_11","text":"\u7528\u6237\u7ebf\u7a0b \uff08user thread\uff09\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u53ef\u89c1\u7684\uff0c\u5bf9\u5185\u6838\u5219\u662f\u672a\u77e5\u7684\u3002\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u548c\u7ba1\u7406 \u5185\u6838\u7ea7\u7ebf\u7a0b \uff08kernel thread\uff09\u3002\u901a\u5e38\uff0c\u7528\u6237\u7ebf\u7a0b\u4e0e\u5185\u6838\u7ebf\u7a0b\u76f8\u6bd4\uff0c\u521b\u5efa\u548c\u7ba1\u7406\u8981\u66f4\u5feb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u5185\u6838\u5e72\u9884\u3002 \u4e09\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\u5173\u8054\u7528\u6237\u7ebf\u7a0b\u548c\u5185\u6838\u7ebf\u7a0b \u591a\u5bf9\u4e00\u6a21\u578b \uff1a\u5c06\u591a\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b \u4e00\u5bf9\u4e00\u6a21\u578b \uff1a\u5c06\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5bf9\u5e94\u7684\u5185\u6838\u7ebf\u7a0b \u591a\u5bf9\u591a\u6a21\u578b \uff1a\u5c06\u591a\u4e2a\u7528\u6237\u7ebf\u7a0b\u5728\u540c\u6837\uff08\u6216\u66f4\u5c11\uff09\u6570\u91cf\u7684\u5185\u6838\u7ebf\u7a0b\u4e4b\u95f4\u5207\u6362 \u4ee5\u4e0a\u8bbe\u8ba1\u5bf9\u5e76\u53d1\u6027\u7684\u5f71\u54cd \u867d\u7136\u591a\u5bf9\u4e00\u6a21\u578b\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\uff0c\u4f46\u7531\u4e8e\u5185\u6838\u53ea\u80fd\u4e00\u6b21\u8c03\u5ea6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u4ee5\u5e76\u672a\u589e\u52a0\u5e76\u53d1\u6027\u3002\u867d\u7136\u4e00\u5bf9\u4e00\u6a21\u578b\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u5e76\u53d1\u6027\uff0c\u4f46\u662f\u5f00\u53d1\u4eba\u5458\u4e0d\u5b9c\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u521b\u5efa\u592a\u591a\u7ebf\u7a0b\uff08\u6709\u65f6\u7cfb\u7edf\u53ef\u80fd\u4f1a\u9650\u5236\u521b\u5efa\u7ebf\u7a0b\u7684\u6570\u91cf\uff09\u3002\u591a\u5bf9\u591a\u6a21\u578b\u6ca1\u6709\u8fd9\u4e24\u4e2a\u7f3a\u70b9\uff1a\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\uff0c\u5e76\u4e14\u76f8\u5e94\u5185\u6838\u7ebf\u7a0b\u80fd\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u5e76\u53d1\u6267\u884c\u3002\u800c\u4e14\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5185\u6838\u53ef\u4ee5\u8c03\u5ea6\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u3002 \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982Windows\u3001Mac OS X\u3001Linux\u548cSolaris\u7b49\uff0c\u90fd\u5bf9\u7ebf\u7a0b\u63d0\u4f9b\u5185\u6838\u652f\u6301\u3002","title":"\u591a\u7ebf\u7a0b\u6a21\u578b"},{"location":"operating_system/basic/process_management/#_12","text":"\u7ebf\u7a0b\u5e93\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u521b\u5efa\u548c\u7ba1\u7406\u7ebf\u7a0b\u7684API\u3002\u5e38\u7528\u7684\u4e3b\u8981\u7ebf\u7a0b\u5e93\u6709\u4e09\u4e2a\uff1a POSIX Pthreads \u3001 Windows\u7ebf\u7a0b \u548c Java\u7ebf\u7a0b \u3002","title":"\u7ebf\u7a0b\u5e93"},{"location":"operating_system/basic/process_management/#_13","text":"\u9664\u4e86\u91c7\u7528\u7ebf\u7a0b\u5e93API\u6765\u663e\u5f0f\u521b\u5efa\u7ebf\u7a0b\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9690\u5f0f\u7ebf\u7a0b\uff0c\u8fd9\u79cd\u7ebf\u7a0b\u7684\u521b\u5efa\u548c\u7ba1\u7406\u4ea4\u7531\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u5e93\u6765\u5b8c\u6210\u3002\u9690\u5f0f\u7ebf\u7a0b\u65b9\u6cd5\u5305\u62ec\uff1a \u7ebf\u7a0b\u6c60 \u3001 OpenMP \u548c Grand Central Dispatch \u7b49\u3002","title":"\u9690\u5f0f\u591a\u7ebf\u7a0b"},{"location":"operating_system/basic/process_management/#_14","text":"\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e3a\u7a0b\u5e8f\u5458\u5e26\u6765\u4e86\u8bb8\u591a\u6311\u6218\uff0c\u5305\u62ec fork() \u548c exec() \u7cfb\u7edf\u8c03\u7528\u7684\u8bed\u4e49\u3002\u5176\u4ed6\u95ee\u9898\u5305\u62ec \u4fe1\u53f7\u5904\u7406 \u3001 \u7ebf\u7a0b\u64a4\u9500 \u3001 \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 \u548c \u8c03\u5ea6\u6fc0\u6d3b \u7b49","title":"\u591a\u7ebf\u7a0b\u95ee\u9898"},{"location":"operating_system/basic/process_management/#_15","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50"},{"location":"operating_system/basic/process_management/#windows","text":"\u6bcf\u4e2aWindows\u5e94\u7528\u7a0b\u5e8f\u6309\u5355\u72ec\u8fdb\u7a0b\u6765\u8fd0\u884c\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u62ec\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u3002Windows\u4f7f\u7528\u4e00\u5bf9\u4e00\u6620\u5c04\uff0c\u5373\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u76f8\u5173\u7684\u5185\u6838\u7ebf\u7a0b\u3002 \u7ebf\u7a0b\u4e00\u822c\u5305\u62ec\u5982\u4e0b\u90e8\u4ef6\uff1a \u7ebf\u7a0bID - \u7528\u4e8e\u552f\u4e00\u6807\u8bc6\u7ebf\u7a0b\u3002 \u5bc4\u5b58\u5668\u7ec4 - \u7528\u4e8e\u8868\u793a\u5904\u7406\u5668\u72b6\u6001\u3002 \u5806\u6808 - \u7528\u6237\u5806\u6808 \uff0c\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff1b \u5185\u6838\u5806\u6808 \uff0c\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002 \u79c1\u6709\u5b58\u50a8\u533a\u57df - \u7528\u4e8e\u5404\u79cd\u8fd0\u884c\u65f6\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u5e93\uff08DLL\uff09\u3002 \u5bc4\u5b58\u5668\u7ec4\u3001\u5806\u6808\u548c\u79c1\u6709\u5b58\u50a8\u533a\u57df\uff0c\u901a\u5e38\u79f0\u4e3a \u7ebf\u7a0b\u4e0a\u4e0b\u6587 \uff08context\uff09 \u7ebf\u7a0b\u7684\u4e3b\u8981\u6570\u636e\u7ed3\u6784\uff1a ETHREAD \uff1a\u6267\u884c\u7ebf\u7a0b\u5feb\u3002\u5305\u62ec\u6240\u5c5e\u8fdb\u7a0b\u6307\u9488\u3001\u7ebf\u7a0b\u63a7\u5236\u5f00\u59cb\u7684\u7a0b\u5e8f\u7684\u5730\u5740\u4ee5\u53ca\u5bf9\u5e94\u7684KTHREAD\u7684\u6307\u9488\u7b49\u3002 KTHREAD \uff1a\u5185\u6838\u7ebf\u7a0b\u5feb\u3002\u5305\u62ec\u7ebf\u7a0b\u7684\u8c03\u5ea6\u548c\u540c\u6b65\u4fe1\u606f\u3002\u53e6\u5916\uff0cKTHREAD\u4e5f\u5305\u62ec\u5185\u6838\u5806\u6808\uff08\u4ee5\u4f9b\u7ebf\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff09\u548cTEB\u7684\u6307\u9488\u3002 TEB \uff1a\u7ebf\u7a0b\u73af\u5883\u5757","title":"Windows\u7ebf\u7a0b"},{"location":"operating_system/basic/process_management/#linux","text":"\u7cfb\u7edf\u8c03\u7528 fork() \uff1a\u8fdb\u7a0b\u590d\u5236\u7684\u4f20\u7edf\u529f\u80fd \u7cfb\u7edf\u8c03\u7528 clone() \uff1a\u521b\u5efa\u7ebf\u7a0b Linux\u5728\u8ba8\u8bba\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u65f6\uff0c\u5e38\u91c7\u7528\u4efb\u52a1\uff08task\uff09\u4e00\u8bcd\uff0c\u800c\u975e\u8fdb\u7a0b\uff08process\uff09\u6216\u7ebf\u7a0b\uff08thread\uff09\u3002","title":"Linux\u7ebf\u7a0b"},{"location":"operating_system/basic/process_management/#_16","text":"","title":"\u8fdb\u7a0b\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_17","text":"CPU\u8c03\u5ea6\u7684\u4efb\u52a1\u662f\uff0c\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b49\u5f85\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u5176\u5206\u914dCPU\u3002\u8c03\u5ea6\u7a0b\u5e8f\u5206\u914dCPU\u5230\u9009\u4e2d\u7684\u8fdb\u7a0b\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"operating_system/basic/process_management/#_18","text":"CPU\u4f7f\u7528\u7387 \uff1a\u5e94\u4f7fCPU\u5c3d\u53ef\u80fd\u5730\u5fd9\u788c\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0cCPU\u4f7f\u7528\u7387\u4ece 0% 0% \u5230 100% 100% \u3002\u5bf9\u4e8e\u4e00\u4e2a\u5b9e\u9645\u7cfb\u7edf\uff0c\u4ed6\u7684\u8303\u56f4\u5e94\u4ece\u548c 40% 40% \uff08\u8f7b\u590d\u6838\u7cfb\u7edf\uff09\u5230 90% 90% \uff08\u91cd\u7b26\u5408\u7cfb\u7edf\uff09\u3002 \u541e\u5410\u91cf \uff1a\u5982\u679cCPU\u5fd9\u4e8e\u6267\u884c\u8fdb\u7a0b\uff0c\u90a3\u4e48\u5de5\u4f5c\u5c31\u5728\u5b8c\u6210\u3002\u4e00\u79cd\u6d4b\u91cf\u5de5\u4f5c\u7684\u65b9\u6cd5\u79f0\u4e3a \u541e\u5410\u91cf \uff08throughput\uff09\uff0c\u5b83\u662f\u5728\u4e00\u4e2a\u65f6\u95f4\u5355\u5143\u5185\u8fdb\u57ce\u5b8c\u6210\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u957f\u8fdb\u7a0b\uff0c\u541e\u5410\u91cf\u53ef\u80fd\u4e3a\u6bcf\u5c0f\u65f6\u4e00\u4e2a\u8fdb\u7a0b\uff1b\u5bf9\u4e8e\u77ed\u8fdb\u7a0b\uff0c\u541e\u571f\u91cf\u53ef\u80fd\u4e3a\u6bcf\u79d2\u662f\u4e2a\u8fdb\u7a0b\u3002 \u5468\u8f6c\u65f6\u95f4 \uff1a\u4ece\u4e00\u4e2a\u7279\u5b9a\u8fdb\u7a0b\u7684\u89d2\u5ea6\u770b\uff0c\u4e00\u4e2a\u91cd\u8981\u51c6\u5219\u662f\u8fd0\u884c\u8fd9\u4e2a\u8fdb\u7a0b\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u4ece\u8fdb\u7a0b\u63d0\u4ea4\u5230\u8fdb\u57ce\u5b8c\u6210\u7684\u65f6\u95f4\u6bb5\u79f0\u4e3a\u5468\u8f6c\u65f6\u95f4\uff08turnaround time\uff09\u3002\u5468\u8f6c\u65f6\u95f4\u4e3a\u6240\u6709\u65f6\u95f4\u6bb5\u4e4b\u548c\uff0c\u5305\u62ec\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165\u5185\u5b58\u3001\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u7b49\u5f85\u3001\u5728CPU\u4e0a\u6267\u884c\u548cI/O\u6267\u884c\u3002 \u7b49\u5f85\u65f6\u95f4 \uff1aCPU\u8c03\u5ea6\u7b97\u6cd5\u5e76\u4e0d\u5f71\u54cd\u8fdb\u7a0b\u8fd0\u884c\u548c\u6267\u884cI/O\u7684\u65f6\u95f4\uff0c\u5b83\u53ea\u5f71\u54cd\u8fdb\u7a0b\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u56e0\u7b49\u5f85\u6240\u9700\u7684\u65f6\u95f4\u3002\u7b49\u5f85\u65f6\u95f4\u4e3a\u5728\u5c31\u7eea\u961f\u5217\u4e2d\u7b49\u5f85\u6240\u82b1\u65f6\u95f4\u4e4b\u548c\u3002 \u54cd\u5e94\u65f6\u95f4 \uff1a\u5bf9\u4e8e\u4ea4\u4e92\u7cfb\u7edf\uff0c\u5468\u8f6c\u65f6\u95f4\u4e0d\u662f\u6700\u4f73\u51c6\u5219\u3002\u901a\u5e38\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u76f8\u5f53\u65e9\u5730\u4ea7\u751f\u8f93\u51fa\uff0c\u5e76\u4e14\u7ee7\u7eed\u8ba1\u7b97\u65b0\u7684\u7ed3\u679c\u540c\u65f6\u8f93\u51fa\u4ee5\u524d\u7684\u7ed3\u679c\u7ed9\u7528\u6237\u3002\u56e0\u6b64\uff0c\u53e6\u4e00\u65f6\u95f4\u662f\u4ece\u63d0\u4ea4\u8bf7\u6c42\u5230\u4ea7\u751f\u7b2c\u4e00\u54cd\u5e94\u7684\u65f6\u95f4\u3002\u8fd9\u79cd\u65f6\u95f4\u79f0\u4e3a\u54cd\u5e94\u65f6\u95f4\uff0c\u662f\u5f00\u59cb\u76f8\u5e94\u6240\u9700\u7684\u65f6\u95f4\uff0c\u800c\u975e\u8f93\u51fa\u76f8\u5e94\u6240\u9700\u7684\u65f6\u95f4\u3002\u5468\u8f6c\u65f6\u95f4\u901a\u5e38\u53d7\u8f93\u51fa\u8bbe\u5907\u901f\u5ea6\u7684\u9650\u5236\u3002","title":"\u8c03\u5ea6\u51c6\u5219"},{"location":"operating_system/basic/process_management/#_19","text":"CPU\u8c03\u5ea6\u5904\u7406\u7684\u95ee\u9898\u662f\uff1a\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u8fdb\u7a0b\u4ee5\u4fbf\u4e3a\u5176\u5206\u914dCPU\u3002","title":"\u8c03\u5ea6\u7b97\u6cd5"},{"location":"operating_system/basic/process_management/#_20","text":"First-Come First-Served, FCFS\uff0c\u6700\u7b80\u5355\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u4f46\u5b83\u4f1a\u8ba9\u6bb5\u8fdb\u57ce\u7b49\u5f85\u5f88\u957f\u7684\u8fdb\u7a0b\u3002","title":"\u5148\u5230\u5148\u670d\u52a1"},{"location":"operating_system/basic/process_management/#_21","text":"Shortest-Job-First, SJF\uff0c\u5728\u6700\u77ed\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u610f\u4e49\u4e0a\u662f\u6700\u4f73\u7684\u3002 \u7136\u800c\uff0cSJF\u8c03\u5ea6\u5b9e\u73b0\u7684\u96be\u70b9\u5728\u4e8e\u9884\u6d4b\u4e0b\u4e00\u4e2aCPU\u6267\u884c\u7684\u957f\u5ea6\u3002","title":"\u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_22","text":"Priority-Scheduling\uff0cSJF\u7b97\u6cd5\u662f\u901a\u7528\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\uff08\u7b80\u5355\u5206\u914dCPU\u5230\u5177\u6709\u6700\u4f18\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\uff09\u7684\u4e00\u4e2a\u7279\u4f8b\u3002 \u4f18\u5148\u7ea7\u548cSJF\u7684\u8c03\u5ea6\u53ef\u80fd\u4ea7\u751f\u9965\u997f\uff0c\u8001\u5316\u6280\u672f\u963b\u6b62\u9965\u997f\u3002","title":"\u4f18\u5148\u7ea7\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_23","text":"Round-Robin, RR\uff0c\u66f4\u9002\u5408\u4e8e\u5206\u65f6\uff08\u4ea4\u4e92\uff09\u7cfb\u7edf\u3002RR\u8c03\u5ea6\u4e3a\u5c31\u7eea\u961f\u5217\u7684\u9996\u4e2a\u8fdb\u7a0b\uff0c\u5206\u914d q q \u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u8fd9\u91cc q q \u662f\u65f6\u95f4\u7247\u3002\u5728 q q \u4e2a\u65f6\u95f4\u5355\u4f4d\u4e4b\u540e\uff0c\u5982\u679c\u8be5\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u91ca\u653eCPU\uff0c\u90a3\u4e48\u5b83\u88ab\u5f3a\u5360\u5e76\u6dfb\u52a0\u5230\u5c31\u7eea\u961f\u5217\u5c3e\u90e8\u3002 \u8be5\u7b97\u6cd5\u7684\u4e3b\u8981\u95ee\u9898\u662f\u9009\u62e9\u65f6\u95f4\u7247\u3002\u5982\u679c\u65f6\u95f4\u7247\u592a\u5927\uff0c\u90a3\u4e48RR\u7b97\u6cd5\u5c31\u53d8\u6210\u4e86FCFS\u7b97\u6cd5\uff1b\u5982\u679c\u65f6\u95f4\u7247\u592a\u5c0f\uff0c\u90a3\u4e48\u6709\u4e0a\u4e0b\u6587\u5207\u6362\u5f15\u8d77\u7684\u8c03\u5ea6\u5f00\u9500\u5c31\u8fc7\u5927\u3002 FCFS\u7b97\u6cd5\u662f\u975e\u62a2\u5360\u7684\uff0c\u800cRR\u7b97\u6cd5\u662f\u62a2\u5360\u7684\u3002SJF\u548c\u4f18\u5148\u7ea7\u7b97\u6cd5\u53ef\u4ee5\u662f\u62a2\u5360\u7684\u4e5f\u53ef\u4ee5\u662f\u975e\u62a2\u5360\u7684\u3002","title":"\u8f6e\u8f6c\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_24","text":"Multilevel queue scheduling\uff0c\u5141\u8bb8\u591a\u4e2a\u4e0d\u540c\u7b97\u6cd5\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u8fdb\u7a0b\u3002\u6700\u5e38\u7528\u6a21\u578b\u5305\u62ec\uff1a\u4f7f\u7528RR\u8c03\u5ea6\u7684 \u524d\u53f0\u4ea4\u4e92\u961f\u5217 \u4e0e\u4f7f\u7528FCFS\u8c03\u5ea6\u7684 \u540e\u53f0\u6279\u5904\u7406\u961f\u5217 \u3002","title":"\u591a\u7ea7\u961f\u5217\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_25","text":"Multilevel feedback queue scheduling\uff0c\u591a\u53ca\u53cd\u9988\u961f\u5217\u5141\u8bb8\u8fdb\u7a0b\u5728\u961f\u5217\u4e4b\u95f4\u8fc1\u79fb\u3002","title":"\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_26","text":"\u5728\u652f\u6301\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5185\u6838\u7ea7\u7ebf\u7a0b\uff08\u800c\u4e0d\u662f\u8fdb\u7a0b\uff09\u624d\u662f\u64cd\u4f5c\u7cfb\u7edf\u6240\u8c03\u5ea6\u7684\u3002\u7528\u6237\u7ea7\u7ebf\u7a0b\u662f\u7531\u7ebf\u7a0b\u5e93\u6765\u7ba1\u7406\u7684\uff0c\u800c\u5185\u6838\u5e76\u4e0d\u77e5\u9053\u5b83\u4eec\u3002\u7528\u6237\u7ebf\u7a0b\u4e3a\u4e86\u8fd0\u884c\u5728CPU\u4e0a\uff0c\u6700\u7ec8\u5e94\u6620\u5c04\u5230\u76f8\u5173\u7684\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u4f46\u8fd9\u79cd\u6620\u5c04\u53ef\u80fd\u4e0d\u662f\u76f4\u63a5\u7684\uff0c\u53ef\u80fd\u91c7\u7528 \u8f7b\u91cf\u7ea7\u8fdb\u7a0b\uff08LWP\uff09 \u3002","title":"\u7ebf\u7a0b\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_27","text":"\u8bb8\u591a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u591a\u5904\u7406\u5668\uff0c\u5e76\u5141\u8bb8\u6bcf\u4e2a\u5904\u7406\u5668\u72ec\u7acb\u8c03\u5ea6\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u7ef4\u62a4\u5404\u81ea\u7684\u3001\u79c1\u6709\u7684\u3001\u53ef\u8fd0\u884c\u7684\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u961f\u5217\u3002\u4e0e\u591a\u5904\u7406\u5668\u8c03\u5ea6\u76f8\u5173\u7684\u95ee\u9898\u5305\u62ec\u5904\u7406\u5668\u4eb2\u548c\u6027\u3001\u8d1f\u8f7d\u5e73\u8861\u548c\u591a\u6838\u5904\u7406\u7b49\u3002","title":"\u591a\u5904\u7406\u5668\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#cpu","text":"\u5b9e\u65f6\u8ba1\u7b97\u673a\u7cfb\u7edf\u8981\u6c42\u5728\u622a\u6b62\u671f\u9650\u4e4b\u524d\u5f97\u5230\u7ed3\u679c\uff1b\u5728\u622a\u6b62\u671f\u9650\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662f\u65e0\u7528\u7684\u3002 \u786c\u5b9e\u65f6\u7cfb\u7edf \uff08hard read-time system\uff09\u5e94\u4fdd\u8bc1\uff0c\u5b9e\u65f6\u4efb\u52a1\u5728\u622a\u6b62\u671f\u9650\u5185\u5f97\u5230\u670d\u52a1\u3002 \u8f6f\u5b9e\u65f6\u7cfb\u7edf \uff08soft read-time system\uff09\u7684\u9650\u5236\u8f83\u5c11\uff0c\u5206\u914d\u7ed9\u5b9e\u65f6\u4efb\u52a1\u7684\u8c03\u5ea6\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5176\u4ed6\u670d\u52a1\u3002 \u5b9e\u65f6\u8c03\u5ea6\u7b97\u6cd5\u5305\u62ec \u5355\u8c03\u901f\u7387 \uff08rate-monotonic\uff09\u548c \u6700\u65e9\u622a\u6b62\u4f18\u5148 \uff08Earliest-Deadline-First, EDF\uff09\u8c03\u5ea6\u3002\u5355\u8c03\u901f\u7387\u8c03\u5ea6\u901a\u5e38\u4e3a\u9700\u8981\u66f4\u591aCPU\u7684\u4efb\u52a1\uff0c\u5206\u914d\u66f4\u9ad8\u4f18\u5148\u7ea7\u3002\u6700\u65e9\u622a\u6b62\u4f18\u5148\u961f\u5217\u6839\u636e\u5373\u5c06\u5230\u6765\u7684\u622a\u6b62\u671f\u9650\u6765\u5206\u914d\u4f18\u5148\u7ea7\uff1b\u622a\u6b62\u671f\u9650\u8d8a\u65e9\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002 \u6bd4\u4f8b\u5206\u4eab\u8c03\u5ea6 \uff08proportional share\uff09\u5c06\u5904\u7406\u5668\u65f6\u95f4\u5212\u5206\u4e3a\u80a1\u4efd\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u6570\u91cf\u7684\u4efd\u989d\uff0c\u4ece\u800c\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u5177\u6709\u6309\u6bd4\u4f8b\u7684CPU\u65f6\u95f4\u4efd\u989d\u3002 POSIX\u548cPthreads API\u4e3a\u5b9e\u65f6\u8c03\u5ea6\u7ebf\u7a0b\uff0c\u4e5f\u63d0\u4f9b\u5404\u79cd\u7279\u5f81\u3002","title":"\u5b9e\u65f6CPU\u8c03\u5ea6"},{"location":"operating_system/basic/process_management/#_28","text":"\u652f\u6301\u5185\u6838\u7ea7\u7ebf\u7a0b\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e94\u8c03\u5ea6\u6267\u884c\u7ebf\u7a0b\uff08\u800c\u4e0d\u662f\u8fdb\u7a0b\uff09\u3002Solaris\u548cWindows\u5c31\u662f\u8fd9\u6837\u7684\u7cfb\u7edf\u3002\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u90fd\u901a\u8fc7\u57fa\u4e8e\u62a2\u5360\u7684\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u6765\u8c03\u5ea6\u7ebf\u7a0b\uff0c\u5305\u62ec\u652f\u6301\u5b9e\u65f6\u7ebf\u7a0b\u3002Linux\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f\u4f7f\u7528\u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u7b97\u6cd5\uff0c\u4e5f\u63d0\u4f9b\u5b9e\u65f6\u652f\u6301\u3002\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u8c03\u5ea6\u7b97\u6cd5\u901a\u5e38\u504f\u5411\u652f\u6301\u4ea4\u4e92\u5f0f\u8fdb\u7a0b\uff08\u800c\u975eCPU\u5bc6\u96c6\u578b\u7ee7\u627f\uff09\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u4f8b\u5b50"},{"location":"operating_system/basic/process_management/#_29","text":"\u5404\u79cd\u5404\u6837\u7684\u8c03\u5ea6\u7b97\u6cd5\u8981\u6c42\u6709\u9009\u62e9\u7b97\u6cd5\u7684\u65b9\u6cd5\u3002\u5206\u6790\u65b9\u6cd5\u4f7f\u7528 \u6570\u5b66\u5206\u6790 \u6cd5\u4ee5\u786e\u5b9a\u7b97\u6cd5\u6027\u80fd\u3002 \u4eff\u771f \u65b9\u6cd5\u5bf9\u4ee3\u8868\u6027\u7684\u8fdb\u7a0b\uff0c\u91c7\u7528\u8c03\u5ea6\u7b97\u6cd5\u4eff\u771f\uff0c\u5e76\u8ba1\u7b97\u6027\u80fd\uff0c\u8fdb\u800c\u786e\u5b9a\u4f18\u52a3\u3002\u7136\u800c\uff0c\u4eff\u771f\u6700\u591a\u53ea\u80fd\u63d0\u4f9b\u771f\u5b9e\u7cfb\u7edf\u6027\u80fd\u7684\u8fd1\u4f3c\u503c\u3002\u8bc4\u4f30\u8c03\u5ea6\u7b97\u6cd5\u7684\u552f\u4e00\u53ef\u9760\u6280\u672f\u662f\uff1a\u5728\u5b9e\u9645\u7cfb\u7edf\u4e0a\u5b9e\u73b0\u7b97\u6cd5\uff0c\u5e76\u5728\u201c\u73b0\u5b9e\u4e16\u754c\u201d\u73af\u5883\u4e2d\u76d1\u89c6\u6027\u80fd\u3002","title":"\u7b97\u6cd5\u8bc4\u4f30"},{"location":"operating_system/basic/process_management/#_30","text":"\u534f\u4f5c\u8fdb\u7a0b \uff08cooperating process\uff09\u80fd\u4e0e\u7cfb\u7edf\u5185\u7684\u5176\u4ed6\u8fdb\u7a0b\u76f8\u4e92\u5f71\u54cd\u3002\u534f\u4f5c\u8fdb\u7a0b\u6216\u80fd\u76f4\u63a5\u5171\u4eab\u903b\u8f91\u5730\u5740\u7a7a\u95f4\uff08\u5373\u4ee3\u7801\u548c\u6570\u636e\uff09\uff0c\u6216\u80fd\u901a\u8fc7\u6587\u4ef6\u6216\u6d88\u606f\u6765\u5171\u4eab\u6570\u636e\u3002\u524d\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7\u7ebf\u7a0b\u6765\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u5171\u4eab\u6570\u636e\u7684\u5e76\u53d1\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u7684\u4e0d\u4e00\u81f4\u3002\u8fd9\u4e00\u8282\u8ba8\u8bba\u591a\u79cd\u673a\u5236\uff0c\u4ee5\u4fbf\u786e\u4fdd\u540c\u4e00\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u7684\u534f\u4f5c\u8fdb\u7a0b\u7684\u6709\u5e8f\u6267\u884c\uff0c\u4ece\u800c\u7ef4\u62a4\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"\u540c\u6b65"},{"location":"operating_system/basic/process_management/#_31","text":"\u7ade\u4e89\u6761\u4ef6 \uff08race condition\uff09\uff1a\u591a\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8bbf\u95ee\u548c\u64cd\u4f5c\u540c\u4e00\u6570\u636e\u5e76\u4e14\u6267\u884c\u7ed3\u679c\u4e0e\u7279\u5b9a\u8bbf\u95ee\u987a\u5e8f\u6709\u5173\u3002 \u7531\u4e8e\u7ade\u4e89\u6761\u4ef6\u7684\u5b58\u5728\uff0c\u6211\u4eec\u5206\u6790 \u8fdb\u7a0b\u540c\u6b65 \uff08process synchronization\uff09\u548c \u8fdb\u7a0b\u534f\u8c03 \uff08process coordination\uff09\u3002","title":"\u80cc\u666f"},{"location":"operating_system/basic/process_management/#_32","text":"\u5047\u8bbe\u67d0\u4e2a\u7cfb\u7edf\u6709 n n \u4e2a\u8fdb\u7a0b {P_0, P_1, ..., P_{n-1}} {P_0, P_1, ..., P_{n-1}} \u3002\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u6bb5\u4ee3\u7801\uff0c\u79f0\u4e3a \u4e34\u754c\u533a \uff08critical section\uff09\uff0c\u8fdb\u7a0b\u5728\u6267\u884c\u8be5\u533a\u65f6\u53ef\u80fd\u4fee\u6539\u516c\u5171\u53d8\u91cf\u3001\u66f4\u65b0\u4e00\u4e2a\u8868\u3001\u5199\u4e00\u4e2a\u6587\u4ef6\u7b49\u3002\u8be5\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u5185\u6267\u884c\u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u5728\u5404\u81ea\u7684\u4e34\u754c\u533a\u6267\u884c\u3002 \u4e34\u754c\u533a\u95ee\u9898 \uff08ciritical-section problem\uff09\u662f\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u534f\u8bae\u4ee5\u4fbf\u534f\u4f5c\u8fdb\u7a0b\u3002\u5728\u8fdb\u5165\u4e34\u754c\u533a\u524d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5e94\u8bf7\u6c42\u8bb8\u53ef\u3002\u5b9e\u73b0\u8fd9\u4e00\u8bf7\u6c42\u7684\u4ee3\u7801\u6bb5\u79f0\u4e3a \u8fdb\u5165\u533a \uff08entry section\uff09\u3002\u4e34\u754c\u533a\u4e4b\u540e\u53ef\u4ee5\u6709 \u9000\u51fa\u533a \uff08exit-section\uff09\uff0c\u5176\u4ed6\u4ee3\u7801\u4e3a \u5269\u4f59\u533a \uff08remainder section\uff09\u3002\u4e00\u4e2a\u5178\u578b\u8fdb\u7a0b P_i P_i \u7684\u901a\u7528\u7ed3\u6784\u5982\u4e0b\u5982\u6240\u793a\uff1a \u4e34\u754c\u533a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5e94\u6ee1\u8db3\u5982\u4e0b\u4e09\u6761\u8981\u6c42\uff1a \u4e92\u65a5 \uff08mutual exclusion\uff09\uff1a\u5982\u679c\u8fdb\u7a0b P_i P_i \u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\uff0c\u90a3\u4e48\u5176\u5b83\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\u3002 \u8fdb\u6b65 \uff08progress\uff09\uff1a\u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\u5e76\u4e14\u6709\u8fdb\u7a0b\u9700\u8981\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u90a3\u4e48\u53ea\u6709\u90a3\u4e9b\u4e0d\u5728\u5269\u4f59\u533a\u5185\u6267\u884c\u7684\u8fdb\u7a0b\u53ef\u4f5c\u5907\u9009\uff0c\u4ee5\u4fbf\u786e\u5b9a\u8c01\u80fd\u4e0b\u6b21\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u800c\u4e14\u8fd9\u79cd\u9009\u62e9\u4e0d\u80fd\u65e0\u9650\u63a8\u8fdf\u3002 \u6709\u9650\u7b49\u5f85 \uff08bounded waiting\uff09\uff1a\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u505a\u51fa\u8fdb\u5165\u4e34\u754c\u533a\u7684\u8bf7\u6c42\u76f4\u5230\u8fd9\u4e2a\u8bf7\u6c42\u5141\u8bb8\u4e3a\u6b62\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5141\u8bb8\u8fdb\u5165\u4e34\u754c\u533a\u7684\u6b21\u6570\u5177\u6709\u4e0a\u9650\u3002 Peterson\u89e3\u51b3\u65b9\u6848 \u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u57fa\u4e8e\u8f6f\u4ef6\u7684\u4e34\u754c\u533a\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u3002\u6ee1\u8db3\u4e92\u65a5\u3001\u8fdb\u6b65\u3001\u6709\u9650\u7b49\u5f85\u7b49\u8981\u6c42\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u590d\u6742\u6027\u8981\u6c42\u3002","title":"\u4e34\u754c\u533a\u95ee\u9898"},{"location":"operating_system/basic/process_management/#_33","text":"\u5bf9\u4e8e\u4e34\u754c\u533a\u95ee\u9898\uff0c\u57fa\u4e8e\u8f6f\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\uff08\u5982Peterson\u89e3\u7b54\uff09\u5e76\u4e0d\u4fdd\u8bc1\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0a\u6b63\u786e\u5de5\u4f5c\u3002 \u4e0b\u9762\u63a2\u8ba8\u4e00\u4e9b\u5176\u4ed6\u89e3\u7b54\uff0c\u5305\u62ec\u5185\u6838\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5458\u91c7\u7528\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6API\u6280\u672f\u3002\u6240\u6709\u8fd9\u4e9b\u7686\u5927\u90fd\u662f\u57fa\u4e8e \u52a0\u9501 \uff08locking\uff09\u4e3a\u524d\u63d0\u7684\uff0c\u5373\u901a\u8fc7\u9501\u6765\u4fdd\u62a4\u4e34\u754c\u533a\u3002 \u7b80\u5355\u5730 \u7981\u6b62\u4e2d\u65ad \u53ef\u4ee5\u7528\u4e8e\u5355\u5904\u7406\u5668\u73af\u5883\uff1a\u5728\u4fee\u6539\u5171\u4eab\u53d8\u91cf\u65f6\u7981\u6b62\u4e2d\u65ad\u51fa\u73b0\u3002 \u7136\u800c\uff0c\u591a\u5904\u7406\u5176\u73af\u5883\u4e0b\u6d88\u606f\u8981\u4f20\u9012\u5230\u6240\u6709\u5904\u7406\u5668\uff0c\u8be5\u8fc7\u7a0b\u5bfc\u81f4\u7684\u5ef6\u65f6\u4f1a\u964d\u4f4e\u7cfb\u7edf\u6548\u7387\uff1b\u53e6\u5916\uff0c\u5982\u679c\u7cfb\u7edf\u65f6\u949f\u662f\u901a\u8fc7\u4e2d\u65ad\u66f4\u65b0\u7684\uff0c\u5219\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u56e0\u6b64\uff0c\u5728\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u7279\u6b8a\u786c\u4ef6\u6307\u4ee4\uff0c\u7528\u4e8e\u76d1\u6d4b\u548c\u4fee\u6539\u5b57\u7684\u5185\u5bb9\uff0c\u6216\u8005\u7528\u4e8e \u539f\u5b50\u5730 \uff08atomically\uff09\u4ea4\u6362\u4e24\u4e2a\u5b57\uff08\u4f5c\u4e3a\u4e0d\u53ef\u4e2d\u65ad\u7684\u6307\u4ee4\uff09\u3002","title":"\u786c\u4ef6\u540c\u6b65"},{"location":"operating_system/basic/process_management/#_34","text":"\u4e34\u754c\u533a\u95ee\u9898\u57fa\u4e8e\u786c\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\u4e0d\u4f46\u590d\u6742\uff0c\u800c\u4e14\u4e0d\u80fd\u4e3a\u7a0b\u5e8f\u5458\u76f4\u63a5\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u4eba\u5458\u6784\u5efa\u8f6f\u4ef6\u5de5\u5177\uff0c\u4ee5\u89e3\u51b3\u4e34\u754c\u533a\u95ee\u9898\u3002\u6700\u7b80\u5355\u7684\u5de5\u5177\u5c31\u662f \u4e92\u65a5\u9501 \uff08mutex lock\uff09\u3002\u6211\u4eec\u4f7f\u7528\u4e92\u65a5\u9501\u6765\u4e2a\u4fdd\u62a4\u4e34\u754c\u533a\uff0c\u4ece\u800c\u9632\u6b62\u7ade\u4e89\u6761\u4ef6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5e94\u5f97\u5230\u9501\uff1b\u5b83\u5728\u9000\u51fa\u4e34\u754c\u533a\u65f6\u91ca\u653e\u9501\u3002\u51fd\u6570 acquire() \u83b7\u53d6\u6240\uff0c\u800c\u51fd\u6570 release() \u91ca\u653e\u9501\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6bcf\u4e2a\u4e92\u65a5\u9501\u6709\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf available \uff0c\u5b83\u7684\u503c\u8868\u793a\u9501\u662f\u5426\u53ef\u7528\u3002\u5982\u679c\u9501\u662f\u53ef\u7528\u7684\uff0c\u90a3\u4e48\u8c03\u7528 acquire() \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u9501\u4e0d\u518d\u53ef\u7528\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u83b7\u53d6\u4e0d\u53ef\u7528\u7684\u9501\u65f6\uff0c\u5b83\u4f1a\u963b\u585e\uff0c\u77e5\u9053\u9501\u88ab\u91ca\u653e\u3002 \u6309\u5982\u4e0b\u5b9a\u4e49 acquire() \uff1a acquire() { while (!available) ; /* busy wait */ available = false; } \u6309\u5982\u4e0b\u5b9a\u4e49 release() \uff1a release() { available = true; } \u5bf9 acquire() \u548c release() \u7684\u8c03\u7528\u5fc5\u987b\u539f\u5b50\u5730\u6267\u884c\u3002\u56e0\u6b64\uff0c\u4e92\u65a5\u9501\u901a\u5e38\u91c7\u7528\u786c\u4ef6\u673a\u5236\u6765\u5b9e\u73b0\u3002 \u8fd9\u91cc\u6240\u7ed9\u5b9e\u73b0\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff1a\u5b83\u9700\u8981 \u5fd9\u7b49\u5f85 \uff08busy waiting\uff09\u3002\u5f53\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\uff0c\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5fc5\u987b\u8fde\u7eed\u5faa\u73af\u5730\u8c03\u7528 acquire() \u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u4e92\u65a5\u9501\u4e5f\u88ab\u79f0\u4e3a \u81ea\u65cb\u9501 \uff08spinlock\uff09\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u4e0d\u505c\u5730\u65cb\u8f6c\uff0c\u4ee5\u7b49\u5f85\u9501\u53d8\u5f97\u53ef\u7528\u3002\u5728\u5b9e\u9645\u591a\u9053\u7a0b\u5e8f\u7cfb\u7edf\u4e2d\uff0c\u5373\u5f53\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00CPU\u65f6\uff0c\u8fd9\u79cd\u8fde\u7eed\u5faa\u73af\u663e\u7136\u662f\u4e2a\u95ee\u9898\u3002\u5fd9\u7b49\u5f85\u6d6a\u8d39CPU\u5468\u671f\uff0c\u800c\u8fd9\u539f\u672c\u53ef\u4ee5\u6709\u6548\u7528\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u3002 \u81ea\u65cb\u9501\u7684\u4f18\u70b9\uff1a \u5f53\u8fdb\u7a0b\u5728\u7b49\u5f85\u9501\u65f6\uff0c\u6ca1\u6709\u4e0a\u4e0b\u6587\u5207\u6362\uff08\u4e0a\u4e0b\u6587\u5207\u6362\u53ef\u80fd\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u4f7f\u7528\u9501\u7684\u65f6\u95f4\u8f83\u77ed\u65f6\uff0c\u81ea\u65cb\u9501\u8fd8\u662f\u6709\u7528\u7684\u3002\u81ea\u65cb\u9501\u901a\u5e38\u7528\u4e8e\u591a\u5904\u7406\u5668\u7cfb\u7edf\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5728\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u201c\u65cb\u8f6c\u201d\uff0c\u800c\u5176\u4ed6\u7ebf\u7a0b\u5728\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u6267\u884c\u4e34\u754c\u533a\u3002","title":"\u4e92\u65a5\u9501"},{"location":"operating_system/basic/process_management/#_35","text":"\u4e92\u65a5\u9501\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u6700\u7b80\u5355\u7684\u540c\u6b65\u5de5\u5177\u3002\u672c\u8282\u8ba8\u8bba\u4e00\u4e2a\u66f4\u9c81\u68d2\u7684\u5de5\u5177\uff0c\u5b83\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\uff0c\u4f46\u5b83\u80fd\u63d0\u4f9b\u66f4\u4e3a\u9ad8\u7ea7\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u8fdb\u7a0b\u80fd\u591f\u540c\u6b65\u6d3b\u52a8\u3002 \u4e00\u4e2a \u4fe1\u53f7\u91cf \uff08semaphore\uff09 S S \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5b83\u9664\u4e86\u521d\u59cb\u5316\u5916\u80fd\u901a\u8fc7\u4e24\u4e2a\u6807\u51c6\u539f\u5b50\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u8bbf\u95ee\u3002 \u53ef\u6309\u5982\u4e0b\u5b9a\u4e49 wait() : wait(S) { while (S <= 0) ; // busy wait S--; } \u53ef\u6309\u5982\u4e0b\u5b9a\u4e49 signal() \uff1a signal(S) { S++; }","title":"\u4fe1\u53f7\u91cf"},{"location":"operating_system/basic/process_management/#_36","text":"\u64cd\u4f5c\u7cfb\u7edf\u901a\u5e38\u533a\u5206\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf \uff08counting semaphore\uff09\u7684\u503c\u4e0d\u53d7\u9650\u5236\uff0c\u800c \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf \uff08binary semaphore\uff09\u7684\u503c\u53ea\u80fd\u4e3a 0 0 \u6216 1 1 \u3002\u56e0\u6b64\uff0c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6ca1\u6709\u63d0\u4f9b\u4e92\u65a5\u9501\u7684\u7cfb\u7edf\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u6765\u5b9e\u73b0\u4e92\u65a5\u3002 \u8ba1\u6570\u4fe1\u53f7\u91cf\u53ef\u4ee5\u7528\u4e8e\u63a7\u5236\u8bbf\u95ee\u5177\u6709\u591a\u4e2a\u5b9e\u4f8b\u7684\u67d0\u79cd\u8d44\u6e90\u3002\u4fe1\u53f7\u91cf\u7684\u521d\u503c\u4e3a\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\u3002\u5f53\u8fdb\u7a0b\u9700\u8981\u4f7f\u7528\u8d44\u6e90\u65f6\uff0c\u9700\u8981\u5bf9\u8be5\u4fe1\u53f7\u91cf\u6267\u884c wait() \u64cd\u4f5c\uff08\u51cf\u5c11\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\uff09\u3002\u5f53\u8fdb\u884c\u8d44\u6e90\u91ca\u653e\u65f6\uff0c\u9700\u8981\u5bf9\u8be5\u4fe1\u53f7\u91cf\u6267\u884c signal() \u64cd\u4f5c\uff08\u589e\u52a0\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\uff09\u3002\u5f53\u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\u4e3a 0 0 \u65f6\uff0c\u6240\u6709\u8d44\u6e90\u90fd\u5728\u4f7f\u7528\u4e2d\u3002\u4e4b\u540e\uff0c\u9700\u8981\u4f7f\u7528\u8d44\u6e90\u7684\u8fdb\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u8ba1\u6570\u5927\u4e8e 0 0 \u3002 \u4f7f\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u4f8b\u5b50\uff1a \u73b0\u6709\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u7684\u8fdb\u7a0b\uff1aP1\u6709\u8bed\u53e5 S1 \u800cP2\u6709\u8bed\u53e5 S2 \u3002\u5047\u8bbe\u8981\u6c42\u53ea\u6709\u5728 S1 \u6267\u884c\u540e\u624d\u80fd\u6267\u884c S2 \uff0c\u5219\u53ef\u4ee5\u7528\u4fe1\u53f7\u91cf\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e00\u8981\u6c42\uff1a\u8ba9P1\u548cP2\u5171\u4eab\u540c\u4e00\u4fe1\u53f7\u91cf synch \uff0c\u5e76\u4e14\u521d\u59cb\u5316\u4e3a 0 0 \u3002\u5728\u8fdb\u7a0bP1\u4e2d\uff0c\u63d2\u5165\u8bed\u53e5\uff1a S1; signal(synch); \u5728\u8fdb\u7a0bP2\u4e2d\uff0c\u63d2\u5165\u8bed\u53e5\uff1a wait(synch); S2;","title":"\u4fe1\u53f7\u91cf\u7684\u4f7f\u7528"},{"location":"operating_system/basic/process_management/#_37","text":"\u4e0e\u81ea\u65cb\u9501\u7684\u5b9e\u73b0\u5177\u6709\u5fd9\u7b49\u5f85\u76f8\u540c\uff0c\u4e0a\u8ff0\u4fe1\u53f7\u91cf\u64cd\u4f5c wait() \u548c signal() \u4e5f\u6709\u540c\u6837\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u514b\u670d\u5fd9\u7b49\u5f85\u9700\u8981\uff0c\u53ef\u4ee5\u8fd9\u6837\u4fee\u6539\u5fd9\u7b49\u5f85\u64cd\u4f5c wait() \u548c signal() \u7684\u5b9a\u4e49\uff1a\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u64cd\u4f5c wait() \u5e76\u4e14\u53d1\u73b0\u4fe1\u53f7\u91cf\u503c\u4e0d\u4e3a\u6b63\u65f6\uff0c\u5b83\u5fc5\u987b\u7b49\u5f85\u3002\u7136\u800c\uff0c\u8be5\u8fdb\u7a0b\u4e0d\u662f\u5fd9\u7b49\u5f85\u800c\u662f\u963b\u585e\u81ea\u5df1\u3002\u963b\u585e\u64cd\u4f5c\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u653e\u5230\u4e0e\u4fe1\u53f7\u91cf\u6709\u5173\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u5e76\u4e14\u5c06\u8be5\u8fdb\u7a0b\u72b6\u6001\u5207\u6362\u6210\u7b49\u5f85\u72b6\u6001\u3002\u7136\u540e\uff0c\u8f6c\u5230CPU\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u4e00\u8fb9\u9009\u62e9\u6267\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u7b49\u5f85\u4fe1\u53f7\u91cf S S \u800c\u963b\u585e\u7684\u8fdb\u7a0b\uff0c\u5728\u5176\u5b83\u8fdb\u7a0b\u6267\u884c signal() \u540e\uff0c\u5e94\u88ab\u91cd\u65b0\u6267\u884c\u3002\u8fdb\u7a0b\u7684\u91cd\u65b0\u6267\u884c\u662f\u901a\u8fc7\u64cd\u4f5c wakeup() \u6765\u8fdb\u884c\u7684\uff0c\u5b83\u5c06\u8fdb\u7a0b\u4ece\u7b49\u5f85\u72b6\u6001\u6539\u4e3a\u5c31\u7eea\u72b6\u6001\u3002\u7136\u800c\uff0c\u8fdb\u7a0b\u88ab\u6dfb\u52a0\u5230\u5c31\u7eea\u961f\u5217\u3002\uff08\u53d6\u51b3\u4e8eCPU\u8c03\u5ea6\u7b97\u6cd5\uff0cCPU\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u4ece\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u5207\u6362\u5230\u65b0\u7684\u5c31\u7eea\u8fdb\u7a0b\u3002\uff09 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6837\u5b9a\u4e49\u7684\u4fe1\u53f7\u91cf\uff0c\u6309\u5982\u4e0b\u5b9a\u4e49\u4fe1\u53f7\u91cf\uff1a typedef struct { int value ; struct process * list ; } semaphore ; \u6bcf\u4e2a\u4fe1\u53f7\u91cf\u90fd\u6709\u4e00\u4e2a\u6574\u6570 value \u548c\u4e00\u4e2a\u8fdb\u7a0b\u94fe\u8868 list \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5fc5\u987b\u7b49\u5f85\u4fe1\u53f7\u91cf\u65f6\uff0c\u5c31\u88ab\u6dfb\u52a0\u5230\u8fdb\u7a0b\u94fe\u8868\u3002\u64cd\u4f5c signal() \u4ece\u7b49\u5f85\u8fdb\u7a0b\u94fe\u8868\u4e0a\u53d6\u8d70\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u52a0\u4ee5\u5524\u9192\u3002 \u73b0\u5728\uff0c\u4fe1\u53f7\u91cf\u64cd\u4f5c wait() \u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0bL\uff1a wait ( semaphore * S ) { S -> value -- ; if ( S -> value < 0 ) { add this process to S -> list ; block (); } } \u800c\u4fe1\u53f7\u91cf\u64cd\u4f5c signal() \u53ef\u5b9a\u4e49\u5982\u4e0b\uff1a signal ( semaphore * S ) { S -> value ++ ; if ( S -> value <= 0 ) { remove a process P from S -> list ; wakeup ( P ); } } \u64cd\u4f5c block() \u6302\u8d77\u8c03\u7528\u5b83\u7684\u8fdb\u7a0b\u3002\u64cd\u4f5c wakeup(P) \u91cd\u65b0\u542f\u52a8\u963b\u585e\u8fdb\u7a0b P P \u7684\u6267\u884c\u3002\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e3a\u57fa\u672c\u662f\u7cfb\u7edf\u8c03\u7528\u6765\u63d0\u4f9b\u7684\u3002","title":"\u4fe1\u53f7\u91cf\u7684\u5b9e\u73b0"},{"location":"operating_system/basic/process_management/#_38","text":"","title":"\u7ecf\u5178\u540c\u6b65\u95ee\u9898"},{"location":"operating_system/basic/process_management/#_39","text":"","title":"\u6709\u9650\u7f13\u51b2\u95ee\u9898"},{"location":"operating_system/basic/process_management/#-","text":"\u5047\u8bbe\u4e00\u4e2a\u6570\u636e\u5e93\u4e3a\u591a\u4e2a\u5e76\u53d1\u8fdb\u7a0b\u6240\u5171\u4eab\u3002\u6709\u7684\u8fdb\u7a0b\u53ef\u80fd\u53ea\u9700\u8981\u8bfb\u6570\u636e\u5e93\uff0c\u800c\u5176\u4ed6\u8fdb\u7a0b\u53ef\u80fd\u9700\u8981\u66f4\u65b0\uff08\u8bfb\u548c\u5199\uff09\u6570\u636e\u5e93\u3002\u4e3a\u533a\u5206\u8fd9\u4e24\u7c7b\u8fdb\u7a0b\uff0c\u79f0\u524d\u8005\u4e3a \u8bfb\u8005 \uff08reader\uff09\uff0c\u540e\u8005\u4e3a \u4f5c\u8005 \uff08writer\uff09\u3002\u5982\u679c \u4ee5\u6570\u636e\u5e93\u4e3a\u4f8b\uff0c\u6211\u4eec\u8981\u6c42\u4f5c\u8005\u5728\u5199\u5165\u6570\u636e\u5e93\u65f6\u5177\u6709\u5171\u4eab\u6570\u636e\u5e93\u72ec\u5360\u7684\u8bbf\u95ee\u6743\u3002\u8fd9\u4e00\u540c\u6b65\u95ee\u9898\u5373 \u8bfb\u8005-\u4f5c\u8005\u95ee\u9898 \uff08reader-writer problem\uff09\u3002\u8be5\u95ee\u9898\u81ea\u4ece\u88ab\u63d0\u51fa\u5c31\u4e00\u76f4\u7528\u4e8e\u6d4b\u8bd5\u51e0\u4e4e\u6240\u6709\u65b0\u7684\u540c\u6b65\u539f\u8bed\u3002 \u7b2c\u4e00\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\uff1a\u8bfb\u8005\u4e0d\u5e94\u4fdd\u6301\u7b49\u5f85\uff0c\u9664\u975e\u4f5c\u8005\u5df2\u7ecf\u83b7\u5f97\u6743\u9650\u4f7f\u7528\u5171\u4eab\u5bf9\u8c61\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6ca1\u6709\u8bfb\u8005\uff0c\u7531\u4e8e\u67d0\u4e2a\u4f5c\u8005\u7b49\u5f85\uff0c\u800c\u7b49\u5f85\u5176\u4ed6\u8bfb\u8005\u7684\u5b8c\u6210\u3002 \u7b2c\u4e8c\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\uff1a\u4e00\u65e6\u4f5c\u8005\u5c31\u7eea\uff0c\u90a3\u4e48\u4f5c\u8005\u4f1a\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u4f5c\u8005\u7b49\u5f85\u8bbf\u95ee\u5bf9\u8c61\uff0c\u90a3\u4e48\u4e0d\u4f1a\u6709\u8bfb\u8005\u53ef\u4ee5\u5f00\u59cb\u8bfb\u3002 \u6709\u4e9b\u7cfb\u7edf\u5c06\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898\u8fdb\u884c\u62bd\u8c61\uff0c\u4ece\u800c\u63d0\u4f9b \u8bfb\u5199\u9501 \uff08read-writer lock\uff09\uff0c\u5728\u83b7\u53d6\u8bfb\u5199\u9501\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u9501\u7684\u6a21\u5f0f\uff1a \u8bfb\u8bbf\u95ee \u548c \u5199\u8bbf\u95ee \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u9700\u8981\u8bfb\u5171\u4eab\u6570\u636e\u65f6\uff0c\u53ef\u7533\u8bf7\u8bfb\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff1b\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u5e0c\u671b\u4fee\u6539\u5171\u4eab\u6570\u636e\u65f6\uff0c\u5e94\u7533\u8bf7\u5199\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\u3002\u591a\u4e2a\u8fdb\u7a0b\u53ef\u5141\u8bb8\u5e76\u53d1\u83b7\u53d6\u8bfb\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u83b7\u53d6\u5199\u6a21\u5f0f\u7684\u8bfb\u5199\u9501\uff0c\u4f5c\u8005\u8fdb\u7a0b\u9700\u8981\u4e92\u65a5\u8bbf\u95ee\u3002 \u8bfb\u5199\u9501\u7684\u9002\u7528\u573a\u666f\uff1a \u5bb9\u6613\u8bc6\u522b\u54ea\u4e9b\u8fdb\u7a0b\u53ea\u8bfb\u5171\u4eab\u6570\u636e\u548c\u54ea\u4e9b\u8fdb\u7a0b\u53ea\u5199\u5171\u4eab\u6570\u636e\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u8bfb\u8005\u8fdb\u7a0b\u6570\u6bd4\u5750\u7740\u8fdb\u7a0b\u6570\u591a\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u56e0\u4e3a\u8bfb\u5199\u9501\u7684\u5efa\u7acb\u5f00\u9500\u901a\u5e38\u5927\u4e8e\u4fe1\u53f7\u91cf\u6216\u4e92\u65a5\u9501\u7684\uff0c\u4f46\u662f\u8fd9\u4e00\u5f00\u9500\u53ef\u4ee5\u901a\u8fc7\u5141\u8bb8\u591a\u4e2a\u8bfb\u8005\u7684\u5e76\u53d1\u7a0b\u5e8f\u7684\u589e\u52a0\u6765\u5f25\u8865\u3002","title":"\u8bfb\u8005-\u4f5c\u8005\u95ee\u9898"},{"location":"operating_system/basic/process_management/#_40","text":"","title":"\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898"},{"location":"operating_system/basic/process_management/#_41","text":"\u64cd\u4f5c\u7cfb\u7edf\u5e94\u63d0\u4f9b\u673a\u5236\u4ee5\u9632\u6b62\u65f6\u5e8f\u51fa\u9519\uff0c\u5df2\u6709\u591a\u4e2a\u8bed\u8a00\u7ed3\u6784\u53ef\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002\u7ba1\u7a0b\u4e3a\u5171\u4eab\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u63d0\u4f9b\u4e86\u540c\u6b65\u673a\u5236\u3002\u6761\u4ef6\u53d8\u91cf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u7ba1\u7a0b\u51fd\u6570\u963b\u585e\u6267\u884c\u76f4\u5230\u88ab\u901a\u77e5\u53ef\u7ee7\u7eed\u4e3a\u6b62\u3002","title":"\u7ba1\u7a0b"},{"location":"operating_system/basic/process_management/#_42","text":"\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u63d0\u4f9b\u540c\u6b65\u652f\u6301\u3002\u4f8b\u5982\uff0cWindows\u3001Linux\u548cSolaris\u90fd\u63d0\u4f9b\u673a\u5236\uff0c\u5982\u4fe1\u53f7\u91cf\u3001\u4e92\u65a5\u9501\u3001\u81ea\u65cb\u9501\u53ca\u6761\u4ef6\u53d8\u91cf\uff0c\u4ee5\u4fbf\u63d0\u4f9b\u8bbf\u95ee\u5171\u4eab\u6570\u636e\u3002Pthread API\u652f\u6301\u4e92\u65a5\u9501\u3001\u4fe1\u53f7\u91cf\u4ee5\u53ca\u6761\u4ef6\u53d8\u91cf\u3002","title":"\u540c\u6b65\u4f8b\u5b50"},{"location":"operating_system/basic/process_management/#windows_1","text":"","title":"Windows\u540c\u6b65"},{"location":"operating_system/basic/process_management/#linux_1","text":"","title":"Linux\u540c\u6b65"},{"location":"operating_system/basic/process_management/#solaris","text":"","title":"Solaris\u540c\u6b65"},{"location":"operating_system/basic/process_management/#pthreads","text":"","title":"Pthreads\u540c\u6b65"},{"location":"operating_system/basic/process_management/#_43","text":"\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4f1a\u589e\u52a0\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u7684\u98ce\u9669\u3002\u4f20\u7edf\u4e0a\uff0c\u8bf8\u5982\u4e92\u65a5\u9501\u3001\u4fe1\u53f7\u91cf\u548c\u7ba1\u7a0b\u7b49\u6280\u672f\u7528\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u662f\u968f\u7740\u5904\u7406\u6838\u6570\u91cf\u7684\u589e\u52a0\uff0c\u8bbe\u8ba1\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u5e76\u4e14\u907f\u514d\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002 \u6709\u591a\u4e2a\u66ff\u4ee3\u65b9\u6cd5\u91cd\u70b9\u5173\u6ce8\u591a\u6838\u7cfb\u7edf\u7684\u540c\u6b65\u3002\u4e00\u4e2a\u65b9\u6cd5\u91c7\u7528 \u4e8b\u7269\u5185\u5b58 \uff0c\u5b83\u901a\u8fc7\u8f6f\u4ef6\u6216\u786c\u4ef6\u6280\u672f\u6765\u5904\u7406\u540c\u6b65\u95ee\u9898\u3002\u53e6\u4e00\u4e2a\u65b9\u6cd5\u91c7\u7528\u7531 OpenMP \u63d0\u4f9b\u7684\u7f16\u8bd1\u5668\u6269\u5c55\u3002\u6700\u540e\uff0c \u51fd\u6570\u662f\u7f16\u7a0b\u8bed\u8a00 \u901a\u8fc7\u4e0d\u5141\u8bb8\u53ef\u53d8\u6027\u6765\u5904\u7406\u540c\u6b65\u95ee\u9898\u3002","title":"\u66ff\u4ee3\u65b9\u6cd5"},{"location":"operating_system/basic/process_management/#_44","text":"\u591a\u9053\u7a0b\u5e8f\u73af\u5883\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u7ade\u4e89\u6709\u9650\u6570\u91cf\u7684\u8d44\u6e90\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7533\u8bf7\u8d44\u6e90\u65f6\uff0c\u5982\u679c\u8fd9\u65f6\u6ca1\u6709\u53ef\u7528\u8d44\u6e90\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u3002\u6709\u65f6\uff0c\u5982\u679c\u7533\u8bf7\u7684\u8d44\u6e90\u88ab\u5176\u4ed6\u7b49\u5f85\u8fdb\u7a0b\u5360\u6709\uff0c\u90a3\u4e48\u8be5\u7b49\u5f85\u8fdb\u7a0b\u6709\u53ef\u80fd\u518d\u4e5f\u65e0\u6cd5\u6539\u53d8\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a \u6b7b\u9501 \uff08deadlock\uff09\u3002","title":"\u6b7b\u9501"},{"location":"operating_system/basic/process_management/#_45","text":"","title":"\u7cfb\u7edf\u6a21\u578b"},{"location":"operating_system/basic/process_management/#_46","text":"","title":"\u6b7b\u9501\u7279\u5f81"},{"location":"operating_system/basic/process_management/#_47","text":"\u5982\u679c\u5728\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4ee5\u4e0b\u56db\u4e2a\u6761\u4ef6\u540c\u65f6\u6210\u7acb\uff0c\u90a3\u4e48\u5c31\u80fd\u5f15\u8d77\u6b7b\u9501\uff1a \u4e92\u65a5 \uff08mutual exclusion\uff09\uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u8d44\u6e90\u5fc5\u987b\u5904\u4e8e\u975e\u5171\u4eab\u6a21\u5f0f\uff0c\u8bb0\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4f7f\u7528\u3002\u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7533\u8bf7\u8be5\u8d44\u6e90\uff0c\u90a3\u4e48\u7533\u8bf7\u8fdb\u7a0b\u5e94\u8be5\u7b49\u5230\u8be5\u8d44\u6e90\u91ca\u653e\u4e3a\u6b62\u3002 \u5360\u6709\u5e76\u7b49\u5f85 \uff08hold and wait\uff09\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u5e94\u5360\u6709\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76\u7b49\u5f85\u4e24\u4e00\u4e2a\u8d44\u6e90\uff0c\u8be5\u8d44\u6e90\u4e3a\u5176\u5b83\u8fdb\u7a0b\u6240\u5360\u6709\u3002 \u975e\u62a2\u5360 \uff08no preemption\uff09\uff1a\u8d44\u6e90\u4e0d\u80fd\u88ab\u5f3a\u5360\uff0c\u5373\u8d44\u6e90\u53ea\u80fd\u88ab\u8fdb\u7a0b\u5728\u5b8c\u6210\u4efb\u52a1\u540e\u81ea\u613f\u91ca\u653e\u3002 \u5faa\u73af\u7b49\u5f85 \uff08circular wait\uff09\uff1a\u6709\u4e00\u7ec4\u7b49\u5f85\u8fdb\u7a0b {P_0, P_1, ..., P_n} {P_0, P_1, ..., P_n} \uff0c P_0 P_0 \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_1 P_1 \u5360\u6709\uff0c P_1 P_1 \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_2 P_2 \u5360\u6709\uff0c......\uff0c P_{n - 1} P_{n - 1} \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_n P_n \u5360\u6709\uff0c P_n P_n \u7b49\u5f85\u7684\u8d44\u6e90\u4e3a P_0 P_0 \u5360\u6709\u3002 \u9700\u8981\u5f3a\u8c03\uff0c\u6240\u6709\u56db\u4e2a\u6761\u4ef6\u5fc5\u987b\u540c\u65f6\u6210\u7acb\u624d\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u6ce8\u610f\u5230\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\u610f\u5473\u7740\u5360\u6709\u5e76\u7b49\u5f85\u6761\u4ef6\uff0c\u6545\u56db\u4e2a\u6761\u4ef6\u5e76\u4e0d\u662f\u5b8c\u5168\u72ec\u7acb\u3002\u4f46\u53ea\u8981\u786e\u4fdd\u5176\u4e2d\u4e00\u4e2a\u4e0d\u6210\u7acb\u5373\u53ef\u9884\u9632\u6b7b\u9501\u3002","title":"\u5fc5\u8981\u6761\u4ef6"},{"location":"operating_system/basic/process_management/#_48","text":"\u603b\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u8d44\u6e90\u5206\u914d\u56fe\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4e0d\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002\u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf \u53ef\u80fd\u4f1a \u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002","title":"\u8d44\u6e90\u5206\u914d\u56fe"},{"location":"operating_system/basic/process_management/#_49","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u5904\u7406\u6b7b\u9501\u95ee\u9898\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a \u901a\u8fc7\u534f\u8bae\u6765\u9884\u9632\u6216\u907f\u514d\u6b7b\u9501\uff0c\u786e\u4fdd\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\u3002 \u5141\u8bb8\u7cfb\u7edf\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\uff0c\u7136\u540e\u68c0\u6d4b\u5b83\uff0c\u5e76\u52a0\u4ee5\u6062\u590d\u3002 \u5ffd\u89c6\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba4\u4e3a\u6b7b\u9501\u4e0d\u53ef\u80fd\u5728\u7cfb\u7edf\u5185\u53d1\u751f\u3002 \u7b2c\u4e09\u79cd\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\uff0c\u5305\u62ecLinux\u548cWindows\u3002\u56e0\u6b64\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5904\u7406\u6b7b\u9501\u3002 \u4e3a\u4e86\u786e\u4fdd\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u91c7\u7528\u6b7b\u9501\u9884\u9632\u548c\u6b7b\u9501\u907f\u514d\u65b9\u6848\u3002 \u6b7b\u9501\u9884\u9632 \uff08deadlock prevention\uff09\u65b9\u6cd5\u786e\u4fdd\u81f3\u5c11\u6709\u4e00\u4e2a\u4fbf\u8981\u6761\u4ef6\u4e0d\u6210\u7acb\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u9650\u5236\u5982\u4f55\u7533\u8bf7\u8d44\u6e90\u7684\u65b9\u6cd5\u6765\u9884\u9632\u6b7b\u9501\u3002 \u6b7b\u9501\u907f\u514d \uff08deadlock avoidance\uff09\u8981\u6c42\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e8b\u5148\u5f97\u5230\u6709\u5173\u8fdb\u7a0b\u7533\u8bf7\u8d44\u6e90\u548c\u4f7f\u7528\u8d44\u6e90\u7684\u989d\u5916\u4fe1\u606f\u3002\u6709\u4e86\u8fd9\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u7cfb\u7edf\u53ef\u4ee5\u786e\u5b9a\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u7533\u8bf7\uff0c\u8fdb\u7a0b\u662f\u5426\u5e94\u7b49\u5f85\u3002\u4e3a\u4e86\u786e\u5b9a\u5f53\u524d\u7533\u8bf7\u662f\u786e\u5b9a\u8fd8\u662f\u5ef6\u8fdf\uff0c\u7cfb\u7edf\u5e94\u8003\u8651\uff1a\u73b0\u6709\u7684\u53ef\u7528\u8d44\u6e90\u3001\u5df2\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4ee5\u53ca\u6bcf\u4e2a\u8fdb\u7a0b\u5c06\u6765\u7533\u8bf7\u548c\u91ca\u653e\u7684\u8d44\u6e90\u3002 \u5982\u679c\u7cfb\u7edf\u4e0d\u63d0\u4f9b\u6b7b\u9501\u9884\u9632\u6216\u6b7b\u9501\u907f\u514d\u7684\u7b97\u6cd5\uff0c\u5219\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7b97\u6cd5\u6765 \u68c0\u6d4b \u7cfb\u7edf\u72b6\u6001\u4ee5\u786e\u5b9a\u6b7b\u9501\u662f\u5426\u53d1\u751f\uff0c\u63d0\u4f9b\u96f6\u4e00\u4e2a\u7b97\u6cd5\u6765\u4ece\u6b7b\u9501\u4e2d \u6062\u590d \u3002 \u5f53\u6ca1\u6709\u7b97\u6cd5\u7528\u4e8e\u68c0\u6d4b\u548c\u6062\u590d\u6b7b\u9501\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\uff0c\u800c\u53c8\u6ca1\u6709\u65b9\u6cd5\u68c0\u6d4b\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u672a\u88ab\u53d1\u73b0\u7684\u6b7b\u9501\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u4e0b\u964d\uff0c\u56e0\u4e3a\u8d44\u6e90\u88ab\u4e0d\u80fd\u8fd0\u884c\u7684\u8fdb\u7a0b\u5360\u6709\uff0c\u800c\u8d8a\u6765\u8d8a\u591a\u7684\u8d44\u6e90\u4f1a\u56e0\u7533\u8bf7\u8d44\u6e90\u800c\u9677\u5165\u6b7b\u9501\u3002\u6700\u540e\uff0c\u6574\u4e2a\u7cfb\u7edf\u4f1a\u505c\u6b62\u5de5\u4f5c\uff0c\u9700\u8981 \u4eba\u5de5\u91cd\u542f \u3002\u867d\u7136\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u4e0d\u80fd\u81ea\u52a8\u5316\u89e3\u51b3\u6b7b\u9501\u95ee\u9898\uff0c\u4f46\u5374\u4e3a\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u6240\u91c7\u7528\u3002\u56e0\u4e3a\u5bf9\u4e8e\u5927\u591a\u6570\u7cfb\u7edf\uff0c\u6b7b\u9501\u5f88\u5c11\u53d1\u751f\uff08\u5982\u4e00\u5e74\u4e00\u6b21\uff09\uff0c\u4e0e\u9891\u7e41\u4f7f\u7528\u7684\u5e76\u4e14\u5f00\u9500\u6602\u8d35\u7684\u6b7b\u9501\u9884\u9632\u3001\u6b7b\u9501\u907f\u514d\u548c\u6b7b\u9501\u68c0\u6d4b\u4e0e\u6062\u590d\u7b97\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6210\u672c\u66f4\u4f4e\u3002 \u6b64\u5916\uff0c\u7528\u4e8e\u5176\u4ed6\u6761\u4ef6\u7684\u6062\u590d\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6b7b\u9501\u6062\u590d\u3002\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u5904\u4e8e\u51bb\u7ed3\u72b6\u6001\u800c\u4e0d\u662f\u601d\u7d22\u72b6\u6001\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u5b9e\u65f6\u8fdb\u7a0b\u6309\u6700\u9ad8\u4f18\u5148\u7ea7\u6765\u8fd0\u884c\uff08\u6216\u5176\u5b83\u8fdb\u7a0b\u5728\u975e\u62a2\u5360\u8c03\u5ea6\u7a0b\u5e8f\u4e0b\u8fd0\u884c\uff09\uff0c\u5e76\u4e14\u4e0d\u5c06\u63a7\u5236\u8fd4\u56de\u5230\u64cd\u4f5c\u7cfb\u7edf\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u5e94\u6709\u4eba\u5de5\u65b9\u6cd5\u53ef\u4ece\u8fd9\u4e9b\u72b6\u6001\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u53ef\u7528\u4e8e\u6b7b\u9501\u3002","title":"\u6b7b\u9501\u5904\u7406\u65b9\u6cd5"},{"location":"operating_system/basic/process_management/#_50","text":"\u6839\u636e\u4e0a\u8ff0\u6b7b\u9501\u53d1\u751f\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff0c\u53ea\u8981\u786e\u4fdd\u5176\u4e2d\u4e00\u4e2a\u6761\u4ef6\u4e0d\u6210\u7acb\uff0c\u5c31\u80fd\u9884\u9632\u6b7b\u9501\u53d1\u751f\u3002","title":"\u6b7b\u9501\u9884\u9632"},{"location":"operating_system/basic/process_management/#_51","text":"\u901a\u5e38\u4e0d\u80fd\u901a\u8fc7\u7834\u574f\u4e92\u65a5\u6761\u4ef6\u6765\u9884\u9632\u6b7b\u9501\u3002\u56e0\u4e3a\u6709\u4e9b\u8d44\u6e90\u672c\u8eab\u5c31\u662f\u975e\u5171\u4eab\u7684\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u4e92\u65a5\u9501\u4e0d\u80fd\u540c\u4e8b\u88ab\u591a\u4e2a\u8fdb\u7a0b\u6240\u5171\u4eab\u3002","title":"\u4e92\u65a5"},{"location":"operating_system/basic/process_management/#_52","text":"","title":"\u6301\u6709\u4e14\u7b49\u5f85"},{"location":"operating_system/basic/process_management/#_53","text":"","title":"\u65e0\u62a2\u5360"},{"location":"operating_system/basic/process_management/#_54","text":"","title":"\u5faa\u73af\u7b49\u5f85"},{"location":"operating_system/basic/process_management/#_55","text":"\u6b7b\u9501\u907f\u514d\u7b97\u6cd5\uff0c\u4e0d\u662f\u9884\u9632\u6b7b\u9501\uff0c\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u62e5\u6709\u6bcf\u4e2a\u8fdb\u7a0b\u5982\u4f55\u5229\u7528\u8d44\u6e90\u7684\u5148\u9a8c\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u94f6\u884c\u5bb6\u7b97\u6cd5\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u7684\u5404\u79cd\u8d44\u6e90\u7684\u6700\u5927\u6570\u91cf\u3002\u901a\u8fc7\u8fd9\u79cd\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u6b7b\u9501\u907f\u514d\u7b97\u6cd5\u3002","title":"\u6b7b\u9501\u907f\u514d"},{"location":"operating_system/basic/process_management/#_56","text":"\u5982\u679c\u4e0d\u91c7\u7528\u534f\u8bae\u4ee5\u786e\u4fdd\u6b7b\u9501\u4e0d\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u4f7f\u7528\u68c0\u6d4b\u5e76\u6062\u590d\u7684\u65b9\u6848\u3002\u5e94\u8c03\u7528\u68c0\u6d4b\u7b97\u6cd5\uff0c\u786e\u5b9a\u662f\u5426\u51fa\u73b0\u4e86\u6b7b\u9501\u3002\u5982\u679c\u68c0\u6d4b\u5230\u6b7b\u9501\uff0c\u90a3\u4e48\u7cfb\u7edf\u5e94\u901a\u8fc7\u7ec8\u6b62\u67d0\u4e9b\u6b7b\u9501\u8fdb\u7a0b\u6216\u901a\u8fc7\u62a2\u5360\u67d0\u4e9b\u6b7b\u9501\u8fdb\u7a0b\u7684\u8d44\u6e90\u6765\u6062\u590d\u3002","title":"\u6b7b\u9501\u68c0\u6d4b"},{"location":"operating_system/basic/process_management/#_57","text":"\u5f53\u901a\u8fc7\u62a2\u5360\u6765\u5904\u7406\u6b7b\u9501\u65f6\uff0c\u5e94\u8003\u8651\u4e09\u4e2a\u95ee\u9898\uff1a\u9009\u62e9\u4e00\u4e2a\u727a\u7272\u8fdb\u7a0b\u3001\u56de\u6eda\u53ca\u9965\u997f\u3002\u5982\u679c\u7cfb\u7edf\u4e3b\u8981\u6839\u636e\u4ee3\u4ef7\u6765\u9009\u62e9\u727a\u7272\u8fdb\u7a0b\u56de\u6eda\uff0c\u90a3\u4e48\u53ef\u80fd\u51fa\u73b0\u9965\u997f\uff0c\u5bfc\u81f4\u6240\u9009\u8fdb\u7a0b\u6c38\u8fdc\u4e0d\u80fd\u5b8c\u6210\u6307\u5b9a\u4efb\u52a1\u3002 \u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u6ca1\u6709\u5355\u72ec\u7684\u57fa\u672c\u65b9\u6cd5\u80fd\u591f\u5904\u7406\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u7684\u6240\u6709\u95ee\u9898\u3002\u7136\u800c\uff0c\u901a\u8fc7\u5408\u5e76\u57fa\u672c\u65b9\u6cd5\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u4e3a\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u7c7b\u8d44\u6e90\u7b97\u5219\u6700\u4f73\u65b9\u6cd5\u3002","title":"\u6b7b\u9501\u6062\u590d"},{"location":"operating_system/basic/storage_management/","text":"\u5b58\u50a8\u7ba1\u7406 \u7531\u4e8e\u5185\u5b58\u7cfb\u7edf\u592a\u5c0f\u800c\u4e14\u4e0d\u80fd\u6c38\u4e45\u4fdd\u5b58\u6240\u6709\u6570\u636e\u548c\u7a0b\u5e8f\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u5916\u5b58\u6765\u5907\u4efd\u5185\u5b58\u3002\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u91c7\u7528\u78c1\u76d8\u4f5c\u4e3a\u4fe1\u606f\uff08\u7a0b\u5e8f\u4e0e\u6570\u636e\uff09\u7684\u4e3b\u8981\u5728\u7ebf\u5b58\u50a8\u4ecb\u8d28\u3002\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u673a\u5236\uff0c\u4ee5\u4fbf\u5728\u7ebf\u5b58\u50a8\u548c\u8bbf\u95ee\u78c1\u76d8\u7684\u6570\u636e\u4e0e\u7a0b\u5e8f\u3002\u6587\u4ef6\u662f\u7531\u521b\u5efa\u8005\u5b9a\u4e49\u7684\u76f8\u5173\u4fe1\u606f\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u6587\u4ef6\u7531\u64cd\u4f5c\u7cfb\u7edf\u6620\u5c04\u5230\u7269\u7406\u8bbe\u5907\u3002\u6587\u4ef6\u901a\u5e38\u6309\u76ee\u5f55\u6765\u7ec4\u7ec7\uff0c\u4ee5\u4fbf\u4f7f\u7528\u3002 \u8ba1\u7b97\u673a\u8fde\u63a5\u7684\u8bbe\u5907\u5728\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u5dee\u5f02\u3002\u6709\u7684\u8bbe\u5907\u4e00\u6b21\u4f20\u8f93\u4e00\u4e2a\u5b57\u7b26\u6216\u4e00\u4e2a\u5b57\u7b26\u5757\u3002\u6709\u7684\u53ea\u80fd\u987a\u5e8f\u8bbf\u95ee\uff0c\u6709\u7684\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u3002\u6709\u7684\u540c\u6b65\u4f20\u8f93\u6570\u636e\uff0c\u6709\u7684\u5f02\u6b65\u4f20\u8f93\u6570\u636e\u3002\u6709\u7684\u662f\u4e13\u7528\u7684\uff0c\u6709\u7684\u662f\u5171\u4eab\u7684\u3002\u6709\u7684\u662f\u53ea\u8bfb\u7684\uff0c\u6709\u7684\u662f\u53ef\u8bfb\u5199\u7684\u3002\u5b83\u4eec\u7684\u901f\u5ea6\u5dee\u522b\u5f88\u5927\u3002\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u5b83\u4eec\u4e5f\u662f\u6700\u6162\u7684\u4e3b\u8981\u8ba1\u7b97\u53ca\u7ec4\u4ef6\u3002 \u7531\u4e8e\u6240\u6709\u7684\u8fd9\u4e9b\u8bbe\u5907\u5dee\u5f02\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u63d0\u4f9b\u5404\u79cd\u529f\u80fd\uff0c\u4ee5\u4fbf\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u8bbe\u5907\u7684\u5404\u4e2a\u65b9\u9762\u3002\u64cd\u4f5c\u7cfb\u7edfI/O\u5b50\u7cfb\u7edf\u7684\u4e00\u4e2a\u5173\u952e\u76ee\u6807\u662f\u4e3a\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u63d0\u4f9b\u6700\u4e3a\u7b80\u5355\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u8bbe\u5907\u662f\u6027\u80fd\u74f6\u9888\uff0c\u53e6\u4e00\u4e2a\u5173\u952e\u662f\u4f18\u5316I/O\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u5e76\u53d1\u7684\u6700\u5927\u5316\u3002 \u6587\u4ef6\u7cfb\u7edf \u6587\u4ef6\u6982\u5ff5 \u8bbf\u95ee\u65b9\u6cd5 \u76ee\u5f55\u4e0e\u78c1\u76d8\u7ed3\u6784 \u6587\u4ef6\u7cfb\u7edf\u5b89\u88c5 \u6587\u4ef6\u5171\u4eab \u4fdd\u62a4 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0 \u6587\u4ef6\u7cfb\u7edf\u7ed3\u6784 \u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0 \u76ee\u5f55\u5b9e\u73b0 \u5206\u914d\u65b9\u6cd5 \u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406 \u6548\u7387\u4e0e\u6027\u80fd \u6062\u590d NFS \u4f8b\u5b50\uff1aWAFL\u6587\u4ef6\u7cfb\u7edf \u5927\u5bb9\u91cf\u5b58\u50a8\u7ed3\u6784 \u5927\u5bb9\u91cf\u5b58\u50a8\u7ed3\u6784\u6982\u8ff0 \u78c1\u76d8\u7ed3\u6784 \u78c1\u76d8\u8fde\u63a5 \u78c1\u76d8\u8c03\u5ea6 \u78c1\u76d8\u7ba1\u7406 \u4ea4\u6362\u7a7a\u95f4\u7ba1\u7406 RAID\u7ed3\u6784 \u7a33\u5b9a\u5b58\u50a8\u5b9e\u73b0 IO\u7cfb\u7edf \u6982\u8ff0 I/O\u786c\u4ef6 \u5e94\u7528\u7a0b\u5e8fI/O\u63a5\u53e3 \u5185\u6838I/O\u5b50\u7cfb\u7edf I/O\u8bf7\u6c42\u8f6c\u6210\u786c\u4ef6\u64cd\u4f5c \u6d41 \u6027\u80fd","title":"\u5b58\u50a8\u7ba1\u7406"},{"location":"operating_system/basic/storage_management/#_1","text":"\u7531\u4e8e\u5185\u5b58\u7cfb\u7edf\u592a\u5c0f\u800c\u4e14\u4e0d\u80fd\u6c38\u4e45\u4fdd\u5b58\u6240\u6709\u6570\u636e\u548c\u7a0b\u5e8f\uff0c\u56e0\u6b64\u8ba1\u7b97\u673a\u7cfb\u7edf\u5fc5\u987b\u63d0\u4f9b\u5916\u5b58\u6765\u5907\u4efd\u5185\u5b58\u3002\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u91c7\u7528\u78c1\u76d8\u4f5c\u4e3a\u4fe1\u606f\uff08\u7a0b\u5e8f\u4e0e\u6570\u636e\uff09\u7684\u4e3b\u8981\u5728\u7ebf\u5b58\u50a8\u4ecb\u8d28\u3002\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u673a\u5236\uff0c\u4ee5\u4fbf\u5728\u7ebf\u5b58\u50a8\u548c\u8bbf\u95ee\u78c1\u76d8\u7684\u6570\u636e\u4e0e\u7a0b\u5e8f\u3002\u6587\u4ef6\u662f\u7531\u521b\u5efa\u8005\u5b9a\u4e49\u7684\u76f8\u5173\u4fe1\u606f\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u6587\u4ef6\u7531\u64cd\u4f5c\u7cfb\u7edf\u6620\u5c04\u5230\u7269\u7406\u8bbe\u5907\u3002\u6587\u4ef6\u901a\u5e38\u6309\u76ee\u5f55\u6765\u7ec4\u7ec7\uff0c\u4ee5\u4fbf\u4f7f\u7528\u3002 \u8ba1\u7b97\u673a\u8fde\u63a5\u7684\u8bbe\u5907\u5728\u8bb8\u591a\u65b9\u9762\u90fd\u6709\u5dee\u5f02\u3002\u6709\u7684\u8bbe\u5907\u4e00\u6b21\u4f20\u8f93\u4e00\u4e2a\u5b57\u7b26\u6216\u4e00\u4e2a\u5b57\u7b26\u5757\u3002\u6709\u7684\u53ea\u80fd\u987a\u5e8f\u8bbf\u95ee\uff0c\u6709\u7684\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u3002\u6709\u7684\u540c\u6b65\u4f20\u8f93\u6570\u636e\uff0c\u6709\u7684\u5f02\u6b65\u4f20\u8f93\u6570\u636e\u3002\u6709\u7684\u662f\u4e13\u7528\u7684\uff0c\u6709\u7684\u662f\u5171\u4eab\u7684\u3002\u6709\u7684\u662f\u53ea\u8bfb\u7684\uff0c\u6709\u7684\u662f\u53ef\u8bfb\u5199\u7684\u3002\u5b83\u4eec\u7684\u901f\u5ea6\u5dee\u522b\u5f88\u5927\u3002\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u5b83\u4eec\u4e5f\u662f\u6700\u6162\u7684\u4e3b\u8981\u8ba1\u7b97\u53ca\u7ec4\u4ef6\u3002 \u7531\u4e8e\u6240\u6709\u7684\u8fd9\u4e9b\u8bbe\u5907\u5dee\u5f02\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u63d0\u4f9b\u5404\u79cd\u529f\u80fd\uff0c\u4ee5\u4fbf\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u8bbe\u5907\u7684\u5404\u4e2a\u65b9\u9762\u3002\u64cd\u4f5c\u7cfb\u7edfI/O\u5b50\u7cfb\u7edf\u7684\u4e00\u4e2a\u5173\u952e\u76ee\u6807\u662f\u4e3a\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u63d0\u4f9b\u6700\u4e3a\u7b80\u5355\u7684\u63a5\u53e3\u3002\u7531\u4e8e\u8bbe\u5907\u662f\u6027\u80fd\u74f6\u9888\uff0c\u53e6\u4e00\u4e2a\u5173\u952e\u662f\u4f18\u5316I/O\uff0c\u4ee5\u4fbf\u5b9e\u73b0\u5e76\u53d1\u7684\u6700\u5927\u5316\u3002","title":"\u5b58\u50a8\u7ba1\u7406"},{"location":"operating_system/basic/storage_management/#_2","text":"","title":"\u6587\u4ef6\u7cfb\u7edf"},{"location":"operating_system/basic/storage_management/#_3","text":"","title":"\u6587\u4ef6\u6982\u5ff5"},{"location":"operating_system/basic/storage_management/#_4","text":"","title":"\u8bbf\u95ee\u65b9\u6cd5"},{"location":"operating_system/basic/storage_management/#_5","text":"","title":"\u76ee\u5f55\u4e0e\u78c1\u76d8\u7ed3\u6784"},{"location":"operating_system/basic/storage_management/#_6","text":"","title":"\u6587\u4ef6\u7cfb\u7edf\u5b89\u88c5"},{"location":"operating_system/basic/storage_management/#_7","text":"","title":"\u6587\u4ef6\u5171\u4eab"},{"location":"operating_system/basic/storage_management/#_8","text":"","title":"\u4fdd\u62a4"},{"location":"operating_system/basic/storage_management/#_9","text":"","title":"\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0"},{"location":"operating_system/basic/storage_management/#_10","text":"","title":"\u6587\u4ef6\u7cfb\u7edf\u7ed3\u6784"},{"location":"operating_system/basic/storage_management/#_11","text":"","title":"\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0"},{"location":"operating_system/basic/storage_management/#_12","text":"","title":"\u76ee\u5f55\u5b9e\u73b0"},{"location":"operating_system/basic/storage_management/#_13","text":"","title":"\u5206\u914d\u65b9\u6cd5"},{"location":"operating_system/basic/storage_management/#_14","text":"","title":"\u7a7a\u95f2\u7a7a\u95f4\u7ba1\u7406"},{"location":"operating_system/basic/storage_management/#_15","text":"","title":"\u6548\u7387\u4e0e\u6027\u80fd"},{"location":"operating_system/basic/storage_management/#_16","text":"","title":"\u6062\u590d"},{"location":"operating_system/basic/storage_management/#nfs","text":"","title":"NFS"},{"location":"operating_system/basic/storage_management/#wafl","text":"","title":"\u4f8b\u5b50\uff1aWAFL\u6587\u4ef6\u7cfb\u7edf"},{"location":"operating_system/basic/storage_management/#_17","text":"","title":"\u5927\u5bb9\u91cf\u5b58\u50a8\u7ed3\u6784"},{"location":"operating_system/basic/storage_management/#_18","text":"","title":"\u5927\u5bb9\u91cf\u5b58\u50a8\u7ed3\u6784\u6982\u8ff0"},{"location":"operating_system/basic/storage_management/#_19","text":"","title":"\u78c1\u76d8\u7ed3\u6784"},{"location":"operating_system/basic/storage_management/#_20","text":"","title":"\u78c1\u76d8\u8fde\u63a5"},{"location":"operating_system/basic/storage_management/#_21","text":"","title":"\u78c1\u76d8\u8c03\u5ea6"},{"location":"operating_system/basic/storage_management/#_22","text":"","title":"\u78c1\u76d8\u7ba1\u7406"},{"location":"operating_system/basic/storage_management/#_23","text":"","title":"\u4ea4\u6362\u7a7a\u95f4\u7ba1\u7406"},{"location":"operating_system/basic/storage_management/#raid","text":"","title":"RAID\u7ed3\u6784"},{"location":"operating_system/basic/storage_management/#_24","text":"","title":"\u7a33\u5b9a\u5b58\u50a8\u5b9e\u73b0"},{"location":"operating_system/basic/storage_management/#io","text":"","title":"IO\u7cfb\u7edf"},{"location":"operating_system/basic/storage_management/#_25","text":"","title":"\u6982\u8ff0"},{"location":"operating_system/basic/storage_management/#io_1","text":"","title":"I/O\u786c\u4ef6"},{"location":"operating_system/basic/storage_management/#io_2","text":"","title":"\u5e94\u7528\u7a0b\u5e8fI/O\u63a5\u53e3"},{"location":"operating_system/basic/storage_management/#io_3","text":"","title":"\u5185\u6838I/O\u5b50\u7cfb\u7edf"},{"location":"operating_system/basic/storage_management/#io_4","text":"","title":"I/O\u8bf7\u6c42\u8f6c\u6210\u786c\u4ef6\u64cd\u4f5c"},{"location":"operating_system/basic/storage_management/#_26","text":"","title":"\u6d41"},{"location":"operating_system/basic/storage_management/#_27","text":"","title":"\u6027\u80fd"},{"location":"survey/big_data/hadoop/","text":"Hadoop\u751f\u6001","title":"Hadoop\u751f\u6001"},{"location":"survey/big_data/hadoop/#hadoop","text":"","title":"Hadoop\u751f\u6001"},{"location":"survey/extra/cdn/","text":"\u5185\u5bb9\u5206\u53d1\u7f51\u7edc Content Delivery Network \u66f4\u65b0\u65e5\u671f\uff1a2020.5.30 \u6982\u8ff0 CDN\uff08Content Delivery Network\uff0c\u5185\u5bb9\u5206\u53d1\u7f51\u7edc\uff09\u662f\u6784\u5efa\u5728\u73b0\u6709\u4e92\u8054\u7f51\u57fa\u7840\u4e4b\u4e0a\u7684\u4e00\u5c42\u667a\u80fd\u865a\u62df\u7f51\u7edc\uff0c\u901a\u8fc7\u5728\u7f51\u7edc\u9694\u51fa\u90e8\u7f72\u8282\u70b9\u670d\u52a1\u5668\uff0c\u5b9e\u73b0\u5c06\u6e90\u7ad9\u5185\u5bb9\u5206\u53d1\u81f3\u6240\u6709CDN\u8282\u70b9\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u5c31\u8fd1\u83b7\u5f97\u6240\u9700\u5185\u5bb9\u3002CDN\u670d\u52a1\u7f29\u77ed\u4e86\u7528\u6237\u67e5\u770b\u5185\u5bb9\u7684\u8bbf\u95ee\u5ef6\u8fdf\uff0c\u63d0\u9ad8\u4e86\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u54cd\u5e94\u901f\u5ea6\u548c\u7f51\u7ad9\u7684\u53ef\u7528\u6027\uff0c\u89e3\u51b3\u4e86\u7f51\u7edc\u5e26\u5bbd\u5c0f\u3001\u7528\u6237\u8bbf\u95ee\u91cf\u5927\u3001\u7f51\u70b9\u5206\u5e03\u4e0d\u5747\u7b49\u95ee\u9898\u3002 \u52a0\u901f\u539f\u7406 \u5f53\u7528\u6237\u8bbf\u95ee\u4f7f\u7528CDN\u670d\u52a1\u7684\u7f51\u7ad9\u65f6\uff0c\u672c\u5730DNS\u670d\u52a1\u5668\u901a\u8fc7CNAME\u65b9\u5f0f\u5c06\u6700\u7ec8\u57df\u540d\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230CDN\u670d\u52a1\u3002CDN\u901a\u8fc7\u4e00\u7ec4\u9884\u5148\u5b9a\u4e49\u597d\u7684\u7b56\u7565\uff08\u6839\u636e\u5185\u5bb9\u7c7b\u578b\u3001\u5730\u7406\u533a\u57df\u3001\u7f51\u7edc\u8d1f\u8f7d\u60c5\u51b5\u7b49\uff09\uff0c\u5c06\u5f53\u65f6\u80fd\u591f\u6700\u5feb\u54cd\u5e94\u7528\u6237\u7684CDN\u8282\u70b9IP\u5730\u5740\u63d0\u4f9b\u7ed9\u7528\u6237\uff0c\u662f\u7528\u6237\u53ef\u4ee5\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u83b7\u5f97\u7f51\u7ad9\u5185\u5bb9\u3002\u4f7f\u7528CDN\u540e\u7684HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a CDN\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f \u56fe1. HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\uff08\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f\uff09 CDN\u8282\u70b9\u65e0\u7f13\u5b58\u573a\u666f\uff08\u589e\u52a0\u56de\u6e90\u6b65\u9aa4\uff09 \u56fe1. HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\uff08\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f\uff09 \u53c2\u8003\u6587\u732e [1] \u534e\u4e3a\u4e91 \u4ec0\u4e48\u662fCDN https://support.huaweicloud.com/productdesc-cdn/zh-cn_topic_0064907747.html [2] lin_zone CDN\u6280\u672f\u539f\u7406\u6982\u8981 https://cloud.tencent.com/developer/article/1185727","title":"CDN"},{"location":"survey/extra/cdn/#_1","text":"Content Delivery Network \u66f4\u65b0\u65e5\u671f\uff1a2020.5.30","title":"\u5185\u5bb9\u5206\u53d1\u7f51\u7edc"},{"location":"survey/extra/cdn/#_2","text":"CDN\uff08Content Delivery Network\uff0c\u5185\u5bb9\u5206\u53d1\u7f51\u7edc\uff09\u662f\u6784\u5efa\u5728\u73b0\u6709\u4e92\u8054\u7f51\u57fa\u7840\u4e4b\u4e0a\u7684\u4e00\u5c42\u667a\u80fd\u865a\u62df\u7f51\u7edc\uff0c\u901a\u8fc7\u5728\u7f51\u7edc\u9694\u51fa\u90e8\u7f72\u8282\u70b9\u670d\u52a1\u5668\uff0c\u5b9e\u73b0\u5c06\u6e90\u7ad9\u5185\u5bb9\u5206\u53d1\u81f3\u6240\u6709CDN\u8282\u70b9\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u5c31\u8fd1\u83b7\u5f97\u6240\u9700\u5185\u5bb9\u3002CDN\u670d\u52a1\u7f29\u77ed\u4e86\u7528\u6237\u67e5\u770b\u5185\u5bb9\u7684\u8bbf\u95ee\u5ef6\u8fdf\uff0c\u63d0\u9ad8\u4e86\u7528\u6237\u8bbf\u95ee\u7f51\u7ad9\u7684\u54cd\u5e94\u901f\u5ea6\u548c\u7f51\u7ad9\u7684\u53ef\u7528\u6027\uff0c\u89e3\u51b3\u4e86\u7f51\u7edc\u5e26\u5bbd\u5c0f\u3001\u7528\u6237\u8bbf\u95ee\u91cf\u5927\u3001\u7f51\u70b9\u5206\u5e03\u4e0d\u5747\u7b49\u95ee\u9898\u3002","title":"\u6982\u8ff0"},{"location":"survey/extra/cdn/#_3","text":"\u5f53\u7528\u6237\u8bbf\u95ee\u4f7f\u7528CDN\u670d\u52a1\u7684\u7f51\u7ad9\u65f6\uff0c\u672c\u5730DNS\u670d\u52a1\u5668\u901a\u8fc7CNAME\u65b9\u5f0f\u5c06\u6700\u7ec8\u57df\u540d\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230CDN\u670d\u52a1\u3002CDN\u901a\u8fc7\u4e00\u7ec4\u9884\u5148\u5b9a\u4e49\u597d\u7684\u7b56\u7565\uff08\u6839\u636e\u5185\u5bb9\u7c7b\u578b\u3001\u5730\u7406\u533a\u57df\u3001\u7f51\u7edc\u8d1f\u8f7d\u60c5\u51b5\u7b49\uff09\uff0c\u5c06\u5f53\u65f6\u80fd\u591f\u6700\u5feb\u54cd\u5e94\u7528\u6237\u7684CDN\u8282\u70b9IP\u5730\u5740\u63d0\u4f9b\u7ed9\u7528\u6237\uff0c\u662f\u7528\u6237\u53ef\u4ee5\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u83b7\u5f97\u7f51\u7ad9\u5185\u5bb9\u3002\u4f7f\u7528CDN\u540e\u7684HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a CDN\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f \u56fe1. HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\uff08\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f\uff09 CDN\u8282\u70b9\u65e0\u7f13\u5b58\u573a\u666f\uff08\u589e\u52a0\u56de\u6e90\u6b65\u9aa4\uff09 \u56fe1. HTTP\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\uff08\u8282\u70b9\u6709\u7f13\u5b58\u573a\u666f\uff09","title":"\u52a0\u901f\u539f\u7406"},{"location":"survey/extra/cdn/#_4","text":"[1] \u534e\u4e3a\u4e91 \u4ec0\u4e48\u662fCDN https://support.huaweicloud.com/productdesc-cdn/zh-cn_topic_0064907747.html [2] lin_zone CDN\u6280\u672f\u539f\u7406\u6982\u8981 https://cloud.tencent.com/developer/article/1185727","title":"\u53c2\u8003\u6587\u732e"},{"location":"survey/recommendor_system/basic/","text":"\u63a8\u8350\u7cfb\u7edf\u57fa\u7840","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"survey/recommendor_system/basic/#_1","text":"","title":"\u63a8\u8350\u7cfb\u7edf\u57fa\u7840"},{"location":"survey/serverless/basic/","text":"Serverless \u6280\u672f\u6982\u8ff0 \u672c\u8282\u5185\u5bb9\u53c2\u8003\u81ea\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a\u516c\u5f00\u8bfe \u5efa\u7acb Serverless \u601d\u7ef4 Serverless\u7684\u8bbe\u8ba1\u76ee\u6807\u5728\u4e8e\u8ba9\u4e1a\u52a1\u5f00\u53d1\u4eba\u5458\u4e13\u6ce8\u4e1a\u52a1\u4ee3\u7801\uff0c\u800c\u65e0\u9700\u8003\u8651\u6240\u6709\u670d\u52a1\u5668\u76f8\u5173\u7684\u95ee\u9898\u3002 \u67b6\u6784\u7684\u6f14\u8fdb \u4e3a\u4e86\u66f4\u597d\u7684\u4ecb\u7ecd Serverless\uff0c\u672c\u8282\u9996\u5148\u7814\u7a76\u5e94\u7528\u67b6\u6784\u7684\u6f14\u8fdb\u65b9\u5f0f\u3002 \u5355\u4f53\u67b6\u6784 21\u4e16\u7eaa\u524d\u7684\u67b6\u6784\u90fd\u662f\u5355\u4f53\u5e94\u7528\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5355\u4f53\u67b6\u6784 \u5355\u4f53\u67b6\u6784\u7684\u95ee\u9898\uff1a \u53ef\u7528\u6027\u98ce\u9669\uff1a\u670d\u52a1\u5668\u51fa\u95ee\u9898\uff0c\u5219\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528 \u4e1a\u52a1\u589e\u957f\u540e\u6d41\u91cf\u589e\u5927\uff0c\u670d\u52a1\u5668\u8ba1\u7b97\u8d44\u6e90\u4e0d\u591f \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u505a\u6cd5 \u2014\u2014 \u4e00\u822c\u6709 \u5782\u76f4\u4f38\u7f29 \u3001 \u6c34\u5e73\u4f38\u7f29 \u3002\u5782\u76f4\u4f38\u7f29\u4ee3\u4ef7\u9ad8\u6602\u4e14\u6709\u74f6\u9888\uff0c\u4e8e\u662f\u67b6\u6784\u6f14\u8fdb\u7a0b\u5982\u4e0b\u7684\u6c34\u5e73\u4f38\u7f29\u65b9\u5f0f\uff1a \u5355\u4f53\u67b6\u6784\uff08\u6c34\u5e73\u4f38\u7f29\uff09 \u91c7\u7528\u6c34\u5e73\u4f38\u7f29\u540e\u7684\u95ee\u9898\uff1a \u968f\u7814\u53d1\u4eba\u5458\u589e\u591a\uff0c\u4ee3\u7801\u51b2\u7a81\u96be\u4e8e\u5904\u7406\uff0c\u56e0\u4e3a\u5355\u4f53\u67b6\u6784\u4e0b\u7684\u4ee3\u7801\u662f\u6ca1\u6709\u660e\u786e\u7269\u7406\u8fb9\u754c\u3002 \u5fae\u670d\u52a1\u67b6\u6784 \u5fae\u670d\u52a1\u67b6\u6784\u4e0b\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u90e8\u7f72\u3001\u8fd0\u7ef4\u88ab\u5206\u62c6\u3002 \u5355\u4f53\u67b6\u6784\uff08\u6c34\u5e73\u4f38\u7f29\uff09 \u5fae\u670d\u52a1\u67b6\u6784\u5f15\u5165\u7684\u6311\u6218\uff1a \u5206\u5e03\u5f0f\u6280\u672f\u9009\u578b\uff1a\u670d\u52a1\u95f4\u901a\u4fe1\uff08\u540c\u6b65\u5982gRPC\u3001\u5f02\u6b65\u5982Kafka\uff09\u3001\u7f13\u5b58\u3001\u8ffd\u8e2a\u670d\u52a1 \u62c6\u5206\u65b9\u6cd5\u8bba\uff1a\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u3001\u9650\u754c\u4e0a\u4e0b\u6587 \u4e91\u539f\u751f \u6240\u8c13\u4e91\u539f\u751f\u670d\u52a1\uff1a \u57fa\u4e8e\u4e91\u4ea7\u54c1\u67b6\u6784 \u5e94\u7528\u751f\u547d\u5468\u671f\u6258\u7ba1 Serverless \u7684\u4ef7\u503c Serverless \u4e0d\u662f\u6307 Server \u771f\u6b63\u6d88\u5931\uff0c\u800c\u662f\u6307\u5f00\u53d1\u8005\u4e0d\u7528\u5173\u5fc3\u3002\u7c7b\u4f3c\u4e8e Java\u3001Python \u7b49\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e0b\uff0c\u5f00\u53d1\u8005\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u5206\u914d\u95ee\u9898\u3002\u4f46\u5185\u5b58\u8fd8\u5728\u90a3\u91cc\uff0c\u53ea\u662f\u4ea4\u7ed9\u5783\u573e\u6536\u96c6\u5668\u53bb\u7ba1\u7406\u3002 \u80cc\u666f \u4e91\u4e0a\u8d44\u6e90\u9664\u4e86\u670d\u52a1\u5668\u6240\u5305\u542b\u7684 \u57fa\u7840\u8ba1\u7b97 \u3001 \u5b58\u50a8 \u3001 \u7f51\u7edc\u4e4b\u5916 \uff0c\u8fd8\u5305\u62ec\u5404\u79cd\u7c7b\u522b\u7684\u4e0a\u5c42\u8d44\u6e90\u3002\u5982 \u6570\u636e\u5e93 \u3001 \u7f13\u5b58 \u3001 \u6d88\u606f \u3002 Berkeley\u6709\u4e00\u7bc7 Serverless Computing\u6982\u8ff0 \uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u63cf\u8ff0\uff1a Serverless \u613f\u666f \u201c\u5728\u4e91\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cServerful \u7684\u8ba1\u7b97\u5c31\u50cf\u4f7f\u7528\u4f4e\u7ea7\u7684\u6c47\u7f16\u8bed\u8a00\u7f16\u7a0b\uff0c\u800c Serverless \u7684\u8ba1\u7b97\u5c31\u50cf\u4f7f\u7528 Python \u8fd9\u6837\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u7f16\u7a0b\u3002\u4f8b\u5982\u5982 c = a + b c = a + b \u8fd9\u6837\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u7528\u6c47\u7f16\u63cf\u8ff0\uff0c\u5c31\u5fc5\u987b\u5148\u9009\u62e9\u51e0\u4e2a\u5bc4\u5b58\u5668\uff0c\u628a\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\uff0c\u8fdb\u884c\u6570\u5b66\u8ba1\u7b97\uff0c\u518d\u5b58\u50a8\u7ed3\u679c\u3002\u8fd9\u5c31\u597d\u6bd4\u4eca\u5929\u5728\u4e91\u73af\u5883\u4e0b Serverful \u7684\u8ba1\u7b97\uff0c\u5f00\u53d1\u9996\u5148\u9700\u8981\u5206\u914d\u6216\u627e\u5230\u53ef\u7528\u7684\u8d44\u6e90\uff0c\u7136\u540e\u52a0\u8f7d\u4ee3\u7801\u548c\u6570\u636e\uff0c\u518d\u6267\u884c\u8ba1\u7b97\uff0c\u5c06\u8ba1\u7b97\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u6700\u540e\u8fd8\u9700\u8981\u7ba1\u7406\u8d44\u6e90\u7684\u91ca\u653e\u3002\u201d \u622a\u6b622020\u5e74\uff0cServerful \u8fd8\u662f\u4e91\u8ba1\u7b97\u4e3b\u6d41\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u4f46\u672a\u6765\u5728 Serverless \u67b6\u6784\u4e0b\uff0c\u5f00\u53d1\u5e94\u8be5\u53ea\u9700\u8981\u5173\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u5c06\u8d44\u6e90\u7ba1\u7406\u4ea4\u7ed9\u5de5\u5177\u3002 Serverless \u7684\u4ef7\u503c \u4e0d\u7528\u5173\u5fc3\u670d\u52a1\u5668 \u81ea\u52a8\u8bc6\u522b\u6545\u969c\u3001\u6458\u9664\u6709\u95ee\u9898\u7684\u5b9e\u4f8b\u3001\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u8865\u4e01\u5347\u7ea7\u4e0d\u5f71\u54cd\u4e1a\u52a1\u3001\u65e5\u5fd7\u548c\u76d1\u63a7\u7cfb\u7edf\u9ed8\u8ba4\u6253\u901a\u3001\u81ea\u540c\u914d\u7f6e\u7cfb\u7edf\u5b89\u5168\u7b56\u7565\u4ee5\u907f\u514d\u98ce\u9669\u3001\u5f53\u8d44\u6e90\u4e0d\u591f\u65f6\u81ea\u52a8\u5206\u914d\u8d44\u6e90\u5e76\u5b89\u88c5\u76f8\u5173\u4ee3\u7801\u548c\u914d\u7f6e\u7b49\u3002 \u81ea\u52a8\u5f39\u6027 \u4e92\u8054\u7f51\u67b6\u6784\u5e94\u53ef\u4f38\u7f29\uff0c\u4e1a\u52a1\u4f1a\u6709\u660e\u663e\u7684\u9ad8\u5cf0\u548c\u4f4e\u4f30\uff0c\u5982\u4e00\u4e9b\u8425\u9500\u573a\u666f\u4e0b\u6709\u660e\u663e\u7684\u5bb9\u91cf\u9700\u6c42\uff0cServerless \u5e73\u53f0\u9700\u8981\u53ca\u65f6\u3001\u7a33\u5b9a\u5730\u5b9e\u73b0\u81ea\u52a8\u5f39\u6027\u3002 \u4e3a\u6b64\u5e73\u53f0\u9700\u8981\u6709\u5f88\u5f3a\u7684\u8d44\u6e90\u8c03\u5ea6\u80fd\u529b\uff0c\u4ee5\u53ca\u5bf9\u5404\u9879\u6307\u6807\uff08\u5982\u8d1f\u8f7d\u3001\u5185\u5b58\u3001\u5e76\u53d1\uff09\u6709\u654f\u9510\u7684\u611f\u77e5\u80fd\u529b\u3002 \u6309\u5b9e\u9645\u8d44\u6e90\u4f7f\u7528\u6536\u8d39 Serverful \u67b6\u6784\u4e0b\u8d44\u6e90\u4e00\u822c\u6309\u5360\u7528\u800c\u975e\u4f7f\u7528\u8ba1\u8d39\u3002\u4f46 Serverless \u67b6\u6784\u4e0b\u7528\u6237\u53ea\u9700\u4e3a\u5b9e\u9645\u4f7f\u7528\u7684\u8d44\u6e90\u4ed8\u8d39\uff0c\u5982\u6570\u636e\u5e93\u7684 Query \u6b21\u6570\u3001\u6570\u636e\u5b58\u50a8\u60c5\u51b5\u3002 \u66f4\u5c11\u7684\u4ee3\u7801\uff0c\u66f4\u5feb\u7684\u4ea4\u4ed8\u901f\u5ea6 \u57fa\u4e8e Serverless \u7684\u67b6\u6784\u4e0b\u4ee3\u7801\u4e00\u822c\u4f1a\u91cd\u5ea6\u4f7f\u7528\u540e\u7aef\u670d\u52a1\uff0c\u5c06\u6570\u636e\u3001\u72b6\u6001\u7b49\u5185\u5bb9\u4ece\u4ee3\u7801\u5206\u79bb\u51fa\u53bb\uff0c\u79fb\u81f3\u540e\u7aef\u670d\u52a1\u3002\u88ab\u64a4\u8d70\u7684 FaaS \u67b6\u6784\u5c06\u8fd0\u884c\u65f6\u7684 Runtime \u4e5f\u4ea4\u7ed9\u5e73\u53f0\u6765\u7ba1\u7406\uff0c\u8fd9\u610f\u5473\u7740 Serverless \u4e0b\u5e94\u7528\u4ee3\u7801\u4f53\u79ef\u66f4\u5c0f\u3001\u5206\u53d1\u66f4\u5feb\u3002\u56e0\u6b64\u53d1\u5e03\u3001\u6269\u5bb9\u7684\u65f6\u95f4\u4f1a\u52a0\u5feb\u3002 Serverless \u5e73\u53f0\u901a\u5e38\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u4e30\u5bcc\u7684 \u4ee3\u7801\u5b58\u50a8/\u6784\u5efa\u670d\u52a1\u3001\u7248\u672c\u7ba1\u7406\u670d\u52a1\u3001\u53d1\u5e03\u670d\u52a1\uff0c\u4ee5\u53ca\u7248\u672c\u5207\u6362\u80fd\u529b\uff0c\u4ee5\u5e2e\u52a9\u63d0\u5347\u53d1\u5e03\u901f\u5ea6\u3002 \u5e38\u89c1 Serverless \u67b6\u6784\u6a21\u5f0f \u6982\u8ff0 Serverless \u8ba1\u7b97\u4e00\u822c\u53ef\u4ee5\u7406\u89e3\u4e3a FaaS \u548c BaaS \u7684\u53e0\u52a0\u3002 Serverless \u7684\u539f\u751f\u5fc3\u667a\u662f\u8ba9\u4e1a\u52a1\u4eba\u5458\u4e13\u6ce8\u4e1a\u52a1\u903b\u8f91\uff0c\u5e2e\u52a9\u4e1a\u52a1\u4eba\u5458\u89e3\u51b3\u6ca1\u6709\u5fc5\u8981\u7531\u4ed6\u4eec\u89e3\u51b3\u7684\u6280\u672f\u95ee\u9898\u3002 \u2014\u2014 Ben Kehoe \u4e00\u822c\u53ef\u4ee5\u4ece\u5982\u4e0b\u89d2\u5ea6\u6765\u7406\u89e3 Serverless \u67b6\u6784\uff1a \u6280\u672f\uff1a\u8ba1\u7b97\u3001\u6570\u636e\u5b58\u50a8\u3001\u6d88\u606f\u901a\u4fe1 \u8861\u91cf\u7ef4\u5ea6\uff1a\u53ef\u8fd0\u7ef4\u6027\u3001\u5b89\u5168\u6027\u3001\u53ef\u9760\u6027\u3001\u53ef\u6269\u5c55\u6027\u3001\u6210\u672c \u4e0b\u9762\u5c06\u4ece\u82e5\u5e72\u573a\u666f\u6765\u7406\u89e3 Serverless \u67b6\u6784\u3002 \u3010\u573a\u666f\u4e00\u3011\u9759\u6001\u7ad9\u70b9 \u4e1a\u52a1\u9700\u6c42\uff1a\u4fe1\u606f\u5c55\u793a\u7ad9\u70b9 \u5c55\u793a\u4fe1\u606f \u66f4\u65b0\u4e0d\u9891\u7e41 \u4e0d\u786e\u5b9a\u8bbf\u95ee\u91cf \u67b6\u6784\u6f14\u8fdb \u67b6\u6784\u6f14\u8fdb \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6700\u57fa\u672c\u7684\u67b6\u6784\u662f\u5c06\u670d\u52a1\u5668\u653e\u5728IDC\u673a\u623f\u91cc\u9762\uff1b\u5982\u679c\u8003\u8651\u9ad8\u53ef\u7528\u6027\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861+\u4e91\u670d\u52a1\u5668\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\uff1b\u5bf9\u4e8e\u9759\u6001\u7ad9\u70b9\u53ef\u76f4\u63a5\u5c06\u5176\u7531\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u6765\u652f\u6301\uff0c\u5e76\u7528CDN\u505a\u7f13\u5b58\u3002 \u67b6\u6784\u5ef6\u4f38 \u6709\u4e00\u79cd\u8bf4\u6cd5\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u91cc\u9762\u6700\u96be\u5e94\u5bf9\u7684\u4e24\u4e2a\u95ee\u9898\u662f\uff1a \u7f13\u5b58\u5931\u6548/cache invalidation \u548c \u547d\u540d\u95ee\u9898/naming things \u3002 \u9759\u6001 \u662f\u4e00\u4e2a\u91cd\u8981\u5c5e\u6027\uff0c \u7f13\u5b58 \u4e5f\u662f\u8ba1\u7b97\u673a\u5f00\u53d1\u4e2d\u4e00\u9879\u91cd\u8981\u7684\u6280\u672f\u3002\u7f13\u5b58\u53ea\u8981\u5e94\u7528\u5f97\u5f53\u4e5f\u4f1a\u5927\u5e45\u63d0\u5347\u7cfb\u7edf\u6027\u80fd\u3002 CND\u9664\u4e86\u56de\u6e90\u5230\u5bf9\u8c61\u5b58\u50a8\u4e4b\u5916\uff0c\u8fd8\u80fd\u56de\u6e90\u5230\u52a8\u6001\u540e\u7aef\uff0c\u5982API gateway\u3001\u51fd\u6570\u8ba1\u7b97\u3001\u8d1f\u8f7d\u5747\u8861\u7b49\u3002 \u589e\u52a0\u51fd\u6570\u8ba1\u7b97 \u9664\u4e86\u4f7f\u7528CDN\u4f5c\u4e3a\u7f13\u5b58\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u7f13\u5b58\uff0c\u5982Redis\u7b49\u3002 \u3010\u573a\u666f\u4e8c\u3011\u5355\u4f53\u548c\u5fae\u670d\u52a1 \u4e1a\u52a1\u9700\u6c42\uff1a\u5546\u54c1\u8be6\u60c5\u9875 \u6d77\u91cf\u5546\u54c1 \u66f4\u65b0\u9891\u7e41 \u52a8\u6001\u4fe1\u606f\u6765\u6e90\u5e7f\u6cdb\uff0c\u5982\u57fa\u672c\u4fe1\u606f\u3001\u4ef7\u683c\u3001\u8fd0\u8d39\u3001\u9500\u91cf\u3001\u5e93\u5b58\u3001\u8bc4\u8bba\u7b49 \u67b6\u6784\u6f14\u8fdb \u67b6\u6784\u6f14\u8fdb \u67b6\u6784\u5ef6\u4f38 \u5fae\u670d\u52a1\u5185\u90e8\u91c7\u7528\u4fe1\u606f\u805a\u5408\u7684\u5f62\u5f0f\uff0c\u5916\u90e8\u5219\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u79fb\u52a8\u7aef\u91c7\u7528\u4e0d\u540c\u7684\u540e\u7aef\u3002 \u4e3a\u524d\u6bb5\u670d\u52a1\u7684\u540e\u7aef \u548c \u5fae\u670d\u52a1\u805a\u5408 \u3010\u573a\u666f\u4e09\u3011\u4e8b\u4ef6\u89e6\u53d1 \u4e1a\u52a1\u9700\u6c42\uff1a\u4e70\u5bb6\u79c0 \u53d1\u8868\u56fe\u7247\u548c\u89c6\u9891\u8bc4\u8bba \u5bf9\u56fe\u7247\u7f29\u653e\u3001\u52a0\u6c34\u5370\u3001\u5ba1\u6838 \u5bf9\u89c6\u9891\u505a\u591a\u79cd\u683c\u5f0f\u8f6c\u6362\u3001\u5ba1\u6838 \u67b6\u6784\u6f14\u8fdb \u67b6\u6784\u6f14\u8fdb \u4e0a\u56fe \u201c\u5fae\u670d\u52a1Serverful\u67b6\u6784\u201d \u4e2d\u5c06web\u5e94\u7528\u670d\u52a1\u5668\u548c\u6587\u4ef6\u5904\u7406\u670d\u52a1\u5668\u901a\u8fc7\u6d88\u606f\u961f\u5217\u89e3\u8026\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u8d44\u6e90\u4f38\u7f29\u7684\u9700\u6c42\u53ef\u80fd\u662f\u4e0d\u540c\u7684\uff0c\u4e00\u822c\u6587\u4ef6\u5904\u7406\u670d\u52a1\u9700\u8981\u66f4\u591a\u7684CPU\u3002 \u201c\u57fa\u4e8e\u4e8b\u4ef6\u89e6\u53d1\u7684Serverless\u67b6\u6784\u201d \u4e2d\u76f4\u63a5\u5c06\u6587\u4ef6\u4e0a\u4f20\u5230OSS\uff0c\u540c\u65f6OSS\u89e6\u53d1\u51fd\u6570\u8ba1\u7b97\uff1b\u800c\u6587\u4ef6\u7684\u663e\u793a\u5219\u662f\u901a\u8fc7OSS+CDN\u5b8c\u6210\u7684\u3002 \u67b6\u6784\u5ef6\u4f38 \u67b6\u6784\u5ef6\u4f38 \u3010\u573a\u666f\u4e09\u3011\u670d\u52a1\u7f16\u6392 \u4e1a\u52a1\u9700\u6c42\uff1a\u8ba2\u5355\u6d41\u7a0b \u5b8c\u6210\u591a\u6b65\u9aa4\u8ba2\u5355\u6d41\u7a0b\uff0c\u5305\u62ec\u9884\u7559\u5e93\u5b58\u3001\u786e\u8ba4\u652f\u4ed8\u3001\u5b89\u6392\u914d\u9001\u3001\u90ae\u4ef6\u77ed\u4fe1\u901a\u77e5\u7b49 \u53ef\u80fd\u6301\u7eed\u6570\u5929 \u9700\u8981\u5bf9\u5931\u8d25\u6b65\u9aa4\u91cd\u8bd5 \u6700\u7ec8\u5931\u8d25\uff0c\u9700\u8981\u5bf9\u5df2\u5b8c\u6210\u6b65\u9aa4\u56de\u6eda \u67b6\u6784\u6f14\u8fdb \u57fa\u4e8e\u4e8b\u4ef6\u89e6\u53d1\u7684Saga\u6a21\u5f0f \u91c7\u7528\u4e00\u4e2a\u6d88\u606f\u603b\u7ebf\uff0c\u8ba9\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u901a\u8fc7\u4e8b\u4ef6\u6765\u4f20\u9012\u4fe1\u606f\u3002 \u57fa\u4e8e\u4e8b\u4ef6\u6d41\u7684Saga\u6a21\u5f0f \u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u72ec\u7acb\uff0c\u6709\u4e00\u4e2a\u96c6\u4e2d\u7684\u534f\u8c03\u8005\u670d\u52a1\u6765\u8c03\u5ea6\u5404\u4e2a\u5355\u72ec\u7684\u4e1a\u52a1\u670d\u52a1\uff0c\u4e1a\u52a1\u903b\u8f91\u548c\u72b6\u6001\u7531\u96c6\u4e2d\u534f\u8c03\u8005\u6765\u7ef4\u62a4\u3002 Serverless\u6280\u672f\u9009\u578b \u53c2\u8003\u6587\u732e \u5efa\u7acb Serverless \u601d\u7ef4","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"survey/serverless/basic/#serverless","text":"\u672c\u8282\u5185\u5bb9\u53c2\u8003\u81ea\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a\u516c\u5f00\u8bfe \u5efa\u7acb Serverless \u601d\u7ef4 Serverless\u7684\u8bbe\u8ba1\u76ee\u6807\u5728\u4e8e\u8ba9\u4e1a\u52a1\u5f00\u53d1\u4eba\u5458\u4e13\u6ce8\u4e1a\u52a1\u4ee3\u7801\uff0c\u800c\u65e0\u9700\u8003\u8651\u6240\u6709\u670d\u52a1\u5668\u76f8\u5173\u7684\u95ee\u9898\u3002","title":"Serverless \u6280\u672f\u6982\u8ff0"},{"location":"survey/serverless/basic/#_1","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u4ecb\u7ecd Serverless\uff0c\u672c\u8282\u9996\u5148\u7814\u7a76\u5e94\u7528\u67b6\u6784\u7684\u6f14\u8fdb\u65b9\u5f0f\u3002","title":"\u67b6\u6784\u7684\u6f14\u8fdb"},{"location":"survey/serverless/basic/#_2","text":"21\u4e16\u7eaa\u524d\u7684\u67b6\u6784\u90fd\u662f\u5355\u4f53\u5e94\u7528\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5355\u4f53\u67b6\u6784 \u5355\u4f53\u67b6\u6784\u7684\u95ee\u9898\uff1a \u53ef\u7528\u6027\u98ce\u9669\uff1a\u670d\u52a1\u5668\u51fa\u95ee\u9898\uff0c\u5219\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528 \u4e1a\u52a1\u589e\u957f\u540e\u6d41\u91cf\u589e\u5927\uff0c\u670d\u52a1\u5668\u8ba1\u7b97\u8d44\u6e90\u4e0d\u591f \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u505a\u6cd5 \u2014\u2014 \u4e00\u822c\u6709 \u5782\u76f4\u4f38\u7f29 \u3001 \u6c34\u5e73\u4f38\u7f29 \u3002\u5782\u76f4\u4f38\u7f29\u4ee3\u4ef7\u9ad8\u6602\u4e14\u6709\u74f6\u9888\uff0c\u4e8e\u662f\u67b6\u6784\u6f14\u8fdb\u7a0b\u5982\u4e0b\u7684\u6c34\u5e73\u4f38\u7f29\u65b9\u5f0f\uff1a \u5355\u4f53\u67b6\u6784\uff08\u6c34\u5e73\u4f38\u7f29\uff09 \u91c7\u7528\u6c34\u5e73\u4f38\u7f29\u540e\u7684\u95ee\u9898\uff1a \u968f\u7814\u53d1\u4eba\u5458\u589e\u591a\uff0c\u4ee3\u7801\u51b2\u7a81\u96be\u4e8e\u5904\u7406\uff0c\u56e0\u4e3a\u5355\u4f53\u67b6\u6784\u4e0b\u7684\u4ee3\u7801\u662f\u6ca1\u6709\u660e\u786e\u7269\u7406\u8fb9\u754c\u3002","title":"\u5355\u4f53\u67b6\u6784"},{"location":"survey/serverless/basic/#_3","text":"\u5fae\u670d\u52a1\u67b6\u6784\u4e0b\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u90e8\u7f72\u3001\u8fd0\u7ef4\u88ab\u5206\u62c6\u3002 \u5355\u4f53\u67b6\u6784\uff08\u6c34\u5e73\u4f38\u7f29\uff09 \u5fae\u670d\u52a1\u67b6\u6784\u5f15\u5165\u7684\u6311\u6218\uff1a \u5206\u5e03\u5f0f\u6280\u672f\u9009\u578b\uff1a\u670d\u52a1\u95f4\u901a\u4fe1\uff08\u540c\u6b65\u5982gRPC\u3001\u5f02\u6b65\u5982Kafka\uff09\u3001\u7f13\u5b58\u3001\u8ffd\u8e2a\u670d\u52a1 \u62c6\u5206\u65b9\u6cd5\u8bba\uff1a\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1\u3001\u9650\u754c\u4e0a\u4e0b\u6587","title":"\u5fae\u670d\u52a1\u67b6\u6784"},{"location":"survey/serverless/basic/#_4","text":"\u6240\u8c13\u4e91\u539f\u751f\u670d\u52a1\uff1a \u57fa\u4e8e\u4e91\u4ea7\u54c1\u67b6\u6784 \u5e94\u7528\u751f\u547d\u5468\u671f\u6258\u7ba1","title":"\u4e91\u539f\u751f"},{"location":"survey/serverless/basic/#serverless_1","text":"Serverless \u4e0d\u662f\u6307 Server \u771f\u6b63\u6d88\u5931\uff0c\u800c\u662f\u6307\u5f00\u53d1\u8005\u4e0d\u7528\u5173\u5fc3\u3002\u7c7b\u4f3c\u4e8e Java\u3001Python \u7b49\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e0b\uff0c\u5f00\u53d1\u8005\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u5206\u914d\u95ee\u9898\u3002\u4f46\u5185\u5b58\u8fd8\u5728\u90a3\u91cc\uff0c\u53ea\u662f\u4ea4\u7ed9\u5783\u573e\u6536\u96c6\u5668\u53bb\u7ba1\u7406\u3002","title":"Serverless \u7684\u4ef7\u503c"},{"location":"survey/serverless/basic/#_5","text":"\u4e91\u4e0a\u8d44\u6e90\u9664\u4e86\u670d\u52a1\u5668\u6240\u5305\u542b\u7684 \u57fa\u7840\u8ba1\u7b97 \u3001 \u5b58\u50a8 \u3001 \u7f51\u7edc\u4e4b\u5916 \uff0c\u8fd8\u5305\u62ec\u5404\u79cd\u7c7b\u522b\u7684\u4e0a\u5c42\u8d44\u6e90\u3002\u5982 \u6570\u636e\u5e93 \u3001 \u7f13\u5b58 \u3001 \u6d88\u606f \u3002 Berkeley\u6709\u4e00\u7bc7 Serverless Computing\u6982\u8ff0 \uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u63cf\u8ff0\uff1a Serverless \u613f\u666f \u201c\u5728\u4e91\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cServerful \u7684\u8ba1\u7b97\u5c31\u50cf\u4f7f\u7528\u4f4e\u7ea7\u7684\u6c47\u7f16\u8bed\u8a00\u7f16\u7a0b\uff0c\u800c Serverless \u7684\u8ba1\u7b97\u5c31\u50cf\u4f7f\u7528 Python \u8fd9\u6837\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u7f16\u7a0b\u3002\u4f8b\u5982\u5982 c = a + b c = a + b \u8fd9\u6837\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u7528\u6c47\u7f16\u63cf\u8ff0\uff0c\u5c31\u5fc5\u987b\u5148\u9009\u62e9\u51e0\u4e2a\u5bc4\u5b58\u5668\uff0c\u628a\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\uff0c\u8fdb\u884c\u6570\u5b66\u8ba1\u7b97\uff0c\u518d\u5b58\u50a8\u7ed3\u679c\u3002\u8fd9\u5c31\u597d\u6bd4\u4eca\u5929\u5728\u4e91\u73af\u5883\u4e0b Serverful \u7684\u8ba1\u7b97\uff0c\u5f00\u53d1\u9996\u5148\u9700\u8981\u5206\u914d\u6216\u627e\u5230\u53ef\u7528\u7684\u8d44\u6e90\uff0c\u7136\u540e\u52a0\u8f7d\u4ee3\u7801\u548c\u6570\u636e\uff0c\u518d\u6267\u884c\u8ba1\u7b97\uff0c\u5c06\u8ba1\u7b97\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u6700\u540e\u8fd8\u9700\u8981\u7ba1\u7406\u8d44\u6e90\u7684\u91ca\u653e\u3002\u201d \u622a\u6b622020\u5e74\uff0cServerful \u8fd8\u662f\u4e91\u8ba1\u7b97\u4e3b\u6d41\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u4f46\u672a\u6765\u5728 Serverless \u67b6\u6784\u4e0b\uff0c\u5f00\u53d1\u5e94\u8be5\u53ea\u9700\u8981\u5173\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u5c06\u8d44\u6e90\u7ba1\u7406\u4ea4\u7ed9\u5de5\u5177\u3002","title":"\u80cc\u666f"},{"location":"survey/serverless/basic/#serverless_2","text":"\u4e0d\u7528\u5173\u5fc3\u670d\u52a1\u5668 \u81ea\u52a8\u8bc6\u522b\u6545\u969c\u3001\u6458\u9664\u6709\u95ee\u9898\u7684\u5b9e\u4f8b\u3001\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u8865\u4e01\u5347\u7ea7\u4e0d\u5f71\u54cd\u4e1a\u52a1\u3001\u65e5\u5fd7\u548c\u76d1\u63a7\u7cfb\u7edf\u9ed8\u8ba4\u6253\u901a\u3001\u81ea\u540c\u914d\u7f6e\u7cfb\u7edf\u5b89\u5168\u7b56\u7565\u4ee5\u907f\u514d\u98ce\u9669\u3001\u5f53\u8d44\u6e90\u4e0d\u591f\u65f6\u81ea\u52a8\u5206\u914d\u8d44\u6e90\u5e76\u5b89\u88c5\u76f8\u5173\u4ee3\u7801\u548c\u914d\u7f6e\u7b49\u3002 \u81ea\u52a8\u5f39\u6027 \u4e92\u8054\u7f51\u67b6\u6784\u5e94\u53ef\u4f38\u7f29\uff0c\u4e1a\u52a1\u4f1a\u6709\u660e\u663e\u7684\u9ad8\u5cf0\u548c\u4f4e\u4f30\uff0c\u5982\u4e00\u4e9b\u8425\u9500\u573a\u666f\u4e0b\u6709\u660e\u663e\u7684\u5bb9\u91cf\u9700\u6c42\uff0cServerless \u5e73\u53f0\u9700\u8981\u53ca\u65f6\u3001\u7a33\u5b9a\u5730\u5b9e\u73b0\u81ea\u52a8\u5f39\u6027\u3002 \u4e3a\u6b64\u5e73\u53f0\u9700\u8981\u6709\u5f88\u5f3a\u7684\u8d44\u6e90\u8c03\u5ea6\u80fd\u529b\uff0c\u4ee5\u53ca\u5bf9\u5404\u9879\u6307\u6807\uff08\u5982\u8d1f\u8f7d\u3001\u5185\u5b58\u3001\u5e76\u53d1\uff09\u6709\u654f\u9510\u7684\u611f\u77e5\u80fd\u529b\u3002 \u6309\u5b9e\u9645\u8d44\u6e90\u4f7f\u7528\u6536\u8d39 Serverful \u67b6\u6784\u4e0b\u8d44\u6e90\u4e00\u822c\u6309\u5360\u7528\u800c\u975e\u4f7f\u7528\u8ba1\u8d39\u3002\u4f46 Serverless \u67b6\u6784\u4e0b\u7528\u6237\u53ea\u9700\u4e3a\u5b9e\u9645\u4f7f\u7528\u7684\u8d44\u6e90\u4ed8\u8d39\uff0c\u5982\u6570\u636e\u5e93\u7684 Query \u6b21\u6570\u3001\u6570\u636e\u5b58\u50a8\u60c5\u51b5\u3002 \u66f4\u5c11\u7684\u4ee3\u7801\uff0c\u66f4\u5feb\u7684\u4ea4\u4ed8\u901f\u5ea6 \u57fa\u4e8e Serverless \u7684\u67b6\u6784\u4e0b\u4ee3\u7801\u4e00\u822c\u4f1a\u91cd\u5ea6\u4f7f\u7528\u540e\u7aef\u670d\u52a1\uff0c\u5c06\u6570\u636e\u3001\u72b6\u6001\u7b49\u5185\u5bb9\u4ece\u4ee3\u7801\u5206\u79bb\u51fa\u53bb\uff0c\u79fb\u81f3\u540e\u7aef\u670d\u52a1\u3002\u88ab\u64a4\u8d70\u7684 FaaS \u67b6\u6784\u5c06\u8fd0\u884c\u65f6\u7684 Runtime \u4e5f\u4ea4\u7ed9\u5e73\u53f0\u6765\u7ba1\u7406\uff0c\u8fd9\u610f\u5473\u7740 Serverless \u4e0b\u5e94\u7528\u4ee3\u7801\u4f53\u79ef\u66f4\u5c0f\u3001\u5206\u53d1\u66f4\u5feb\u3002\u56e0\u6b64\u53d1\u5e03\u3001\u6269\u5bb9\u7684\u65f6\u95f4\u4f1a\u52a0\u5feb\u3002 Serverless \u5e73\u53f0\u901a\u5e38\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u4e30\u5bcc\u7684 \u4ee3\u7801\u5b58\u50a8/\u6784\u5efa\u670d\u52a1\u3001\u7248\u672c\u7ba1\u7406\u670d\u52a1\u3001\u53d1\u5e03\u670d\u52a1\uff0c\u4ee5\u53ca\u7248\u672c\u5207\u6362\u80fd\u529b\uff0c\u4ee5\u5e2e\u52a9\u63d0\u5347\u53d1\u5e03\u901f\u5ea6\u3002","title":"Serverless \u7684\u4ef7\u503c"},{"location":"survey/serverless/basic/#serverless_3","text":"","title":"\u5e38\u89c1 Serverless \u67b6\u6784\u6a21\u5f0f"},{"location":"survey/serverless/basic/#_6","text":"Serverless \u8ba1\u7b97\u4e00\u822c\u53ef\u4ee5\u7406\u89e3\u4e3a FaaS \u548c BaaS \u7684\u53e0\u52a0\u3002 Serverless \u7684\u539f\u751f\u5fc3\u667a\u662f\u8ba9\u4e1a\u52a1\u4eba\u5458\u4e13\u6ce8\u4e1a\u52a1\u903b\u8f91\uff0c\u5e2e\u52a9\u4e1a\u52a1\u4eba\u5458\u89e3\u51b3\u6ca1\u6709\u5fc5\u8981\u7531\u4ed6\u4eec\u89e3\u51b3\u7684\u6280\u672f\u95ee\u9898\u3002 \u2014\u2014 Ben Kehoe \u4e00\u822c\u53ef\u4ee5\u4ece\u5982\u4e0b\u89d2\u5ea6\u6765\u7406\u89e3 Serverless \u67b6\u6784\uff1a \u6280\u672f\uff1a\u8ba1\u7b97\u3001\u6570\u636e\u5b58\u50a8\u3001\u6d88\u606f\u901a\u4fe1 \u8861\u91cf\u7ef4\u5ea6\uff1a\u53ef\u8fd0\u7ef4\u6027\u3001\u5b89\u5168\u6027\u3001\u53ef\u9760\u6027\u3001\u53ef\u6269\u5c55\u6027\u3001\u6210\u672c \u4e0b\u9762\u5c06\u4ece\u82e5\u5e72\u573a\u666f\u6765\u7406\u89e3 Serverless \u67b6\u6784\u3002","title":"\u6982\u8ff0"},{"location":"survey/serverless/basic/#_7","text":"","title":"\u3010\u573a\u666f\u4e00\u3011\u9759\u6001\u7ad9\u70b9"},{"location":"survey/serverless/basic/#_8","text":"\u5c55\u793a\u4fe1\u606f \u66f4\u65b0\u4e0d\u9891\u7e41 \u4e0d\u786e\u5b9a\u8bbf\u95ee\u91cf","title":"\u4e1a\u52a1\u9700\u6c42\uff1a\u4fe1\u606f\u5c55\u793a\u7ad9\u70b9"},{"location":"survey/serverless/basic/#_9","text":"\u67b6\u6784\u6f14\u8fdb \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6700\u57fa\u672c\u7684\u67b6\u6784\u662f\u5c06\u670d\u52a1\u5668\u653e\u5728IDC\u673a\u623f\u91cc\u9762\uff1b\u5982\u679c\u8003\u8651\u9ad8\u53ef\u7528\u6027\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861+\u4e91\u670d\u52a1\u5668\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\uff1b\u5bf9\u4e8e\u9759\u6001\u7ad9\u70b9\u53ef\u76f4\u63a5\u5c06\u5176\u7531\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u6765\u652f\u6301\uff0c\u5e76\u7528CDN\u505a\u7f13\u5b58\u3002","title":"\u67b6\u6784\u6f14\u8fdb"},{"location":"survey/serverless/basic/#_10","text":"\u6709\u4e00\u79cd\u8bf4\u6cd5\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u91cc\u9762\u6700\u96be\u5e94\u5bf9\u7684\u4e24\u4e2a\u95ee\u9898\u662f\uff1a \u7f13\u5b58\u5931\u6548/cache invalidation \u548c \u547d\u540d\u95ee\u9898/naming things \u3002 \u9759\u6001 \u662f\u4e00\u4e2a\u91cd\u8981\u5c5e\u6027\uff0c \u7f13\u5b58 \u4e5f\u662f\u8ba1\u7b97\u673a\u5f00\u53d1\u4e2d\u4e00\u9879\u91cd\u8981\u7684\u6280\u672f\u3002\u7f13\u5b58\u53ea\u8981\u5e94\u7528\u5f97\u5f53\u4e5f\u4f1a\u5927\u5e45\u63d0\u5347\u7cfb\u7edf\u6027\u80fd\u3002 CND\u9664\u4e86\u56de\u6e90\u5230\u5bf9\u8c61\u5b58\u50a8\u4e4b\u5916\uff0c\u8fd8\u80fd\u56de\u6e90\u5230\u52a8\u6001\u540e\u7aef\uff0c\u5982API gateway\u3001\u51fd\u6570\u8ba1\u7b97\u3001\u8d1f\u8f7d\u5747\u8861\u7b49\u3002 \u589e\u52a0\u51fd\u6570\u8ba1\u7b97 \u9664\u4e86\u4f7f\u7528CDN\u4f5c\u4e3a\u7f13\u5b58\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u7f13\u5b58\uff0c\u5982Redis\u7b49\u3002","title":"\u67b6\u6784\u5ef6\u4f38"},{"location":"survey/serverless/basic/#_11","text":"","title":"\u3010\u573a\u666f\u4e8c\u3011\u5355\u4f53\u548c\u5fae\u670d\u52a1"},{"location":"survey/serverless/basic/#_12","text":"\u6d77\u91cf\u5546\u54c1 \u66f4\u65b0\u9891\u7e41 \u52a8\u6001\u4fe1\u606f\u6765\u6e90\u5e7f\u6cdb\uff0c\u5982\u57fa\u672c\u4fe1\u606f\u3001\u4ef7\u683c\u3001\u8fd0\u8d39\u3001\u9500\u91cf\u3001\u5e93\u5b58\u3001\u8bc4\u8bba\u7b49","title":"\u4e1a\u52a1\u9700\u6c42\uff1a\u5546\u54c1\u8be6\u60c5\u9875"},{"location":"survey/serverless/basic/#_13","text":"\u67b6\u6784\u6f14\u8fdb","title":"\u67b6\u6784\u6f14\u8fdb"},{"location":"survey/serverless/basic/#_14","text":"\u5fae\u670d\u52a1\u5185\u90e8\u91c7\u7528\u4fe1\u606f\u805a\u5408\u7684\u5f62\u5f0f\uff0c\u5916\u90e8\u5219\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u79fb\u52a8\u7aef\u91c7\u7528\u4e0d\u540c\u7684\u540e\u7aef\u3002 \u4e3a\u524d\u6bb5\u670d\u52a1\u7684\u540e\u7aef \u548c \u5fae\u670d\u52a1\u805a\u5408","title":"\u67b6\u6784\u5ef6\u4f38"},{"location":"survey/serverless/basic/#_15","text":"","title":"\u3010\u573a\u666f\u4e09\u3011\u4e8b\u4ef6\u89e6\u53d1"},{"location":"survey/serverless/basic/#_16","text":"\u53d1\u8868\u56fe\u7247\u548c\u89c6\u9891\u8bc4\u8bba \u5bf9\u56fe\u7247\u7f29\u653e\u3001\u52a0\u6c34\u5370\u3001\u5ba1\u6838 \u5bf9\u89c6\u9891\u505a\u591a\u79cd\u683c\u5f0f\u8f6c\u6362\u3001\u5ba1\u6838","title":"\u4e1a\u52a1\u9700\u6c42\uff1a\u4e70\u5bb6\u79c0"},{"location":"survey/serverless/basic/#_17","text":"\u67b6\u6784\u6f14\u8fdb \u4e0a\u56fe \u201c\u5fae\u670d\u52a1Serverful\u67b6\u6784\u201d \u4e2d\u5c06web\u5e94\u7528\u670d\u52a1\u5668\u548c\u6587\u4ef6\u5904\u7406\u670d\u52a1\u5668\u901a\u8fc7\u6d88\u606f\u961f\u5217\u89e3\u8026\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u8d44\u6e90\u4f38\u7f29\u7684\u9700\u6c42\u53ef\u80fd\u662f\u4e0d\u540c\u7684\uff0c\u4e00\u822c\u6587\u4ef6\u5904\u7406\u670d\u52a1\u9700\u8981\u66f4\u591a\u7684CPU\u3002 \u201c\u57fa\u4e8e\u4e8b\u4ef6\u89e6\u53d1\u7684Serverless\u67b6\u6784\u201d \u4e2d\u76f4\u63a5\u5c06\u6587\u4ef6\u4e0a\u4f20\u5230OSS\uff0c\u540c\u65f6OSS\u89e6\u53d1\u51fd\u6570\u8ba1\u7b97\uff1b\u800c\u6587\u4ef6\u7684\u663e\u793a\u5219\u662f\u901a\u8fc7OSS+CDN\u5b8c\u6210\u7684\u3002","title":"\u67b6\u6784\u6f14\u8fdb"},{"location":"survey/serverless/basic/#_18","text":"\u67b6\u6784\u5ef6\u4f38","title":"\u67b6\u6784\u5ef6\u4f38"},{"location":"survey/serverless/basic/#_19","text":"","title":"\u3010\u573a\u666f\u4e09\u3011\u670d\u52a1\u7f16\u6392"},{"location":"survey/serverless/basic/#_20","text":"\u5b8c\u6210\u591a\u6b65\u9aa4\u8ba2\u5355\u6d41\u7a0b\uff0c\u5305\u62ec\u9884\u7559\u5e93\u5b58\u3001\u786e\u8ba4\u652f\u4ed8\u3001\u5b89\u6392\u914d\u9001\u3001\u90ae\u4ef6\u77ed\u4fe1\u901a\u77e5\u7b49 \u53ef\u80fd\u6301\u7eed\u6570\u5929 \u9700\u8981\u5bf9\u5931\u8d25\u6b65\u9aa4\u91cd\u8bd5 \u6700\u7ec8\u5931\u8d25\uff0c\u9700\u8981\u5bf9\u5df2\u5b8c\u6210\u6b65\u9aa4\u56de\u6eda","title":"\u4e1a\u52a1\u9700\u6c42\uff1a\u8ba2\u5355\u6d41\u7a0b"},{"location":"survey/serverless/basic/#_21","text":"\u57fa\u4e8e\u4e8b\u4ef6\u89e6\u53d1\u7684Saga\u6a21\u5f0f \u91c7\u7528\u4e00\u4e2a\u6d88\u606f\u603b\u7ebf\uff0c\u8ba9\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u901a\u8fc7\u4e8b\u4ef6\u6765\u4f20\u9012\u4fe1\u606f\u3002 \u57fa\u4e8e\u4e8b\u4ef6\u6d41\u7684Saga\u6a21\u5f0f \u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u72ec\u7acb\uff0c\u6709\u4e00\u4e2a\u96c6\u4e2d\u7684\u534f\u8c03\u8005\u670d\u52a1\u6765\u8c03\u5ea6\u5404\u4e2a\u5355\u72ec\u7684\u4e1a\u52a1\u670d\u52a1\uff0c\u4e1a\u52a1\u903b\u8f91\u548c\u72b6\u6001\u7531\u96c6\u4e2d\u534f\u8c03\u8005\u6765\u7ef4\u62a4\u3002","title":"\u67b6\u6784\u6f14\u8fdb"},{"location":"survey/serverless/basic/#serverless_4","text":"","title":"Serverless\u6280\u672f\u9009\u578b"},{"location":"survey/serverless/basic/#_22","text":"\u5efa\u7acb Serverless \u601d\u7ef4","title":"\u53c2\u8003\u6587\u732e"}]}