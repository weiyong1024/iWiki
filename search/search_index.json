{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 iWiki","title":"\u7b80\u4ecb"},{"location":"#iwiki","text":"","title":"\u6b22\u8fce\u6765\u5230 iWiki"},{"location":"about/","text":"\u5173\u4e8e\u4f5c\u8005 \u90ae\u7bb1 weiyong1024@gmail.com","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"about/#_2","text":"weiyong1024@gmail.com","title":"\u90ae\u7bb1"},{"location":"basic/merge_sort/","text":"\u5f52\u5e76\u6392\u5e8f \u4ee3\u7801 void merge ( int * a , int l , int m , int r ) { // Merge two sub-arraies a[l...m] & a[m + 1...r] into a[l...r]. int n1 = m - l + 1 ; int n2 = r - m ; int L [ n1 ], R [ n2 ]; for ( int i = 0 ; i < n1 ; i ++ ) L [ i ] = a [ l + i ]; for ( int j = 0 ; j < n2 ; j ++ ) R [ j ] = a [ m + 1 + j ]; int i = 0 , j = 0 , k = l ; // Initial index of left array, right array, merged array. while ( i < n1 && j < n2 ) if ( L [ i ] <= R [ j ]) a [ k ++ ] = L [ i ++ ]; else a [ k ++ ] = R [ j ++ ]; while ( i < n1 ) a [ k ++ ] = L [ i ++ ]; while ( j < n2 ) a [ k ++ ] = R [ j ++ ]; } void merge_sort ( int * a , int l , int r ) { // Sort array a[l...r]. if ( l >= r ) return ; int m = ( l + r ) >> 1 ; merge_sort ( a , l , m ); merge_sort ( a , m + 1 , r ); merge ( a , l , m , r ); } \u7b97\u6cd5 \u5206\u6cbb\u6cd5\uff0c\u540e\u5e8f\u9012\u5f52\u3002 \u5c06\u6570\u7ec4\u6298\u534a\u5206\u6210\u5de6\u3001\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6392\u5e8f\uff0c\u518d\u5bf9\u6709\u5e8f\u7684\u5de6\u3001\u53f3\u4e24\u90e8\u5206\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"basic/merge_sort/#_1","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"basic/merge_sort/#_2","text":"void merge ( int * a , int l , int m , int r ) { // Merge two sub-arraies a[l...m] & a[m + 1...r] into a[l...r]. int n1 = m - l + 1 ; int n2 = r - m ; int L [ n1 ], R [ n2 ]; for ( int i = 0 ; i < n1 ; i ++ ) L [ i ] = a [ l + i ]; for ( int j = 0 ; j < n2 ; j ++ ) R [ j ] = a [ m + 1 + j ]; int i = 0 , j = 0 , k = l ; // Initial index of left array, right array, merged array. while ( i < n1 && j < n2 ) if ( L [ i ] <= R [ j ]) a [ k ++ ] = L [ i ++ ]; else a [ k ++ ] = R [ j ++ ]; while ( i < n1 ) a [ k ++ ] = L [ i ++ ]; while ( j < n2 ) a [ k ++ ] = R [ j ++ ]; } void merge_sort ( int * a , int l , int r ) { // Sort array a[l...r]. if ( l >= r ) return ; int m = ( l + r ) >> 1 ; merge_sort ( a , l , m ); merge_sort ( a , m + 1 , r ); merge ( a , l , m , r ); }","title":"\u4ee3\u7801"},{"location":"basic/merge_sort/#_3","text":"\u5206\u6cbb\u6cd5\uff0c\u540e\u5e8f\u9012\u5f52\u3002 \u5c06\u6570\u7ec4\u6298\u534a\u5206\u6210\u5de6\u3001\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6392\u5e8f\uff0c\u518d\u5bf9\u6709\u5e8f\u7684\u5de6\u3001\u53f3\u4e24\u90e8\u5206\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u7b97\u6cd5"},{"location":"basic/quick_sort/","text":"\u5feb\u901f\u6392\u5e8f \u4ee3\u7801 void quick ( int * a , int l , int r ) { // Sort a[l...r]. if ( l >= r ) return ; int i = l + 1 , j = r ; while ( 1 ) { // while ( ! ( a [ l ] < a [ i ] || i == r )) i ++ ; while ( ! ( a [ l ] >= a [ j ] || j == l )) j -- ; if ( i < j ) { int tmp = a [ i ]; a [ i ] = a [ j ], a [ j ] = tmp ; } else break ; } int tmp = a [ l ]; a [ l ] = a [ j ], a [ j ] = tmp ; quick ( a , l , j - 1 ); quick ( a , j + 1 , r ); } \u7b97\u6cd5 \u5206\u6cbb\u6cd5\uff0c\u5148\u5e8f\u9012\u5f52\u3002 \u5c06\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u6309\u9996\u5143\u5927\u5c0f\u5206\u8fb9\uff0c\u518d\u5bf9\u4e24\u8fb9\u5206\u522b\u9012\u5f52\u5904\u7406\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002 \u5b9e\u73b0 \u4e0a\u8ff0\u201c\u5206\u8fb9\u201d\u64cd\u4f5c \u51fa\u81ea\u5510\u53d1\u6839\u8001\u5e08\u7684\u300a\u6570\u636e\u7ed3\u6784\u300b\u6559\u6750\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u4ece\u5e8f\u5217\u4e24\u7aef\u5047\u5e01\u5c06\u6574\u4e2a\u5e8f\u5217\u6309\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5206\u7c7b\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"basic/quick_sort/#_1","text":"","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"basic/quick_sort/#_2","text":"void quick ( int * a , int l , int r ) { // Sort a[l...r]. if ( l >= r ) return ; int i = l + 1 , j = r ; while ( 1 ) { // while ( ! ( a [ l ] < a [ i ] || i == r )) i ++ ; while ( ! ( a [ l ] >= a [ j ] || j == l )) j -- ; if ( i < j ) { int tmp = a [ i ]; a [ i ] = a [ j ], a [ j ] = tmp ; } else break ; } int tmp = a [ l ]; a [ l ] = a [ j ], a [ j ] = tmp ; quick ( a , l , j - 1 ); quick ( a , j + 1 , r ); }","title":"\u4ee3\u7801"},{"location":"basic/quick_sort/#_3","text":"\u5206\u6cbb\u6cd5\uff0c\u5148\u5e8f\u9012\u5f52\u3002 \u5c06\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u6309\u9996\u5143\u5927\u5c0f\u5206\u8fb9\uff0c\u518d\u5bf9\u4e24\u8fb9\u5206\u522b\u9012\u5f52\u5904\u7406\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n\\log{n}) O(n\\log{n}) \u3002","title":"\u7b97\u6cd5"},{"location":"basic/quick_sort/#_4","text":"\u4e0a\u8ff0\u201c\u5206\u8fb9\u201d\u64cd\u4f5c \u51fa\u81ea\u5510\u53d1\u6839\u8001\u5e08\u7684\u300a\u6570\u636e\u7ed3\u6784\u300b\u6559\u6750\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u4ece\u5e8f\u5217\u4e24\u7aef\u5047\u5e01\u5c06\u6574\u4e2a\u5e8f\u5217\u6309\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5206\u7c7b\u3002","title":"\u5b9e\u73b0"},{"location":"data_structure/fenwick/","text":"Fenwick/\u6811\u72b6\u6570\u7ec4 Fenwick\u6811\uff0c\u4e5f\u53ebbinary index tree\uff0c\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5143\u7d20\u503c\u548c\u8ba1\u7b97\u524d\u7f00\u548c\u64cd\u4f5c \u95ee\u9898 \u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c \u4ee3\u7801 template < typename T > class BIT { public : BIT () {} BIT ( int _sz ) : sz ( _sz ) { bit = vector < T > ( sz + 1 , 0 ); } BIT ( vector < T > arr ) : sz (( int ) arr . size ()) { bit = vector < T > ( sz + 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } void Add ( int x , T val ) { for ( x ++ ; x <= sz ; x += x & - x ) bit [ x ] += val ; } T Query ( int x ) { // Sum [0, x] T ans = 0 ; for ( x ++ ; x ; x -= x & - x ) ans += bit [ x ]; return ans ; } T Query ( int l , int r ) { // Sum [l, r) return Query ( r - 1 ) - Query ( l - 1 ); } private : int sz ; vector < T > bit ; }; \u7b97\u6cd5 \u6811\u4e2d\u8282\u70b9\u7f16\u53f7 i i \u4ee3\u8868\u524di\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u662f\u76f8\u6bd4\u7236\u8282\u70b9\u591a\u51fa\u6765\u7684\u90a3\u4e00\u90e8\u5206\u5143\u7d20\u548c\u3002\u987e\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u56de\u6eaf\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u4e4b\u548c\u5c31\u662f\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u6ce8\uff1a\u82e5 x x \u4e3a\u6b63\uff0c\u5219 x \\& -x x \\& -x \u4e3a x x \u4f4e\u4f4d 1 1 \u6240\u4ee3\u8868\u7684\u6570\u3002 \u8ba8\u8bba \u4e0e\u7ebf\u6bb5\u6811\u7684\u533a\u522b \u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\uff0c\u4ece\u6811\u72b6\u6570\u7ec4\u7d22\u5f15\u66f4\u65b0\u7684\u65b9\u5f0f\u53ef\u89c1\u7aef\u502a\uff1a BIT\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u51cf\u53bb\u6216\u52a0\u4e0a\u6700\u4f4e\u4f4d 1 1 \uff0c\u7ebf\u6bb5\u6811\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u5de6\u79fb\u6216\u53f3\u79fb 1 1 \u4f4d\u3002\u8fd9\u5bfc\u81f4\u6811\u72b6\u6570\u7ec4\u7684\u7236\u5b50\u8282\u70b9\u6240\u8868\u5f81\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u4e00\u679d\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e00\u8d77\u6784\u6210\u4e00\u4e2a\u7d22\u5f15\u6240\u51b3\u5b9a\u524d\u7f00\u7684\u5185\u5bb9\uff1b\u800c\u7ebf\u6bb5\u6811\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u91cd\u5408\u7684\uff0c\u751a\u81f3\u7236\u8282\u70b9 p p \u5b58\u50a8\u7684\u503c\u5c31\u662f\u7531\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\uff08 p << 1 p << 1 \u548c p << 1 | 1 p << 1 | 1 \uff09\u76f4\u63a5\u51b3\u5b9a\u7684\u3002\u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u800c\u7ebf\u6bb5\u6811\u5374\u652f\u6301\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e3a\u6b64\u989d\u5916\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u6ce8\uff1a\u6811\u72b6\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(2n) O(2n) \u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"data_structure/fenwick/#fenwick","text":"Fenwick\u6811\uff0c\u4e5f\u53ebbinary index tree\uff0c\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5143\u7d20\u503c\u548c\u8ba1\u7b97\u524d\u7f00\u548c\u64cd\u4f5c","title":"Fenwick/\u6811\u72b6\u6570\u7ec4"},{"location":"data_structure/fenwick/#_1","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c","title":"\u95ee\u9898"},{"location":"data_structure/fenwick/#_2","text":"template < typename T > class BIT { public : BIT () {} BIT ( int _sz ) : sz ( _sz ) { bit = vector < T > ( sz + 1 , 0 ); } BIT ( vector < T > arr ) : sz (( int ) arr . size ()) { bit = vector < T > ( sz + 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } void Add ( int x , T val ) { for ( x ++ ; x <= sz ; x += x & - x ) bit [ x ] += val ; } T Query ( int x ) { // Sum [0, x] T ans = 0 ; for ( x ++ ; x ; x -= x & - x ) ans += bit [ x ]; return ans ; } T Query ( int l , int r ) { // Sum [l, r) return Query ( r - 1 ) - Query ( l - 1 ); } private : int sz ; vector < T > bit ; };","title":"\u4ee3\u7801"},{"location":"data_structure/fenwick/#_3","text":"\u6811\u4e2d\u8282\u70b9\u7f16\u53f7 i i \u4ee3\u8868\u524di\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u662f\u76f8\u6bd4\u7236\u8282\u70b9\u591a\u51fa\u6765\u7684\u90a3\u4e00\u90e8\u5206\u5143\u7d20\u548c\u3002\u987e\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9\uff0c\u5176\u56de\u6eaf\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u4e4b\u548c\u5c31\u662f\u539f\u6570\u7ec4\u7684\u524d\u7f00\u548c\u3002 \u6ce8\uff1a\u82e5 x x \u4e3a\u6b63\uff0c\u5219 x \\& -x x \\& -x \u4e3a x x \u4f4e\u4f4d 1 1 \u6240\u4ee3\u8868\u7684\u6570\u3002","title":"\u7b97\u6cd5"},{"location":"data_structure/fenwick/#_4","text":"\u4e0e\u7ebf\u6bb5\u6811\u7684\u533a\u522b \u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7684\u533a\u522b\uff0c\u4ece\u6811\u72b6\u6570\u7ec4\u7d22\u5f15\u66f4\u65b0\u7684\u65b9\u5f0f\u53ef\u89c1\u7aef\u502a\uff1a BIT\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u51cf\u53bb\u6216\u52a0\u4e0a\u6700\u4f4e\u4f4d 1 1 \uff0c\u7ebf\u6bb5\u6811\u7684\u7d22\u5f15\u66f4\u65b0\u65b9\u5f0f\u4e3a\u5de6\u79fb\u6216\u53f3\u79fb 1 1 \u4f4d\u3002\u8fd9\u5bfc\u81f4\u6811\u72b6\u6570\u7ec4\u7684\u7236\u5b50\u8282\u70b9\u6240\u8868\u5f81\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u4e00\u679d\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e00\u8d77\u6784\u6210\u4e00\u4e2a\u7d22\u5f15\u6240\u51b3\u5b9a\u524d\u7f00\u7684\u5185\u5bb9\uff1b\u800c\u7ebf\u6bb5\u6811\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u91cd\u5408\u7684\uff0c\u751a\u81f3\u7236\u8282\u70b9 p p \u5b58\u50a8\u7684\u503c\u5c31\u662f\u7531\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\uff08 p << 1 p << 1 \u548c p << 1 | 1 p << 1 | 1 \uff09\u76f4\u63a5\u51b3\u5b9a\u7684\u3002\u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u800c\u7ebf\u6bb5\u6811\u5374\u652f\u6301\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e3a\u6b64\u989d\u5916\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u6ce8\uff1a\u6811\u72b6\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \uff0c\u7ebf\u6bb5\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(2n) O(2n) \u3002","title":"\u8ba8\u8bba"},{"location":"data_structure/lru_cache/","text":"LRU\u7f13\u5b58 \u95ee\u9898 \u8bbe\u8ba1\u4e00\u79cd\u952e\u3001\u503c\u5bf9\u7684\u5bb9\u5668\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 get get \u548c set set \u64cd\u4f5c\uff1a get(key) get(key) - \u5982\u679c\u7f13\u5b58\u4e2d\u5b58\u5728 key key \uff0c\u5219\u8fd4\u56de\u5176\u5bf9\u5e94\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 -1 set(key, value) set(key, value) - \u5982\u679c key key \u5df2\u5b58\u5728\u5219\u66f4\u65b0\u5176\u5bf9\u5e94\u7684\u503c\uff0c\u5426\u5219\u52a0\u5165\u65b0\u7684\u952e\u503c\u5bf9 (key, value) (key, value) \uff0c\u5982\u679c\u5bb9\u5668\u5df2\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u5219\u8e22\u51fa\u4e0a\u6b21\u8bbf\u95ee\u8ddd\u79bb\u6700\u8fdc\u7684\u952e\u503c\u5bf9 \u5206\u6790 \u7531\u4e8e\u9700\u8981\u523b\u753b\u8bbf\u95ee\u987a\u5e8f\uff0c\u5e76\u4e14\u9700\u8981\u5feb\u901f\u5c06\u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u79fb\u5230\u5934\u90e8\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u952e\u3001\u503c\u5bf9\u7684\u53cc\u5411\u94fe\u8868 std::list \u6765\u5b9e\u73b0\u3002 \u8fdb\u4e00\u6b65\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a std::unordered_map \u6765\u7ef4\u62a4 key key \u5230\u94fe\u8868\u8282\u70b9\uff08\u952e\u503c\u5bf9\uff09\u7684\u8fed\u4ee3\u5668\u7684\u54c8\u5e0c\u3002 \u4ee3\u7801 class LRUcache { public : LRUcache ( int capacity ) { this -> capacity = capacity ; } int Get ( int key ) { if ( cache_map . find ( key ) == cache_map . end ()) return - 1 ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); return cache_map [ key ] -> v ; } void Set ( int key , int value ) { if ( cache_map . find ( key ) == cache_map . end ()) { if ( cache_list . size () == capacity ) { cache_map . erase ( cache_list . back (). k ); cache_list . pop_back (); } cache_list . push_front ( CacheNode ( key , value )); cache_map [ key ] = cache_list . begin (); } else { cache_map [ key ] -> v = value ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); } } private : struct CacheNode { int k , v ; CacheNode () {} CacheNode ( int _k , int _v ) : k ( _k ), v ( _v ) {} }; int capacity ; list < CacheNode > cache_list ; unordered_map < int , list < CacheNode >:: iterator > cache_map ; }; CacheNode CacheNode - \u952e\u503c\u5bf9\uff08\u94fe\u8868\u8282\u70b9\uff09 cache\\_list cache\\_list - \u5185\u90e8\u94fe\u8868 cache\\_map cache\\_map - \u4ece key key \u5230\u952e\u503c\u5bf9\u5730\u5740\u7684\u54c8\u5e0c","title":"LRU\u7f13\u5b58"},{"location":"data_structure/lru_cache/#lru","text":"","title":"LRU\u7f13\u5b58"},{"location":"data_structure/lru_cache/#_1","text":"\u8bbe\u8ba1\u4e00\u79cd\u952e\u3001\u503c\u5bf9\u7684\u5bb9\u5668\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 get get \u548c set set \u64cd\u4f5c\uff1a get(key) get(key) - \u5982\u679c\u7f13\u5b58\u4e2d\u5b58\u5728 key key \uff0c\u5219\u8fd4\u56de\u5176\u5bf9\u5e94\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 -1 set(key, value) set(key, value) - \u5982\u679c key key \u5df2\u5b58\u5728\u5219\u66f4\u65b0\u5176\u5bf9\u5e94\u7684\u503c\uff0c\u5426\u5219\u52a0\u5165\u65b0\u7684\u952e\u503c\u5bf9 (key, value) (key, value) \uff0c\u5982\u679c\u5bb9\u5668\u5df2\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u5219\u8e22\u51fa\u4e0a\u6b21\u8bbf\u95ee\u8ddd\u79bb\u6700\u8fdc\u7684\u952e\u503c\u5bf9","title":"\u95ee\u9898"},{"location":"data_structure/lru_cache/#_2","text":"\u7531\u4e8e\u9700\u8981\u523b\u753b\u8bbf\u95ee\u987a\u5e8f\uff0c\u5e76\u4e14\u9700\u8981\u5feb\u901f\u5c06\u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u79fb\u5230\u5934\u90e8\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u952e\u3001\u503c\u5bf9\u7684\u53cc\u5411\u94fe\u8868 std::list \u6765\u5b9e\u73b0\u3002 \u8fdb\u4e00\u6b65\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a std::unordered_map \u6765\u7ef4\u62a4 key key \u5230\u94fe\u8868\u8282\u70b9\uff08\u952e\u503c\u5bf9\uff09\u7684\u8fed\u4ee3\u5668\u7684\u54c8\u5e0c\u3002","title":"\u5206\u6790"},{"location":"data_structure/lru_cache/#_3","text":"class LRUcache { public : LRUcache ( int capacity ) { this -> capacity = capacity ; } int Get ( int key ) { if ( cache_map . find ( key ) == cache_map . end ()) return - 1 ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); return cache_map [ key ] -> v ; } void Set ( int key , int value ) { if ( cache_map . find ( key ) == cache_map . end ()) { if ( cache_list . size () == capacity ) { cache_map . erase ( cache_list . back (). k ); cache_list . pop_back (); } cache_list . push_front ( CacheNode ( key , value )); cache_map [ key ] = cache_list . begin (); } else { cache_map [ key ] -> v = value ; cache_list . splice ( cache_list . begin (), cache_list , cache_map [ key ]); cache_map [ key ] = cache_list . begin (); } } private : struct CacheNode { int k , v ; CacheNode () {} CacheNode ( int _k , int _v ) : k ( _k ), v ( _v ) {} }; int capacity ; list < CacheNode > cache_list ; unordered_map < int , list < CacheNode >:: iterator > cache_map ; }; CacheNode CacheNode - \u952e\u503c\u5bf9\uff08\u94fe\u8868\u8282\u70b9\uff09 cache\\_list cache\\_list - \u5185\u90e8\u94fe\u8868 cache\\_map cache\\_map - \u4ece key key \u5230\u952e\u503c\u5bf9\u5730\u5740\u7684\u54c8\u5e0c","title":"\u4ee3\u7801"},{"location":"data_structure/segment_tree/","text":"\u7ebf\u6bb5\u6811 \u76f8\u8f83Fenwick\u6811\uff0c\u7ebf\u6bb5\u6811\u9664\u4e86\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5236\u5b9a\u5143\u7d20\u548c\u8ba1\u7b97\u533a\u95f4\u548c\u4ee5\u5916\uff0c\u8fd8\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u8ba1\u7b97\u533a\u95f4\u6700\u503c\uff0c\u4f46\u4e3a\u6b64\u591a\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u5f00\u9500\u3002 \u95ee\u9898 \u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c \u4ee3\u7801 \u7528\u4e8e\u7ef4\u62a4\u533a\u95f4\u6c42\u548c\u7684\u7ebf\u6bb5\u6811\uff1a template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = 0 ; for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans += sgt [ l ++ ]; if ( r & 1 ) ans += sgt [ -- r ]; } return ans ; } void Add ( int x , T val ) { for ( sgt [ x += sz ] += val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = sgt [ x ] + sgt [ x ^ 1 ]; } private : int sz ; vector < T > sgt ; }; \u64cd\u4f5c\u8bf4\u660e\uff1a using ll = long long ; // \u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u6bb5\u6811 SGT < ll > s ( 10 ); for ( int i = 0 ; i < 10 ; i ++ ) { s . Add ( i , i ); } // \u67e5\u8be2 [3, 7) \u7684\u548c int sum = s . Query ( 3 , 7 ); cout << sum << endl ; \u8f93\u51fa\uff1a 18 \u7b97\u6cd5 \u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u6709\u5947\u6570\u4e2a\u8282\u70b9\u7684\u7684\u5b8c\u5168\u4e8c\u53c9\u6811: \u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u540e\u534a\u6bb5\uff08\u53f6\u8282\u70b9\uff09\u5b58\u50a8\u4e86\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u6545\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u65e0\u8bba\u5efa\u7acb\u3001\u6c42\u548c\u6216\u8005\u66f4\u65b0\u503c\u90fd\u662f\u5148\u5b9a\u4f4d\u5230\u53f6\u8282\u70b9\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u3002 \u5177\u4f53\u5730\uff0c\u533a\u95f4\u548c\u64cd\u4f5c\u662f\u5148\u5c06\u8868\u5f81\u5de6\u53f3\u7aef\u70b9\u6307\u9488\u5b9a\u4f4d\u5728\u53f6\u8282\u70b9\u76f8\u5e94\u4f4d\u7f6e\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4e0a\u79fb\u7d27\u7f29\uff0c\u8fc7\u7a0b\u6bcf\u5f53\u7aef\u70b9\u51fa\u73b0\u5947\u6570\u5219\u9700\u8981\u201c\u63a5\u6f0f\u201d\u2014\u2014\u5176\u4e2d\u5de6\u7aef\u662f\u95ed\u533a\u95f4\u6240\u4ee5\u5148\u52a0\u518d\u7f29\uff0c\u53f3\u7aef\u662f\u5f00\u533a\u95f4\u6240\u4ee5\u5148\u7f29\u518d\u52a0\u3002 \u8ba8\u8bba \u5173\u4e8e\u4e3a\u4ec0\u4e48\u6570\u7ec4\u8868\u793a\u7684\u4e8c\u53c9\u6811\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0b\u6807 0 0 \u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u5bf9\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\u7f16\u53f7\uff0c\u5982\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u5219\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u548c\u7236\u4eb2\u5206\u522b\u4e3a p << 1 p << 1 , p << 1 | 1 p << 1 | 1 , p >> 1 p >> 1 \uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u53ef\u4ee5\u53ea\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u3002\u7136\u800c\u82e5\u6839\u8282\u70b9\u4ece\u5f00\u59cb\u7f16\u53f7\uff0c\u5219\u8282\u70b9p\u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u4e3a 2p + 1 2p + 1 , 2p + 2 2p + 2 \uff0c\u7236\u4eb2\u7684\u7d22\u5f15\u4e0e p p \u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u7d22\u5f15\u8f6c\u79fb\u56e0\u800c\u590d\u6742\u5f97\u591a\u3002 \u53d8\u4f53 \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3001\u67e5\u8be2\u533a\u95f4\u6700\u503c\u3002 \u6700\u5927\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: min (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = max ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = max ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = max ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; }; \u6700\u5c0f\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: max (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = min ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = min ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = min ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; };","title":"\u7ebf\u6bb5\u6811"},{"location":"data_structure/segment_tree/#_1","text":"\u76f8\u8f83Fenwick\u6811\uff0c\u7ebf\u6bb5\u6811\u9664\u4e86\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u66f4\u65b0\u5236\u5b9a\u5143\u7d20\u548c\u8ba1\u7b97\u533a\u95f4\u548c\u4ee5\u5916\uff0c\u8fd8\u652f\u6301\u5728 O(\\log n) O(\\log n) \u65f6\u95f4\u5185\u8ba1\u7b97\u533a\u95f4\u6700\u503c\uff0c\u4f46\u4e3a\u6b64\u591a\u4ed8\u51fa\u4e86 O(n) O(n) \u7684\u7a7a\u95f4\u5f00\u9500\u3002","title":"\u7ebf\u6bb5\u6811"},{"location":"data_structure/segment_tree/#_2","text":"\u7ed9\u5b9a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217 v v \uff0c\u8981\u6c42\u5728 O(\\log n) O(\\log n) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5982\u4e0b\u64cd\u4f5c\uff1a \u66f4\u65b0\u5355\u4e2a\u5143\u7d20 v[i] v[i] \u7684\u503c \u67e5\u8be2\u4f4d\u4e8e\u533a\u95f4 [l, r) [l, r) \u7684\u5143\u7d20\u548c","title":"\u95ee\u9898"},{"location":"data_structure/segment_tree/#_3","text":"\u7528\u4e8e\u7ef4\u62a4\u533a\u95f4\u6c42\u548c\u7684\u7ebf\u6bb5\u6811\uff1a template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Add ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = 0 ; for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans += sgt [ l ++ ]; if ( r & 1 ) ans += sgt [ -- r ]; } return ans ; } void Add ( int x , T val ) { for ( sgt [ x += sz ] += val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = sgt [ x ] + sgt [ x ^ 1 ]; } private : int sz ; vector < T > sgt ; }; \u64cd\u4f5c\u8bf4\u660e\uff1a using ll = long long ; // \u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u6bb5\u6811 SGT < ll > s ( 10 ); for ( int i = 0 ; i < 10 ; i ++ ) { s . Add ( i , i ); } // \u67e5\u8be2 [3, 7) \u7684\u548c int sum = s . Query ( 3 , 7 ); cout << sum << endl ; \u8f93\u51fa\uff1a 18","title":"\u4ee3\u7801"},{"location":"data_structure/segment_tree/#_4","text":"\u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u6709\u5947\u6570\u4e2a\u8282\u70b9\u7684\u7684\u5b8c\u5168\u4e8c\u53c9\u6811: \u7531\u4e8e\u7ebf\u6bb5\u6811\u7684\u540e\u534a\u6bb5\uff08\u53f6\u8282\u70b9\uff09\u5b58\u50a8\u4e86\u539f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u6545\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\u65e0\u8bba\u5efa\u7acb\u3001\u6c42\u548c\u6216\u8005\u66f4\u65b0\u503c\u90fd\u662f\u5148\u5b9a\u4f4d\u5230\u53f6\u8282\u70b9\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u3002 \u5177\u4f53\u5730\uff0c\u533a\u95f4\u548c\u64cd\u4f5c\u662f\u5148\u5c06\u8868\u5f81\u5de6\u53f3\u7aef\u70b9\u6307\u9488\u5b9a\u4f4d\u5728\u53f6\u8282\u70b9\u76f8\u5e94\u4f4d\u7f6e\uff0c\u7136\u540e\u4e00\u6b65\u6b65\u4e0a\u79fb\u7d27\u7f29\uff0c\u8fc7\u7a0b\u6bcf\u5f53\u7aef\u70b9\u51fa\u73b0\u5947\u6570\u5219\u9700\u8981\u201c\u63a5\u6f0f\u201d\u2014\u2014\u5176\u4e2d\u5de6\u7aef\u662f\u95ed\u533a\u95f4\u6240\u4ee5\u5148\u52a0\u518d\u7f29\uff0c\u53f3\u7aef\u662f\u5f00\u533a\u95f4\u6240\u4ee5\u5148\u7f29\u518d\u52a0\u3002","title":"\u7b97\u6cd5"},{"location":"data_structure/segment_tree/#_5","text":"\u5173\u4e8e\u4e3a\u4ec0\u4e48\u6570\u7ec4\u8868\u793a\u7684\u4e8c\u53c9\u6811\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0b\u6807 0 0 \u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u5bf9\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\u7f16\u53f7\uff0c\u5982\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 1 \uff0c\u5219\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u548c\u7236\u4eb2\u5206\u522b\u4e3a p << 1 p << 1 , p << 1 | 1 p << 1 | 1 , p >> 1 p >> 1 \uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u53ef\u4ee5\u53ea\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u3002\u7136\u800c\u82e5\u6839\u8282\u70b9\u4ece\u5f00\u59cb\u7f16\u53f7\uff0c\u5219\u8282\u70b9p\u7684\u5de6\u53f3\u513f\u5b50\u5206\u522b\u4e3a 2p + 1 2p + 1 , 2p + 2 2p + 2 \uff0c\u7236\u4eb2\u7684\u7d22\u5f15\u4e0e p p \u7684\u5947\u5076\u6027\u6709\u5173\uff0c\u7d22\u5f15\u8f6c\u79fb\u56e0\u800c\u590d\u6742\u5f97\u591a\u3002","title":"\u8ba8\u8bba"},{"location":"data_structure/segment_tree/#_6","text":"\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3001\u67e5\u8be2\u533a\u95f4\u6700\u503c\u3002 \u6700\u5927\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: min (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = max ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = max ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = max ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; }; \u6700\u5c0f\u503c template < typename T > class SGT { public : SGT () {} SGT ( int _sz ) : sz ( _sz ) { sgt = vector < T > ( sz << 1 , 0 ); } SGT ( vector < T > arr ) : sz (( int ) arr . size ()) { sgt = vector < T > ( sz << 1 , 0 ); for ( int i = 0 ; i < sz ; i ++ ) this -> Update ( i , arr [ i ]); } T Query ( int l , int r ) { T ans = numeric_limits < T >:: max (); for ( l += sz , r += sz ; l < r ; l >>= 1 , r >>= 1 ) { if ( l & 1 ) ans = min ( ans , sgt [ l ++ ]); if ( r & 1 ) ans = min ( ans , sgt [ -- r ]); } return ans ; } void Update ( int x , T val ) { for ( sgt [ x += sz ] = val ; x > 1 ; x >>= 1 ) sgt [ x >> 1 ] = min ( sgt [ x ], sgt [ x ^ 1 ]); } private : int sz ; vector < T > sgt ; };","title":"\u53d8\u4f53"},{"location":"data_structure/union_find/","text":"\u5e76\u67e5\u96c6 \u95ee\u9898 \u5bf9\u4e8e\u6709 n n \u4e2a\u8282\u70b9\u7684\u56fe\uff0c\u8bbe\u8ba1\u4e00\u79cd\u7ef4\u62a4\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a Find(i) - \u67e5\u8be2\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf Union(i, j) - \u8fde\u63a5\u7f16\u53f7\u4e3a i i \u548c j j \u7684\u8282\u70b9\uff08\u4e8c\u8005\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u8fde\u901a\uff09 \u4ee3\u7801 class UnionFind { public : UnionFind ( int _sz ) : sz ( _sz ) { pre = vector < int > ( sz ); for ( int i = 0 ; i < sz ; i ++ ) pre [ i ] = i ; } int Find ( int x ) { // Find root. int r = x ; while ( r != pre [ r ]) r = pre [ r ]; // Path compress. while ( x != r ) { int tmp = pre [ x ]; pre [ x ] = r ; x = tmp ; } return r ; } void Join ( int x , int y ) { int rx = Find ( x ), ry = Find ( y ); if ( rx != ry ) pre [ rx ] = ry ; } int size () { return sz ; } private : int sz ; vector < int > pre ; }; \u7b97\u6cd5 \u6570\u7ec4 pre pre \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u5bfc\u8282\u70b9\u3002 \u5e76\u67e5\u96c6\u6bcf\u6b21 Union \u64cd\u4f5c\u968f\u673a\u5c06\u4e00\u4e2a\u95e8\u6d3e\u7684\u638c\u95e8\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u95e8\u6d3e\u638c\u95e8\u7684\u76f4\u63a5\u4e0a\u7ea7\uff1b\u800c\u6bcf\u6b21 Find \u64cd\u4f5c\u5728\u9010\u5c42\u5411\u4e0a\u627e\u5230\u638c\u95e8\u4e4b\u540e\u53c8\u5c06\u8def\u5f84\u4e2d\u6240\u6709\u8fc7\u7a0b\u8282\u70b9\u90fd\u6539\u6210\u638c\u95e8\u7684\u76f4\u63a5\u4e0b\u7ea7\u3002\u6240\u4ee5\u8bf4\uff0c\u5f53 Union \u64cd\u4f5c\u7684\u589e\u591a\u4f1a\u5bfc\u81f4\u6811\u72b6\u6570\u636e\u7ed3\u6784\u8d8b\u4e8e\u4e0d\u5e73\u8861\uff0c\u800c Find \u64cd\u4f5c\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c06\u6700\u7ec8\u5bfc\u81f4\u6240\u6709\u8282\u70b9\u90fd\u4ee5\u638c\u95e8\u4e3a\u76f4\u63a5\u4e0a\u7ea7\uff08\u6c47\u62a5\u8ddd\u79bb\u53d8\u6210 1 1 \uff09\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"data_structure/union_find/#_1","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"data_structure/union_find/#_2","text":"\u5bf9\u4e8e\u6709 n n \u4e2a\u8282\u70b9\u7684\u56fe\uff0c\u8bbe\u8ba1\u4e00\u79cd\u7ef4\u62a4\u52a8\u6001\u8fde\u901a\u6027\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a Find(i) - \u67e5\u8be2\u7f16\u53f7\u4e3a i i \u7684\u8282\u70b9\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf Union(i, j) - \u8fde\u63a5\u7f16\u53f7\u4e3a i i \u548c j j \u7684\u8282\u70b9\uff08\u4e8c\u8005\u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u8fde\u901a\uff09","title":"\u95ee\u9898"},{"location":"data_structure/union_find/#_3","text":"class UnionFind { public : UnionFind ( int _sz ) : sz ( _sz ) { pre = vector < int > ( sz ); for ( int i = 0 ; i < sz ; i ++ ) pre [ i ] = i ; } int Find ( int x ) { // Find root. int r = x ; while ( r != pre [ r ]) r = pre [ r ]; // Path compress. while ( x != r ) { int tmp = pre [ x ]; pre [ x ] = r ; x = tmp ; } return r ; } void Join ( int x , int y ) { int rx = Find ( x ), ry = Find ( y ); if ( rx != ry ) pre [ rx ] = ry ; } int size () { return sz ; } private : int sz ; vector < int > pre ; };","title":"\u4ee3\u7801"},{"location":"data_structure/union_find/#_4","text":"\u6570\u7ec4 pre pre \u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u5bfc\u8282\u70b9\u3002 \u5e76\u67e5\u96c6\u6bcf\u6b21 Union \u64cd\u4f5c\u968f\u673a\u5c06\u4e00\u4e2a\u95e8\u6d3e\u7684\u638c\u95e8\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u95e8\u6d3e\u638c\u95e8\u7684\u76f4\u63a5\u4e0a\u7ea7\uff1b\u800c\u6bcf\u6b21 Find \u64cd\u4f5c\u5728\u9010\u5c42\u5411\u4e0a\u627e\u5230\u638c\u95e8\u4e4b\u540e\u53c8\u5c06\u8def\u5f84\u4e2d\u6240\u6709\u8fc7\u7a0b\u8282\u70b9\u90fd\u6539\u6210\u638c\u95e8\u7684\u76f4\u63a5\u4e0b\u7ea7\u3002\u6240\u4ee5\u8bf4\uff0c\u5f53 Union \u64cd\u4f5c\u7684\u589e\u591a\u4f1a\u5bfc\u81f4\u6811\u72b6\u6570\u636e\u7ed3\u6784\u8d8b\u4e8e\u4e0d\u5e73\u8861\uff0c\u800c Find \u64cd\u4f5c\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c06\u6700\u7ec8\u5bfc\u81f4\u6240\u6709\u8282\u70b9\u90fd\u4ee5\u638c\u95e8\u4e3a\u76f4\u63a5\u4e0a\u7ea7\uff08\u6c47\u62a5\u8ddd\u79bb\u53d8\u6210 1 1 \uff09\u3002","title":"\u7b97\u6cd5"},{"location":"graph_theory/bipartite_matching/","text":"\u4e8c\u5206\u56fe\u5339\u914d \u672c\u9875\u9762\u90e8\u5206\u5b9a\u4e49\u5f15\u81ea\u672c\u79d1\u540c\u5b66renfei\u7684 \u4e2a\u4eba\u535a\u5ba2 \u3002 \u95ee\u9898\uff08\u6700\u5927\u4e8c\u5206\u5339\u914d\uff09 \u7ed9\u5b9a\u4e8c\u5206\u56fe\uff0c\u6c42\u89e3\u5176\u6700\u5927\u5339\u914d\u7684\u5339\u914d\u8fb9\u6570 \u4e8c\u5206\u56fe \u4e8c\u5206\u56fe G=(V,E) G=(V,E) \u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u9876\u70b9\u96c6 V V \u53ef\u5206\u89e3\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 A, B A, B \uff0c\u5bf9 \\forall e=(a, b) \\in E \\forall e=(a, b) \\in E \u6709 a \\in A, b \\in B a \\in A, b \\in B \u5339\u914d \u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u53d8\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u6700\u5927\u5339\u914d \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u6709\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d \u7b97\u6cd5 \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u95ee\u9898\u5728CLRS\u7684\u89e3\u6cd5\u662f\u7531\u6700\u5927\u7f51\u7edc\u6d41\u7684\u7b97\u6cd5\u89c4\u7ea6\u5f97\u5230\u3002\u4f46\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e0d\u65ad\u5bfb\u627e \u589e\u5e7f\u8def \u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u8fd9\u79cd\u6c42\u6700\u5927\u5339\u914d\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5308\u7259\u5229\u7b97\u6cd5\u3002 \u4ea4\u66ff\u8def\u4e0e\u589e\u5e7f\u8def \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002 \u4ee3\u7801 class Match { public : Match ( int _n , int _m ) : n ( _n ), m ( _m ) { assert ( 0 <= n && 0 <= m ); g . resize ( n ); } void Add ( int from , int to ) { assert ( 0 <= from && from <= n && 0 <= to && to <= m ); g [ from ]. push_back ( to ); } int MaxMatchNum () { int res = 0 , iter = 0 ; vector < int > pa ( n , - 1 ), pb ( m , - 1 ), was ( n , 0 ); while ( 1 ) { iter ++ ; int add = 0 ; function < bool ( int ) > Dfs = [ & ]( int v ) { // Find an augmenting path starting from v was [ v ] = iter ; for ( int u : g [ v ]) if ( pb [ u ] == - 1 ) { pa [ v ] = u ; pb [ u ] = v ; return true ; } for ( int u : g [ v ]) if ( was [ pb [ u ]] != iter && Dfs ( pb [ u ])) { pa [ v ] = u ; pb [ u ] = v ; return true ; } return false ; }; for ( int i = 0 ; i < n ; i ++ ) if ( pa [ i ] == - 1 && Dfs ( i )) add ++ ; if ( add == 0 ) break ; res += add ; } return res ; } private : int n , m ; vector < vector < int >> g ; }; n, m n, m - \u4e8c\u5206\u56fe\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u9876\u70b9\u96c6\u7684\u9876\u70b9\u6570 g g - \u4e8c\u5206\u56fe res res - \u5f53\u524d\u5339\u914d\u6570 pa pa - A A \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 pb pb - B B \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 iter iter - \u5f53\u524d\u8fed\u4ee3\u6b21\u6570 was was - A A \u4e2d\u9876\u70b9\u6700\u8fd1\u88ab\u4fee\u6539\u7684\u8fed\u4ee3\u8f6e\u6b21\uff08\u5b9e\u73b0\u4e2d\u914d\u5408 iter iter \u7528\u4e8e\u5bfb\u627e\u5f53\u524d\u8f6e\u6b21\u4e2d\u672a\u88ab\u4fee\u6539\u7684\u70b9\uff0c\u907f\u514d\u589e\u5e7f\u8def\u627e\u5230\u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u70b9\u4e0a\uff09 \u8ba8\u8bba Q: \u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4ece\u5de6\u4fa7\u5f00\u59cb\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u6709\u6ca1\u6709\u53ef\u80fd\u6f0f\u6389\u4ece\u53f3\u4fa7\u5f00\u59cb\u7684\u589e\u5e7f\u8def\u5462\uff1f A: \u4e0d\u4f1a\uff0c\u56e0\u4e3a\u589e\u5e7f\u8def\u7684\u957f\u5ea6\u5fc5\u7136\u662f\u5947\u6570\u8df3\uff0c\u8fd9\u5bfc\u81f4\u8d77\u70b9\u7ec8\u70b9\u5fc5\u7136\u4f4d\u4e8e\u5206\u522b\u4f4d\u4e8e\u5de6\u53f3\u4e24\u4fa7\uff0c\u7531\u4e8c\u5206\u56fe\u7684\u65e0\u5411\u6027\uff0c\u4e0d\u59a8\u53d6\u5de6\u4fa7\u70b9\u4e3a\u8d77\u70b9\u3002","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"graph_theory/bipartite_matching/#_1","text":"\u672c\u9875\u9762\u90e8\u5206\u5b9a\u4e49\u5f15\u81ea\u672c\u79d1\u540c\u5b66renfei\u7684 \u4e2a\u4eba\u535a\u5ba2 \u3002","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"graph_theory/bipartite_matching/#_2","text":"\u7ed9\u5b9a\u4e8c\u5206\u56fe\uff0c\u6c42\u89e3\u5176\u6700\u5927\u5339\u914d\u7684\u5339\u914d\u8fb9\u6570","title":"\u95ee\u9898\uff08\u6700\u5927\u4e8c\u5206\u5339\u914d\uff09"},{"location":"graph_theory/bipartite_matching/#_3","text":"\u4e8c\u5206\u56fe G=(V,E) G=(V,E) \u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u9876\u70b9\u96c6 V V \u53ef\u5206\u89e3\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 A, B A, B \uff0c\u5bf9 \\forall e=(a, b) \\in E \\forall e=(a, b) \\in E \u6709 a \\in A, b \\in B a \\in A, b \\in B","title":"\u4e8c\u5206\u56fe"},{"location":"graph_theory/bipartite_matching/#_4","text":"\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a\u8fb9\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u53d8\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u6700\u5927\u5339\u914d \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u6709\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u5219\u79f0\u5176\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d","title":"\u5339\u914d"},{"location":"graph_theory/bipartite_matching/#_5","text":"\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u95ee\u9898\u5728CLRS\u7684\u89e3\u6cd5\u662f\u7531\u6700\u5927\u7f51\u7edc\u6d41\u7684\u7b97\u6cd5\u89c4\u7ea6\u5f97\u5230\u3002\u4f46\u4e00\u79cd\u66f4\u7b80\u4fbf\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e0d\u65ad\u5bfb\u627e \u589e\u5e7f\u8def \u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u8fd9\u79cd\u6c42\u6700\u5927\u5339\u914d\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5308\u7259\u5229\u7b97\u6cd5\u3002","title":"\u7b97\u6cd5"},{"location":"graph_theory/bipartite_matching/#_6","text":"\u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09 \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002","title":"\u4ea4\u66ff\u8def\u4e0e\u589e\u5e7f\u8def"},{"location":"graph_theory/bipartite_matching/#_7","text":"class Match { public : Match ( int _n , int _m ) : n ( _n ), m ( _m ) { assert ( 0 <= n && 0 <= m ); g . resize ( n ); } void Add ( int from , int to ) { assert ( 0 <= from && from <= n && 0 <= to && to <= m ); g [ from ]. push_back ( to ); } int MaxMatchNum () { int res = 0 , iter = 0 ; vector < int > pa ( n , - 1 ), pb ( m , - 1 ), was ( n , 0 ); while ( 1 ) { iter ++ ; int add = 0 ; function < bool ( int ) > Dfs = [ & ]( int v ) { // Find an augmenting path starting from v was [ v ] = iter ; for ( int u : g [ v ]) if ( pb [ u ] == - 1 ) { pa [ v ] = u ; pb [ u ] = v ; return true ; } for ( int u : g [ v ]) if ( was [ pb [ u ]] != iter && Dfs ( pb [ u ])) { pa [ v ] = u ; pb [ u ] = v ; return true ; } return false ; }; for ( int i = 0 ; i < n ; i ++ ) if ( pa [ i ] == - 1 && Dfs ( i )) add ++ ; if ( add == 0 ) break ; res += add ; } return res ; } private : int n , m ; vector < vector < int >> g ; }; n, m n, m - \u4e8c\u5206\u56fe\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u9876\u70b9\u96c6\u7684\u9876\u70b9\u6570 g g - \u4e8c\u5206\u56fe res res - \u5f53\u524d\u5339\u914d\u6570 pa pa - A A \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 pb pb - B B \u4e2d\u9876\u70b9\u7684\u5339\u914d\u5bf9\u8c61\uff0c\u5931\u914d\u4e3a -1 -1 iter iter - \u5f53\u524d\u8fed\u4ee3\u6b21\u6570 was was - A A \u4e2d\u9876\u70b9\u6700\u8fd1\u88ab\u4fee\u6539\u7684\u8fed\u4ee3\u8f6e\u6b21\uff08\u5b9e\u73b0\u4e2d\u914d\u5408 iter iter \u7528\u4e8e\u5bfb\u627e\u5f53\u524d\u8f6e\u6b21\u4e2d\u672a\u88ab\u4fee\u6539\u7684\u70b9\uff0c\u907f\u514d\u589e\u5e7f\u8def\u627e\u5230\u5df2\u7ecf\u88ab\u6539\u53d8\u7684\u70b9\u4e0a\uff09","title":"\u4ee3\u7801"},{"location":"graph_theory/bipartite_matching/#_8","text":"Q: \u4e0a\u8ff0\u5b9e\u73b0\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4ece\u5de6\u4fa7\u5f00\u59cb\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u8fd9\u6837\u6709\u6ca1\u6709\u53ef\u80fd\u6f0f\u6389\u4ece\u53f3\u4fa7\u5f00\u59cb\u7684\u589e\u5e7f\u8def\u5462\uff1f A: \u4e0d\u4f1a\uff0c\u56e0\u4e3a\u589e\u5e7f\u8def\u7684\u957f\u5ea6\u5fc5\u7136\u662f\u5947\u6570\u8df3\uff0c\u8fd9\u5bfc\u81f4\u8d77\u70b9\u7ec8\u70b9\u5fc5\u7136\u4f4d\u4e8e\u5206\u522b\u4f4d\u4e8e\u5de6\u53f3\u4e24\u4fa7\uff0c\u7531\u4e8c\u5206\u56fe\u7684\u65e0\u5411\u6027\uff0c\u4e0d\u59a8\u53d6\u5de6\u4fa7\u70b9\u4e3a\u8d77\u70b9\u3002","title":"\u8ba8\u8bba"},{"location":"graph_theory/dijkstra/","text":"\u5355\u6e90\u6700\u77ed\u8def \u95ee\u9898 \u7ed9\u5b9a\u5e26\u975e\u8d1f\u6743\u7684\u6709\u5411\u56fe g g \u548c\u6e90\u9876\u70b9 s s \uff0c\u6c42\u4eces\u51fa\u53d1\u5230\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int INF = 2e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; bool vis [ maxn ]; int dis [ maxn ]; int pre [ maxn ]; void Dijkstra ( int s ) { for ( int i = 0 ; i < n ; i ++ ) { // Init. dis [ i ] = g [ s ][ i ]; vis [ i ] = i == s ? true : false ; pre [ i ] = dis [ i ] == INF ? - 1 : s ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { // n - 1 steps. int mn = INF ; int u = s ; for ( int j = 0 ; j < n ; j ++ ) // Find the closest vertex u can be reached from s. if ( ! vis [ j ] && dis [ j ] < mn ) u = j , mn = dis [ j ]; vis [ u ] = true ; for ( int j = 0 ; j < n ; j ++ ) // Update distance according to u if ( ! vis [ j ] && g [ u ][ j ] < INF ) if ( dis [ u ] + g [ u ][ j ] < dis [ j ]) dis [ j ] = dis [ u ] + g [ u ][ j ], pre [ j ] = u ; } } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf vis vis - \u5df2\u8bbf\u95ee\u9876\u70b9\u6807\u8bb0\uff08\u5df2\u8bbf\u95ee\u9876\u70b9\u96c6\u5408 U U \uff09 dis dis - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 pre pre - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u7ed3\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09 \u7b97\u6cd5 Dijkstra\u7b97\u6cd5\u603b\u662f\u9009\u62e9\u5269\u4f59\u70b9\u96c6\u4e2d\u6700\u8fd1\u7684\u9876\u70b9\u52a0\u5165\u5230\u5df2\u8bbf\u95ee\u70b9\u96c6\uff0c\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u6b32\u8bc1\u660e\u5176\u6b63\u786e\u6027\u5373\u662f\u8bc1\u660e\u8d2a\u5fc3\u8fc7\u7a0b\u6bcf\u4e00\u6b65\u7684\u5c40\u90e8\u6700\u4f18\u5728\u8be5\u95ee\u9898\u4e2d\u5c31\u662f\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4e0a\u8ff0\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \uff0c\u9002\u5408\u7a20\u5bc6\u56fe\u3002\u7528\u57fa\u4e8e\u5806\u7ed3\u6784\u7684\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5df2\u8bbf\u95ee\u70b9\u96c6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u4e4b\u3002\u7b97\u6cd5\u5171 |V| |V| \u6b65\uff0c\u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u4e3a \u5bfb\u627e\u6700\u8fd1\u70b9 \u548c \u66f4\u65b0\u8ddd\u79bb \u590d\u6742\u5ea6\u4e4b\u548c\u3002\u6839\u636eCLRS\uff0c\u4e8c\u53c9\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O((V+E)\\log E) O((V+E)\\log E) \uff0c\u6590\u6ce2\u90a3\u5951\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V\\log V + E) O(V\\log V + E) \u3002","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"graph_theory/dijkstra/#_1","text":"","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"graph_theory/dijkstra/#_2","text":"\u7ed9\u5b9a\u5e26\u975e\u8d1f\u6743\u7684\u6709\u5411\u56fe g g \u548c\u6e90\u9876\u70b9 s s \uff0c\u6c42\u4eces\u51fa\u53d1\u5230\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002","title":"\u95ee\u9898"},{"location":"graph_theory/dijkstra/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int INF = 2e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; bool vis [ maxn ]; int dis [ maxn ]; int pre [ maxn ]; void Dijkstra ( int s ) { for ( int i = 0 ; i < n ; i ++ ) { // Init. dis [ i ] = g [ s ][ i ]; vis [ i ] = i == s ? true : false ; pre [ i ] = dis [ i ] == INF ? - 1 : s ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { // n - 1 steps. int mn = INF ; int u = s ; for ( int j = 0 ; j < n ; j ++ ) // Find the closest vertex u can be reached from s. if ( ! vis [ j ] && dis [ j ] < mn ) u = j , mn = dis [ j ]; vis [ u ] = true ; for ( int j = 0 ; j < n ; j ++ ) // Update distance according to u if ( ! vis [ j ] && g [ u ][ j ] < INF ) if ( dis [ u ] + g [ u ][ j ] < dis [ j ]) dis [ j ] = dis [ u ] + g [ u ][ j ], pre [ j ] = u ; } } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf vis vis - \u5df2\u8bbf\u95ee\u9876\u70b9\u6807\u8bb0\uff08\u5df2\u8bbf\u95ee\u9876\u70b9\u96c6\u5408 U U \uff09 dis dis - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 pre pre - \u6e90\u70b9 s s \u5230\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u524d\u9a71\u7ed3\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09","title":"\u4ee3\u7801"},{"location":"graph_theory/dijkstra/#_4","text":"Dijkstra\u7b97\u6cd5\u603b\u662f\u9009\u62e9\u5269\u4f59\u70b9\u96c6\u4e2d\u6700\u8fd1\u7684\u9876\u70b9\u52a0\u5165\u5230\u5df2\u8bbf\u95ee\u70b9\u96c6\uff0c\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u6b32\u8bc1\u660e\u5176\u6b63\u786e\u6027\u5373\u662f\u8bc1\u660e\u8d2a\u5fc3\u8fc7\u7a0b\u6bcf\u4e00\u6b65\u7684\u5c40\u90e8\u6700\u4f18\u5728\u8be5\u95ee\u9898\u4e2d\u5c31\u662f\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4e0a\u8ff0\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \uff0c\u9002\u5408\u7a20\u5bc6\u56fe\u3002\u7528\u57fa\u4e8e\u5806\u7ed3\u6784\u7684\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u5df2\u8bbf\u95ee\u70b9\u96c6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u4e4b\u3002\u7b97\u6cd5\u5171 |V| |V| \u6b65\uff0c\u6bcf\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u4e3a \u5bfb\u627e\u6700\u8fd1\u70b9 \u548c \u66f4\u65b0\u8ddd\u79bb \u590d\u6742\u5ea6\u4e4b\u548c\u3002\u6839\u636eCLRS\uff0c\u4e8c\u53c9\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O((V+E)\\log E) O((V+E)\\log E) \uff0c\u6590\u6ce2\u90a3\u5951\u5806\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(V\\log V + E) O(V\\log V + E) \u3002","title":"\u7b97\u6cd5"},{"location":"graph_theory/floyd/","text":"\u6240\u6709\u70b9\u5bf9\u95f4\u7684\u6700\u77ed\u8def\u5f84 \u95ee\u9898 \u7ed9\u5b9a\u5e26\u5b9e\u6570\u6743\u7684\u6709\u5411\u56fe g g \uff0c\u6c42\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int INF = 1e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ][ maxn ]; int p [ maxn ][ maxn ]; void Floyd () { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) d [ i ][ j ] = g [ i ][ j ], p [ i ][ j ] = - 1 ; for ( int k = 0 ; k < n ; k ++ ) for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( d [ i ][ k ] + d [ k ][ j ] < d [ i ][ j ]) d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ], p [ i ][ j ] = k ; } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf d d - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6 p p - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u4e2d\u8f6c\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09 \u7b97\u6cd5 Floyd\u7b97\u6cd5\u5c5e\u4e8e\u52a8\u6001\u89c4\u5212\uff0c \u91cd\u53e0\u5b50\u95ee\u9898 \u662f\u201c\u53ef\u4ee5\u4f7f\u7528\u524d k k \u4e2a\u9876\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\u201d\u3002","title":"\u6240\u6709\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u8def"},{"location":"graph_theory/floyd/#_1","text":"","title":"\u6240\u6709\u70b9\u5bf9\u95f4\u7684\u6700\u77ed\u8def\u5f84"},{"location":"graph_theory/floyd/#_2","text":"\u7ed9\u5b9a\u5e26\u5b9e\u6570\u6743\u7684\u6709\u5411\u56fe g g \uff0c\u6c42\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb","title":"\u95ee\u9898"},{"location":"graph_theory/floyd/#_3","text":"#include <bits/stdc++.h> using namespace std ; const int INF = 1e9 ; const int maxn = 10 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ][ maxn ]; int p [ maxn ][ maxn ]; void Floyd () { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) d [ i ][ j ] = g [ i ][ j ], p [ i ][ j ] = - 1 ; for ( int k = 0 ; k < n ; k ++ ) for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( d [ i ][ k ] + d [ k ][ j ] < d [ i ][ j ]) d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ], p [ i ][ j ] = k ; } g g - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf d d - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6 p p - \u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u4e2d\u8f6c\u70b9\uff08\u7528\u4e8e\u751f\u6210\u5177\u4f53\u8def\u5f84\uff09","title":"\u4ee3\u7801"},{"location":"graph_theory/floyd/#_4","text":"Floyd\u7b97\u6cd5\u5c5e\u4e8e\u52a8\u6001\u89c4\u5212\uff0c \u91cd\u53e0\u5b50\u95ee\u9898 \u662f\u201c\u53ef\u4ee5\u4f7f\u7528\u524d k k \u4e2a\u9876\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\u70b9\u7684\u6700\u77ed\u8def\u5f84\u201d\u3002","title":"\u7b97\u6cd5"},{"location":"graph_theory/minimum_spanning_tree/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u95ee\u9898 \u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe g g \uff0c\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u8fb9\u7684\u603b\u6743\u91cd\u6700\u5c0f \u7b97\u6cd5I - Prim \u7ef4\u62a4\u4e00\u4e2aMST\u70b9\u96c6\uff0c\u521d\u59cb\u53ea\u6709\u4efb\u4e00\u70b9\uff08\u4e00\u822c\u53d6\u7f16\u53f7\u4e3a 0 0 \u7684\u70b9\uff09\uff0c\u6bcf\u6b21\u53d6\u6240\u6709\u4e00\u7aef\u5728MST\u70b9\u96c6\u5185\u90e8\u53e6\u4e00\u7aef\u5728MST\u70b9\u96c6\u5916\u90e8\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u5c06\u8be5\u8fb9\u7684\u53e6\u4e00\u7aef\u52a0\u5165MST\u70b9\u96c6\u5e76\u8bb0\u5f55\u8be5\u8fb9\uff0c\u5219\u7ecf\u8fc7 n-1 n-1 \u6b65\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 Prim\u7b97\u6cd5\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u5176\u6b63\u786e\u6027\u57fa\u4e8eMST\u6027\u8d28\uff1a \u5bf9\u4e8e\u4e00\u9897 \u6b63\u5728\u6784\u9020\u4e2d \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bbe U, V U, V \u5206\u522b\u4e3a\u6811\u7684\u9876\u70b9\u96c6\u53ca\u5176\u8865\u96c6\u3002\u82e5\u8fb9 (u, v) (u, v) \u4e3a\u4e00\u7aef\u5728\u5f53\u524d\u70b9\u96c6\u4e2d u \\in U u \\in U \uff0c\u53e6\u4e00\u7aef\u4e0d\u5728\u5f53\u524d\u70b9\u96c6\u4e2d v \\in V v \\in V \uff0c\u4e14\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u9897\u5305\u542b\u8be5\u8fb9 (u, v) (u, v) \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 10 ; const int INF = 2e9 ; int n ; int G [ maxn ][ maxn ]; int NextVertex ( int low_cost [], bool mst_set []) { int mn = INF , mn_idx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( ! mst_set [ i ] && low_cost [ i ] < mn ) mn = low_cost [ i ], mn_idx = i ; return mn_idx ; } ll PrimMST () { int par [ n ]; // Store which inner vertex to connect for outer vertexes. int low_cost [ n ]; // lowest cost for outer vertexes to connect to a inner vertex. bool mst_set [ n ]; // Mark inner vertices. // Initially put the 1st vertex into mst_set. mst_set [ 0 ] = true , par [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; i ++ ) low_cost [ i ] = G [ 0 ][ i ], mst_set [ i ] = false , par [ i ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { // There are n - 1 steps to construct MST. int u = NextVertex ( low_cost , mst_set ); mst_set [ u ] = true ; for ( int v = 0 ; v < n ; v ++ ) if ( ! mst_set [ v ] && G [ u ][ v ] < low_cost [ v ]) par [ v ] = u , low_cost [ v ] = G [ u ][ v ]; } ll ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) ans += G [ i ][ par [ i ]]; return ans ; } G G - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf par par - par[i] par[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u9876\u70b9\u5728\u88ab\u52a0\u5165MST\u7684\u65f6\u5019\u6240\u8fde\u7684\u6b63\u5728\u751f\u6210\u4e2dMST\u4e0a\u7684\u9876\u70b9\uff08\u7528\u4e8e\u83b7\u53d6\u5177\u4f53\u751f\u6210\u6811\u7684\u8fb9\u96c6\uff0c par[1, n-1] par[1, n-1] \u5373\u4e3a\u6240\u6c42\uff09 low_cost low_cost - \u5f53\u524d\u9636\u6bb5\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u4e4b\u5916\u7684\u70b9\u5230\u5f53\u524dMST\u7684\u6700\u77ed\u8ddd\u79bb $ mst_set mst_set - \u5c5e\u4e8e\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u7684\u9876\u70b9\u6807\u8bb0 \u4ee5\u4e0a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \u3002 \u7b97\u6cd52 - Kruskal Kruskal\u7b97\u6cd5\u7684\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5982\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u53ef\u5c06\u6b65\u9aa4\u603b\u7ed3\u5982\u4e0b\uff1a \u65b0\u5efa\u56fe G G \uff0c\u56fe G G \u4e2d\u6709\u4e0e\u539f\u56fe\u76f8\u540c\u7684\u9876\u70b9\uff0c\u4f46\u6ca1\u6709\u8fb9\uff1b \u5c06\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b \u4ece\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u56fe G G \u5185\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u6dfb\u52a0\u8fd9\u6761\u8fb9\u5230\u56fe G G \u4e2d\uff1b \u91cd\u590d3\uff0c\u76f4\u5230\u56fe G G \u53ea\u5269\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002 \uff08\u6ce8\uff1a\u8be5\u56fe\u53ea\u5173\u6ce8\u52a8\u6001\u8fde\u901a\u6027\uff0c\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u5c31\u597d\u3002\uff09 \u4f18\u5316 \u6839\u636eCLRS\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u5806\uff0c\u5219\u53ef\u4ee5\u5c06Prim\u548cKruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5728 O(E\\log V) O(E\\log V) \uff0c\u5982\u679c\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5806\uff0cPrim\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u6539\u5584\u4e3a O(E+V\\log V) O(E+V\\log V) \u3002\u6b64\u8fd0\u884c\u65f6\u95f4\u5728 |V| \\ll |E| |V| \\ll |E| \uff08\u7a00\u758f\u56fe\uff09 \u7684\u60c5\u51b5\u4e0b\u8f83\u4e8c\u53c9\u5806\u6709\u76f8\u5f53\u5927\u7684\u6539\u8fdb\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph_theory/minimum_spanning_tree/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph_theory/minimum_spanning_tree/#_2","text":"\u7ed9\u5b9a\u65e0\u5411\u8fde\u901a\u56fe g g \uff0c\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u8fb9\u7684\u603b\u6743\u91cd\u6700\u5c0f","title":"\u95ee\u9898"},{"location":"graph_theory/minimum_spanning_tree/#i-prim","text":"\u7ef4\u62a4\u4e00\u4e2aMST\u70b9\u96c6\uff0c\u521d\u59cb\u53ea\u6709\u4efb\u4e00\u70b9\uff08\u4e00\u822c\u53d6\u7f16\u53f7\u4e3a 0 0 \u7684\u70b9\uff09\uff0c\u6bcf\u6b21\u53d6\u6240\u6709\u4e00\u7aef\u5728MST\u70b9\u96c6\u5185\u90e8\u53e6\u4e00\u7aef\u5728MST\u70b9\u96c6\u5916\u90e8\u7684\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\uff0c\u5c06\u8be5\u8fb9\u7684\u53e6\u4e00\u7aef\u52a0\u5165MST\u70b9\u96c6\u5e76\u8bb0\u5f55\u8be5\u8fb9\uff0c\u5219\u7ecf\u8fc7 n-1 n-1 \u6b65\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 Prim\u7b97\u6cd5\u5c5e\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u5176\u6b63\u786e\u6027\u57fa\u4e8eMST\u6027\u8d28\uff1a \u5bf9\u4e8e\u4e00\u9897 \u6b63\u5728\u6784\u9020\u4e2d \u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bbe U, V U, V \u5206\u522b\u4e3a\u6811\u7684\u9876\u70b9\u96c6\u53ca\u5176\u8865\u96c6\u3002\u82e5\u8fb9 (u, v) (u, v) \u4e3a\u4e00\u7aef\u5728\u5f53\u524d\u70b9\u96c6\u4e2d u \\in U u \\in U \uff0c\u53e6\u4e00\u7aef\u4e0d\u5728\u5f53\u524d\u70b9\u96c6\u4e2d v \\in V v \\in V \uff0c\u4e14\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u9897\u5305\u542b\u8be5\u8fb9 (u, v) (u, v) \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002","title":"\u7b97\u6cd5I - Prim"},{"location":"graph_theory/minimum_spanning_tree/#_3","text":"#include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 10 ; const int INF = 2e9 ; int n ; int G [ maxn ][ maxn ]; int NextVertex ( int low_cost [], bool mst_set []) { int mn = INF , mn_idx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( ! mst_set [ i ] && low_cost [ i ] < mn ) mn = low_cost [ i ], mn_idx = i ; return mn_idx ; } ll PrimMST () { int par [ n ]; // Store which inner vertex to connect for outer vertexes. int low_cost [ n ]; // lowest cost for outer vertexes to connect to a inner vertex. bool mst_set [ n ]; // Mark inner vertices. // Initially put the 1st vertex into mst_set. mst_set [ 0 ] = true , par [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; i ++ ) low_cost [ i ] = G [ 0 ][ i ], mst_set [ i ] = false , par [ i ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { // There are n - 1 steps to construct MST. int u = NextVertex ( low_cost , mst_set ); mst_set [ u ] = true ; for ( int v = 0 ; v < n ; v ++ ) if ( ! mst_set [ v ] && G [ u ][ v ] < low_cost [ v ]) par [ v ] = u , low_cost [ v ] = G [ u ][ v ]; } ll ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) ans += G [ i ][ par [ i ]]; return ans ; } G G - \u90bb\u63a5\u77e9\u9635 n n - \u9876\u70b9\u6570\u91cf par par - par[i] par[i] \u8868\u793a\u7f16\u53f7\u4e3a i i \u7684\u9876\u70b9\u5728\u88ab\u52a0\u5165MST\u7684\u65f6\u5019\u6240\u8fde\u7684\u6b63\u5728\u751f\u6210\u4e2dMST\u4e0a\u7684\u9876\u70b9\uff08\u7528\u4e8e\u83b7\u53d6\u5177\u4f53\u751f\u6210\u6811\u7684\u8fb9\u96c6\uff0c par[1, n-1] par[1, n-1] \u5373\u4e3a\u6240\u6c42\uff09 low_cost low_cost - \u5f53\u524d\u9636\u6bb5\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u4e4b\u5916\u7684\u70b9\u5230\u5f53\u524dMST\u7684\u6700\u77ed\u8ddd\u79bb $ mst_set mst_set - \u5c5e\u4e8e\u6b63\u5728\u751f\u6210\u4e2d\u7684MST\u7684\u9876\u70b9\u6807\u8bb0 \u4ee5\u4e0a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(|V|^2) O(|V|^2) \u3002","title":"\u4ee3\u7801"},{"location":"graph_theory/minimum_spanning_tree/#2-kruskal","text":"Kruskal\u7b97\u6cd5\u7684\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5982\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u53ef\u5c06\u6b65\u9aa4\u603b\u7ed3\u5982\u4e0b\uff1a \u65b0\u5efa\u56fe G G \uff0c\u56fe G G \u4e2d\u6709\u4e0e\u539f\u56fe\u76f8\u540c\u7684\u9876\u70b9\uff0c\u4f46\u6ca1\u6709\u8fb9\uff1b \u5c06\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b \u4ece\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u5728\u56fe G G \u5185\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u6dfb\u52a0\u8fd9\u6761\u8fb9\u5230\u56fe G G \u4e2d\uff1b \u91cd\u590d3\uff0c\u76f4\u5230\u56fe G G \u53ea\u5269\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u3002 \uff08\u6ce8\uff1a\u8be5\u56fe\u53ea\u5173\u6ce8\u52a8\u6001\u8fde\u901a\u6027\uff0c\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u5c31\u597d\u3002\uff09","title":"\u7b97\u6cd52 - Kruskal"},{"location":"graph_theory/minimum_spanning_tree/#_4","text":"\u6839\u636eCLRS\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u5806\uff0c\u5219\u53ef\u4ee5\u5c06Prim\u548cKruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5728 O(E\\log V) O(E\\log V) \uff0c\u5982\u679c\u4f7f\u7528\u6590\u6ce2\u90a3\u5951\u5806\uff0cPrim\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u6539\u5584\u4e3a O(E+V\\log V) O(E+V\\log V) \u3002\u6b64\u8fd0\u884c\u65f6\u95f4\u5728 |V| \\ll |E| |V| \\ll |E| \uff08\u7a00\u758f\u56fe\uff09 \u7684\u60c5\u51b5\u4e0b\u8f83\u4e8c\u53c9\u5806\u6709\u76f8\u5f53\u5927\u7684\u6539\u8fdb\u3002","title":"\u4f18\u5316"},{"location":"math/combination/","text":"\u7ec4\u5408\u6570 \u95ee\u9898 \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u63d0\u4f9b\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \u7684\u65b9\u6cd5\uff0c\u7ed3\u679c\u5bf9 10^9 + 7 10^9 + 7 \u53d6\u6a21 \u4ee3\u7801 \u4ee5\u4e0b Combination \u63d0\u4f9b int C(int x, int y) \u65b9\u6cd5\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y C_x^y \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u8981\u6c42 0 \\leq y \\leq x \\leq 2e5 0 \\leq y \\leq x \\leq 2e5 \uff0c\u5e76\u63d0\u4f9b\u4e86\u4fee\u6539\u4e0a\u9650\u7684\u6784\u9020\u51fd\u6570\u3002 class Combination { public : Combination () { PreProcess (); } Combination ( int _mx ) : mx ( _mx ) { PreProcess (); } int C ( int x , int y ) { // Choose y from x. assert ( 0 <= y ), assert ( y <= x ), assert ( x <= mx ); return 1ll * fac [ x ] * facinv [ y ] % mod * facinv [ x - y ] % mod ; } private : int mx = 2e5 ; int mod = 1e9 + 7 ; vector < int > fac , facinv ; int qpower ( int a , int b ) { int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % mod ; a = 1ll * a * a % mod ; b >>= 1 ; } return ans ; } void PreProcess () { fac . resize ( mx + 1 ), facinv . resize ( mx + 1 ); fac [ 0 ] = 1 ; for ( int i = 1 ; i <= mx ; i ++ ) { fac [ i ] = 1ll * fac [ i - 1 ] * i % mod ; } facinv [ mx ] = qpower ( fac [ mx ], mod - 2 ); for ( int i = mx - 1 ; i >= 0 ; i -- ) { facinv [ i ] = 1ll * facinv [ i + 1 ] * ( i + 1 ) % mod ; } } }; \u7b97\u6cd5 \u6839\u636e\u7ec4\u5408\u6570\u8ba1\u7b97\u5f0f C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \uff0c\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9884\u5904\u7406\u6c42\u51fa x \\in [0, x_{max}] x \\in [0, x_{max}] \u8303\u56f4\u5185\u6240\u6709\u6570\u7684\u9636\u4e58 x! x! \u548c\u9636\u4e58\u7684\u4e58\u6cd5\u9006\u5143 (x!)^{-1} (x!)^{-1} \u3002 \u663e\u7136\uff0c\u9636\u4e58\u8868 x! x! \u53ef\u4ee5\u5728 O(n) O(n) \u65f6\u95f4\u5185\u5f97\u5230\u3002 \u4e0b\u9762\u6c42\u9636\u4e58\u8868\u7684\u9006\u5143\u8868\uff1a \u7531 ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x \u53ef\u77e5\u9636\u4e58\u9006\u5143\u8868\u53ef\u964d\u5e8f\u751f\u6210\uff0c\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u521d\u59cb\u503c (x_{max}!)^{-1} (x_{max}!)^{-1} \u5462\uff1f \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u53ef\u5f97 a \\cdot a^{p-2} \\equiv 1 \\pmod p a \\cdot a^{p-2} \\equiv 1 \\pmod p \u7531\u4e0a\u5f0f\u53ef\u77e5 a^{p-2} a^{p-2} \u53ef\u4f5c\u4e3a a a \u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u5373 (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p","title":"\u7ec4\u5408\u6570"},{"location":"math/combination/#_1","text":"","title":"\u7ec4\u5408\u6570"},{"location":"math/combination/#_2","text":"\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u63d0\u4f9b\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \u7684\u65b9\u6cd5\uff0c\u7ed3\u679c\u5bf9 10^9 + 7 10^9 + 7 \u53d6\u6a21","title":"\u95ee\u9898"},{"location":"math/combination/#_3","text":"\u4ee5\u4e0b Combination \u63d0\u4f9b int C(int x, int y) \u65b9\u6cd5\u8ba1\u7b97\u7ec4\u5408\u6570 C_x^y C_x^y \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u8981\u6c42 0 \\leq y \\leq x \\leq 2e5 0 \\leq y \\leq x \\leq 2e5 \uff0c\u5e76\u63d0\u4f9b\u4e86\u4fee\u6539\u4e0a\u9650\u7684\u6784\u9020\u51fd\u6570\u3002 class Combination { public : Combination () { PreProcess (); } Combination ( int _mx ) : mx ( _mx ) { PreProcess (); } int C ( int x , int y ) { // Choose y from x. assert ( 0 <= y ), assert ( y <= x ), assert ( x <= mx ); return 1ll * fac [ x ] * facinv [ y ] % mod * facinv [ x - y ] % mod ; } private : int mx = 2e5 ; int mod = 1e9 + 7 ; vector < int > fac , facinv ; int qpower ( int a , int b ) { int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % mod ; a = 1ll * a * a % mod ; b >>= 1 ; } return ans ; } void PreProcess () { fac . resize ( mx + 1 ), facinv . resize ( mx + 1 ); fac [ 0 ] = 1 ; for ( int i = 1 ; i <= mx ; i ++ ) { fac [ i ] = 1ll * fac [ i - 1 ] * i % mod ; } facinv [ mx ] = qpower ( fac [ mx ], mod - 2 ); for ( int i = mx - 1 ; i >= 0 ; i -- ) { facinv [ i ] = 1ll * facinv [ i + 1 ] * ( i + 1 ) % mod ; } } };","title":"\u4ee3\u7801"},{"location":"math/combination/#_4","text":"\u6839\u636e\u7ec4\u5408\u6570\u8ba1\u7b97\u5f0f C_x^y=\\frac{x!}{y!(x-y)!} C_x^y=\\frac{x!}{y!(x-y)!} \uff0c\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9884\u5904\u7406\u6c42\u51fa x \\in [0, x_{max}] x \\in [0, x_{max}] \u8303\u56f4\u5185\u6240\u6709\u6570\u7684\u9636\u4e58 x! x! \u548c\u9636\u4e58\u7684\u4e58\u6cd5\u9006\u5143 (x!)^{-1} (x!)^{-1} \u3002 \u663e\u7136\uff0c\u9636\u4e58\u8868 x! x! \u53ef\u4ee5\u5728 O(n) O(n) \u65f6\u95f4\u5185\u5f97\u5230\u3002 \u4e0b\u9762\u6c42\u9636\u4e58\u8868\u7684\u9006\u5143\u8868\uff1a \u7531 ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x ((x - 1)!)^{-1} = (x!)^{-1} \\cdot x \u53ef\u77e5\u9636\u4e58\u9006\u5143\u8868\u53ef\u964d\u5e8f\u751f\u6210\uff0c\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u521d\u59cb\u503c (x_{max}!)^{-1} (x_{max}!)^{-1} \u5462\uff1f \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a a^{p-1} \\equiv 1 \\pmod p a^{p-1} \\equiv 1 \\pmod p \u53ef\u5f97 a \\cdot a^{p-2} \\equiv 1 \\pmod p a \\cdot a^{p-2} \\equiv 1 \\pmod p \u7531\u4e0a\u5f0f\u53ef\u77e5 a^{p-2} a^{p-2} \u53ef\u4f5c\u4e3a a a \u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u5373 (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p (x_{max}!)^{-1} = (x_{max}!)^{p-2} \\pmod p","title":"\u7b97\u6cd5"},{"location":"math/greatest_common_devisor/","text":"\u6700\u5927\u516c\u7ea6\u6570 Euclid\u7b97\u6cd5 \u8ba1\u7b97 big big \u548c small small \uff08\u5176\u4e2d small \\leq big small \\leq big \uff09\u7684\u6700\u5927\u516c\u7ea6\u6570 \u53ea\u8981 samll samll \u4e0d\u4e3a 0 0 \u5219\uff1a big\uff0csamll = small\uff0cbig \\pmod {small} big\uff0csamll = small\uff0cbig \\pmod {small} \u5426\u5219\uff1a big big \u4e3a\u6240\u6c42 Euclid\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(max(big)) O(max(big)) \u3002 \u4ee3\u7801 \u8fed\u4ee3\u7248 int gcd ( int big , int small ) { int tmp ; while ( small != 0 ) tmp = small , small = big % small , big = small ; return big ; } \u9012\u5f52\u7248 int gcd ( int big , int small ) { if ( small == 0 ) return big ; return gcd ( big % small , small ); }","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"math/greatest_common_devisor/#_1","text":"","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"math/greatest_common_devisor/#euclid","text":"\u8ba1\u7b97 big big \u548c small small \uff08\u5176\u4e2d small \\leq big small \\leq big \uff09\u7684\u6700\u5927\u516c\u7ea6\u6570 \u53ea\u8981 samll samll \u4e0d\u4e3a 0 0 \u5219\uff1a big\uff0csamll = small\uff0cbig \\pmod {small} big\uff0csamll = small\uff0cbig \\pmod {small} \u5426\u5219\uff1a big big \u4e3a\u6240\u6c42 Euclid\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(max(big)) O(max(big)) \u3002","title":"Euclid\u7b97\u6cd5"},{"location":"math/greatest_common_devisor/#_2","text":"\u8fed\u4ee3\u7248 int gcd ( int big , int small ) { int tmp ; while ( small != 0 ) tmp = small , small = big % small , big = small ; return big ; } \u9012\u5f52\u7248 int gcd ( int big , int small ) { if ( small == 0 ) return big ; return gcd ( big % small , small ); }","title":"\u4ee3\u7801"},{"location":"math/inverse/","text":"\u4e58\u6cd5\u9006\u5143 \u95ee\u9898 \u5728 O(n) O(n) \u65f6\u95f4\u5185\u6c42\u51fa 0 0 \u5230 n n \u4e4b\u95f4\u6240\u6709\u6570\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 1000005 ; const ll MOD = 1000000007 ; ll qpw ( ll a , ll b ) { ll ans = 1 ; while ( b ) { if ( b & 1 ) ans = ans * a % MOD , b -- ; a = a * a % MOD ; b >>= 1 ; } return ans ; } ll inv [ maxn + 1 ]; void pre_process () { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= maxn ; i ++ ) inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ; } \u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 x x \uff0c\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u57fa\u4e8e\u975e\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u5728 O(\\log p) O(\\log p) \u7684\u65f6\u95f4\u6c42\u51fa\uff0c\u5373 x^{-1}=x^{p-2} \\pmod {p-2} x^{-1}=x^{p-2} \\pmod {p-2} \u66f4\u8fdb\u4e00\u6b65\uff0c\u5229\u7528 \u52a8\u6001\u89c4\u5212 \u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4 T(n) T(n) \u751f\u6210\u524d n n \u4e2a\u6b63\u6574\u6570\u7684\u4e58\u6cd5\u9006\u5143\u8868\u3002 \u5bf9\u4e8e x^{-1} \\pmod p x^{-1} \\pmod p \uff0c\u9996\u5148\u5c06 p p \u5206\u6210 x x \u7684\u4f59\u6570\u548c\u500d\u6570\u4e24\u90e8\u5206\uff1a \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \u5176\u4e2d a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor \u4e8e\u662f\u6709 a + bx \\equiv 0 \\pmod p a + bx \\equiv 0 \\pmod p \u5c06 a a \u79fb\u5230\u53f3\u8fb9\u5e76\u5728\u4e24\u8fb9\u540c\u65f6\u4e58 b^{-1} b^{-1} x \\equiv -b^{-1}a \\pmod p x \\equiv -b^{-1}a \\pmod p \u5bf9\u4e24\u8fb9\u53d6\u9006 x^{-1} = (-b)a^{-1} \\pmod p x^{-1} = (-b)a^{-1} \\pmod p \u5c06 -b=p-\\lfloor\\frac{p}{x}\\rfloor -b=p-\\lfloor\\frac{p}{x}\\rfloor $ \u5e26\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p \u81f3\u6b64\u5f97\u5230\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u7531\u4e8e (p%x) < x (p%x) < x \uff0c\u6545\u5728\u6c42\u89e3 x^{-1} x^{-1} \u65f6\uff0c (p\\%x)^{-1} (p\\%x)^{-1} \u662f\u5df2\u7ecf\u6c42\u89e3\u8fc7\u7684\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7ed3\u679c\u3002","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"math/inverse/#_1","text":"","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"math/inverse/#_2","text":"\u5728 O(n) O(n) \u65f6\u95f4\u5185\u6c42\u51fa 0 0 \u5230 n n \u4e4b\u95f4\u6240\u6709\u6570\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u3002","title":"\u95ee\u9898"},{"location":"math/inverse/#_3","text":"#include <bits/stdc++.h> using namespace std ; using ll = long long ; const int maxn = 1000005 ; const ll MOD = 1000000007 ; ll qpw ( ll a , ll b ) { ll ans = 1 ; while ( b ) { if ( b & 1 ) ans = ans * a % MOD , b -- ; a = a * a % MOD ; b >>= 1 ; } return ans ; } ll inv [ maxn + 1 ]; void pre_process () { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= maxn ; i ++ ) inv [ i ] = ( MOD - MOD / i ) * inv [ MOD % i ] % MOD ; }","title":"\u4ee3\u7801"},{"location":"math/inverse/#_4","text":"\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 x x \uff0c\u5728 \\pmod p \\pmod p \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\u57fa\u4e8e\u975e\u9a6c\u5c0f\u5b9a\u7406\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u5728 O(\\log p) O(\\log p) \u7684\u65f6\u95f4\u6c42\u51fa\uff0c\u5373 x^{-1}=x^{p-2} \\pmod {p-2} x^{-1}=x^{p-2} \\pmod {p-2} \u66f4\u8fdb\u4e00\u6b65\uff0c\u5229\u7528 \u52a8\u6001\u89c4\u5212 \u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4 T(n) T(n) \u751f\u6210\u524d n n \u4e2a\u6b63\u6574\u6570\u7684\u4e58\u6cd5\u9006\u5143\u8868\u3002 \u5bf9\u4e8e x^{-1} \\pmod p x^{-1} \\pmod p \uff0c\u9996\u5148\u5c06 p p \u5206\u6210 x x \u7684\u4f59\u6570\u548c\u500d\u6570\u4e24\u90e8\u5206\uff1a \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \\begin{align} p &= (p\\%x) + \\lfloor \\frac{p}{x} \\rfloor \\times x \\\\ &= a + bx \\end{align} \u5176\u4e2d a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor a=p\\%x, b=\\lfloor\\frac{p}{x}\\rfloor \u4e8e\u662f\u6709 a + bx \\equiv 0 \\pmod p a + bx \\equiv 0 \\pmod p \u5c06 a a \u79fb\u5230\u53f3\u8fb9\u5e76\u5728\u4e24\u8fb9\u540c\u65f6\u4e58 b^{-1} b^{-1} x \\equiv -b^{-1}a \\pmod p x \\equiv -b^{-1}a \\pmod p \u5bf9\u4e24\u8fb9\u53d6\u9006 x^{-1} = (-b)a^{-1} \\pmod p x^{-1} = (-b)a^{-1} \\pmod p \u5c06 -b=p-\\lfloor\\frac{p}{x}\\rfloor -b=p-\\lfloor\\frac{p}{x}\\rfloor $ \u5e26\u5165\u4e0a\u5f0f\uff0c\u5f97\u5230 x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p x^{-1}=(p-\\lfloor\\frac{p}{x}\\rfloor)(p\\%x) \\pmod p \u81f3\u6b64\u5f97\u5230\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u7531\u4e8e (p%x) < x (p%x) < x \uff0c\u6545\u5728\u6c42\u89e3 x^{-1} x^{-1} \u65f6\uff0c (p\\%x)^{-1} (p\\%x)^{-1} \u662f\u5df2\u7ecf\u6c42\u89e3\u8fc7\u7684\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7ed3\u679c\u3002","title":"\u7b97\u6cd5"},{"location":"math/quick_power/","text":"\u5feb\u901f\u5e42 \u95ee\u9898 \u5728 O(\\log{b}) O(\\log{b}) \u65f6\u95f4\u5185\u6c42\u5e42\u503c a^b a^b \uff0c\u7ed3\u679c\u5bf9 MOD MOD \u53d6\u4f59\u3002 \u4ee3\u7801 const int MOD = 1000000007 ; int qpw ( int a , int b ) { // Quick power for a^b. int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % MOD ; a = 1ll * a * a % MOD ; b >>= 1 ; } return ans ; }","title":"\u5feb\u901f\u5e42"},{"location":"math/quick_power/#_1","text":"","title":"\u5feb\u901f\u5e42"},{"location":"math/quick_power/#_2","text":"\u5728 O(\\log{b}) O(\\log{b}) \u65f6\u95f4\u5185\u6c42\u5e42\u503c a^b a^b \uff0c\u7ed3\u679c\u5bf9 MOD MOD \u53d6\u4f59\u3002","title":"\u95ee\u9898"},{"location":"math/quick_power/#_3","text":"const int MOD = 1000000007 ; int qpw ( int a , int b ) { // Quick power for a^b. int ans = 1 ; while ( b ) { if ( b & 1 ) ans = 1ll * ans * a % MOD ; a = 1ll * a * a % MOD ; b >>= 1 ; } return ans ; }","title":"\u4ee3\u7801"},{"location":"string/suffix_automation/","text":"\u540e\u7f00\u81ea\u52a8\u673a \u672c\u8282\u5185\u5bb9\u90e8\u5206\u6765\u81ea\u9648\u7acb\u67702012NOI\u51ac\u4ee4\u8425\u8bb2\u7a3f\uff0c\u5728\u6b64\u5bf9\u9648\u7acb\u6770\u5bf9SAM\u6240\u505a\u7684\u603b\u7ed3\u8868\u793a\u611f\u8c22\u3002 \u672c\u8282\u5c06\u4ece\u6027\u8d28\u5206\u6790\u3001\u7ebf\u6027\u65f6\u95f4\u6784\u9020\u7b97\u6cd5\u4e24\u4e2a\u5c42\u9762\u6765\u8ba8\u8bba\u540e\u7f00\u81ea\u52a8\u673a\u3002 SAM\u5206\u6790 \u8bbe\u8981\u5206\u6790\u7684\u5b57\u7b26\u4e32\u4e3a\uff0cSAM\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u589e\u52a0\u4e86\u540e\u7f00\u94fe\u7684DFA\uff08\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002\u5176\u72b6\u6001\u662f\u7684\u6240\u6709\u5b50\u4e32\u7684\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\u96c6\u5408\uff08right\u96c6\u5408\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u6240\u5305\u542b\u7684\u6240\u6709\u5b50\u4e32\u662f\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4e00\u7cfb\u5217\u957f\u5ea6\u8fde\u7eed\u7684\u540e\u7f00\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u8981\u4e48\u4e0d\u76f8\u4ea4\uff0c\u8981\u4e48\u76f8\u4e92\u771f\u5305\u542b\uff0c\u8fd9\u6761\u6027\u8d28\u4fdd\u8bc1\u4e86\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\u4e2a\u6784\u6210\u4e86\u4e00\u68f5\u6811\u72b6\u7ed3\u6784\uff0c\u5c06\u5176\u79f0\u4e3aparent\u6811\u3002 SAM\u7684\u7ebf\u6027\u6784\u9020\u7b97\u6cd5 \u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001 st st \uff0c\u8bb0\u5f55\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 val val \uff0c\u53e6\u5916\u8bb0\u5f55\u5176\u5728 parent parent \u6811\u4e0a\u7684\u7236\u4eb2\u5730\u5740\uff0c\u4ee5\u53ca\u5176\u5728 DFA DFA \u4e2d\u7684\u8f6c\u79fb\u8fb9\u3002\u5219\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u533a\u95f4\u4e3a [st \\rightarrow par \\rightarrow val, st \\rightarrow val] [st \\rightarrow par \\rightarrow val, st \\rightarrow val] \u3002\u91c7\u7528\u5982\u4e0b\u589e\u91cf\u6cd5\u5728\u7ebf\u6784\u9020\uff1a \u4ee4\u5f53\u524d\u4e32\u4e3a T T \uff0c\u52a0\u5165\u5b57\u7b26 x x \u4ee4 p=ST(T), Right(p)=\\{length(T)\\} p=ST(T), Right(p)=\\{length(T)\\} \u7684\u8282\u70b9 \u65b0\u5efa np=ST(Tx), Right(p)=\\{llength(T) + 1\\} np=ST(Tx), Right(p)=\\{llength(T) + 1\\} \u7684\u8282\u70b9 \u5bf9\u4e8e p p \u548c p p \u6ca1\u6709\u6807\u53f7 x x \u7684\u7956\u5148 v v , trans(v, x)=np trans(v, x)=np \u627e\u5230 p p \u7684\u7b2c\u4e00\u4e2a\u5b58\u5728\u6807\u53f7 x x \u7684\u8fb9\u7684\u7956\u5148 v_p v_p \u3002\u5982\u679c\u8fd9\u6837\u7684 v_p v_p \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Parent(np)=root Parent(np)=root \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u4ee4 q=trans(v_p, x) q=trans(v_p, x) \uff0c\u82e5 MAX(q)=MAX(v_p) + 1 MAX(q)=MAX(v_p) + 1 \uff0c\u4ee4 Parent(np)=q Parent(np)=q \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u5426\u5219\u65b0\u5efa\u8282\u70b9 nq nq \uff0c\u4ee4 trans(nq, *)=trans(q, *) trans(nq, *)=trans(q, *) \u7528 nq nq \u66ff\u4ee3 q q \u5728 parent parent \u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8ba9 q q \u548c np np \u90fd\u6210\u4e3a nq nq \u7684\u5b69\u5b50 Parent(nq)=Parent(q) Parent(nq)=Parent(q) Parent(q) = nq Parent(q) = nq Parent(np)=nq Parent(np)=nq \u5bf9\u6240\u6709 trans(v, x)=q trans(v, x)=q \u7684 p p \u7684\u7956\u5148 v v \uff0c trans(v, x) trans(v, x) \u6539\u6210 nq nq \u4ee3\u7801 struct State { State * par , * trans [ 26 ]; int val ; State ( int _val ) : par ( 0 ), val ( _val ) { memset ( trans , 0 , sizeof trans ); } }; State * root , * last = new State ( 0 ); void extend ( int w ) { State * p = last ; State * np = p ? new State ( p -> val + 1 ) : new State ( 1 ); while ( p && p -> trans [ w ] == 0 ) p -> trans [ w ] = np , p = p -> par ; if ( p == 0 ) np -> par = root ; else { State * q = p -> trans [ w ]; if ( p -> val + 1 == q -> val ) np -> par = q ; else { State * nq = new State ( p -> val + 1 ); memcpy ( nq -> trans , q -> trans , sizeof q -> trans ); nq -> par = q -> par ; q -> par = nq ; np -> par = nq ; while ( p && p -> trans [ w ] == q ) p -> trans [ w ] = nq , p = p -> par ; } } last = np ; } \u5e94\u7528 \u6c42\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \u6cbf s\\#s s\\#s \u7684SAM\u6309\u7167\u5b57\u5178\u5e8f\u79fb\u52a8 len(s) len(s) \u6b21\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e3a\u6240\u6c42\uff0c\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u7ebf\u6027\u3002 \u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32 A, B A, B \u7684LCS\uff08\u6700\u957f\u516c\u5171\u8fde\u7eed\u5b50\u4e32\uff09 \u5f85\u7eed...","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"string/suffix_automation/#_1","text":"\u672c\u8282\u5185\u5bb9\u90e8\u5206\u6765\u81ea\u9648\u7acb\u67702012NOI\u51ac\u4ee4\u8425\u8bb2\u7a3f\uff0c\u5728\u6b64\u5bf9\u9648\u7acb\u6770\u5bf9SAM\u6240\u505a\u7684\u603b\u7ed3\u8868\u793a\u611f\u8c22\u3002 \u672c\u8282\u5c06\u4ece\u6027\u8d28\u5206\u6790\u3001\u7ebf\u6027\u65f6\u95f4\u6784\u9020\u7b97\u6cd5\u4e24\u4e2a\u5c42\u9762\u6765\u8ba8\u8bba\u540e\u7f00\u81ea\u52a8\u673a\u3002","title":"\u540e\u7f00\u81ea\u52a8\u673a"},{"location":"string/suffix_automation/#sam","text":"\u8bbe\u8981\u5206\u6790\u7684\u5b57\u7b26\u4e32\u4e3a\uff0cSAM\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u589e\u52a0\u4e86\u540e\u7f00\u94fe\u7684DFA\uff08\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff09\u3002\u5176\u72b6\u6001\u662f\u7684\u6240\u6709\u5b50\u4e32\u7684\u5206\u7ec4\uff0c\u5206\u7ec4\u7684\u4f9d\u636e\u662f\u5b50\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\u96c6\u5408\uff08right\u96c6\u5408\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u6240\u5305\u542b\u7684\u6240\u6709\u5b50\u4e32\u662f\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u4e00\u7cfb\u5217\u957f\u5ea6\u8fde\u7eed\u7684\u540e\u7f00\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u8981\u4e48\u4e0d\u76f8\u4ea4\uff0c\u8981\u4e48\u76f8\u4e92\u771f\u5305\u542b\uff0c\u8fd9\u6761\u6027\u8d28\u4fdd\u8bc1\u4e86\u72b6\u6001\u6570\u662f\u7ebf\u6027\u7684\u3002 \u4e0d\u540c\u72b6\u6001\u5bf9\u5e94\u7684right\u96c6\u5408\u4e4b\u95f4\u7684\u5305\u542b\u5173\u7cfb\u4e2a\u6784\u6210\u4e86\u4e00\u68f5\u6811\u72b6\u7ed3\u6784\uff0c\u5c06\u5176\u79f0\u4e3aparent\u6811\u3002","title":"SAM\u5206\u6790"},{"location":"string/suffix_automation/#sam_1","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001 st st \uff0c\u8bb0\u5f55\u5176\u4e2d\u6700\u957f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 val val \uff0c\u53e6\u5916\u8bb0\u5f55\u5176\u5728 parent parent \u6811\u4e0a\u7684\u7236\u4eb2\u5730\u5740\uff0c\u4ee5\u53ca\u5176\u5728 DFA DFA \u4e2d\u7684\u8f6c\u79fb\u8fb9\u3002\u5219\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u533a\u95f4\u4e3a [st \\rightarrow par \\rightarrow val, st \\rightarrow val] [st \\rightarrow par \\rightarrow val, st \\rightarrow val] \u3002\u91c7\u7528\u5982\u4e0b\u589e\u91cf\u6cd5\u5728\u7ebf\u6784\u9020\uff1a \u4ee4\u5f53\u524d\u4e32\u4e3a T T \uff0c\u52a0\u5165\u5b57\u7b26 x x \u4ee4 p=ST(T), Right(p)=\\{length(T)\\} p=ST(T), Right(p)=\\{length(T)\\} \u7684\u8282\u70b9 \u65b0\u5efa np=ST(Tx), Right(p)=\\{llength(T) + 1\\} np=ST(Tx), Right(p)=\\{llength(T) + 1\\} \u7684\u8282\u70b9 \u5bf9\u4e8e p p \u548c p p \u6ca1\u6709\u6807\u53f7 x x \u7684\u7956\u5148 v v , trans(v, x)=np trans(v, x)=np \u627e\u5230 p p \u7684\u7b2c\u4e00\u4e2a\u5b58\u5728\u6807\u53f7 x x \u7684\u8fb9\u7684\u7956\u5148 v_p v_p \u3002\u5982\u679c\u8fd9\u6837\u7684 v_p v_p \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Parent(np)=root Parent(np)=root \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u4ee4 q=trans(v_p, x) q=trans(v_p, x) \uff0c\u82e5 MAX(q)=MAX(v_p) + 1 MAX(q)=MAX(v_p) + 1 \uff0c\u4ee4 Parent(np)=q Parent(np)=q \uff0c\u7b97\u6cd5\u7ec8\u6b62 \u5426\u5219\u65b0\u5efa\u8282\u70b9 nq nq \uff0c\u4ee4 trans(nq, *)=trans(q, *) trans(nq, *)=trans(q, *) \u7528 nq nq \u66ff\u4ee3 q q \u5728 parent parent \u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8ba9 q q \u548c np np \u90fd\u6210\u4e3a nq nq \u7684\u5b69\u5b50 Parent(nq)=Parent(q) Parent(nq)=Parent(q) Parent(q) = nq Parent(q) = nq Parent(np)=nq Parent(np)=nq \u5bf9\u6240\u6709 trans(v, x)=q trans(v, x)=q \u7684 p p \u7684\u7956\u5148 v v \uff0c trans(v, x) trans(v, x) \u6539\u6210 nq nq","title":"SAM\u7684\u7ebf\u6027\u6784\u9020\u7b97\u6cd5"},{"location":"string/suffix_automation/#_2","text":"struct State { State * par , * trans [ 26 ]; int val ; State ( int _val ) : par ( 0 ), val ( _val ) { memset ( trans , 0 , sizeof trans ); } }; State * root , * last = new State ( 0 ); void extend ( int w ) { State * p = last ; State * np = p ? new State ( p -> val + 1 ) : new State ( 1 ); while ( p && p -> trans [ w ] == 0 ) p -> trans [ w ] = np , p = p -> par ; if ( p == 0 ) np -> par = root ; else { State * q = p -> trans [ w ]; if ( p -> val + 1 == q -> val ) np -> par = q ; else { State * nq = new State ( p -> val + 1 ); memcpy ( nq -> trans , q -> trans , sizeof q -> trans ); nq -> par = q -> par ; q -> par = nq ; np -> par = nq ; while ( p && p -> trans [ w ] == q ) p -> trans [ w ] = nq , p = p -> par ; } } last = np ; }","title":"\u4ee3\u7801"},{"location":"string/suffix_automation/#_3","text":"\u6c42\u5b57\u7b26\u4e32 s s \u7684\u6240\u6709\u5faa\u73af\u79fb\u4f4d\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \u6cbf s\\#s s\\#s \u7684SAM\u6309\u7167\u5b57\u5178\u5e8f\u79fb\u52a8 len(s) len(s) \u6b21\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e3a\u6240\u6c42\uff0c\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u7ebf\u6027\u3002 \u6c42\u4e24\u4e2a\u5b57\u7b26\u4e32 A, B A, B \u7684LCS\uff08\u6700\u957f\u516c\u5171\u8fde\u7eed\u5b50\u4e32\uff09 \u5f85\u7eed...","title":"\u5e94\u7528"},{"location":"string/trie/","text":"\u5b57\u5178\u6811 \u95ee\u9898 \u7ed9\u5b9a\u5b57\u7b26\u96c6\uff0c\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5355\u8bcd\u96c6\u5408\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165/Add - \u5c06\u5355\u8bcd\u52a0\u5165\u96c6\u5408 \u5220\u9664/Remove - \u5c06\u5355\u8bcd\u4ece\u96c6\u5408\u4e2d\u53bb\u9664 \u67e5\u627e/Find - \u5224\u65ad\u76ee\u6807\u5355\u8bcd\u662f\u5426\u5728\u96c6\u5408\u4e2d \u4ee3\u7801 \u4e0b\u9762\u7684\u5b57\u5178\u6811\uff0c\u652f\u6301\u7531 26 26 \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u6784\u6210\u7684\u5355\u8bcd\u7684\u589e\u3001\u5220\u3001\u67e5\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b57\u7b26\u96c6\uff0c\u53ea\u9700\u6539\u53d8\u7c7b\u4e2d\u4ece\u5b57\u7b26\u5230\u5176\u5728\u5b57\u7b26\u96c6\u4e2d\u7684\u5e8f\u53f7\u7684\u6620\u5c04\u5373\u53ef\u3002 class Trie { public : Trie () {} virtual ~ Trie () { RemoveTrie ( root ); } void Add ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] != nullptr ) cur = cur -> next [ word [ i ] - 'a' ]; else { TrieNode * tmp = new TrieNode ( false ); cur -> next [ word [ i ] - 'a' ] = tmp ; cur = tmp ; } if ( i == word . size () - 1 ) cur -> isword = true ; } } void Remove ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) { cout << \" \\\" \" << word << \" \\\" \" << \"was not in Trie.\" << endl ; return ; } cur = cur -> next [ word [ i ] - 'a' ]; } cur -> isword = false ; } bool Find ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) return false ; cur = cur -> next [ word [ i ] - 'a' ]; } return cur -> isword ; } private : static const int alphabat_size = 26 ; struct TrieNode { bool isword ; TrieNode * next [ alphabat_size ]; TrieNode () {} TrieNode ( bool _isword ) : isword ( _isword ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) next [ i ] = nullptr ; } }; TrieNode * root = new TrieNode ( false ); void RemoveTrie ( TrieNode * cur ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) if ( cur -> next [ i ] != nullptr ) RemoveTrie ( cur -> next [ i ]); delete cur ; } }; \u9700\u8981\u6ce8\u610f Trie \u7c7b\u4e2d\u7528\u94fe\u5f0f\u7ed3\u6784\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u6790\u6784\u51fd\u6570\u4e2d\u8981\u9012\u5f52\u5220\u9664\u3002 \u7b97\u6cd5 \u5b57\u5178\u6811\u662f\u4e00\u68f5\u5ea6\u6570\u7b49\u4e8e\u5b57\u7b26\u8868\u5927\u5c0f\u7684\u591a\u53c9\u6811\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5355\u8bcd\u957f\u5ea6 l l \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5373 O(l) O(l) \u3002 \u5e94\u7528 \u4ece\u5b57\u5178\u6811\u7684\u7684\u6839\u8282\u70b9DFS\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u6392\u5e8f\u3002","title":"\u5b57\u5178\u6811"},{"location":"string/trie/#_1","text":"","title":"\u5b57\u5178\u6811"},{"location":"string/trie/#_2","text":"\u7ed9\u5b9a\u5b57\u7b26\u96c6\uff0c\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5355\u8bcd\u96c6\u5408\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165/Add - \u5c06\u5355\u8bcd\u52a0\u5165\u96c6\u5408 \u5220\u9664/Remove - \u5c06\u5355\u8bcd\u4ece\u96c6\u5408\u4e2d\u53bb\u9664 \u67e5\u627e/Find - \u5224\u65ad\u76ee\u6807\u5355\u8bcd\u662f\u5426\u5728\u96c6\u5408\u4e2d","title":"\u95ee\u9898"},{"location":"string/trie/#_3","text":"\u4e0b\u9762\u7684\u5b57\u5178\u6811\uff0c\u652f\u6301\u7531 26 26 \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u6784\u6210\u7684\u5355\u8bcd\u7684\u589e\u3001\u5220\u3001\u67e5\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b57\u7b26\u96c6\uff0c\u53ea\u9700\u6539\u53d8\u7c7b\u4e2d\u4ece\u5b57\u7b26\u5230\u5176\u5728\u5b57\u7b26\u96c6\u4e2d\u7684\u5e8f\u53f7\u7684\u6620\u5c04\u5373\u53ef\u3002 class Trie { public : Trie () {} virtual ~ Trie () { RemoveTrie ( root ); } void Add ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] != nullptr ) cur = cur -> next [ word [ i ] - 'a' ]; else { TrieNode * tmp = new TrieNode ( false ); cur -> next [ word [ i ] - 'a' ] = tmp ; cur = tmp ; } if ( i == word . size () - 1 ) cur -> isword = true ; } } void Remove ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) { cout << \" \\\" \" << word << \" \\\" \" << \"was not in Trie.\" << endl ; return ; } cur = cur -> next [ word [ i ] - 'a' ]; } cur -> isword = false ; } bool Find ( string word ) { TrieNode * cur = root ; for ( int i = 0 ; i < word . size (); i ++ ) { if ( cur -> next [ word [ i ] - 'a' ] == nullptr ) return false ; cur = cur -> next [ word [ i ] - 'a' ]; } return cur -> isword ; } private : static const int alphabat_size = 26 ; struct TrieNode { bool isword ; TrieNode * next [ alphabat_size ]; TrieNode () {} TrieNode ( bool _isword ) : isword ( _isword ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) next [ i ] = nullptr ; } }; TrieNode * root = new TrieNode ( false ); void RemoveTrie ( TrieNode * cur ) { for ( int i = 0 ; i < alphabat_size ; i ++ ) if ( cur -> next [ i ] != nullptr ) RemoveTrie ( cur -> next [ i ]); delete cur ; } }; \u9700\u8981\u6ce8\u610f Trie \u7c7b\u4e2d\u7528\u94fe\u5f0f\u7ed3\u6784\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u6790\u6784\u51fd\u6570\u4e2d\u8981\u9012\u5f52\u5220\u9664\u3002","title":"\u4ee3\u7801"},{"location":"string/trie/#_4","text":"\u5b57\u5178\u6811\u662f\u4e00\u68f5\u5ea6\u6570\u7b49\u4e8e\u5b57\u7b26\u8868\u5927\u5c0f\u7684\u591a\u53c9\u6811\uff0c\u589e\u3001\u5220\u3001\u67e5\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5355\u8bcd\u957f\u5ea6 l l \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5373 O(l) O(l) \u3002","title":"\u7b97\u6cd5"},{"location":"string/trie/#_5","text":"\u4ece\u5b57\u5178\u6811\u7684\u7684\u6839\u8282\u70b9DFS\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u6392\u5e8f\u3002","title":"\u5e94\u7528"},{"location":"string/z-func/","text":"Z\u51fd\u6570\uff08\u6269\u5c55KMP\uff09 \u95ee\u9898 \u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \uff0c\u8fd4\u56de\u5b57\u7b26\u4e32 z z \uff0c z[i] z[i] \u662f s[i, n - 1] s[i, n - 1] \u4e0e s s \u7684LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u7684\u957f\u5ea6\u3002 \u4ee3\u7801 vector < int > ZFunction ( string s ) { int n = s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( z [ i - l ], r - i + 1 ); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) z [ i ] ++ ; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; } \u7b97\u6cd5 \u7ef4\u62a4\u5df2\u53d1\u73b0\u7684\u6700\u9760\u53f3\u4fa7\u7684\u5339\u914d\u6bb5 [l ,r] [l ,r] \uff0c\u5373\u7b97\u6cd5\u5f53\u524d\u626b\u63cf\u5230\u7684\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5230\u7b97\u6cd5\u4e2d for \u5faa\u73af\u7684\u521d\u59cb\u4f4d\u7f6e\u4e3a 1 1 \uff0c\u5982\u679c\u521d\u59cb\u4f4d\u7f6e\u4e3a 0 0 \u5219\u7b2c\u4e00\u6b21\u6267\u884c\u5faa\u73af\u65f6 [l, r] [l, r] \u88ab\u8bbe\u7f6e\u6210 [0, n - 1] [0, n - 1] \uff0c\u7b97\u6cd5\u8fdb\u800c\u9000\u5316\u6210\u6734\u7d20\u7684 O(n^2) O(n^2) \u7248\u672c\u3002 \u590d\u6742\u5ea6 \u65f6\u95f4\u3000 O(n) O(n) \u6ce8\u610f\u5230 for \u5faa\u73af\u6700\u591a\u6267\u884c n n \u6b21\uff0c\u53ea\u9700\u8bc1\u660e\u5185\u5c42 while \u5faa\u73af\u7684\u6267\u884c\u6b21\u6570\u4e0a\u7ebf\u662f O(n) O(n) \u7684\u3002\u4e0d\u96be\u8bc1\u660e while \u6bcf\u6b21\u6267\u884c\u5fc5\u7136\u4f7f\u53f3\u8fb9\u754c r \u589e\u5927 1 1 \u3002","title":"Z \u51fd\u6570\uff08\u6269\u5c55KMP\uff09"},{"location":"string/z-func/#zkmp","text":"","title":"Z\u51fd\u6570\uff08\u6269\u5c55KMP\uff09"},{"location":"string/z-func/#_1","text":"\u7ed9\u5b9a\u5b57\u7b26\u4e32 s s \uff0c\u8fd4\u56de\u5b57\u7b26\u4e32 z z \uff0c z[i] z[i] \u662f s[i, n - 1] s[i, n - 1] \u4e0e s s \u7684LCP\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u7684\u957f\u5ea6\u3002","title":"\u95ee\u9898"},{"location":"string/z-func/#_2","text":"vector < int > ZFunction ( string s ) { int n = s . length (); vector < int > z ( n ); for ( int i = 1 , l = 0 , r = 0 ; i < n ; ++ i ) { if ( i <= r ) z [ i ] = min ( z [ i - l ], r - i + 1 ); while ( i + z [ i ] < n && s [ z [ i ]] == s [ i + z [ i ]]) z [ i ] ++ ; if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ; } return z ; }","title":"\u4ee3\u7801"},{"location":"string/z-func/#_3","text":"\u7ef4\u62a4\u5df2\u53d1\u73b0\u7684\u6700\u9760\u53f3\u4fa7\u7684\u5339\u914d\u6bb5 [l ,r] [l ,r] \uff0c\u5373\u7b97\u6cd5\u5f53\u524d\u626b\u63cf\u5230\u7684\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5230\u7b97\u6cd5\u4e2d for \u5faa\u73af\u7684\u521d\u59cb\u4f4d\u7f6e\u4e3a 1 1 \uff0c\u5982\u679c\u521d\u59cb\u4f4d\u7f6e\u4e3a 0 0 \u5219\u7b2c\u4e00\u6b21\u6267\u884c\u5faa\u73af\u65f6 [l, r] [l, r] \u88ab\u8bbe\u7f6e\u6210 [0, n - 1] [0, n - 1] \uff0c\u7b97\u6cd5\u8fdb\u800c\u9000\u5316\u6210\u6734\u7d20\u7684 O(n^2) O(n^2) \u7248\u672c\u3002","title":"\u7b97\u6cd5"},{"location":"string/z-func/#_4","text":"\u65f6\u95f4\u3000 O(n) O(n) \u6ce8\u610f\u5230 for \u5faa\u73af\u6700\u591a\u6267\u884c n n \u6b21\uff0c\u53ea\u9700\u8bc1\u660e\u5185\u5c42 while \u5faa\u73af\u7684\u6267\u884c\u6b21\u6570\u4e0a\u7ebf\u662f O(n) O(n) \u7684\u3002\u4e0d\u96be\u8bc1\u660e while \u6bcf\u6b21\u6267\u884c\u5fc5\u7136\u4f7f\u53f3\u8fb9\u754c r \u589e\u5927 1 1 \u3002","title":"\u590d\u6742\u5ea6"}]}